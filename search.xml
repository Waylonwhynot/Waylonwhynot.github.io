<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django入门-web应用-01</title>
    <url>/2021/05/07/Django%E5%85%A5%E9%97%A8-web%E5%BA%94%E7%94%A8-01/</url>
    <content><![CDATA[<p>web应用</p>
<a id="more"></a>



<h2 id="一-Web应用程序是什么"><a href="#一-Web应用程序是什么" class="headerlink" title="一 Web应用程序是什么"></a>一 Web应用程序是什么</h2><p>Web应用程序是一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件</p>
<p>应用程序有两种模式C/S、B/S。C/S是客户端/服务器端程序，也就是说这类程序一般独立运行。而B/S就是浏览器端/服务器端应用程序，这类应用程序一般借助IE等浏览器来运行。WEB应用程序一般是B/S模式。Web应用程序首先是“应用程序”，和用标准的程序语言，如C、C++等编写出来的程序没有什么本质上的不同。然而Web应用程序又有自己独特的地方，就是它是基于Web的，而不是采用传统方法运行的。换句话说，它是典型的浏览器/服务器架构的产物。</p>
<h3 id="1-1-Web应用程序的优点"><a href="#1-1-Web应用程序的优点" class="headerlink" title="1.1 Web应用程序的优点"></a>1.1 Web应用程序的优点</h3><ul>
<li>网络应用程序不需要任何复杂的“展开”过程，你所需要的只是一个适用的浏览器；</li>
<li>网络应用程序通常耗费很少的用户硬盘空间，或者一点都不耗费；</li>
<li>它们不需要更新，因为所有新的特性都在服务器上执行，从而自动传达到用户端；</li>
<li>网络应用程序和服务器端的网络产品都很容易结合，如email功能和搜索功能；</li>
<li>因为它们在网络浏览器窗口中运行，所以大多数情况下它们是通过跨平台使用的 (例如Windows，Mac，Linux等等)</li>
</ul>
<h3 id="1-2-Web应用程序的缺点"><a href="#1-2-Web应用程序的缺点" class="headerlink" title="1.2 Web应用程序的缺点"></a>1.2 Web应用程序的缺点</h3><ul>
<li>网络应用程序强调浏览器的适用性。如果浏览器方没有提供特定的功能，或者弃用特定的平台或操作系统版本（导致不适用），就会影响大量用户；</li>
<li>网络应用依靠互联网远程服务器端的应用文件。因此，当连接出问题时，应用将不能正常使用。</li>
<li>许多网络应用程序不是开源的，只能依赖第三方提供的服务，因此不能针对用户定制化、个性化，而且大多数情况下用户不能离线使用，因而损失了很多灵活性；</li>
<li>它们完全依赖应用服务商的可及性。如果公司倒闭，服务器停止使用，用户也无法追索以前的资料。对比而看，即使软件制造商倒闭了，传统的安装软件也可以继续运行，尽管不能再更新或有其他用户服务；</li>
<li>相似地，提供方公司对软件和其功能有了更大的控制权。只要他们愿意就能为软件添加新特性，即使用户想等bugs先被解决再更新。跳过较差的软件版本也不可能了。公司可以强加不受欢迎的特性给用户，也可以随意减少带宽来削减开支。</li>
<li>公司理论上可以检索任何的用户行为。这有可能引起隐私安全问题。</li>
</ul>
<h3 id="1-3-B-S架构优点"><a href="#1-3-B-S架构优点" class="headerlink" title="1.3 B/S架构优点"></a>1.3 B/S架构优点</h3><p>浏览器/服务器架构（Browser/Server,简称B/S）能够很好地应用在广域网上，成为越来越多的企业的选择。浏览器/服务器架构相对于其他几种应用程序体系结构，有如下3方面的优点：</p>
<ul>
<li>这种架构采用Internet上标准的通信协议（通常是TCP/IP协议）作为客户机同服务器通信的协议。这样可以使位于Internet任意位置的人都能够正常访问服务器。对于服务器来说，通过相应的Web服务和数据库服务可以对数据进行处理。对外采用标准的通信协议，以便共享数据。</li>
<li>在服务器上对数据进行处理，就处理的结果生成网页，以方便客户端直接下载。</li>
<li>在客户机上对数据的处理被进一步简化，将浏览器作为客户端的应用程序，以实现对数据的显示。不再需要为客户端单独编写和安装其他类型的应用程序。这样，在客户端只需要安装一套内置浏览器的操作系统，直接安装一套浏览器，就可以实现服务器上数据的访问。而浏览器是计算机的标准设备</li>
</ul>
<p><strong>总结一下，本质上：浏览器是一个socket客户端，服务器是一个socket服务端</strong></p>
<h2 id="二-基于SOCKET写一个web应用"><a href="#二-基于SOCKET写一个web应用" class="headerlink" title="二 基于SOCKET写一个web应用"></a>二 基于SOCKET写一个web应用</h2><h3 id="2-1-main-py"><a href="#2-1-main-py" class="headerlink" title="2.1 main.py"></a>2.1 main.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_run</span>():</span></span><br><span class="line">    soc = socket.socket()</span><br><span class="line">    soc.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8008</span>))</span><br><span class="line">    soc.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = soc.accept()</span><br><span class="line">        recv_data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        print(recv_data)</span><br><span class="line">        <span class="comment"># 1 直接在send里写，发送给客户端</span></span><br><span class="line">        <span class="comment"># conn.send(b&#x27;HTTP/1.1 200 OK\r\n\r\n&lt;h1&gt;hello web&lt;/h1&gt;&lt;img src=&quot;https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=5e3814acf9edab64607f4592965fc4a6/14ce36d3d539b600c0c465d0eb50352ac65cb74b.jpg&quot;&gt;&lt;/img&gt;&#x27;)</span></span><br><span class="line">        <span class="comment">#2 打开一个html文件，发送给客户端</span></span><br><span class="line">        <span class="comment"># with open(&#x27;index.html&#x27;,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line">        <span class="comment">#     data=f.read()</span></span><br><span class="line">        <span class="comment"># conn.send((&#x27;HTTP/1.1 200 OK\r\n\r\n%s&#x27;%data).encode(&#x27;utf-8&#x27;))</span></span><br><span class="line">        <span class="comment"># 3 动态网页，字符串替换</span></span><br><span class="line">        <span class="keyword">import</span> time</span><br><span class="line">        now=time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line">        print(now)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data=f.read()</span><br><span class="line">        data=data.replace(<span class="string">&#x27;@@@&#x27;</span>,now)</span><br><span class="line">        conn.send((<span class="string">&#x27;HTTP/1.1 200 OK\r\n\r\n%s&#x27;</span>%data).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server_run()</span><br></pre></td></tr></table></figure>

<h3 id="2-2-index-html"><a href="#2-2-index-html" class="headerlink" title="2.2 index.html"></a>2.2 index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>@@@<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=5e3814acf9edab64607f4592965fc4a6/14ce36d3d539b600c0c465d0eb50352ac65cb74b.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三-手撸简单web框架"><a href="#三-手撸简单web框架" class="headerlink" title="三 手撸简单web框架"></a>三 手撸简单web框架</h2><h3 id="3-1-main-py"><a href="#3-1-main-py" class="headerlink" title="3.1 main.py"></a>3.1 main.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;img src=&quot;https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=5e3814acf9edab64607f4592965fc4a6/14ce36d3d539b600c0c465d0eb50352ac65cb74b.jpg&quot;&gt;&lt;/img&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;login.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f :</span><br><span class="line">        data=f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    now=datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %X&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;time.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f :</span><br><span class="line">        data=f.read()</span><br><span class="line">    data=data.replace(<span class="string">&#x27;@@time@@&#x27;</span>,now)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 创建连接</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;123456&#x27;</span>, db=<span class="string">&#x27;lqz&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line">    cursor.execute(<span class="string">&quot;select id,name,password from user&quot;</span>)</span><br><span class="line">    user_list = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    tr_list=[]</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> user_list:</span><br><span class="line">        tr=<span class="string">&#x27;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&#x27;</span>%(row[<span class="string">&#x27;id&#x27;</span>],row[<span class="string">&#x27;name&#x27;</span>],row[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        tr_list.append(tr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;user_list.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data=f.read()</span><br><span class="line">    data=data.replace(<span class="string">&#x27;@@body@@&#x27;</span>,<span class="string">&#x27;&#x27;</span>.join(tr_list))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_list_new</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 创建连接</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;123456&#x27;</span>, db=<span class="string">&#x27;lqz&#x27;</span>)</span><br><span class="line">    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line">    cursor.execute(<span class="string">&quot;select id,name,password from user&quot;</span>)</span><br><span class="line">    user_list = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;user_list_new.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data=f.read()</span><br><span class="line">    <span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line">    template=Template(data)</span><br><span class="line">    response=template.render(user_list=user_list)</span><br><span class="line">    <span class="comment"># response=template.render(&#123;&#x27;user_list&#x27;:user_list&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    (<span class="string">&#x27;/index&#x27;</span>, index),</span><br><span class="line">    (<span class="string">&#x27;/login&#x27;</span>, login),</span><br><span class="line">    (<span class="string">&#x27;/time&#x27;</span>, time),</span><br><span class="line">    (<span class="string">&#x27;/user_list&#x27;</span>, user_list),</span><br><span class="line">    (<span class="string">&#x27;/user_list_new&#x27;</span>, user_list_new),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    soc = socket.socket()</span><br><span class="line">    soc.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8006</span>))</span><br><span class="line">    soc.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, port = soc.accept()</span><br><span class="line">        data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="comment"># data=data.decode(&#x27;utf-8&#x27;)</span></span><br><span class="line">        print(data)</span><br><span class="line">        data = str(data, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        request_list = data.split(<span class="string">&#x27;\r\n\r\n&#x27;</span>)</span><br><span class="line">        head_list = request_list[<span class="number">0</span>].split(<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">        method, url, htt = head_list[<span class="number">0</span>].split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="comment"># conn.send(b&#x27;hello web&#x27;)</span></span><br><span class="line">        conn.send(<span class="string">b&#x27;HTTP/1.1 200 OK \r\n\r\n&#x27;</span>)</span><br><span class="line">        print(url)</span><br><span class="line">        func_name = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="keyword">if</span> url == u[<span class="number">0</span>]:</span><br><span class="line">                func_name = u[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> func_name:</span><br><span class="line">            response = func_name(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = <span class="string">&#x27;404 not found&#x27;</span></span><br><span class="line"></span><br><span class="line">        conn.send(response.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>

<h3 id="3-2-login-html"><a href="#3-2-login-html" class="headerlink" title="3.2 login.html"></a>3.2 login.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-time-html"><a href="#3-3-time-html" class="headerlink" title="3.3 time.html"></a>3.3 time.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@@time@@</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-user-list-html"><a href="#3-4-user-list-html" class="headerlink" title="3.4 user_list.html"></a>3.4 user_list.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        @@body@@</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-user-list-new"><a href="#3-5-user-list-new" class="headerlink" title="3.5 user_list_new"></a>3.5 user_list_new</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>password<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% for user in user_list%&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.password&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;%endfor%&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django入门-HTTP协议-02</title>
    <url>/2021/05/07/Django%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE-02/</url>
    <content><![CDATA[<p>HTTP 协议</p>
<a id="more"></a>



<h2 id="0-动态网页-静态网页"><a href="#0-动态网页-静态网页" class="headerlink" title="0. 动态网页 静态网页"></a>0. 动态网页 静态网页</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">静态网页</span><br><span class="line">    页面上的数据是直接写死的 永远不变</span><br><span class="line">动态网页</span><br><span class="line">    数据是实时获取的</span><br><span class="line">  eg:</span><br><span class="line">    <span class="number">1.</span>后端获取当前时间展示到html页面上</span><br><span class="line">    <span class="number">2.</span>数据是从数据数据库中获取的展示到html页面上</span><br></pre></td></tr></table></figure>

<h2 id="0-JinJa2-模块"><a href="#0-JinJa2-模块" class="headerlink" title="0. JinJa2 模块"></a>0. JinJa2 模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install jinja2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模板语法</span></span><br><span class="line">&#123;&#123; user &#125;&#125;</span><br><span class="line">&#123;&#123; user.get(<span class="string">&#x27;username&#x27;</span>) &#125;&#125;</span><br><span class="line">&#123;&#123; user.age &#125;&#125;</span><br><span class="line">&#123;&#123; user[<span class="string">&#x27;hobby&#x27;</span>] &#125;&#125;</span><br></pre></td></tr></table></figure>





<h2 id="一-http协议简介"><a href="#一-http协议简介" class="headerlink" title="一 http协议简介"></a>一 http协议简介</h2><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于万维网（WWW:World Wide Web ）服务器与本地浏览器之间传输超文本的传送协议。</p>
<p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1v3zrxr6j30t008gn1y.jpg" alt="image-20200924172049937"></p>
<h2 id="二-http协议特性"><a href="#二-http协议特性" class="headerlink" title="二 http协议特性"></a>二 http协议特性</h2><h3 id="2-1-基于TCP-IP协议之上的应用层协议"><a href="#2-1-基于TCP-IP协议之上的应用层协议" class="headerlink" title="2.1 基于TCP/IP协议之上的应用层协议"></a>2.1 基于TCP/IP协议之上的应用层协议</h3><h3 id="2-2-基于请求－响应模式"><a href="#2-2-基于请求－响应模式" class="headerlink" title="2.2 基于请求－响应模式"></a>2.2 基于请求－响应模式</h3><p>HTTP协议规定,请求从客户端发出,最后服务器端响应该请求并 返回。换句话说,肯定是先从客户端开始建立通信的,服务器端在没有 接收到请求之前不会发送响应</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1v4exupzj30t00a6af1.jpg" alt="image-20200924172118199"></p>
<h3 id="2-3-无状态保存"><a href="#2-3-无状态保存" class="headerlink" title="2.3 无状态保存"></a>2.3 无状态保存</h3><p>HTTP是一种不保存状态,即无状态(stateless)协议。HTTP协议 自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个 级别,协议对于发送过的请求或响应都不做持久化处理。</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1v4yobhaj30s00e4q9r.jpg" alt="image-20200924172149501"></p>
<p>使用HTTP协议,每当有新的请求发送时,就会有对应的新响应产 生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务,确保协议的可伸缩性,而特意把HTTP协议设计成 如此简单的。可是,随着Web的不断发展,因无状态而导致业务处理变得棘手 的情况增多了。比如,用户登录到一家购物网站,即使他跳转到该站的 其他页面后,也需要能继续保持登录状态。针对这个实例,网站为了能 够掌握是谁送出的请求,需要保存用户的状态。HTTP/1.1虽然是无状态协议,但为了实现期望的保持状态功能, 于是引入了Cookie技术。有了Cookie再用HTTP协议通信,就可以管 理状态了。有关Cookie的详细内容稍后讲解</p>
<h3 id="2-4-无连接"><a href="#2-4-无连接" class="headerlink" title="2.4 无连接"></a>2.4 无连接</h3><p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>
<h2 id="三-http请求协议与响应协议"><a href="#三-http请求协议与响应协议" class="headerlink" title="三 http请求协议与响应协议"></a>三 http请求协议与响应协议</h2><p>http协议包含由浏览器发送数据到服务器需要遵循的请求协议与服务器发送数据到浏览器需要遵循的请求协议。用于HTTP协议交互的信被为HTTP报文。请求端(客户端)的HTTP报文 做请求报文,响应端(服务器端)的 做响应报文。HTTP报文本身是由多行数据构成的字 文本。</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1v5jenz5j30tq0eq7aa.jpg" alt="image-20200924172222493"></p>
<h3 id="3-1-请求协议"><a href="#3-1-请求协议" class="headerlink" title="3.1 请求协议"></a>3.1 请求协议</h3><h4 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h4><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1v6d9oftj30vi0d2gpn.jpg" alt="image-20200924172250257"></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1v6jblf2j30tw0caacp.jpg" alt="image-20200924172316497"></p>
<h4 id="请求方式-get与post请求"><a href="#请求方式-get与post请求" class="headerlink" title="请求方式: get与post请求"></a>请求方式: get与post请求</h4><ul>
<li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditBook?name=test1&amp;id=123456. POST方法是把提交的数据放在HTTP包的请求体中.</li>
<li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</li>
<li>GET与POST请求在服务端获取请求数据方式不同。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">    GET请求</span><br><span class="line">    # 请求首行</span><br><span class="line">    GET &#x2F; HTTP&#x2F;1.1\r\n</span><br><span class="line">    # get请求后面的参数</span><br><span class="line">    GET &#x2F;?name&#x3D;lqz&amp;age&#x3D;18 HTTP&#x2F;1.1\r\n</span><br><span class="line">    # 请求头</span><br><span class="line">    Host: 127.0.0.1:8008\r\n</span><br><span class="line">    Connection: keep-alive\r\n</span><br><span class="line">    Cache-Control: max-age&#x3D;0\r\n</span><br><span class="line">    Upgrade-Insecure-Requests: 1\r\n</span><br><span class="line">    User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;65.0.3325.181 Safari&#x2F;537.36\r\n</span><br><span class="line">    Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8\r\nAccept-Encoding: gzip, deflate, br\r\n</span><br><span class="line">    Accept-Language: zh-CN,zh;q&#x3D;0.9\r\n</span><br><span class="line">    Cookie: csrftoken&#x3D;7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\r\n\r\n&#39;</span><br><span class="line">    # 请求体（get请求，请求体为空）    </span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    POST请求</span><br><span class="line">    # 请求首行</span><br><span class="line">    POST &#x2F;?name&#x3D;lqz&amp;age&#x3D;18 HTTP&#x2F;1.1\r\n</span><br><span class="line">    # 请求头</span><br><span class="line">    Host: 127.0.0.1:8008\r\nConnection: keep-alive\r\nContent-Length: 21\r\nCache-Control: max-age&#x3D;0\r\nOrigin: http:&#x2F;&#x2F;127.0.0.1:8008\r\nUpgrade-Insecure-Requests: 1\r\nContent-Type: application&#x2F;x-www-form-urlencoded\r\nUser-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;65.0.3325.181 Safari&#x2F;537.36\r\nAccept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8\r\nReferer: http:&#x2F;&#x2F;127.0.0.1:8008&#x2F;?name&#x3D;lqz&amp;age&#x3D;18\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: zh-CN,zh;q&#x3D;0.9\r\nCookie: csrftoken&#x3D;7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\r\n\r\n</span><br><span class="line">    # 请求体</span><br><span class="line">    name&#x3D;lqz&amp;password&#x3D;123&#39;</span><br><span class="line">    </span><br><span class="line">    &#39;&#39;&#39;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-响应协议"><a href="#3-2-响应协议" class="headerlink" title="3.2 响应协议"></a>3.2 响应协议</h3><h3 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h3><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1v7q07r9j30xi0cyaei.jpg" alt="image-20200924172428894"></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1v87pnwrj30ro0bcwho.jpg" alt="image-20200924172443165"></p>
<h3 id="3-3-响应状态码"><a href="#3-3-响应状态码" class="headerlink" title="3.3 响应状态码"></a>3.3 响应状态码</h3><p>状态码的职 是当客户端向服务器端发送请求时, 返回的请求 结果。借助状态码,用户可以知道服务器端是正常 理了请求,还是出 现了 。状态码如200 OK,以3位数字和原因 成。数字中的 一位指定了响应 别,后两位无分 。响应 别有以5种。</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1v8s70a5j314m0e8tix.jpg" alt="image-20200924172516228"></p>
<h2 id="四-URL简介"><a href="#四-URL简介" class="headerlink" title="四 URL简介"></a>四 URL简介</h2><p>统一资源定位符是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它</p>
<p>格式：</p>
<blockquote>
<p>协议：//IP:端口(80)/路径?name=lqz&amp;age=18</p>
<p>？之前的是请求路径，？之后的是请求数据部分</p>
</blockquote>
<p>演示示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">sock=socket.socket()</span><br><span class="line">sock.bind((&quot;127.0.0.1&quot;,8808))</span><br><span class="line">sock.listen(5)</span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line">    print(&quot;server waiting.....&quot;)</span><br><span class="line">    conn,addr=sock.accept()</span><br><span class="line">    data=conn.recv(1024)</span><br><span class="line">    print(&quot;data&quot;, data)</span><br><span class="line"></span><br><span class="line">    # 读取html文件</span><br><span class="line">    with open(&quot;login.html&quot;,&quot;rb&quot;) as f:</span><br><span class="line">        data=f.read()</span><br><span class="line"></span><br><span class="line">    conn.send((b&quot;HTTP/1.1 200 OK\r\nContent-type:text/html\r\n\r\n%s&quot;%data))</span><br><span class="line">    conn.close()</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    密码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django入门-web框架-03</title>
    <url>/2021/05/07/Django%E5%85%A5%E9%97%A8-web%E6%A1%86%E6%9E%B6-03/</url>
    <content><![CDATA[<p>Web 框架初识</p>
<a id="more"></a>

<h2 id="一-web框架"><a href="#一-web框架" class="headerlink" title="一 web框架"></a>一 web框架</h2><p>Web框架（Web framework）是一种开发框架，用来支持动态网站、网络应用和网络服务的开发。这大多数的web框架提供了一套开发和部署网站的方式，也为web行为提供了一套通用的方法。web框架已经实现了很多功能，开发人员使用框架提供的方法并且完成自己的业务逻辑，就能快速开发web应用了。浏览器和服务器的是基于HTTP协议进行通信的。也可以说web框架就是在以上十几行代码基础张扩展出来的，有很多简单方便使用的方法，大大提高了开发的效率。</p>
<h3 id="1-1-wsgiref模块"><a href="#1-1-wsgiref模块" class="headerlink" title="1.1 wsgiref模块"></a>1.1 wsgiref模块</h3><p>最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。</p>
<p>如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。</p>
<p>正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口协议来实现这样的服务器软件，让我们专心用Python编写Web业务。这个接口就是WSGI：Web Server Gateway Interface。而wsgiref模块就是python基于wsgi协议开发的服务模块。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mya</span>(<span class="params">environ, start_response</span>):</span></span><br><span class="line">    print(environ)</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">if</span> environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>) == <span class="string">&#x27;/index&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data=f.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>) == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;login.html&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data=<span class="string">b&#x27;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [data]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    myserver = make_server(<span class="string">&#x27;&#x27;</span>, <span class="number">8011</span>, mya)</span><br><span class="line">    print(<span class="string">&#x27;监听8010&#x27;</span>)</span><br><span class="line">    myserver.serve_forever()</span><br></pre></td></tr></table></figure>

<h2 id="二-手撸自己的Web框架"><a href="#二-手撸自己的Web框架" class="headerlink" title="二 手撸自己的Web框架"></a>二 手撸自己的Web框架</h2><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1vegl3a2j308q088q2w.jpg" alt="img"></p>
<h3 id="2-1-models-py"><a href="#2-1-models-py" class="headerlink" title="2.1 models.py"></a>2.1 models.py</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">链接数据库返回字典格式：</span><br><span class="line">cursor&#x3D;pymysql.cursors.DictCursor</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import pymysql</span><br><span class="line">#连接数据库</span><br><span class="line">conn &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;,port&#x3D; 3306,user &#x3D; &#39;root&#39;,passwd&#x3D;&#39;123456&#39;,db&#x3D;&#39;web&#39;) #db：库名</span><br><span class="line">#创建游标</span><br><span class="line">cur &#x3D; conn.cursor()</span><br><span class="line"></span><br><span class="line">sql&#x3D;&#39;&#39;&#39;</span><br><span class="line">create table userinfo(</span><br><span class="line">        id INT PRIMARY KEY ,</span><br><span class="line">        name VARCHAR(32) ,</span><br><span class="line">        password VARCHAR(32)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">cur.execute(sql)</span><br><span class="line"></span><br><span class="line">#提交</span><br><span class="line">conn.commit()</span><br><span class="line">#关闭指针对象</span><br><span class="line">cur.close()</span><br><span class="line">#关闭连接对象</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>

<h3 id="2-2-myserver-py"><a href="#2-2-myserver-py" class="headerlink" title="2.2 myserver.py"></a>2.2 myserver.py</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from wsgiref.simple_server import make_server</span><br><span class="line"></span><br><span class="line">from urls import url_patters</span><br><span class="line"></span><br><span class="line">def mya(environ, start_response):</span><br><span class="line">    # print(environ)</span><br><span class="line">    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text&#x2F;html&#39;)])</span><br><span class="line">    func &#x3D; None</span><br><span class="line">    for item in url_patters:</span><br><span class="line">        if item[0] &#x3D;&#x3D; environ.get(&#39;PATH_INFO&#39;):</span><br><span class="line">            func &#x3D; item[1]</span><br><span class="line">            break</span><br><span class="line">    if func:</span><br><span class="line">        data &#x3D; func(environ)</span><br><span class="line">        return [data]</span><br><span class="line">    else:</span><br><span class="line">        return [b&#39;404&#39;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    myserver &#x3D; make_server(&#39;&#39;, 8011, mya)</span><br><span class="line">    print(&#39;监听8010&#39;)</span><br><span class="line">    myserver.serve_forever()</span><br></pre></td></tr></table></figure>

<h3 id="2-3-urls-py"><a href="#2-3-urls-py" class="headerlink" title="2.3 urls.py"></a>2.3 urls.py</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from views import *</span><br><span class="line">url_patters &#x3D; [</span><br><span class="line">    (&#39;&#x2F;login&#39;, login),</span><br><span class="line">    (&#39;&#x2F;index&#39;, index),</span><br><span class="line">    (&#39;&#x2F;time&#39;, time),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="2-4-views-py"><a href="#2-4-views-py" class="headerlink" title="2.4 views.py"></a>2.4 views.py</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index(environ):</span><br><span class="line">    with open(&#39;templates&#x2F;index.html&#39;, &#39;rb&#39;) as f:</span><br><span class="line">        data &#x3D; f.read()</span><br><span class="line">    return data</span><br><span class="line">def time(environ):</span><br><span class="line">    import datetime</span><br><span class="line">    now&#x3D;datetime.datetime.now().strftime(&#39;%y-%m-%d %X&#39;)</span><br><span class="line">    print(now)</span><br><span class="line">    return now.encode(&#39;utf-8&#39;)</span><br><span class="line">from urllib.parse import parse_qs</span><br><span class="line">import pymysql</span><br><span class="line">def login(request):</span><br><span class="line">    if request.get(&quot;REQUEST_METHOD&quot;) &#x3D;&#x3D; &quot;POST&quot;:</span><br><span class="line">        try:</span><br><span class="line">            request_body_size &#x3D; int(request.get(&#39;CONTENT_LENGTH&#39;, 0))</span><br><span class="line">        except (ValueError):</span><br><span class="line">            request_body_size &#x3D; 0</span><br><span class="line"></span><br><span class="line">        request_body &#x3D; request[&#39;wsgi.input&#39;].read(request_body_size)</span><br><span class="line">        data &#x3D; parse_qs(request_body)</span><br><span class="line"></span><br><span class="line">        user &#x3D; data.get(b&quot;user&quot;)[0].decode(&quot;utf8&quot;)</span><br><span class="line">        pwd &#x3D; data.get(b&quot;pwd&quot;)[0].decode(&quot;utf8&quot;)</span><br><span class="line"></span><br><span class="line">        # 连接数据库</span><br><span class="line">        conn &#x3D; pymysql.connect(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;3306, user&#x3D;&#39;root&#39;, passwd&#x3D;&#39;123456&#39;, db&#x3D;&#39;web&#39;)  # db：库名</span><br><span class="line">        # 创建游标</span><br><span class="line">        cur &#x3D; conn.cursor()</span><br><span class="line">        SQL &#x3D; &quot;select * from userinfo WHERE NAME &#x3D;&#39;%s&#39; AND PASSWORD &#x3D;&#39;%s&#39;&quot; % (user, pwd)</span><br><span class="line">        cur.execute(SQL)</span><br><span class="line"></span><br><span class="line">        if cur.fetchone():</span><br><span class="line"></span><br><span class="line">            f &#x3D; open(&quot;templates&#x2F;backend.html&quot;, &quot;rb&quot;)</span><br><span class="line">            data &#x3D; f.read()</span><br><span class="line">            data &#x3D; data.decode(&quot;utf8&quot;)</span><br><span class="line">            return data.encode(&quot;utf8&quot;)</span><br><span class="line"></span><br><span class="line">        else:</span><br><span class="line">            print(&quot;OK456&quot;)</span><br><span class="line">            return b&quot;user or pwd is wrong&quot;</span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line">        f &#x3D; open(&quot;templates&#x2F;login.html&quot;, &quot;rb&quot;)</span><br><span class="line">        data &#x3D; f.read()</span><br><span class="line">        f.close()</span><br><span class="line">        return data</span><br></pre></td></tr></table></figure>

<h3 id="2-5-tempaltes下backend-html"><a href="#2-5-tempaltes下backend-html" class="headerlink" title="2.5 tempaltes下backend.html"></a>2.5 tempaltes下backend.html</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">登录成功</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-tempaltes下index-html"><a href="#2-5-tempaltes下index-html" class="headerlink" title="2.5 tempaltes下index.html"></a>2.5 tempaltes下index.html</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">index</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-tempaltes下login-html"><a href="#2-5-tempaltes下login-html" class="headerlink" title="2.5 tempaltes下login.html"></a>2.5 tempaltes下login.html</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h4&gt;登录页面&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8011&#x2F;login&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">     用户名 &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot;&gt;</span><br><span class="line">     密码 &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;pwd&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="三-其它socket服务端"><a href="#三-其它socket服务端" class="headerlink" title="三 其它socket服务端"></a>三 其它socket服务端</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;cgi&#39;: CGIServer,</span><br><span class="line">&#39;flup&#39;: FlupFCGIServer,</span><br><span class="line">&#39;wsgiref&#39;: WSGIRefServer,</span><br><span class="line">&#39;waitress&#39;: WaitressServer,</span><br><span class="line">&#39;cherrypy&#39;: CherryPyServer,</span><br><span class="line">&#39;paste&#39;: PasteServer,</span><br><span class="line">&#39;fapws3&#39;: FapwsServer,</span><br><span class="line">&#39;tornado&#39;: TornadoServer,</span><br><span class="line">&#39;gae&#39;: AppEngineServer,</span><br><span class="line">&#39;twisted&#39;: TwistedServer,</span><br><span class="line">&#39;diesel&#39;: DieselServer,</span><br><span class="line">&#39;meinheld&#39;: MeinheldServer,</span><br><span class="line">&#39;gunicorn&#39;: GunicornServer,</span><br><span class="line">&#39;eventlet&#39;: EventletServer,</span><br><span class="line">&#39;gevent&#39;: GeventServer,</span><br><span class="line">&#39;geventSocketIO&#39;:GeventSocketIOServer,</span><br><span class="line">&#39;rocket&#39;: RocketServer,</span><br><span class="line">&#39;bjoern&#39; : BjoernServer,</span><br><span class="line">&#39;auto&#39;: AutoServer,</span><br></pre></td></tr></table></figure>

<p>都遵循一个协议wsgi（Web Server Gateway Interface web服务网关接口）</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django入门-简介-04</title>
    <url>/2021/05/07/Django%E5%85%A5%E9%97%A8-%E7%AE%80%E4%BB%8B-04/</url>
    <content><![CDATA[<p>Django 简介</p>
<a id="more"></a>

<h2 id="一-MVC与MTV模型"><a href="#一-MVC与MTV模型" class="headerlink" title="一 MVC与MTV模型"></a>一 MVC与MTV模型</h2><h3 id="1-1-MVC"><a href="#1-1-MVC" class="headerlink" title="1.1 MVC"></a>1.1 MVC</h3><p>Web服务器开发领域里著名的MVC模式，所谓MVC就是把Web应用分为模型(M)，控制器(C)和视图(V)三层，他们之间以一种插件式的、松耦合的方式连接在一起，模型负责业务对象与数据库的映射(ORM)，视图负责与用户的交互(页面)，控制器接受用户的输入调用模型和视图完成用户的请求，其示意图如下所示：</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1vz7cqdej30rm0i078f.jpg" alt="image-20200924175052910"></p>
<h3 id="1-2-MTV"><a href="#1-2-MTV" class="headerlink" title="1.2 MTV"></a>1.2 MTV</h3><p>Django的MTV模式本质上和MVC是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同，Django的MTV分别是值：</p>
<ul>
<li>M 代表模型（Model）： 负责业务对象和数据库的关系映射(ORM)。</li>
<li>T 代表模板 (Template)：负责如何把页面展示给用户(html)。</li>
<li>V 代表视图（View）： 负责业务逻辑，并在适当时候调用Model和Template。</li>
</ul>
<p>除了以上三层之外，还需要一个URL分发器，它的作用是将一个个URL的页面请求分发给不同的View处理，View再调用相应的Model和Template，MTV的响应模式如下所示：</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1w0gl8cmj314c0gegrv.jpg" alt="image-20200924175204537"></p>
<p>一般是用户通过浏览器向我们的服务器发起一个请求(request)，这个请求回去访问视图函数，（如果不涉及到数据调用，那么这个时候视图函数返回一个模板也就是一个网页给用户），视图函数调用模型，模型去数据库查找数据，然后逐级返回，视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。</p>
<h2 id="二-Django的下载与基本命令"><a href="#二-Django的下载与基本命令" class="headerlink" title="二 Django的下载与基本命令"></a>二 Django的下载与基本命令</h2><h3 id="2-1-下载Django"><a href="#2-1-下载Django" class="headerlink" title="2.1 下载Django"></a>2.1 下载Django</h3><p>　　方式一：在命令行输入：pip3 install django</p>
<p>　　　　pip install django==1.11.9 -i <a href="http://pypi.hustunique.org/simple">http://pypi.hustunique.org/simple</a> 指定版本号，指定国内镜像</p>
<p>　　方式二：用pycharm安装</p>
<p>　　方式三：用pycharm的Terminal的命令行安装</p>
<h3 id="2-2-创建一个django-project"><a href="#2-2-创建一个django-project" class="headerlink" title="2.2 创建一个django project"></a>2.2 创建一个django project</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin.py startproject mysite</span><br></pre></td></tr></table></figure>

<p>当前目录下会生成mysite的工程，目录结构如下：</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1w18rsraj30he0cy0uk.jpg" alt="image-20200924175250501"></p>
<ul>
<li>manage.py —– Django项目里面的工具，通过它可以调用django shell和数据库等。</li>
<li>settings.py —- 包含了项目的默认设置，包括数据库信息，调试标志以及其他一些工作的变量。</li>
<li>urls.py —– 负责把URL模式映射到应用程序。</li>
</ul>
<h3 id="2-3-在mysite目录下创建应用"><a href="#2-3-在mysite目录下创建应用" class="headerlink" title="2.3 在mysite目录下创建应用"></a>2.3 在mysite目录下创建应用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py startapp blog</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1w2o9s2hj30ew0eet9f.jpg" alt="image-20200924175406936"></p>
<h3 id="2-4-启动django项目"><a href="#2-4-启动django项目" class="headerlink" title="2.4 启动django项目"></a>2.4 启动django项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py runserver 8001</span><br></pre></td></tr></table></figure>

<p>这样我们的django就启动起来了！当我们访问：<a href="http://127.0.0.1:8080/%E6%97%B6%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%EF%BC%9A">http://127.0.0.1:8080/时就可以看到：</a></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1w38w557j30ru04m0ue.jpg" alt="image-20200924175446249"></p>
<h2 id="三-基于Django实现的一个简单示例"><a href="#三-基于Django实现的一个简单示例" class="headerlink" title="三 基于Django实现的一个简单示例"></a>三 基于Django实现的一个简单示例</h2><h3 id="3-1-URL控制器"><a href="#3-1-URL控制器" class="headerlink" title="3.1 URL控制器"></a>3.1 URL控制器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;index&#x2F;&#39;,views.index),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="3-2-视图"><a href="#3-2-视图" class="headerlink" title="3.2 视图"></a>3.2 视图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line"></span><br><span class="line">    import datetime</span><br><span class="line">    now&#x3D;datetime.datetime.now()</span><br><span class="line">    ctime&#x3D;now.strftime(&quot;%Y-%m-%d %X&quot;)</span><br><span class="line"></span><br><span class="line">    return render(request,&quot;index.html&quot;,&#123;&quot;ctime&quot;:ctime&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-3-模版"><a href="#3-3-模版" class="headerlink" title="3.3 模版"></a>3.3 模版</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h4&gt;当前时间:&#123;&#123; ctime &#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="四-Django静态文件配置"><a href="#四-Django静态文件配置" class="headerlink" title="四 Django静态文件配置"></a>四 Django静态文件配置</h2><h3 id="4-1-static"><a href="#4-1-static" class="headerlink" title="4.1 static"></a>4.1 static</h3><p>新建一个目录叫：static，我们的css文件，js文件，图片文件都放在这下面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STATIC_URL &#x3D; &#39;&#x2F;static&#x2F;&#39;</span><br><span class="line">STATICFILES_DIRS &#x3D; [</span><br><span class="line">    os.path.join(BASE_DIR, &#39;static&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="4-2-mycss-css"><a href="#4-2-mycss-css" class="headerlink" title="4.2 mycss.css"></a>4.2 mycss.css</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h4&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-myjs-js"><a href="#4-3-myjs-js" class="headerlink" title="4.3 myjs.js"></a>4.3 myjs.js</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;h4&#39;).click(function () &#123;</span><br><span class="line">    $(this).css(&quot;color&quot;,&quot;green&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-4-insex-html"><a href="#4-4-insex-html" class="headerlink" title="4.4 insex.html"></a>4.4 insex.html</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;static&#x2F;mycss.css&quot;&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;&#x2F;static&#x2F;jquery-3.3.1.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h4&gt;我是红色，点击变绿&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&#x2F;static&#x2F;myjs.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="五-Django请求生命周期"><a href="#五-Django请求生命周期" class="headerlink" title="五 Django请求生命周期"></a>五 Django请求生命周期</h2><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlgy1gj1w4rqes4j31jm0owgsg.jpg" alt="image-20200924175613811"></p>
<h2 id="六-Django与其他web框架"><a href="#六-Django与其他web框架" class="headerlink" title="六 Django与其他web框架"></a>六 Django与其他web框架</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">a socket服务端</span><br><span class="line">b 根据url不同返回不同的内容</span><br><span class="line">    url---视图函数</span><br><span class="line">c 字符串返回给用户</span><br><span class="line">    特殊字符替换</span><br><span class="line"></span><br><span class="line">Web框架种类：</span><br><span class="line">a         b   c     Tornado</span><br><span class="line">别人的a   b    c     django（a用的wsgiref）</span><br><span class="line">别人a     b   别人c  flask（c用的jinja2）</span><br><span class="line">另一种分类：</span><br><span class="line">Django和其它</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三板斧</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">HttpResponse: 返回字符串类型的数据</span><br><span class="line">render: 返回HTML文件</span><br><span class="line">        # 第一种传值方式：更加精确，节省资源</span><br><span class="line">    # return render(request, &#39;03 ab_render.html&#39;, &#123;&#39;data&#39;:user_dict,&#39;date&#39;:123&#125;)</span><br><span class="line">    # 第二种传值方式:当要传的数据特别多的时候</span><br><span class="line">    &quot;&quot;&quot;locals会将所在的名称空间中所有的名字全部传给html页面&quot;&quot;&quot;</span><br><span class="line">    # return render(request, &#39;03 ab_render.html&#39;, locals())</span><br><span class="line">redirect: 重定向</span><br><span class="line">      return redirect(&#39;https:&#x2F;&#x2F;www.sina.com.cn&#39;)</span><br><span class="line">    return redirect(&#39;&#x2F;home&#x2F;&#39;)</span><br><span class="line">request: 请求相关的所有数据对象 比env更牛逼</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus相关</title>
    <url>/2021/04/18/prometheus%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>Prometheus 进阶</p>
<a id="more"></a>

<ol>
<li>什么是时序<br>指标名称{标签} + 时间戳<br>不断的打点 , 按照时间依次生成值</li>
</ol>
<ol start="2">
<li>日志转时序<br>哪个机器 路径 匹配正则  计数、关键字<br>metrics timestamp 3</li>
<li>psm 服务树  gpa</li>
<li>promethues 高基数<br>理解为 以metric 为查询 条件，组合成的结果序列较多，就称为高基数 ， 是旨在 查询和告警条件下</li>
<li>grafana 设置成row<br>懒加载，防止一次请求过多；做隔离的</li>
<li>指标分类</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 存储要做分离</span><br><span class="line">- 查询采集等也要分离</span><br><span class="line">- 可用性重要程度做区分： 在线业务指标&gt; 在线中间件指标 &gt; 在线基础资源指标 &gt; 离线业务指标 &gt; 大数据指标</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>prometheus</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-cmdb</title>
    <url>/2020/11/15/py-cmdb/</url>
    <content><![CDATA[<p>cmdb</p>
<a id="more"></a>

<h4 id="一-为什么要做cmdb？"><a href="#一-为什么要做cmdb？" class="headerlink" title="一. 为什么要做cmdb？"></a>一. 为什么要做cmdb？</h4><pre><code>1. 项目上线的流程： 
    调研需求分析 ---》 开会确定日期 ---》 开发程序 ---》 项目测试人员 ---》代码上线（运维来负责）

    传统上线方式：
        直接代码解压 ，启服务， 访问项目， 进行测试

        弊端：

            - 手工上线  运维来干预 
            - 加机器， 需要重复进行代码的部署

        优化策略：
            代码上线系统 

            必要条件：需要知道服务器的信息 （服务器的主机名， 硬盘大小。。。）

2. 一个公司即将上市， 审查公司的资产 

    传统方式,统计公司服务器资产的方式：
        excel表格 
            最后信息会变得不准确
            导致年底进行审计的时候，资产变得无法进行准确的统计</code></pre>
<p>​<br>    CMDB：</p>
<pre><code>    配置管理数据库      
    记录服务器的资产信息（包括 机架位置， 主机名，硬盘， 网卡， 产品线， 管理员等）的      
    位置：
        是自动化运维的基石</code></pre>
<p>​            </p>
<h4 id="二-cmdb实现的方案："><a href="#二-cmdb实现的方案：" class="headerlink" title="二. cmdb实现的方案："></a>二. cmdb实现的方案：</h4><pre><code> 核心的代码：</code></pre>
<ul>
<li><ol>
<li>linux相关的命令   megacli </li>
</ol>
</li>
<li><ol start="2">
<li>Python的代码执行linux命令， 得到结果返回给服务端<br>​            </li>
</ol>
</li>
<li><p>业内：</p>
<ul>
<li>agent方案<ul>
<li>优点：速度快</li>
<li>缺点：每一台机器都需要部署，维护</li>
</ul>
</li>
<li>ssh类方案<ul>
<li>优点：只需要在中控机上部署</li>
<li>缺点：速度慢</li>
</ul>
</li>
<li>salt方案<br>  使用场景：公司正在使用saltstack</li>
</ul>
</li>
<li><p>目标：    </p>
<pre><code>  写一份代码， 通过改变配置实现三套方案       
  客户端的采集</code></pre>
</li>
</ul>
<h4 id="三-代码实现："><a href="#三-代码实现：" class="headerlink" title="三. 代码实现："></a>三. 代码实现：</h4><ul>
<li>开发过程中遇到的问题<br>  解决的方案：<pre><code>  - 采用的是高内聚低耦合的思想，对代码进行高度的封装和抽离
  - 集成了默认的全局配置文件以及自定制配置文件
  - Django 中间件的写法，对插件进行可插拔式的采集23</code></pre>
</li>
</ul>
<p>目录结构：<br>    bin  ： 核心的启动文件  start.py<br>    conf : 配置文件夹<br>    lib  ：库文件<br>    log  : 不建议将日志文件夹放在项目中   /var/log  mkidr /logs/cmdb/<br>    src  : 核心的源代码目录<br>    test : 开发的过程中， 需要进行代码的调试<br>​            </p>
<ol>
<li>高级配置文件的实现 ： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    django的配置：</span><br><span class="line">        <span class="keyword">from</span> django.conf <span class="keyword">import</span> global_settings, settings</span><br><span class="line">        settings.TIME_ZONE</span><br><span class="line">    ```    </span><br><span class="line">        将自定制的配置和全局的配置集成在一个对象上， 之后想要使用任何属性的时候， 直接可以通过此对象获得</span><br><span class="line">    </span><br><span class="line">    技术要点：</span><br><span class="line">        getattr : 反射获取 对应的值</span><br><span class="line">        setattr : 反射设置</span><br><span class="line">​        </span><br><span class="line"><span class="number">2.</span> 编程思想：</span><br><span class="line">    </span><br><span class="line">高内聚低耦合</span><br><span class="line">    </span><br><span class="line">写一个类或者一个函数的时候， 我们需要明确一下次函数或者此类主要负责干啥的</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>():</span></span><br><span class="line">    <span class="comment">#### 和用户相关的一些逻辑</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getUserInfo</span>():</span></span><br><span class="line">        <span class="comment">#### 获取用户的信息</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">### 处理订单相关的业务逻辑</span></span><br><span class="line">        </span><br><span class="line">​            </span><br><span class="line">可插拔式的配置：</span><br><span class="line">```python</span><br><span class="line">settings.py:</span><br><span class="line">    PLUGINS_DICT = &#123;</span><br><span class="line">        <span class="string">&quot;basic&quot;</span> : <span class="string">&#x27;src.plugins.basic.Basic&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;disk&quot;</span> : <span class="string">&#x27;src.plugins.disk.Disk&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;memory&quot;</span> : <span class="string">&#x27;src.plugins.memory.Memory&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;nic&quot;</span> : <span class="string">&#x27;src.plugins.nic.Nic&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;cpu&quot;</span> : <span class="string">&#x27;src.plugins.cpu.Cpu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    参考django的中间件</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.plugins_dict.items():</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            k: basic </span></span><br><span class="line"><span class="string">            v: src.plugins.basic.Basic  字符串</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            module_path, cls_name = v.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">            module = importlib.import_module(module_path)  <span class="comment">#### 导入路径</span></span><br><span class="line">            cls = getattr(module, cls_name)   <span class="comment">##### 获取对应的类名</span></span><br><span class="line">            cls().process()    <span class="comment">#### 执行该类对应的方法</span></span><br></pre></td></tr></table></figure>
插件的代码：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;memory&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>​<br>​<br>3. 插件代码重复：</p>
<ul>
<li>解决的方法：<ul>
<li><ol>
<li>base.py 写一个基类， 所有的插件继承这个基类， 只需要执行该基类中的方法</li>
</ol>
</li>
<li><ol start="2">
<li>cmd_func 抽离出去，当做参数传给execute函数</li>
</ol>
</li>
</ul>
</li>
</ul>
<ol start="4">
<li>并发采集服务器信息(agent方式不需要考虑，ssh方式需要考虑)</li>
</ol>
<ul>
<li>并发采集<ul>
<li>并发采集，采用线程池<ul>
<li>Python2：线程池 无；进程池 有；</li>
<li>Python3：线程池 有；进程池 有；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>from concurrent.futures import ThreadPoolExecutor，ProcessPoolExecutor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">### 线程池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor，ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">i</span>):</span></span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = ThreadPoolExecutor(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># run(i)</span></span><br><span class="line">    p.submit(run, i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>遇到的问题</p>
<ul>
<li>唯一标识的问题<ul>
<li>需要选出一个唯一的字段，作为唯一标识来进行区分服务器信息</li>
</ul>
</li>
<li>解决<ul>
<li>sn 主板序列号</li>
<li>问题，虚拟机和物理机一个sn号，导致服务器信息采集不完整</li>
<li>hostname</li>
<li>规范</li>
<li><ol start="0">
<li>1000台服务器，需要唯一的主机名</li>
</ol>
</li>
<li><ol>
<li>将服务器主机名，录入到后台管理数据库中（登记服务器）</li>
</ol>
</li>
<li><ol start="2">
<li>再分配给技术之前，需要运行一下采集的程序，此时收集上来的数据都是最原始的。可以将原始数据中过的hostname保存到一个文件当中，以后，我们再向后端post数据的时候，以文件中的hostname为一个标准<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Agent</span>(<span class="params">Base</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collect</span>(<span class="params">self</span>):</span></span><br><span class="line">        res = PluginsManager().execute()</span><br><span class="line">        <span class="comment">###唯一标识的问题</span></span><br><span class="line">        hostname = res[<span class="string">&#x27;basic&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;hostname&#x27;</span>]</span><br><span class="line">        info = open(os.path.join(settings.BASEDIR, <span class="string">&#x27;conf/cert&#x27;</span>), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">        <span class="comment">###第一次运行，需要将原始的主机名写入到文件中</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> info.strip():</span><br><span class="line">            <span class="keyword">with</span> open(os.path.join(settings.BASEDIR, <span class="string">&#x27;conf/cert&#x27;</span>), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                fp.write(hostname)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[<span class="string">&#x27;basic&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;hostname&#x27;</span>] = info</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> res.items():</span><br><span class="line">            print(k, v)</span><br><span class="line">        self.postInfo(res)</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>API验证</p>
</li>
</ol>
<ul>
<li><p>自定义的验证</p>
</li>
<li><p>对称加密</p>
<ul>
<li>缺点：key是明文传输的<ul>
<li>解决方法：发过去的key加密</li>
<li>要求每次加密的key都是动态的</li>
</ul>
</li>
</ul>
</li>
<li><p>非对称加密</p>
</li>
</ul>
<p>第一种方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对称加密</span><br><span class="line">client</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;asdasdasd&#x27;</span></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://127.0.0.1:8000/testapi&#x27;</span>, headers=&#123;<span class="string">&#x27;key&#x27;</span>:key&#125;)</span><br><span class="line">print(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">server_key = <span class="string">&#x27;asdasdasds&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testapi</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        clent_key = request.META[<span class="string">&#x27;HTTP_KEY&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> server_key != clent_key:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;非法请求&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.body)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二种方式，堆成加密，密文（1.时间，2.加密出错）<br>3.连接redis，设置key的过期时间 20s</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib,time</span><br><span class="line">client_time = time.time()</span><br><span class="line">tmp = <span class="string">&quot;%s|%s&quot;</span> %(key, client_time)</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(bytes(tmp, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">res = m.hexdigest()</span><br><span class="line">print(res)</span><br><span class="line">info = <span class="string">&quot;%s|%s&quot;</span> %(res, client_time)</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://127.0.0.1:8000/testapi&#x27;</span>, headers=&#123;<span class="string">&#x27;key&#x27;</span>:info&#125;)</span><br><span class="line">print(res.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib,time</span><br><span class="line">server_key = <span class="string">&#x27;asdasdasd&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testapi</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        client_key = request.META.get(<span class="string">&#x27;HTTP_KEY&#x27;</span>)</span><br><span class="line">        print(client_key)</span><br><span class="line">        client_md5_key, client_time = client_key.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        server_time = time.time()</span><br><span class="line">        client_time = float(client_time)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> server_time - client_time &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;第一关，时间失效&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        tmp = <span class="string">&quot;%s|%s&quot;</span> % (server_key, client_time)</span><br><span class="line"></span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        m.update(bytes(tmp, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        server_md5_key = m.hexdigest()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> server_md5_key != client_md5_key:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;第二关，加密出错&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.body)</span><br></pre></td></tr></table></figure>



<ul>
<li>JWT</li>
</ul>
<ol start="7">
<li>数据入库<br>新的数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#39;0&#39;: &#123;&#39;slot&#39;: &#39;0&#39;, &#39;pd_type&#39;: &#39;SAS&#39;, &#39;capacity&#39;: &#39;279.396&#39;, &#39;model&#39;: &#39;SEAGATE ST300MM0006     LS08S0K2B5NV&#39;&#125;, </span><br><span class="line">    &#39;1&#39;: &#123;&#39;slot&#39;: &#39;1&#39;, &#39;pd_type&#39;: &#39;SAS&#39;, &#39;capacity&#39;: &#39;279.396&#39;, &#39;model&#39;: &#39;SEAGATE ST300MM0006     LS08S0K2B5AH&#39;&#125;, &#39;2&#39;: &#123;&#39;slot&#39;: &#39;2&#39;, &#39;pd_type&#39;: &#39;SATA&#39;, &#39;capacity&#39;: &#39;476.939&#39;, &#39;model&#39;: &#39;S1SZNSAFA01085L     Samsung SSD 850 PRO 512GB               EXM01B6Q&#39;&#125;, </span><br><span class="line">    &#39;3&#39;: &#123;&#39;slot&#39;: &#39;3&#39;, &#39;pd_type&#39;: &#39;SATA&#39;, &#39;capacity&#39;: &#39;476.939&#39;, &#39;model&#39;: &#39;S1AXNSAF912433K     Samsung SSD 840 PRO Series              DXM06B0Q&#39;&#125;, </span><br><span class="line">    &#39;4&#39;: &#123;&#39;slot&#39;: &#39;4&#39;, &#39;pd_type&#39;: &#39;SATA&#39;, &#39;capacity&#39;: &#39;476.939&#39;, &#39;model&#39;: &#39;S1AXNSAF303909M     Samsung SSD 840 PRO Series              DXM05B0Q&#39;&#125;, </span><br><span class="line">    &#39;5&#39;: &#123;&#39;slot&#39;: &#39;5&#39;, &#39;pd_type&#39;: &#39;SATA&#39;, &#39;capacity&#39;: &#39;476.939&#39;, &#39;model&#39;: &#39;S1AXNSAFB00549A     Samsung SSD 840 PRO Series              DXM06B0Q&#39;&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>老数据：<br>    数据库中获取</p>
<ol start="8">
<li>页面展示</li>
</ol>
<ul>
<li><p>分为两大块：<br>前后端不分离<br>  后端的程序和前端的Html页面全部放在一个项目之下</p>
<p>  两种方式：</p>
<pre><code>  - 纯粹的去手写html页面  加入Bootstrap美化页面
  - 用别人写好的第三方框架
      - layui
      - xadmin admin的加强版</code></pre>
<p>  图表：</p>
<pre><code>  PC时代：
      highcharts               
      Echarts  
  移动端：
      antv</code></pre>
<p>  前后端分离</p>
<pre><code>  前端： vue、react、angular js
      - vueAdmin-template
      - iview-admin
  后端：
      - DRF </code></pre>
</li>
<li><p>redis：</p>
<ol start="0">
<li><p>非关系型数据库<br> mongodb memcache</p>
<p> 国内用redis比较多的公司是：weibo</p>
</li>
<li><p>5大数据类型 </p>
<p> 字符串类型<br> 列表<br> 集合<br> 有序集合<br> 哈希</p>
</li>
<li><p>python操作redis</p>
<ul>
<li>django连接redis</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>问题：<br>业务线调整，变换主机名，我需要提前注册到数据库里吗？<br>如果没有提前注册，数据库中没有我的这个hostname，就不会接收我的消息</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>cmdb</tag>
      </tags>
  </entry>
  <entry>
    <title>py_day01</title>
    <url>/2020/08/09/py-day01/</url>
    <content><![CDATA[<p>python基础<br>变量·字符串·常用操作</p>
<a id="more"></a>
<h5 id="1-编译型语言和解释型语言的区别"><a href="#1-编译型语言和解释型语言的区别" class="headerlink" title="1. 编译型语言和解释型语言的区别"></a>1. 编译型语言和解释型语言的区别</h5><p>编译型语言(强类型语言) :  一次编译，到处运行 例：c, c++, java等<br>解释型语言(弱类型语言)：不需要编译，直接调用解释器执行 例：php，python， shell</p>
<p>解释型语言修改完后，不需要编译，执行流程是从上到下依次解释执行。shell</p>
<h6 id="1-1-python的优势和劣势"><a href="#1-1-python的优势和劣势" class="headerlink" title="1.1 python的优势和劣势"></a>1.1 python的优势和劣势</h6><p>优势：</p>
<ul>
<li>简单易上手</li>
<li>大量的第三方的安装包  jekins, k8s api包  胶水语言</li>
</ul>
<p>劣势：</p>
<ul>
<li>速度慢 和c, c++, java比</li>
</ul>
<h5 id="2-演示python的安装和pycharm安装"><a href="#2-演示python的安装和pycharm安装" class="headerlink" title="2. 演示python的安装和pycharm安装"></a>2. 演示python的安装和pycharm安装</h5><h5 id="3-python的入门程序"><a href="#3-python的入门程序" class="headerlink" title="3. python的入门程序"></a>3. python的入门程序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;hellowrold!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>执行原理：</p>
<blockquote>
<p>右键执行的时候，会自动调用python解释器从上到下依次执行python代码。类比 shell。</p>
</blockquote>
<p>ps: 交互式命令行的执行方式  python3  —-》 ipython</p>
<p>编辑器和命令行式的写法的区别和应用场景：</p>
<blockquote>
<p>编辑器适用于大型的项目，命令行适用于小的测试</p>
</blockquote>
<h5 id="4-python的变量"><a href="#4-python的变量" class="headerlink" title="4. python的变量"></a>4. python的变量</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>  </span><br><span class="line">y = x*<span class="number">5</span> + <span class="number">6</span></span><br><span class="line">z = y*<span class="number">7</span></span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量就是将中间的结果暂存到内存,以便后续程序调用</p>
</blockquote>
<p>类比shell， 和shell中的变量的定义是一致的。<br>但是和shell中不一样的地方的是：shell的等号两边不允许有空格，但是python等号两边也可以没有空格。那为啥必须要有空格？</p>
<ul>
<li>从视觉上会好看一些，调试代码比较舒服</li>
<li>写代码，需要遵循 PEP8 规范  <ul>
<li>变量的等号两边必须是有空格的，各大公司code review</li>
<li><strong>变量名必须要有意义</strong> shell</li>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名建议不使用拼音和中文</li>
<li>变量的要具有意义</li>
<li>变量名不要过长</li>
</ul>
</li>
</ul>
<p><strong>编程语言的三种风格</strong></p>
<ul>
<li><p>大驼峰法    单词的首字母一定是大写的。</p>
<blockquote>
<p>UserName,   GetInfo, 等</p>
</blockquote>
</li>
<li><p>小驼峰法   单词的首字母小写，其余大写 </p>
<blockquote>
<p>userName </p>
</blockquote>
</li>
<li><p>下划线法  单词和单词之间使用下划线拼接</p>
<blockquote>
<p>user_name</p>
</blockquote>
</li>
</ul>
<p>在代码 code review (代码评审) , 我们要求三种风格你可以随便选择一种你喜欢的风格，但是大家在选择完成之后，一定要主要的是，千万别中途换风格。</p>
<h5 id="5-python的基础数据类型"><a href="#5-python的基础数据类型" class="headerlink" title="5. python的基础数据类型"></a>5. python的基础数据类型</h5><ul>
<li>数字</li>
</ul>
<p>整型int</p>
<blockquote>
<p>表示一个整数的<br>  定义：age=10 #age=int(10)<br>  用于标识：年龄，等级，身份证号，qq号，个数<br>浮点型</p>
</blockquote>
<p>float浮点型</p>
<blockquote>
<p>定义：salary=3.1 #salary=float(3.1)<br>用于标识：工资，身高，体重，</p>
</blockquote>
<ul>
<li>字符串<blockquote>
<p> 字符串会嵌套<br>name = “dj’sa’b”  ## 外层双引号，内层要求是单引号<br>name2 = ‘ds”ad”sa’ ## 外层单引号，内层要求是双引号<br>hhh = “dvshavhhhhhhhhhhhhhhh” \</p>
<pre><code>&quot;dsadsadsadsa&quot;</code></pre>
<p>使用三引号<br>kkk = ‘’’<br>dnsajndsandjansdnas<br>曾老师<br>boduo老师<br>‘’’<br>print(kkk, type(kkk))</p>
</blockquote>
</li>
</ul>
<blockquote>
<blockquote>
<p>单引号、双引号、多引号没有区别，多行字符串必须用多引号</p>
</blockquote>
</blockquote>
<p>字符串拼接（只能在字符串之间进行，且只能相加或相乘）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#数字可以进行加减乘除等运算，字符串呢？让我大声告诉你，也能？what ?是的，但只能进行&quot;相加&quot;和&quot;相乘&quot;运算。</span><br><span class="line">&gt;&gt;&gt; name&#x3D;&#39;egon&#39;</span><br><span class="line">&gt;&gt;&gt; age&#x3D;&#39;18&#39;</span><br><span class="line">&gt;&gt;&gt; name+age #相加其实就是简单拼接</span><br><span class="line">&#39;egon18&#39;</span><br><span class="line">&gt;&gt;&gt; name*5 </span><br><span class="line">&#39;egonegonegonegonegon&#39;</span><br><span class="line"></span><br><span class="line">#注意1：字符串相加的效率不高</span><br><span class="line">字符串1+字符串3，并不会在字符串1的基础上加字符串2，而是申请一个全新的内存空间存入字符串1和字符串3，相当字符串1与字符串3的空间被复制了一次，</span><br><span class="line"></span><br><span class="line">#注意2：只能字符串加字符串，不能字符串加其他类型</span><br></pre></td></tr></table></figure>

<ul>
<li><p>布尔</p>
<blockquote>
<p>隐式的布尔值</p>
<blockquote>
<p>所有类型的数据都可以当做隐式的布尔值<br>0、None、空它们三类隐藏的布尔值都是False,除此以外都是True</p>
</blockquote>
</blockquote>
</li>
<li><p>列表<br>在[]内用逗号分隔，可以存放n个任意类型的值.</p>
</li>
</ul>
<h6 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### : python 注释，unix的注释方式</span><br><span class="line">&#x2F;&#x2F;  : java， c, c++ 的注释方式</span><br><span class="line">&#39;&#39;&#39;&#39;&#39;&#39;&#39;: python多行注释</span><br><span class="line">&#x2F;*</span><br><span class="line">这是多行注释</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<h5 id="6-输入"><a href="#6-输入" class="headerlink" title="6. 输入"></a>6. 输入</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###交互程序</span></span><br><span class="line"><span class="comment"># name = input(&quot;请输入名字：&quot;) ### 输入的值的类型是字符串类型的，input程序交互获取到的内容是字符串</span></span><br><span class="line"></span><br><span class="line">num = input(<span class="string">&#x27;请输入数字:&#x27;</span>)</span><br><span class="line">print(type(num)) <span class="comment">### &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">print(int(num) + <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>int(‘12’) : 会将字符串类型的整肃转换成整型</p>
<h4 id="7-流程控制"><a href="#7-流程控制" class="headerlink" title="7. 流程控制"></a>7. 流程控制</h4><h5 id="7-1-分支"><a href="#7-1-分支" class="headerlink" title="7. 1 分支"></a>7. 1 分支</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">    开始写逻辑代码  <span class="comment">### 必须要4个空格</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">123</span>:</span><br><span class="line">    print(<span class="string">&#x27;dsadsa&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;kkkkkk&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意： if.. else的语句只能执行一个</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### if elif else   只要满足一个条件，那就会立即执行相应的代码，执行完毕之后立即退出</span></span><br><span class="line"></span><br><span class="line">num = input(<span class="string">&#x27;请输入要比较的数字:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> int(num) &gt;= <span class="number">22</span>:</span><br><span class="line">    print(<span class="string">&#x27;可以扯证了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> int(num) &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;成年了,可以干一些成年的事了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> int(num) &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;还是小屁孩&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>只要满足一个条件，那就会立即执行相应的代码，执行完毕之后立即退出</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">&#x27;请输入名字:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;meet&#x27;</span>:</span><br><span class="line">    age = input(<span class="string">&#x27;请输入年龄:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> int(age) == <span class="number">18</span>:</span><br><span class="line">        print(<span class="string">&#x27;输入全部正确&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> int(age) &gt;= <span class="number">22</span>:</span><br><span class="line">        print(<span class="string">&#x27;xxxxxxxx&#x27;</span>)   </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;年龄输入错误!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;名字输入错误!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>if else 我们只能写一个，而elif可以写多个条件表达</strong></p>
<h5 id="7-2-循环控制"><a href="#7-2-循环控制" class="headerlink" title="7.2 循环控制"></a>7.2 循环控制</h5><ul>
<li>while 循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 基本款</span></span><br><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    <span class="comment"># 循环体</span></span><br><span class="line">    <span class="comment"># 如果条件为真，那么循环则执行</span></span><br><span class="line">    <span class="comment"># 如果条件为假，那么循环不执行</span></span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">num = int(input(<span class="string">&#x27;请输入数字:&#x27;</span>))  <span class="comment">## 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>: <span class="comment">### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line">    print(<span class="string">&#x27;dsadsadasdsasa&#x27;</span>)</span><br><span class="line">    num = num - <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:   <span class="comment">#### 循环退出之后，都会执行else中的代码</span></span><br><span class="line">    print(<span class="string">&#x27;last line.....&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>两大关键字：<br>break 和 continue：</p>
<ul>
<li>break：    退出整个循环，循环已经退出</li>
<li>continue:  跳出本次循环， 循环并没有退出</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### break ： 当警察抓到犯人的时候，后面即便有人，也不会做任何操作，直接退出</span></span><br><span class="line"><span class="comment"># num = int(input(&#x27;请输入数字:&#x27;))  ## 12</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># while num &gt; 0: ### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line"><span class="comment">#     num = num - 1  ## 第一次：num=11 第二次：num=10 第三次：num=9，，当num=5</span></span><br><span class="line"><span class="comment">#     if num == 5:</span></span><br><span class="line"><span class="comment">#         break   ### 退出整个循环</span></span><br><span class="line"><span class="comment">#     print(&#x27;后续代码...&#x27;) ## 第一次打印，第二次打印，第三次打印，。。。。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### continue ： 警察查身份证，</span></span><br><span class="line">num = int(input(<span class="string">&#x27;请输入数字:&#x27;</span>))  <span class="comment">## 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:  <span class="comment">### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line">    num = num - <span class="number">1</span>  <span class="comment">## 第一次：num=11 第二次：num=10 第三次：num=9，，当num=5</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment">### 跳出当前循环， 循环并没与退出</span></span><br><span class="line">    print(<span class="string">&#x27;后续代码...&#x27;</span>)  <span class="comment">## 第一次打印，第二次打印，第三次打印，。。。。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>for 循环<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### kkk 代表的是每一次循环的时候，目标对象s中的每一个元素</span></span><br><span class="line"><span class="comment">### 当循环到最后一个元素的时候，会自动退出</span></span><br><span class="line">s = <span class="string">&#x27;pounds&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> kkk <span class="keyword">in</span> s:</span><br><span class="line">    print(kkk)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>总结：任何语言无外乎三大流程控制结构</strong></p>
<ul>
<li>顺序</li>
<li>分支</li>
<li>循环</li>
</ul>
<p>是 姚期智 提出的</p>
<p>能够触类旁通，意思就是python学完之后， 在学go的时候，应该是没没任何压力的。</p>
<hr>
<h5 id="8-格式化输出"><a href="#8-格式化输出" class="headerlink" title="8. 格式化输出"></a>8. 格式化输出</h5><p>% , format</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 第一种写法：字符串使用+ 不断的进行拼接</span></span><br><span class="line"><span class="comment"># name = input(&#x27;请输入姓名:&#x27;)</span></span><br><span class="line"><span class="comment"># age = input(&#x27;请输入年龄:&#x27;)</span></span><br><span class="line"><span class="comment"># job = input(&#x27;请输入职业:&#x27;)</span></span><br><span class="line"><span class="comment"># hobby = input(&#x27;请输入爱好:&#x27;)</span></span><br><span class="line"><span class="comment"># a = &#x27;------------ info of 51devops ----------&#x27;</span></span><br><span class="line"><span class="comment"># b = &#x27;Name:&#x27;</span></span><br><span class="line"><span class="comment"># c = &#x27;Age:&#x27;</span></span><br><span class="line"><span class="comment"># d = &#x27;Job:&#x27;</span></span><br><span class="line"><span class="comment"># e = &#x27;Hobby:&#x27;</span></span><br><span class="line"><span class="comment"># f = &#x27;------------- end ----------------&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(a+&#x27;\n&#x27;+b+name+&#x27;\n&#x27;+c+age+&#x27;\n&#x27;+d+job+&#x27;\n&#x27;+e+hobby+&#x27;\n&#x27;+f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 第二种方法, 也有人用，用的还挺多。但是要求格式化传入的值和占位符的值需要一一对应</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name = input(&#x27;请输入姓名:&#x27;)</span></span><br><span class="line"><span class="comment"># age = input(&#x27;请输入年龄:&#x27;)</span></span><br><span class="line"><span class="comment"># job = input(&#x27;请输入职业:&#x27;)</span></span><br><span class="line"><span class="comment"># hobby = input(&#x27;请输入爱好:&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># msg = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ------------ info of 51devops ----------</span></span><br><span class="line"><span class="comment"># Name  : %s</span></span><br><span class="line"><span class="comment"># Age   : %s</span></span><br><span class="line"><span class="comment"># job   : %s</span></span><br><span class="line"><span class="comment"># Hobbie: %s</span></span><br><span class="line"><span class="comment"># ------------- end ----------------</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ### % 格式化的  而msg中的%s叫字符串占位符，</span></span><br><span class="line"><span class="comment"># print(msg % (age, name, job, hobby))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 第三种方法， 使用format函数来进行格式化</span></span><br><span class="line">name = input(<span class="string">&#x27;请输入姓名:&#x27;</span>)</span><br><span class="line">age = input(<span class="string">&#x27;请输入年龄:&#x27;</span>)</span><br><span class="line">job = input(<span class="string">&#x27;请输入职业:&#x27;</span>)</span><br><span class="line">hobby = input(<span class="string">&#x27;请输入爱好:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">------------ info of 51devops ----------</span></span><br><span class="line"><span class="string">Name  : &#123;name1&#125;</span></span><br><span class="line"><span class="string">Age   : &#123;age1&#125;</span></span><br><span class="line"><span class="string">job   : &#123;job1&#125;</span></span><br><span class="line"><span class="string">Hobbie: &#123;hobby1&#125;</span></span><br><span class="line"><span class="string">------------- end ----------------</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">print(msg.format(age1=age, name1=name, job1=job, hobby1=hobby))</span><br></pre></td></tr></table></figure>

<h5 id="9-运算符"><a href="#9-运算符" class="headerlink" title="9. 运算符"></a>9. 运算符</h5><ul>
<li><p>算数运算</p>
<img src="/2020/08/09/py-day01/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6.png" class title="py-day01">
</li>
<li><p>比较运算</p>
<img src="/2020/08/09/py-day01/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.png" class title="py-day01">
</li>
<li><p>赋值运算</p>
<img src="/2020/08/09/py-day01/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6.png" class title="py-day01">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.变量的赋值</span><br><span class="line">2.增量赋值</span><br><span class="line">age +&#x3D; 1</span><br><span class="line">3.链式赋值</span><br><span class="line">x,y,z &#x3D; 10</span><br><span class="line">4.交叉赋值</span><br><span class="line">m&#x3D;10</span><br><span class="line">n&#x3D;20</span><br><span class="line">m,n &#x3D; n,m</span><br><span class="line">5.解压赋值</span><br><span class="line">salaries &#x3D; [111,222,333,444,555]</span><br><span class="line">mon0,mon1,mon2,mon3,mon4 &#x3D; salaries </span><br><span class="line"># 对应的变量名少一个不行，多一个也不行</span><br><span class="line">解决办法</span><br><span class="line"># 取前三个值</span><br><span class="line">mon0,mon1,mon2,*_ &#x3D; salaries</span><br><span class="line"># 取后三个值</span><br><span class="line">*_,mon4,mon5 &#x3D; salaries</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑运算</p>
<img src="/2020/08/09/py-day01/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.png" class title="py-day01">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">not: 把紧跟其后的条件取反</span><br><span class="line">ps: 其后的添件作为一个不可分割的整体</span><br><span class="line"></span><br><span class="line">and: 用来连接左右两个条件，同时为True才为True</span><br><span class="line">True and 10 &gt; 3</span><br><span class="line"></span><br><span class="line">or: 两个条件但凡有一个为真都为真</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、三者的优先级关系：not&gt;and&gt;or，同一优先级默认从左往右计算。</span><br><span class="line">&gt;&gt;&gt; 3&gt;4 and 4&gt;3 or 1&#x3D;&#x3D;3 and &#39;x&#39; &#x3D;&#x3D; &#39;x&#39; or 3 &gt;3</span><br><span class="line">False</span><br><span class="line"></span><br><span class="line">#2、最好使用括号来区别优先级，其实意义与上面的一样</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">原理为：</span><br><span class="line">(1) not的优先级最高，就是把紧跟其后的那个条件结果取反，所以not与紧跟其后的条件不可分割</span><br><span class="line">3&gt;4 and not 4&gt;3 or 1&#x3D;&#x3D;3 and &#39;x&#39; &#x3D;&#x3D; &#39;x&#39; or 3&gt;3</span><br><span class="line">3&gt;4 and (not 4&gt;3) or 1&#x3D;&#x3D;3 and &#39;x&#39; &#x3D;&#x3D; &#39;x&#39; or 3&gt;3</span><br><span class="line"></span><br><span class="line">(3&gt;4 and (not 4&gt;3)) or (1&#x3D;&#x3D;3 and &#39;x&#39; &#x3D;&#x3D; &#39;x&#39;) or 3&gt;3</span><br><span class="line">(2) 如果语句中全部是用and连接，或者全部用or连接，那么按照从左到右的顺序依次计算即可</span><br><span class="line"></span><br><span class="line">(3) 如果语句中既有and也有or，那么先用括号把and的左右两个条件给括起来，然后再进行运算</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; (3&gt;4 and 4&gt;3) or (1&#x3D;&#x3D;3 and &#39;x&#39; &#x3D;&#x3D; &#39;x&#39;) or 3 &gt;3</span><br><span class="line">False </span><br><span class="line"></span><br><span class="line">#3、短路运算：逻辑运算的结果一旦可以确定，那么就以当前处计算到的值作为最终结果返回</span><br><span class="line">&gt;&gt;&gt; 10 and 0 or &#39;&#39; and 0 or &#39;abc&#39; or &#39;egon&#39; &#x3D;&#x3D; &#39;dsb&#39; and 333 or 10 &gt; 4</span><br><span class="line">我们用括号来明确一下优先级</span><br><span class="line">&gt;&gt;&gt; (10 and 0) or (&#39;&#39; and 0) or &#39;abc&#39; or (&#39;egon&#39; &#x3D;&#x3D; &#39;dsb&#39; and 333) or 10 &gt; 4</span><br><span class="line">短路：       0      &#39;&#39;            &#39;abc&#39;                    </span><br><span class="line">            假     假              真</span><br><span class="line"></span><br><span class="line">返回：                            &#39;abc&#39;</span><br><span class="line"></span><br><span class="line">#4、短路运算面试题：偷懒原则，偷懒到哪个位置，就把当前位置的值返回</span><br><span class="line">&gt;&gt;&gt; 1 or 3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 1 and 3</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 0 and 2 and 1</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; 0 and 2 or 1</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 0 and 2 or 1 or 4</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 0 or False and 1</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
</li>
<li><p>成员运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># in</span><br><span class="line">print(&quot;egon&quot; in &quot;hello egon&quot;) # 判断字符串是否在一个大字符串当中</span><br><span class="line">print(&quot;e&quot; in &quot;hello egon&quot;) # 判断字符串是否在一个大字符串当中</span><br><span class="line">print(111 in [111,222,333]) # 判断元素是否在列表中</span><br><span class="line">print(&quot;k1&quot; in &#123;&quot;k1&quot;:111, &quot;k2&quot;:222&#125;) #判断key这是否在字典中</span><br><span class="line"></span><br><span class="line"># not in</span><br><span class="line">print(&quot;egon&quot; not in &quot;hello egon&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>身份运算符</p>
<blockquote>
<p>is # 判断id是否相等</p>
</blockquote>
</li>
</ul>
<h5 id="10-索引"><a href="#10-索引" class="headerlink" title="10. 索引"></a>10. 索引</h5><p>提到索引，立马想到的一个概念是：索引都是从 0 开始计数的的</p>
<p>10.1索引的取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">print(name[<span class="number">0</span>])  <span class="comment">### h</span></span><br><span class="line"><span class="comment"># print(name[6])  ### 报错</span></span><br><span class="line">print(name[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<p>10.2 切片 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name = &#x27;h e l l o w o r l d&#x27;</span></span><br><span class="line"><span class="comment">#         0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">name = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line">print(name[<span class="number">4</span>:<span class="number">7</span>]) <span class="comment">### 前包后不包， 或者叫 左闭右开</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># name = &#x27;h e l l o w o r l d&#x27;</span></span><br><span class="line"><span class="string">#         0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="string">                       -3 -2 -1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="comment"># print(name[4:7]) ### 前包后不包， 或者叫 左闭右开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(name[:]) ### 从头切到尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(name[:5])  ### hello  从开始切刀5</span></span><br><span class="line"><span class="comment"># print(name[2:])  ### 从2开始切刀最后</span></span><br><span class="line"></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>字典</li>
<li>列表</li>
<li>集合</li>
</ul>
<ol start="11">
<li>深浅copy</li>
</ol>
<ul>
<li><p>list2 = list1 #不叫拷贝<br>二者分割不开，list2变化list1也跟着变化，指向同一内存地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; &#123;1: [1,2,3]&#125;</span><br><span class="line">b &#x3D; a</span><br></pre></td></tr></table></figure>
<img src="/2020/08/09/py-day01/%E6%B7%B1%E6%B5%85copy1.png" class title="py-day01">
</li>
<li><p>需求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.拷贝一下原列表产生一个新列表</span><br><span class="line">2.想让两个列表完全独立开，针对的是改操作</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>如何copy列表</p>
</li>
<li><p>浅copy:是把原列表的第一层的内存地址完全copy一份给新列表；第一层元素中子元素不独立</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a &#x3D; &#123;1: [1,2,3]&#125;</span><br><span class="line">&gt;&gt;&gt; b &#x3D; a.copy()</span><br><span class="line">&gt;&gt;&gt; a, b</span><br><span class="line">(&#123;1: [1, 2, 3]&#125;, &#123;1: [1, 2, 3]&#125;)</span><br><span class="line">&gt;&gt;&gt; a[1].append(4)</span><br><span class="line">&gt;&gt;&gt; a, b</span><br><span class="line">(&#123;1: [1, 2, 3, 4]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2020/08/09/py-day01/%E6%B7%B1%E6%B5%85copy2.png" class title="py-day01">
</li>
<li><p>深copy: 想要两个列表改操作完全独立开，必须有一种可以区分开可变类型和不可变类型的copy机制，这就是深copy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;import copy</span><br><span class="line">&gt;&gt;&gt; c &#x3D; copy.deepcopy(a)</span><br><span class="line">&gt;&gt;&gt; a, c</span><br><span class="line">(&#123;1: [1, 2, 3, 4]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br><span class="line">&gt;&gt;&gt; a[1].append(5)</span><br><span class="line">&gt;&gt;&gt; a, c</span><br><span class="line">(&#123;1: [1, 2, 3, 4, 5]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br></pre></td></tr></table></figure>
<img src="/2020/08/09/py-day01/%E6%B7%B1%E6%B5%85copy3.png" class title="py-day01">

</li>
</ul>
<p>以下实例是使用 copy 模块的 copy.copy（ 浅拷贝 ）和（copy.deepcopy ）:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]] <span class="comment">#原始对象</span></span><br><span class="line"> </span><br><span class="line">b = a                       <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)            <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)        <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"> </span><br><span class="line">a.append(<span class="number">5</span>)                 <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">&#x27;c&#x27;</span>)            <span class="comment">#修改对象a中的[&#x27;a&#x27;, &#x27;b&#x27;]数组对象</span></span><br><span class="line"> </span><br><span class="line">print( <span class="string">&#x27;a = &#x27;</span>, a )</span><br><span class="line">print( <span class="string">&#x27;b = &#x27;</span>, b )</span><br><span class="line">print( <span class="string">&#x27;c = &#x27;</span>, c )</span><br><span class="line">print( <span class="string">&#x27;d = &#x27;</span>, d )</span><br></pre></td></tr></table></figure>



<p>给数据结构和算法<br><a href="https://www.bilibili.com/video/BV1HA411b7ik">https://www.bilibili.com/video/BV1HA411b7ik</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py_day02_exercise</title>
    <url>/2020/08/09/py-day02-exercise/</url>
    <content><![CDATA[<p>温故知新</p>
<a id="more"></a>
<h3 id="1-根据需求写代码"><a href="#1-根据需求写代码" class="headerlink" title="1.根据需求写代码"></a>1.根据需求写代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;k3&quot;</span>: [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请在字典中添加一个键值对，&quot;k4&quot;: &quot;v4&quot;，输出添加后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k4&#x27;</span>] = <span class="string">&#x27;v4&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 请在修改字典中 &quot;k1&quot; 对应的值为 &quot;alex&quot;，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k1&#x27;</span>] = <span class="string">&#x27;alex&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 请在k3对应的值中追加一个元素 44，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].append(<span class="number">44</span>)</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 请在k3对应的值的第 1 个位置插入个元素 18，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].insert(<span class="number">0</span>,<span class="number">18</span>)</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure>

<h3 id="2-根据需求写代码"><a href="#2-根据需求写代码" class="headerlink" title="2.根据需求写代码"></a>2.根据需求写代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;</span><br><span class="line"> <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;pounds&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line"> <span class="string">&#x27;job&#x27;</span>:<span class="string">&#x27;teacher&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;51devops&#x27;</span>:&#123;<span class="string">&#x27;szk&#x27;</span>:[<span class="string">&#x27;python1&#x27;</span>,<span class="string">&#x27;python2&#x27;</span>,<span class="number">100</span>]&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1，将name对应的列表追加⼀个元素’xxx’。</span></span><br><span class="line">dic1[<span class="string">&#x27;name&#x27;</span>].append(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 2，将name对应的列表中的 pounds ⾸字⺟⼤写。</span></span><br><span class="line">(<span class="number">1</span>)转成大写后upadte</span><br><span class="line">new_words = dic1[<span class="string">&#x27;name&#x27;</span>][<span class="number">0</span>].capitalize()</span><br><span class="line">dic1.update(&#123;<span class="string">&#x27;name&#x27;</span>:[new_words,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]&#125;)</span><br><span class="line">(<span class="number">2</span>)直接赋值更改</span><br><span class="line">dic1[<span class="string">&#x27;name&#x27;</span>][<span class="number">0</span>] = <span class="string">&#x27;Pounds&#x27;</span></span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 3，51devops 对应的字典加⼀个键值对 ’haoda’,’linux’。</span></span><br><span class="line">dic1[<span class="string">&#x27;51devops&#x27;</span>][<span class="string">&#x27;haoda&#x27;</span>] = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 4，将51devops对应的字典中的szk对应的列表中的python2删除</span></span><br><span class="line">dic1[<span class="string">&#x27;51devops&#x27;</span>][<span class="string">&#x27;szk&#x27;</span>].remove(<span class="string">&#x27;python2&#x27;</span>)</span><br><span class="line">print(dic1)</span><br></pre></td></tr></table></figure>

<h3 id="3-判断以下值那个能做字典的key-？那个能做集合的元素？"><a href="#3-判断以下值那个能做字典的key-？那个能做集合的元素？" class="headerlink" title="3.判断以下值那个能做字典的key ？那个能做集合的元素？"></a>3.判断以下值那个能做字典的key ？那个能做集合的元素？</h3><ul>
<li>1       ✅</li>
<li>-1      ✅</li>
<li>“”      ✅</li>
<li>None    ✅</li>
<li>[1,2]   ❌</li>
<li>(1,)    ✅</li>
<li>{11,22,33,4} ❌</li>
<li>{‘name’:’szk’,’age’:18} ❌</li>
</ul>
<h3 id="4-将字典的键和值分别追加到-key-list-和-value-list-两个列表中，如："><a href="#4-将字典的键和值分别追加到-key-list-和-value-list-两个列表中，如：" class="headerlink" title="4.将字典的键和值分别追加到 key_list 和 value_list 两个列表中，如："></a>4.将字典的键和值分别追加到 key_list 和 value_list 两个列表中，如：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key_list = []</span><br><span class="line">value_list = []</span><br><span class="line">info = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    key_list.append(k)</span><br><span class="line">    value_list.append(v)</span><br><span class="line">print(key_list)</span><br><span class="line">print(value_list)</span><br></pre></td></tr></table></figure>

<h3 id="5-字典dic-‘k1’-“v1”-“k2”-“v2”-“k3”-11-22-33"><a href="#5-字典dic-‘k1’-“v1”-“k2”-“v2”-“k3”-11-22-33" class="headerlink" title="5.字典dic = {‘k1’: “v1”, “k2”: “v2”, “k3”: [11,22,33]}"></a>5.字典dic = {‘k1’: “v1”, “k2”: “v2”, “k3”: [11,22,33]}</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;k3&quot;</span>: [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]&#125;</span><br><span class="line"><span class="comment"># a. 请循环输出所有的key</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic.keys():</span><br><span class="line">    print(k)</span><br><span class="line"><span class="comment"># b. 请循环输出所有的value</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> dic.values():</span><br><span class="line">    print(v)</span><br><span class="line"><span class="comment"># c. 请循环输出所有的key和value</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">    print(k,v)</span><br><span class="line"><span class="comment"># d. 请在字典中添加一个键值对，&quot;k4&quot;: &quot;v4&quot;，输出添加后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k4&#x27;</span>] = <span class="string">&#x27;v4&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># e. 请在修改字典中 &quot;k1&quot; 对应的值为 &quot;szk&quot;，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k1&#x27;</span>] = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># f. 请在k3对应的值中追加一个元素 44，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].append(<span class="number">44</span>)</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># g. 请在k3对应的值的第 1 个位置插入个元素 18，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].insert(<span class="number">0</span>,<span class="number">18</span>)</span><br><span class="line">print(dic)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-请循环打印k2对应的值中的每个元素。"><a href="#6-请循环打印k2对应的值中的每个元素。" class="headerlink" title="6.请循环打印k2对应的值中的每个元素。"></a>6.请循环打印k2对应的值中的每个元素。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k2&#x27;</span>:[(<span class="string">&#x27;pounds&#x27;</span>),(<span class="string">&#x27;szk&#x27;</span>),(<span class="string">&#x27;51devops&#x27;</span>)],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> values <span class="keyword">in</span> info[<span class="string">&#x27;k2&#x27;</span>]:</span><br><span class="line">    print(values)</span><br></pre></td></tr></table></figure>

<h3 id="7-输出商品列表，用户输入序号，显示用户选中的商品"><a href="#7-输出商品列表，用户输入序号，显示用户选中的商品" class="headerlink" title="7.输出商品列表，用户输入序号，显示用户选中的商品"></a>7.输出商品列表，用户输入序号，显示用户选中的商品</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = <span class="literal">True</span></span><br><span class="line"><span class="comment">#购物车</span></span><br><span class="line">bag = []</span><br><span class="line"><span class="comment">#购物车商品总价格</span></span><br><span class="line">bag_price = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> tag:</span><br><span class="line">    <span class="keyword">for</span> inx,value <span class="keyword">in</span> enumerate(goods):</span><br><span class="line">          print(inx,value[<span class="string">&#x27;name&#x27;</span>],value[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line">    choice = input(<span class="string">&quot;请输入商品编号(退出输入Q/q):&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&#x27;q&#x27;</span> <span class="keyword">or</span> choice == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">        print(<span class="string">&quot;您购买的商品列表:%s,一共消费:%s&quot;</span> %(bag,bag_price))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>  choice.isdigit():</span><br><span class="line">        choice = int(choice)</span><br><span class="line">        <span class="keyword">if</span> choice &gt;= <span class="number">0</span> <span class="keyword">and</span> choice &lt; len(goods):</span><br><span class="line">            print(<span class="string">&#x27;商品:%s  价格:%s&#x27;</span> % (goods[choice][<span class="string">&#x27;name&#x27;</span>], goods[choice][<span class="string">&#x27;price&#x27;</span>]))</span><br><span class="line">            bag.append(goods[choice][<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">            bag_price += goods[choice][<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;输入的编号不存在，请重新输入&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;请输入正确的产品编号&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>python_exercise</category>
      </categories>
      <tags>
        <tag>python_exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day03-字符编码</title>
    <url>/2021/03/24/py-day03-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>字符编码</p>
<a id="more"></a>

<h4 id="1-文本编辑器存取文件的原理（nodepad-，pycharm，word）"><a href="#1-文本编辑器存取文件的原理（nodepad-，pycharm，word）" class="headerlink" title="1.文本编辑器存取文件的原理（nodepad++，pycharm，word）"></a>1.文本编辑器存取文件的原理（nodepad++，pycharm，word）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、打开编辑器就打开了启动了一个进程，是在内存中的，所以，用编辑器编写的内容也都是存放与内存中的，断电后数据丢失</span><br><span class="line"></span><br><span class="line">#2、要想永久保存，需要点击保存按钮：编辑器把内存的数据刷到了硬盘上。</span><br><span class="line"></span><br><span class="line">#3、在我们编写一个py文件（没有执行），跟编写其他文件没有任何区别，都只是在编写一堆字符而已。</span><br></pre></td></tr></table></figure>

<h4 id="2-python解释器执行py文件的原理-，例如python-test-py"><a href="#2-python解释器执行py文件的原理-，例如python-test-py" class="headerlink" title="2.python解释器执行py文件的原理 ，例如python test.py"></a>2.python解释器执行py文件的原理 ，例如python test.py</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#第一阶段：python解释器启动，此时就相当于启动了一个文本编辑器</span><br><span class="line"></span><br><span class="line">#第二阶段：python解释器相当于文本编辑器，去打开test.py文件，从硬盘上将test.py的文件内容读入到内存中(小复习：pyhon的解释性，决定了解释器只关心文件内容，不关心文件后缀名)</span><br><span class="line">此时，python解释器会读取test.py的第一行内容，#coding:utf-8，来决定以什么编码格式来读入内存，这一行就是来设定python解释器这个软件的编码使用的编码格式这个编码，</span><br><span class="line">可以用sys.getdefaultencoding()查看，如果不在python文件指定头信息＃-*-coding:utf-8-*-,那就使用默认的</span><br><span class="line"></span><br><span class="line">python2中默认使用ascii，python3中默认使用utf-8 </span><br><span class="line"></span><br><span class="line">#第三阶段：python解释器解释执行刚刚加载到内存中test.py的代码( ps：在该阶段，即真正执行代码时，才会识别python的语法，执行文件内代码，当执行到name&#x3D;&quot;egon&quot;时,会开辟内存空间存放字符串&quot;egon&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="3-总结python解释器与文件本编辑的异同"><a href="#3-总结python解释器与文件本编辑的异同" class="headerlink" title="3.总结python解释器与文件本编辑的异同"></a>3.总结python解释器与文件本编辑的异同</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、相同点：python解释器是解释执行文件内容的，因而python解释器具备读py文件的功能，这一点与文本编辑器一样</span><br><span class="line"></span><br><span class="line">#2、不同点：文本编辑器将文件内容读入内存后，是为了显示或者编辑，根本不去理会python的语法，而python解释器将文件内容读入内存后，可不是为了给你瞅一眼python代码写的啥，而是为了执行python代码、会识别python语法。</span><br></pre></td></tr></table></figure>



<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符--------（翻译过程）-------&gt;数字 </span><br><span class="line">这个过程实际就是一个字符如何对应一个特定数字的标准，这个标准称之为字符编码</span><br></pre></td></tr></table></figure>

<h4 id="1-以下两个场景下涉及到字符编码的问题："><a href="#1-以下两个场景下涉及到字符编码的问题：" class="headerlink" title="1.以下两个场景下涉及到字符编码的问题："></a>1.以下两个场景下涉及到字符编码的问题：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、一个python文件中的内容是由一堆字符组成的，存取均涉及到字符编码问题（python文件并未执行，前两个阶段均属于该范畴）</span><br><span class="line"></span><br><span class="line">#2、python中的数据类型字符串是由一串字符组成的（python文件执行时，即第三个阶段）</span><br></pre></td></tr></table></figure>


<h4 id="2-字符编码的发展史"><a href="#2-字符编码的发展史" class="headerlink" title="2.字符编码的发展史"></a>2.字符编码的发展史</h4><p>Unicode（内存中统一使用unicode）统一用2Bytes代表一个字符<br>UTF-8 对英文字符只用1Bytes表示，对中文字符用3Bytes</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#阶段一：现代计算机起源于美国，最早诞生也是基于英文考虑的ASCII</span><br><span class="line">ASCII:8位二进制数&#x3D;1个Bytes代表一个字符（英文字符&#x2F;键盘上的所有其他字符），1Bytes&#x3D;8bit，8bit可以表示0-2**8-1种变化，即可以表示256个字符</span><br><span class="line"></span><br><span class="line">ASCII最初只用了后七位，127个数字，已经完全能够代表键盘上所有的字符了（英文字符&#x2F;键盘的所有其他字符），后来为了将拉丁文也编码进了ASCII表，将最高位也占用了</span><br><span class="line"></span><br><span class="line">#阶段二:为了满足中文和英文，中国人定制了GBK</span><br><span class="line">GBK:2Bytes代表一个中文字符，1Bytes表示一个英文字符</span><br><span class="line">为了满足其他国家，各个国家纷纷定制了自己的编码</span><br><span class="line">日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里</span><br><span class="line"></span><br><span class="line">#阶段三：各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。如何解决这个问题呢？？？</span><br><span class="line"></span><br><span class="line">#！！！！！！！！！！！！非常重要！！！！！！！！！！！！</span><br><span class="line">说白了乱码问题的本质就是不统一，如果我们能统一全世界，规定全世界只能使用一种文字符号，然后统一使用一种编码，那么乱码问题将不复存在，</span><br><span class="line">ps：就像当年秦始皇统一中国一样，书同文车同轨，所有的麻烦事全部解决</span><br><span class="line">很明显，上述的假设是不可能成立的。很多地方或老的系统、应用软件仍会采用各种各样的编码，这是历史遗留问题。于是我们必须找出一种解决方案或者说编码方案，需要同时满足：</span><br><span class="line">#1、能够兼容万国字符</span><br><span class="line">#2、与全世界所有的字符编码都有映射关系，这样就可以转换成任意国家的字符编码</span><br><span class="line"></span><br><span class="line">这就是unicode（定长），　统一用2Bytes代表一个字符，　虽然2**16-1&#x3D;65535，但unicode却可以存放100w+个字符，因为unicode存放了与其他编码的映射关系，准确地说unicode并不是一种严格意义上的字符编码表，下载pdf来查看unicode的详情：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1dEV3RYp</span><br><span class="line"></span><br><span class="line">很明显对于通篇都是英文的文本来说，unicode的式无疑是多了一倍的存储空间（二进制最终都是以电或者磁的方式存储到存储介质中的）</span><br><span class="line"></span><br><span class="line">于是产生了UTF-8（可变长，全称Unicode Transformation Format），对英文字符只用1Bytes表示，对中文字符用3Bytes，对其他生僻字用更多的Bytes去存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#总结：内存中统一采用unicode，浪费空间来换取可以转换成任意编码（不乱码），硬盘可以采用各种编码，如utf-8，保证存放于硬盘或者基于网络传输的数据量很小，提高传输效率与稳定性。</span><br><span class="line"></span><br><span class="line">！！！重点！！！</span><br></pre></td></tr></table></figure>


<img src="/2021/03/24/py-day03-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2.png" class title="编码解码">
<h4 id="3-结论"><a href="#3-结论" class="headerlink" title="3.结论"></a>3.结论</h4><ol>
<li><p>内存固定使用Unicode，我们可以改变的是存入硬盘的编码格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">英文+汉字 -&gt; Unicode -&gt; gbk</span><br><span class="line">英文+日文 -&gt; unicode -&gt; shift-jis</span><br><span class="line">万国软件  -&gt; Unicode -&gt; utf-8</span><br></pre></td></tr></table></figure>
</li>
<li><p>文本文件存取乱码问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">存乱了：编码格式应该设置成支持文件内容字符串的格式</span><br><span class="line">取乱了: 解决方法是，文件是以什么编码格式存硬盘的，就以什么格式取</span><br></pre></td></tr></table></figure></li>
<li><p>解释器默认读文件的编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3： 默认读文件的编码utf-8</span><br><span class="line">python2： ASCII</span><br><span class="line"></span><br><span class="line">指定文件头，修改默认的编码：</span><br><span class="line"># coding:gbk</span><br></pre></td></tr></table></figure></li>
<li><p>保证python程序前两个阶段不乱码的核心法则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定文件头</span><br><span class="line"># coding:文件当初存入硬盘时的编码格式</span><br></pre></td></tr></table></figure></li>
<li><p>执行阶段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 的str类型默认直接存成Unicode格式，无论如何都不会乱码</span><br><span class="line">保证python2 的str类型不乱码</span><br><span class="line">    x &#x3D; u&#39;上&#39;  将字符串存成Unicode</span><br></pre></td></tr></table></figure>
</li>
<li><p>python2有两种类型字符串：str unicode<br>x = ‘dfs’<br>x = u’dfsdf’</p>
</li>
<li><p>编码解码</p>
<img src="/2021/03/24/py-day03-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81.png" class title="编码解码">
<p>unicode—–&gt;encode——–&gt;utf-8<br>utf-8——–&gt;decode———-&gt;unicode</p>
</li>
</ol>
<h4 id="4-使用如何解决乱码问题"><a href="#4-使用如何解决乱码问题" class="headerlink" title="4.使用如何解决乱码问题"></a>4.使用如何解决乱码问题</h4><ol>
<li><p>如何解决python2乱码问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前两个阶段: 1.读文件  文件头  # coding: utf-8  与文件存储的编码格式一致</span><br><span class="line">          2.加载到内存 字符串 x &#x3D; u&#39;sad&#39;</span><br></pre></td></tr></table></figure></li>
<li><p>如何解决python3乱码问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.读文件  文件头  # coding: utf-8  与文件存储的编码格式一致</span><br></pre></td></tr></table></figure>
</li>
<li><p>编码解码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">x&#x3D;&#39;上&#39; # str类型被存成unicode</span><br><span class="line">print(x) --&gt; 内存地址 ，应该是数字--&gt;print功能中间做了转换(unicode转成了字符)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="需要记住"><a href="#需要记住" class="headerlink" title="需要记住"></a>需要记住</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.内存的编码使用unicode，不代表内存中全都是unicode，</span><br><span class="line">2.字符类型</span><br><span class="line">python2 字符串类型 str 和 unicode</span><br><span class="line">当python解释器执行到产生字符串的代码时（例如x&#x3D;&#39;上&#39;），会申请新的内存地址，然后将&#39;上&#39;编码成文件开头指定的编码格式</span><br><span class="line">如果不指定表头，默认以ASCII码存，存汉字则会报错。</span><br><span class="line">##########</span><br><span class="line">所以python2 一般以u(&#39;xxx&#39;) unicode方式存</span><br><span class="line">##########</span><br><span class="line"></span><br><span class="line">python3 中也有两种字符串类型str和bytes</span><br><span class="line">str是unicode方式存</span><br><span class="line">#coding:gbk</span><br><span class="line">x&#x3D;&#39;上&#39; #当程序执行时，无需加u，&#39;上&#39;也会被以unicode形式保存新的内存空间中,</span><br><span class="line">print(type(x)) #&lt;class &#39;str&#39;&gt;</span><br><span class="line"></span><br><span class="line">#x可以直接encode成任意编码格式</span><br><span class="line">print(x.encode(&#39;gbk&#39;)) #b&#39;\xc9\xcf&#39;</span><br><span class="line">print(type(x.encode(&#39;gbk&#39;))) #&lt;class &#39;bytes&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>很重要的一点是：看到python3中x.encode(‘gbk’) 的结果\xc9\xcf正是python2中的str类型的值,而在python3是bytes类型，在python2中则是str类型</p>
<p>pycharm的终端编码格式是utf-8</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-drf-02</title>
    <url>/2020/12/28/py-drf-02/</url>
    <content><![CDATA[<p>DRF-day02</p>
<a id="more"></a>
<h2 id="1-复习"><a href="#1-复习" class="headerlink" title="1. 复习"></a>1. 复习</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.Serializer类，需要序列化什么，必须要写一个继承，想序列化什么字段，就在里面写字段，source的作用（很多字段类）</span></span><br><span class="line"><span class="comment"># 2.序列化queryset(列表)对象和真正的对象，many=True的作用，instance=要序列化的对象</span></span><br><span class="line"><span class="comment"># 3.反序列化，instance要序列化的对象，data=request.data</span></span><br><span class="line"><span class="comment"># 4.字段验证，序列化类中，给字段加属性，局部和全局钩子函数，字段属性的validators=[check_author]</span></span><br><span class="line"><span class="comment"># 5.当在视图中调用序列化对象.is_valid() boo_ser.is_valid(raise_exception=True)，只要验证不通过，直接抛异常</span></span><br><span class="line"><span class="comment"># 6.修改保存-&gt;调用序列化对象.save()，重写Serializer类的update方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># instance是book这个对象</span></span><br><span class="line">        <span class="comment"># validated_data是校验后的数据</span></span><br><span class="line">        instance.name = validated_data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        instance.price = validated_data.get(<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line">        instance.author = validated_data.get(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">        instance.publish = validated_data.get(<span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">        instance.save()  <span class="comment"># book.save() django的orm提供的</span></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"><span class="comment"># 7.序列化得到字典，序列化对象.data</span></span><br><span class="line"><span class="comment"># 8.自定义了Response对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myresponse</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.status = <span class="number">100</span></span><br><span class="line">        self.msg = <span class="string">&#x27;成功&#x27;</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dict</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__dict__</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    res = Myresponse()</span><br><span class="line">    res.status = <span class="number">101</span></span><br><span class="line">    res.msg = <span class="string">&#x27;失败&#x27;</span></span><br><span class="line">    res.data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lqz&#x27;</span>&#125;</span><br><span class="line">    print(res.get_dict)</span><br><span class="line"><span class="comment"># 9.反序列化的新增 序列化类(data=request.data),序列化对象.save(),如果只传了data，当调用 序列化对象.save()，会触发序列化类的craete方法执行;当传了instance和data，当调用 序列化对象.save()，会触发序列化类的update方法执行;当</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.重写create方法(可以很复杂)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        instance = Book.objects.create(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"><span class="comment"># 11.ModelSerializer 跟model模型对应</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_price</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    publish=seriliazers.CharField(source=<span class="string">&#x27;publish.name&#x27;</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book  <span class="comment"># 对应上model.py中的模型</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        <span class="comment"># fields = (&#x27;name&#x27;,&#x27;price&#x27;,&#x27;publish&#x27;) # 只序列化指定的字段</span></span><br><span class="line">        <span class="comment"># exclude = (&#x27;name&#x27;,) #跟fields不能都写，写谁，就表示排除谁</span></span><br><span class="line">        <span class="comment"># read_only_fields = (&#x27;id&#x27;, )    #</span></span><br><span class="line">        <span class="comment"># write_only_fields = (&#x27;price&#x27;)  # 弃用了，extra_kwargs</span></span><br><span class="line">        extra_kwargs = &#123; <span class="comment"># 类似于这种形式  name = serializers.CharField(max_length=16,min_length=4)</span></span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">False</span>,max_length:<span class="number">16</span>,min_length:<span class="number">4</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># 12 如果在ModelSerializer中写一个局部钩子或者全局钩子，如何写？</span></span><br><span class="line">     - 跟之前一模一样</span><br><span class="line"><span class="comment"># 13 many=True 能够序列化多条的原因---&gt; __new__是在__init__之前执行的，造出一个空对象</span></span><br><span class="line"><span class="comment"># 14, 接口：统一子类的行为</span></span><br></pre></td></tr></table></figure>

<h2 id="2-今日内容"><a href="#2-今日内容" class="headerlink" title="2.今日内容"></a>2.今日内容</h2><h3 id="1-请求和响应"><a href="#1-请求和响应" class="headerlink" title="1. 请求和响应"></a>1. 请求和响应</h3><h4 id="1-1-请求"><a href="#1-1-请求" class="headerlink" title="1.1. 请求"></a>1.1. 请求</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from rest_framework.request import Request </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, request, parsers=None, authenticators=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 negotiator=None, parser_context=None</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> isinstance(request, HttpRequest), (</span><br><span class="line">            <span class="string">&#x27;The `request` argument must be an instance of &#x27;</span></span><br><span class="line">            <span class="string">&#x27;`django.http.HttpRequest`, not `&#123;&#125;.&#123;&#125;`.&#x27;</span></span><br><span class="line">            .format(request.__class__.__module__, request.__class__.__name__)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 二次封装request，将原生作为drf request对象的_request 属性</span></span><br><span class="line">        self._request = request</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self._request, item)</span><br><span class="line"><span class="comment"># 请求对象.data: 前端以三种编码方式传入的数据，都可以取出来</span></span><br><span class="line"><span class="comment"># request.query_params与Django标准的request.GET相同，只是更换了更正确的名称而已。</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-响应"><a href="#1-2-响应" class="headerlink" title="1.2. 响应"></a>1.2. 响应</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># from rest_framework.response import Response</span><br><span class="line">def __init__(self, data&#x3D;None, status&#x3D;None,</span><br><span class="line">                template_name&#x3D;None, headers&#x3D;None,</span><br><span class="line">                exception&#x3D;False, content_type&#x3D;None):</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-xadmin</title>
    <url>/2020/11/20/py-xadmin/</url>
    <content><![CDATA[<p>Django-xadmin</p>
<a id="more"></a>

<div id="title">Django-xadmin的介绍</div>

<blockquote>
<p><code>Django</code>是<code>python</code>的重量级web框架,写得少,做得多,非常适合后端开发,它很大的一个亮点是,自带后台管理模块,但它自带的后台管理有点丑,而<code>Xadmin</code>是基于<code>bootstrap</code>开发的一套后台管理框架,界面非常美观,只需几步就可以替换自带的<code>Django_admin</code></p>
</blockquote>
<div id="title">具体的安装步骤</div>

<ol>
<li>xadmin在python2.x时代的安装方法</li>
</ol>
<p>在python2.x时代，安装xadmin是通过如下命令</p>
<blockquote>
<p>pip install xadmin </p>
</blockquote>
<p>2.<code>xadmin</code>在<code>python3.6.x</code>时代的安装方法</p>
<p><strong>需要安装如下的包</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install django-<span class="keyword">import</span>-export</span><br><span class="line">pip3 install django-reversion</span><br><span class="line">pip3 install django-formtools==<span class="number">2.1</span></span><br><span class="line">pip3 install future</span><br><span class="line">pip3 install httplib2</span><br><span class="line">pip3 install six</span><br><span class="line">pip3 install django-crispy-forms</span><br></pre></td></tr></table></figure>

<p>2.1 下载<code>xadmin</code></p>
<blockquote>
<p><a href="https://github.com/sshwsfc/xadmin">https://github.com/sshwsfc/xadmin</a></p>
</blockquote>
<p>2.2、解压缩，得到<code>xadmin</code>文件夹，复制到项目的<code>extra_apps</code>,解压缩，得到<code>xadmin</code>文件夹, 如下图所示：</p>
<p><img src="https://i.loli.net/2019/06/20/5d0b41759655b82871.jpg" alt="xadmin.jpg"></p>
<p>2.3、在django中的根目录下创建<code>Python Package</code>，命名为<code>extra_apps</code>（如果不存在此文件夹则创建, 然后 鼠标右键<code>extra_app</code> 随后 <code>mark as sources root</code>）<br>（<code>Python Package</code>是带<code>init</code>文件的，跟普通<code>Package</code>不同）</p>
<p>创建完<code>extra_apps</code>，需要在<code>settings</code>中配置一下<code>extra_apps</code>。设置为可搜索的路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">&#x27;extra_apps&#x27;</span>)) <span class="comment"># 把extra_apps文件夹添加到搜索目录中</span></span><br></pre></td></tr></table></figure>

<p>2.4、把<code>xadmin</code>文件夹复制到<code>extra_apps</code></p>
<p>2.5、<code>xadmin</code>的配置</p>
<p><strong>配置到 INSTALLED_APPS</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 显示中文</span></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"><span class="comment"># LANGUAGE_CODE = &#x27;en-us&#x27;</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># TIME_ZONE = &#x27;UTC&#x27;</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;xadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;crispy_forms&#x27;</span>, <span class="comment"># 注意crispy_forms之间是下划线隔开，不是横线</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>2.6、修改<code>urls.py</code>的<code>admin</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># url(&#x27;admin/&#x27;, admin.site.urls),</span></span><br><span class="line">    url(<span class="string">r&#x27;^xadmin/&#x27;</span>, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>2.7、迁移文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure>

<p><strong>迁移完成后，我们看到数据库多了几张表</strong></p>
<p><img src="https://i.loli.net/2019/06/20/5d0b43084942d52028.jpg" alt="xadmintable.jpg"></p>
<p>2.8、<code>pycharm</code>创建<code>superuser</code> 用户</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure>

<p>至此完成。</p>
<p>如果报错，请先把原先旧的<code>app</code>里面<code>admin.py</code>里面的注册代码去掉，再试试</p>
<p>运行一下项目，访问</p>
<blockquote>
<p><a href="http://127.0.0.1:8000/xadmin/">http://127.0.0.1:8000/xadmin/</a></p>
</blockquote>
<h4 id="xadmin的使用"><a href="#xadmin的使用" class="headerlink" title="xadmin的使用"></a><div id="title">xadmin的使用</div></h4><p>1.需要在<code>app</code>中创建<code>adminx.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> repository <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> xadmin <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfileAdmin</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="comment">### 显示的字段名称</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span> ,<span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>,<span class="string">&#x27;mobile&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 搜索时可输入的字段内容</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 点击id可进入详细界面进行编辑（默认的）</span></span><br><span class="line">    list_display_links = (<span class="string">&#x27;id&#x27;</span>,)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 可编辑的列名</span></span><br><span class="line">    list_editable = [<span class="string">&#x27;name&#x27;</span> ,<span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>,<span class="string">&#x27;mobile&#x27;</span>]</span><br><span class="line">    <span class="comment"># list_filter = [&#x27;name&#x27; ,&#x27;email&#x27;,&#x27;phone&#x27;,&#x27;mobile&#x27;]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每页显示多少条</span></span><br><span class="line">    list_per_page = <span class="number">20</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#根据id排序 </span></span><br><span class="line">    ordering = (<span class="string">&#x27;id&#x27;</span>,)　</span><br><span class="line">    　</span><br><span class="line">    <span class="comment">#设置只读字段　</span></span><br><span class="line">    readonly_fields = (<span class="string">&#x27;user_email&#x27;</span>,) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#显示本条数据的所有信息</span></span><br><span class="line">    show_detail_fields = [<span class="string">&#x27;asset_name&#x27;</span>] </span><br><span class="line"></span><br><span class="line">xadmin.site.register(models.UserProfile,UserProfileAdmin)</span><br></pre></td></tr></table></figure>


<p>3.数据导出<br>如果想要导出<code>Excel</code>数据，需要安装<code>xlwt</code>。</p>
<p>默认情况下，<code>xadmin</code>会提供<code>Excel</code>，<code>CSV</code>,<code>XML</code>，<code>json</code>四种格式的数据导出，可以通过设置<code>OptionClass</code>的<code>list_export</code>属性来指定使用哪些导出格式（四种格式分别用<code>xls</code>，<code>csv</code>，<code>xml</code>，<code>json</code>表示）或是将<code>list_export</code>设置为<code>None</code>来禁用数据导出功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_export = (<span class="string">&#x27;xls&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;json&#x27;</span>)</span><br><span class="line">list_export_fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;title&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p>4.设置全局的配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局修改，固定写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GlobalSettings</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="comment"># 修改title</span></span><br><span class="line">    site_title = <span class="string">&#x27;xxx后台管理界面&#x27;</span></span><br><span class="line">    <span class="comment"># 修改footer</span></span><br><span class="line">    site_footer = <span class="string">&#x27;xxx的公司&#x27;</span></span><br><span class="line">    <span class="comment"># 收起菜单</span></span><br><span class="line">    menu_style = <span class="string">&#x27;accordion&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置 models图标</span></span><br><span class="line">    <span class="comment"># https://v3.bootcss.com/components/</span></span><br><span class="line">    <span class="comment"># http://www.yeahzan.com/fa/facss.html</span></span><br><span class="line">    global_search_models = [models.Disk, models.Server]</span><br><span class="line">    global_models_icon = &#123;</span><br><span class="line">        <span class="comment"># Server: &quot;glyphicon glyphicon-tree-conifer&quot;, Pool: &quot;fa fa-cloud&quot;</span></span><br><span class="line">        models.Server: <span class="string">&quot;fa fa-linux&quot;</span>, models.Disk: <span class="string">&quot;fa fa-cloud&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将title和footer信息进行注册</span></span><br><span class="line">xadmin.site.register(views.CommAdminView,GlobalSettings)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>图表显示</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_charts = &#123;</span><br><span class="line">        <span class="string">&quot;host_service_type_counts&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;部门机器使用情况&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;x-field&#x27;</span>: <span class="string">&quot;business_unit&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;y-field&#x27;</span>: (<span class="string">&quot;business_unit&quot;</span>),</span><br><span class="line">            <span class="string">&#x27;option&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;series&quot;</span>: &#123;<span class="string">&quot;bars&quot;</span>: &#123;<span class="string">&quot;align&quot;</span>: <span class="string">&quot;center&quot;</span>, <span class="string">&quot;barWidth&quot;</span>: <span class="number">0.8</span>, <span class="string">&quot;show&quot;</span>: <span class="literal">True</span>&#125;&#125;,</span><br><span class="line">                <span class="string">&quot;xaxis&quot;</span>: &#123;<span class="string">&quot;aggregate&quot;</span>: <span class="string">&quot;count&quot;</span>, <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;categories&quot;</span>&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;host_idc_counts&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;机房统计&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;x-field&#x27;</span>: <span class="string">&quot;idc&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;y-field&#x27;</span>: (<span class="string">&quot;idc&quot;</span>,),</span><br><span class="line">            <span class="string">&#x27;option&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;series&quot;</span>: &#123;<span class="string">&quot;bars&quot;</span>: &#123;<span class="string">&quot;align&quot;</span>: <span class="string">&quot;center&quot;</span>, <span class="string">&quot;barWidth&quot;</span>: <span class="number">0.3</span>, <span class="string">&quot;show&quot;</span>: <span class="literal">True</span>&#125;&#125;,</span><br><span class="line">                <span class="string">&quot;xaxis&quot;</span>: &#123;<span class="string">&quot;aggregate&quot;</span>: <span class="string">&quot;count&quot;</span>, <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;categories&quot;</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>注册模型与对应的管理类</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xadmin.site.register(models.Disk, DiskAdmin)</span><br><span class="line">xadmin.site.register(models.Server, ServerAdmin)</span><br><span class="line">xadmin.site.register(models.IDC, IDCAdmin)</span><br><span class="line">xadmin.site.register(models.UserProfile, UserProfileAdmin)</span><br><span class="line">xadmin.site.register(models.UserGroup, UserGroupAdmin)</span><br></pre></td></tr></table></figure>



<p>​    </p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm使用</title>
    <url>/2020/10/25/pycharm%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Pycharm使用</p>
<a id="more"></a>

<p>Evernote Export    body, td { font-family: 微软雅黑; font-size: 10pt; }  </p>
<p>Pycharm基本使用</p>
<ol start="2">
<li>Pycharm的基本使用<ul>
<li>在Pycharm下为你的Python项目配置Python解释器<ol>
<li>Project:当前项目名&gt;Project Interpreter&gt;add Local</li>
</ol>
</li>
<li>在Pycharm下创建Python文件、Python模块<ol>
<li>File&gt;New&gt;Python File</li>
<li>File&gt;New&gt;Python Package</li>
</ol>
</li>
<li>使用Pycharm安装Python第三方模块<ol>
<li>Project:当前项目名&gt;Project Interpreter&gt;点击右侧绿色小加号</li>
</ol>
</li>
<li>Pycharm基本设置，例如不使用tab、tab=4空格、字体、字体颜色、主题、脚本头设置、显示行号等。如何导出和导入自定义设置。<ol>
<li>不使用tab、tab=4空格：Editor&gt;Code Style&gt;Python</li>
<li>字体、字体颜色：Edit&gt;Colors &amp; Fonts&gt;Python</li>
<li>关闭自动更新：Appearance &amp; Behavior&gt;System Settings&gt;Updates</li>
<li>脚本头设置：Edit&gt;File and Code Templates&gt;Python Script 注：其他类似</li>
<li>显示行号：Edit&gt;General&gt;Appearance&gt;Show line numbers 注：2016.2默认显示行号</li>
<li>右侧竖线是PEP8的代码规范，提示一行不要超过120个字符</li>
<li>导出、导入你自定义的配置： File&gt;Export Settings、Import Settings</li>
</ol>
</li>
<li>常用快捷键，例如复制当前行、删除当前行、批量注释、缩进、查找和替换。<ol>
<li>常用快捷键的查询和配置：Keymap<ol>
<li>Ctrl + D：复制当前行</li>
<li>Ctrl + E：删除当前行</li>
<li>Shift + Enter：快速换行</li>
<li>Ctrl + /：快速注释（选中多行后可以批量注释）</li>
<li>Tab：缩进当前行（选中多行后可以批量缩进）</li>
<li>Shift + Tab：取消缩进（选中多行后可以批量取消缩进）</li>
<li>Ctrl + F：查找</li>
<li>Ctrl + H：替换</li>
</ol>
</li>
</ol>
</li>
<li>Pycharm安装插件，例如Markdown support、数据库支持插件等。<ol>
<li>Plugins&gt;Browse repositories（下方三个按钮中间那个）&gt;搜索‘markdown support’&gt;install</li>
<li>右上角View有三个选项可选，一般我们都用中间那个左侧编写，右侧实时预览</li>
</ol>
</li>
<li>Git配置？<ol>
<li>需要本地安装好Git</li>
<li>Version Control&gt;Git</li>
<li>配置了Git等版本控制系统之后，可以很方便的diff查看文件的不用</li>
</ol>
</li>
<li>常用操作指南。例如复制文件路径、在文件管理器中打开、快速定位、查看模块结构视图、tab批量换space、TODO的使用、Debug的使用。<ol>
<li>复制文件路径：左侧文件列表右键选中的文件&gt;Copy Path</li>
<li>在文件管理器中打开：右键选中的文件&gt;往下找到Show In Explorer</li>
<li>快速定位：Ctrl + 某些内建模块之后，点击在源文件中展开</li>
<li>查看结构：IDE左侧边栏Structure 查看当前项目的结构</li>
<li>tab批量换space：Edit&gt;Convert Indents</li>
<li>TODO的使用：# TODO 要记录的事情</li>
<li>Debug设置断点，直接点击行号与代码之间的空白处即可设置断点（视频里忘了说）</li>
<li>Tab页上右键&gt;Move Right（Down），把当前Tab页移到窗口右边（下边），方便对比</li>
<li>文件中右键&gt;Local History能够查看文件修改前后的对比</li>
<li>IDE右下角能看到一些有用的信息，光标当前在第几行的第几个字符、当前回车换行、当前编码类型、当前Git分支</li>
<li>IDE右侧边栏&gt;Database</li>
</ol>
</li>
<li>如何去掉烦人的波浪线？PEP8又是什么？<ol>
<li>单独一行的注释：#+1空格+注释内容</li>
<li>代码后跟着的注释：2空格+#+1空格+注释内容</li>
</ol>
</li>
<li>SSH Terminal： Default encoding:UTF-8<ol>
<li>Settings&gt;Tools&gt;SSH Terminal&gt;最后一行Default encoding:选择UTF-82.  善用搜索！善用搜索！善用搜索！</li>
</ol>
<ul>
<li>遇到不懂问题，先自己搜索。这样才记得更牢！2.  推荐使用sogou英文搜索<a href="http://english.sogou.com/">http://english.sogou.com/</a></li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>socket网络编程</title>
    <url>/2021/04/15/socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>socket 网络编程</p>
<a id="more"></a>
<hr>
<h3 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h3><p><strong>网络号</strong>: （ip与掩码位运算）标明是否在同一个局域网<br><strong>ARP协议</strong>: 二层交换机工作所在层级，IP –&gt; MAC 地址的映射关系<br>三层为路由协议（公网）<br>网卡（工作在2层）<br><strong>帧</strong>：头16字节(源地址mac + 目标地址mac) + 数据部分 1500MTU 一次最多接受1500字节<br><strong>包</strong>: 源ip + 目的ip<br><strong>段</strong>: 源端口+ 目的端口</p>
<ul>
<li>交换机只有两种情况广播:<ul>
<li>目标mac FF.FF.FF.FF</li>
<li>目标mac不在mac地址表中</li>
</ul>
</li>
</ul>
<p><strong>socket五元组</strong><br>源ip 目的ip 源端口 目的端口 协议</p>
<h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>tcp/udp 基于端口<br>端口范围 0-65535  0-1023 系统保留</p>
<p>基于tcp协议通信: 必须建立一个双向通信的链接<br>C&lt;————-&gt;S<br>三次握手建立 双向通路</p>
<h5 id="三次握手建立连接-四次挥手"><a href="#三次握手建立连接-四次挥手" class="headerlink" title="三次握手建立连接 四次挥手"></a><strong>三次握手建立连接</strong> <strong>四次挥手</strong></h5><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlly1gjrnmxyuwrj30uz0enab6.jpg" alt="120-TCP三次握手和四次挥手-三次握手静态.jpg?x-oss-process=style/watermark"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一次握手  服务器进入LISTEN状态，客户端发送SYN进入SYN_SENT状态</span><br><span class="line"></span><br><span class="line">第二次握手 服务端接收到SYN，进入SYN_RCVD状态，同时发送ACK&#x2F;SYN</span><br><span class="line"></span><br><span class="line">第三次握手 客户端收到SYN&#x2F;ACK，回复ACK，客户端进入ESTABLISHED状态，服务端进入ESTABLISHED状态</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlly1gjrnn2jht0j30ry0f73zx.jpg" alt="120-TCP三次握手和四次挥手-四次挥手静态.png?x-oss-process=style/watermark"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一次挥手  客户端发送FIN&#x3D;1，此时，客户端进入FIN_WAIT_1状态，表示没有数据再发送给服务端了</span><br><span class="line"></span><br><span class="line">第二次挥手  服务端接收到FIN请求，回复ACK，进入CLOSE_WAIT状态，客户端进入FIN-WAIT-2状态</span><br><span class="line"></span><br><span class="line">第三次挥手  服务端向客户端发送FIN ，同时服务端进入 LAST_ACK 状态。</span><br><span class="line"></span><br><span class="line">第四次挥手 客户端收到服务端发送的 FIN ，向服务端发送 ACK 报文段，然后客户端进入 TIME_WAIT 状态</span><br><span class="line"></span><br><span class="line">务端收到客户端的 ACK 报文段以后，就关闭连接。此时，客户端等待 2MSL（指一个片段在网络中最大的存活时间）后依然没有收到回复，则说明服务端已经正常关闭，这样客户端就可以关闭连接了。进入CLOSED状态</span><br></pre></td></tr></table></figure>



<ul>
<li>tcp 为什么可靠？<br>是因为每发一个数据，服务端回应信息说收到，客户端才会把自己的数据清理掉(内存)，才算完成；一定时间之内 服务端没回应信息，认为这个数据包丢了，客户端会重新发一份给服务端，保证服务端必须收到数据。<br>双向通路只是用来发数据的。</li>
</ul>
<p>一般 服务端会 主动发起断开连接，以支持其他客户端连接请求。</p>
<p><strong>服务端处于timewait状态，意味着正在经历高并发。</strong></p>
<ul>
<li>udp为什么不可靠？<br>速度优先 选择udp协议<br>不需要建立双向连接，udp传输数据不需要对方确认，发过去就清理掉了。<br>qq udp通信</li>
</ul>
<h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>可以自定义协议 ==&gt; 头部+数据部分<br>自定义协议需要注意的问题:</p>
<ol>
<li>两大组成部分=头部+数据部门<ul>
<li>头部：放对数据的描述信息<ul>
<li>比如:数据要发给谁，数据的类型，数据的长度</li>
</ul>
</li>
<li>数据部分: 想要发的数据</li>
</ul>
</li>
<li>头部长度必须固定<br> 因为接收端要通过头部活动区所接收的数据的详细信息</li>
</ol>
<p>http https  ftp</p>
<h3 id="socket介绍"><a href="#socket介绍" class="headerlink" title="socket介绍"></a>socket介绍</h3><p>传输层以下归套接字socket管理</p>
<p>我们知道两个进程如果需要进行通讯最基本的一个前提能能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道IP层的ip地址可以唯一标示主机，而TCP层协议和端口号可以唯一标示主机的一个进程，这样我们可以利用ip地址＋协议＋端口号唯一标示网络中的一个进程。</p>
<p>能够唯一标示网络中的进程后，它们就可以利用socket进行通信了，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。</p>
<blockquote>
<p>总结：套接字是什么，位于应用层与传输层之间，用来把传输层以下的协议封装好，提供好简单的接口；但凡编写基于网络通信的cs架构的软件，基于套接字去写就可以了。遵循套接字简单的接口规范，写出来的程序自然是遵循tcp/udp协议的了。</p>
</blockquote>
<blockquote>
<p><strong>也有人将socket说成ip+port，ip是用来标识互联网中的一台主机的位置，而port是用来标识这台机器上的一个应用程序，ip地址是配置到网卡上的，而port是应用程序开启的，ip与port的绑定就标识了互联网中独一无二的一个应用程序;而程序的pid是同一台机器上不同进程或者线程的标识</strong></p>
</blockquote>


<p>socket起源于UNIX，在Unix一切皆文件哲学的思想下，socket是一种”打开—读/写—关闭”模式的实现，服务器和客户端各自维护一个”文件”，在建立连接打开后，可以向自己文件写入内容供对方读取或者读取对方内容，通讯结束时关闭文件。</p>
<ul>
<li>套接字工作流程

</li>
</ul>
<p>套接字之所以简单是因为：客户端只需要调connect接口，服务端调accept接口；客户端干了什么：发syn，服务端回ack+syn，客户端再回ack； connect和accept接口把三次握手细节全部封装好了。</p>
<p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入socket模块</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 第一个socket是模块名，第二个socket是类名</span></span><br><span class="line"><span class="comment">#类实例化得到对象，得到一个socket对象</span></span><br><span class="line"><span class="comment"># server=socket.socket(family=socket.AF_INET,type=socket.SOCK_STREAM)</span></span><br><span class="line"><span class="comment">#不写默认就是他</span></span><br><span class="line">server=socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定地址跟端口  ,传一个元组，监听的地址，监听的端口</span></span><br><span class="line">server.bind((<span class="string">&#x27;192.168.11.28&#x27;</span>,<span class="number">8008</span>))</span><br><span class="line"><span class="comment">#监听</span></span><br><span class="line"><span class="comment"># 半连接池是5，可以缓冲5个</span></span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#等待用户连接(看源码，有两个返回结果)</span></span><br><span class="line"><span class="comment"># sock是连接对象，以后这个服务端和客户端交互，使用这个对象交互</span></span><br><span class="line"><span class="comment"># addr是客户端地址（ip和端口）</span></span><br><span class="line">sock,addr=server.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收客户端发给我的消息</span></span><br><span class="line">data=sock.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#服务端给客户端发送消息（必须是byte格式）</span></span><br><span class="line">sock.send(<span class="string">b&#x27;helloworld&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 关闭连接对象</span></span><br><span class="line">sock.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭服务</span></span><br><span class="line">server.close()</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="comment"># 流式协议 =&gt; tcp协议</span></span><br><span class="line"></span><br><span class="line">phone.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = input(<span class="string">&#x27;输入要发送的消息&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(msg) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    phone.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data = phone.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">phone.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h4 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h4><p>TCP独有（流式协议）<br><strong>原因</strong>:<br>tcp是流式协议,数据像水流一样发出去；TCP协议nagle算法会把时间间隔较短，数据量较小的数据粘到一起，没有任何边界区分,基于网络发出去。<strong>收数据没收干净</strong>,会和下一次结果混合在一起。</p>
<p><strong>解决方案</strong>: 收数据的时候收干净就好了</p>
<ul>
<li><p>基于tcp协议实现远程执行命令</p>
</li>
<li><p>终极粘包解决方案<br>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端应该满足两个特点</span></span><br><span class="line"><span class="comment"># 1. 一直对外提供服务</span></span><br><span class="line"><span class="comment"># 2. 并发的实现多个客户端</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">server = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">server.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端应该做两件事</span></span><br><span class="line"><span class="comment"># 第一件事: 循环地从半连接池中去除链接请求与其建立双向链接，拿到链接对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, client_addr = server.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二件事: 拿到链接对象，与其进行通信循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(cmd) == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            obj = subprocess.Popen(cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">                                   shell=<span class="literal">True</span>,</span><br><span class="line">                                   stdout=subprocess.PIPE,</span><br><span class="line">                                   stderr=subprocess.PIPE</span><br><span class="line">                                   )</span><br><span class="line">            stdout_res = obj.stdout.read()</span><br><span class="line">            stderr_res = obj.stderr.read()</span><br><span class="line">            total_size = len(stdout_res) + len(stderr_res)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 1.制作头</span></span><br><span class="line">            header_dic = &#123;</span><br><span class="line">                <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;a.txt&quot;</span>,</span><br><span class="line">                <span class="string">&quot;total_size&quot;</span>: total_size,</span><br><span class="line">                <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;asdasdasd&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            json_str = json.dumps(header_dic)</span><br><span class="line">            json_str_bytes = json_str.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 先发数据的头长度发过去</span></span><br><span class="line">            <span class="comment"># int --&gt; 固定长度的bytes</span></span><br><span class="line">            header_length_x = struct.pack(<span class="string">&#x27;i&#x27;</span>, len(json_str_bytes))</span><br><span class="line">            conn.send(header_length_x)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 发头信息</span></span><br><span class="line">            conn.send(json_str_bytes)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 4. 再发真实的数据</span></span><br><span class="line">            conn.send(stderr_res)</span><br><span class="line">            conn.send(stdout_res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">client = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">&#x27;请输入命令&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(cmd) == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">    client.send(cmd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收端</span></span><br><span class="line">    <span class="comment"># 1.先收4个字节，从中提取接下来要收的头的长度</span></span><br><span class="line">    header_length_x = client.recv(<span class="number">4</span>)</span><br><span class="line">    header_length = struct.unpack(<span class="string">&#x27;i&#x27;</span>, header_length_x)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 2. 接收头,并解析</span></span><br><span class="line">    json_str_bytes = client.recv(header_length)</span><br><span class="line">    json_str = json_str_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    header_dic = json.loads(json_str)</span><br><span class="line">    print(header_dic)</span><br><span class="line">    total_size = header_dic[<span class="string">&quot;total_size&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.接收真是数据</span></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">        recv_data = client.recv(<span class="number">1024</span>)</span><br><span class="line">        recv_size += len(recv_data)</span><br><span class="line">        print(recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="socketserver实现并发"><a href="#socketserver实现并发" class="headerlink" title="socketserver实现并发"></a>socketserver实现并发</h4><ul>
<li>基于tcp实现并发<br>服务端<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequestHandle</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">         <span class="comment"># 如果是tcp协议，self.request =&gt; conn</span></span><br><span class="line">        print(self.client_address)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cmd = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> len(cmd) == <span class="number">0</span>:<span class="keyword">break</span></span><br><span class="line">                self.request.send(cmd.upper())</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端应该做两件事</span></span><br><span class="line"><span class="comment"># 第一件事: 循环地从半连接池中去除链接请求与其建立双向链接，拿到链接对象</span></span><br><span class="line">s = socketserver.ThreadingTCPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8888</span>),MyRequestHandle)</span><br><span class="line">s.serve_forever()</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"><span class="comment"># while True:</span></span><br><span class="line"><span class="comment">#     启动一个线程conn,client_addr = server.accept()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二件事: 拿到链接对象，与其进行通信循环 ===&gt; handle</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8888</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">&#x27;请输入命令&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(cmd) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    client.send(cmd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解决粘包问题思路:</span></span><br><span class="line">    <span class="comment"># 1.拿到数据总大小</span></span><br><span class="line">    <span class="comment"># 2.revc_size = 0,循环接收,每收到一次，recv+=接收的长度</span></span><br><span class="line">    <span class="comment"># 3.直到revc_size = total_size 结束循环</span></span><br><span class="line">    cmd_res = client.recv(<span class="number">1024</span>)  <span class="comment"># 本次接收，最大接收1024bytes</span></span><br><span class="line">    print(cmd_res.decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>


<ul>
<li>基于UDP实现并发<br>服务端<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequestHandle</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        client_data = self.request[<span class="number">0</span>]</span><br><span class="line">        server = self.request[<span class="number">1</span>]</span><br><span class="line">        client_address = self.client_address</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;客户端发来的数据%s&#x27;</span> %client_data)</span><br><span class="line">        server.sendto(client_data.upper(), client_address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端应该做两件事</span></span><br><span class="line"><span class="comment"># 第一件事: 循环地从半连接池中去除链接请求与其建立双向链接，拿到链接对象</span></span><br><span class="line">s = socketserver.ThreadingUDPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8888</span>),MyRequestHandle)</span><br><span class="line">s.serve_forever()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client = socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8888</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">&#x27;请输入命令&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(cmd) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    client.send(cmd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解决粘包问题思路:</span></span><br><span class="line">    <span class="comment"># 1.拿到数据总大小</span></span><br><span class="line">    <span class="comment"># 2.revc_size = 0,循环接收,每收到一次，recv+=接收的长度</span></span><br><span class="line">    <span class="comment"># 3.直到revc_size = total_size 结束循环</span></span><br><span class="line">    cmd_res = client.recv(<span class="number">1024</span>)  <span class="comment"># 本次接收，最大接收1024bytes</span></span><br><span class="line">    print(cmd_res.decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Bootstrap-01</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Bootstrap-01/</url>
    <content><![CDATA[<p>Bootstrap基础</p>
<a id="more"></a>

<h2 id="0-常见的模板套用"><a href="#0-常见的模板套用" class="headerlink" title="0.常见的模板套用"></a>0.常见的模板套用</h2><h3 id="AdminLTE"><a href="#AdminLTE" class="headerlink" title="AdminLTE"></a>AdminLTE</h3><blockquote>
<p>实际项目中常用的一个比较经典的后台管理模板</p>
<p>缺点：国外的，中文文档比较少</p>
</blockquote>
<h3 id="LayUI"><a href="#LayUI" class="headerlink" title="LayUI"></a>LayUI</h3><blockquote>
<p><a href="https://www.layui.com/doc/">https://www.layui.com/doc/</a>   国内比较不错的一个后台管理模板</p>
</blockquote>
<p>重点关注：表格，表单，按钮，模态框</p>
<h3 id="SimpleUI-基于DjangoAdmin，-里边用的是Vue和ElementUI等组件"><a href="#SimpleUI-基于DjangoAdmin，-里边用的是Vue和ElementUI等组件" class="headerlink" title="SimpleUI 基于DjangoAdmin， 里边用的是Vue和ElementUI等组件"></a>SimpleUI 基于DjangoAdmin， 里边用的是Vue和ElementUI等组件</h3><p>目标：给你一个页面，能够进行修改，看懂</p>
<h2 id="1-什么是BootStrap"><a href="#1-什么是BootStrap" class="headerlink" title="1 什么是BootStrap"></a>1 什么是BootStrap</h2><ul>
<li>由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架<br>简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。</li>
</ul>
<h2 id="2-BootStrap的版本"><a href="#2-BootStrap的版本" class="headerlink" title="2 BootStrap的版本"></a>2 BootStrap的版本</h2><ul>
<li>BootStrap2</li>
<li>BootStrap3</li>
<li>BootStrap4</li>
</ul>
<h2 id="3-BootStrap-下载"><a href="#3-BootStrap-下载" class="headerlink" title="3 BootStrap 下载"></a>3 BootStrap 下载</h2><ul>
<li>用于生产环境的Bootstrap</li>
<li><a href="https://github.com/twbs/bootstrap/archive/v3.3.7.zip">Bootstrap Less 源码</a><br><a href="https://github.com/twbs/bootstrap-sass/archive/v3.3.7.tar.gz">Bootstrap Sass 源码</a></li>
</ul>
<h2 id="4-CDN服务"><a href="#4-CDN服务" class="headerlink" title="4 CDN服务"></a>4 CDN服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.5&#x2F;css&#x2F;bootstrap.min.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 可选的Bootstrap主题文件（一般不用引入） --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;http:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.5&#x2F;css&#x2F;bootstrap-theme.min.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;1.11.3&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.5&#x2F;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-目录结构"><a href="#5-目录结构" class="headerlink" title="5 目录结构"></a>5 目录结构</h2><p><strong>生产环境版</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bootstrap&#x2F;</span><br><span class="line">├── css&#x2F;</span><br><span class="line">│   ├── bootstrap.css</span><br><span class="line">│   ├── bootstrap.css.map</span><br><span class="line">│   ├── bootstrap.min.css</span><br><span class="line">│   ├── bootstrap-theme.css</span><br><span class="line">│   ├── bootstrap-theme.css.map</span><br><span class="line">│   └── bootstrap-theme.min.css</span><br><span class="line">├── js&#x2F;</span><br><span class="line">│   ├── bootstrap.js</span><br><span class="line">│   └── bootstrap.min.js</span><br><span class="line">└── fonts&#x2F;</span><br><span class="line">    ├── glyphicons-halflings-regular.eot</span><br><span class="line">    ├── glyphicons-halflings-regular.svg</span><br><span class="line">    ├── glyphicons-halflings-regular.ttf</span><br><span class="line">    ├── glyphicons-halflings-regular.woff</span><br><span class="line">    └── glyphicons-halflings-regular.woff2</span><br></pre></td></tr></table></figure>

<h2 id="6-基本模板"><a href="#6-基本模板" class="headerlink" title="6 基本模板"></a>6 基本模板</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;Bootstrap 101 Template&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span><br><span class="line">    &lt;!-- WARNING: Respond.js doesn&#39;t work if you view the page via file:&#x2F;&#x2F; --&gt;</span><br><span class="line">    &lt;!--[if lt IE 9]&gt;</span><br><span class="line">      &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;html5shiv&#x2F;3.7.2&#x2F;html5shiv.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">      &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;respond.js&#x2F;1.4.2&#x2F;respond.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;你好，世界！&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (necessary for Bootstrap&#39;s JavaScript plugins) --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;1.11.3&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-浏览器支持"><a href="#7-浏览器支持" class="headerlink" title="7 浏览器支持"></a>7 浏览器支持</h2><p><strong>手机浏览器</strong></p>
<table>
<thead>
<tr>
<th>——-</th>
<th>Chrome</th>
<th>Firefox</th>
<th>Safari</th>
</tr>
</thead>
<tbody><tr>
<td>Android</td>
<td>Supported</td>
<td>Supported</td>
<td>N/A</td>
</tr>
<tr>
<td>iOS</td>
<td>Supported</td>
<td>Supported</td>
<td>Supported</td>
</tr>
</tbody></table>
<p><strong>桌面浏览器</strong></p>
<table>
<thead>
<tr>
<th>———</th>
<th>Chrome</th>
<th>Firefox</th>
<th>Internet Explorer</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody><tr>
<td>Mac</td>
<td>Supported</td>
<td>Supported</td>
<td>N/A</td>
<td>Supported</td>
<td>Supported</td>
</tr>
<tr>
<td>Windows</td>
<td>Supported</td>
<td>Supported</td>
<td>Supported</td>
<td>Supported</td>
<td>Not supported</td>
</tr>
</tbody></table>
<h2 id="8-浏览器兼容"><a href="#8-浏览器兼容" class="headerlink" title="8 浏览器兼容"></a>8 浏览器兼容</h2><h4 id="让-IE8-支持H5新标签"><a href="#让-IE8-支持H5新标签" class="headerlink" title="让 IE8 支持H5新标签"></a>让 IE8 支持H5新标签</h4><p>页面中引入<code>respond.js</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 注意： 页面必须通过服务器访问 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;respond.js&#x2F;1.4.2&#x2F;respond.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="IE兼容模式"><a href="#IE兼容模式" class="headerlink" title="IE兼容模式"></a>IE兼容模式</h4><p>页面中添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="国产浏览器切换webkit内核"><a href="#国产浏览器切换webkit内核" class="headerlink" title="国产浏览器切换webkit内核"></a>国产浏览器切换webkit内核</h4><p>页面中添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;renderer&quot; content&#x3D;&quot;webkit&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JQuery-01</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-JQuery-01/</url>
    <content><![CDATA[<p>JQuery 基础/安装使用</p>
<a id="more"></a>

<script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<h2 id="1-了解jQuery"><a href="#1-了解jQuery" class="headerlink" title="1. 了解jQuery"></a>1. 了解jQuery</h2><h3 id="1-1-什么是jQuery"><a href="#1-1-什么是jQuery" class="headerlink" title="1.1 什么是jQuery"></a>1.1 什么是jQuery</h3><ul>
<li>jQuery 是一个高效、精简并且功能丰富的 JavaScript 工具库</li>
<li>jQuery极大的简化了JavaScript 编程</li>
</ul>
<h3 id="1-2-什么事JS类库"><a href="#1-2-什么事JS类库" class="headerlink" title="1.2 什么事JS类库"></a>1.2 什么事JS类库</h3><ul>
<li>它就是一些函数的集合，就是把特定效果的代码写好，你只需要在用的时候要用很少的代码去调用。</li>
<li>起主导作用的是你的代码，由你来决定何时使用类库。</li>
</ul>
<h3 id="1-3-常见JS类库"><a href="#1-3-常见JS类库" class="headerlink" title="1.3 常见JS类库"></a>1.3 常见JS类库</h3><ul>
<li>jQuery</li>
<li>ExtJS</li>
<li>prototype.js</li>
<li>zepto.js</li>
</ul>
<h3 id="1-4-jQuery的优势"><a href="#1-4-jQuery的优势" class="headerlink" title="1.4 jQuery的优势"></a>1.4 jQuery的优势</h3><ul>
<li>开源 免费</li>
<li>便捷的选择器</li>
<li>方便的DOM操作</li>
<li>方便的动画特效</li>
<li>易用的ajax操作</li>
<li>丰富的插件扩展</li>
<li>解决浏览器兼容性效果</li>
</ul>
<h3 id="1-5-jQuery的版本"><a href="#1-5-jQuery的版本" class="headerlink" title="1.5 jQuery的版本"></a>1.5 jQuery的版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.x.x的版本是可以 支持 IE6~IE8的</span><br><span class="line">2.x.x到3.x.x 的版本，不在兼容IE8以及以下浏览器</span><br></pre></td></tr></table></figure>

<h3 id="1-6-jQuery-相关网站"><a href="#1-6-jQuery-相关网站" class="headerlink" title="1.6 jQuery 相关网站"></a>1.6 jQuery 相关网站</h3><ul>
<li>官网 <a href="https://jquery.com/">https://jquery.com/</a></li>
<li>文档API： <a href="http://jquery.cuishifeng.cn/index.html">http://jquery.cuishifeng.cn/index.html</a></li>
</ul>
<h2 id="2-jQuery-基本使用"><a href="#2-jQuery-基本使用" class="headerlink" title="2 jQuery 基本使用"></a>2 jQuery 基本使用</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p><strong>下载到本地，再引入</strong></p>
<p>下载地址：<a href="https://jquery.com/download/">https://jquery.com/download/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;jquery-3.3.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;注意，一定在引入jQuery之后，再使用jQuery提供的各种操作</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>或者 直接使用CDN</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;3.3.1&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    code...</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>BootCDN jQuery各个版本地址： <a href="https://www.bootcdn.cn/jquery/">https://www.bootcdn.cn/jquery/</a></p>
<h3 id="2-2-jQuery对象"><a href="#2-2-jQuery对象" class="headerlink" title="2.2 jQuery对象"></a>2.2 jQuery对象</h3><p><code>$</code>是<code>jQuery</code>的别名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery(<span class="string">&#x27;.item&#x27;</span>).show()</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">$(<span class="string">&#x27;.item&#x27;</span>).show()</span><br></pre></td></tr></table></figure>

<p><code>$</code>对象可以用作选择器获取元素，还可以创建DOM对象</p>
<h3 id="2-3-文档就绪事件"><a href="#2-3-文档就绪事件" class="headerlink" title="2.3 文档就绪事件"></a>2.3 文档就绪事件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line"> </span><br><span class="line">   &#x2F;&#x2F; 开始写 jQuery 代码...</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上述写法可以简写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line"> </span><br><span class="line">   &#x2F;&#x2F; 开始写 jQuery 代码...</span><br><span class="line"> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-4-连贯操作"><a href="#2-4-连贯操作" class="headerlink" title="2.4 连贯操作"></a>2.4 连贯操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;对象可以连贯调用</span><br><span class="line">$(dom).find(&#39;img&#39;).css(&#39;border&#39;,&#39;1px solid #ccc&#39;).css(&#39;color&#39;, &#39;red&#39;).prop(&#39;src&#39;, &#39;1.jpg&#39;).toggle()</span><br></pre></td></tr></table></figure>

<h3 id="2-5-jQueryDOM和jsDOM"><a href="#2-5-jQueryDOM和jsDOM" class="headerlink" title="2.5 jQueryDOM和jsDOM"></a>2.5 jQueryDOM和jsDOM</h3><ul>
<li>通过原生js获取的dom对象，我们称之为jsDOM或者原生DOM</li>
<li>通过jQuery选择器获取的dom对象，我们称之为 jQuery DOM</li>
<li>jQuery DOM本质上 是由 jsDOM组成的集合，是个类数组对象。可以通过 [索引] 获取其中的jsDOM</li>
<li><code>$(jsDOM)</code> 可以转为 jQuery DOM</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JQuery-02</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-JQuery-02/</url>
    <content><![CDATA[<p>JQuery 选择器</p>
<a id="more"></a>

<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>通过选择器，可以获取到页面元素。jQuery具有强大的选择器，跟CSS3选择器类似</p>
<h2 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1 基本选择器"></a>1 基本选择器</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">#id            根据给定的ID匹配一个元素</span><br><span class="line">element        根据给定的元素标签名匹配所有元素</span><br><span class="line">.class        根据给定的css类名匹配元素。</span><br><span class="line">*            匹配所有元素</span><br><span class="line">selector1,selector2,selectorN    将每一个选择器匹配到的元素合并后一起返回</span><br><span class="line"></span><br><span class="line"><span class="comment">//id选择器</span></span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>)</span><br><span class="line">w.fn.init [div#d1]0: div#d1length: 1__proto__: Object(0)</span><br><span class="line"><span class="comment">//class选择器</span></span><br><span class="line">$(<span class="string">&#x27;.c1&#x27;</span>)</span><br><span class="line">w.fn.init [p.c1, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"><span class="comment">//标签选择器</span></span><br><span class="line">$(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">w.fn.init(<span class="number">3</span>) [span, span, span, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;一定要区分开&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">// jQuery对象如何变成变迁对象</span></span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">&lt;div id=​<span class="string">&quot;d1&quot;</span>&gt;​…​&lt;/div&gt;​</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span><br><span class="line">&lt;div id=​<span class="string">&quot;d1&quot;</span>&gt;​…​&lt;/div&gt;​</span><br><span class="line"><span class="comment">// 标签对象如何转变为jQuery对象</span></span><br><span class="line">$(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>))</span><br><span class="line">w.fn.init [div#d1]</span><br></pre></td></tr></table></figure>

<h3 id="组合选择器-分组与嵌套"><a href="#组合选择器-分组与嵌套" class="headerlink" title="组合选择器/分组与嵌套"></a>组合选择器/分组与嵌套</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div.c1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;div#d1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$(&#x27;#d1,.c1,p&#x27;) # 并列+混用</span><br><span class="line"></span><br><span class="line">$(&#x27;div span&#x27;) # 后代</span><br><span class="line"></span><br><span class="line">$(&#x27;div&gt;span&#x27;) # 儿子</span><br><span class="line"></span><br><span class="line">$(&#x27;div+span&#x27;) # 毗邻</span><br><span class="line"></span><br><span class="line">$(&#x27;div~span&#x27;) # 弟弟</span><br></pre></td></tr></table></figure>

<h3 id="基本筛选器"><a href="#基本筛选器" class="headerlink" title="基本筛选器"></a>基本筛选器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;ul li&#x27;</span>)</span><br><span class="line">w.fn.init(10) [li, li, li, li, li, li, li.c1, li, li#d1, li, prevObject: w.fn.init(1)]</span><br><span class="line">               </span><br><span class="line">$(&#x27;ul li:last&#x27;) # 小儿子</span><br><span class="line">w.fn.init [li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(&#x27;ul li:first&#x27;) # 大儿子</span><br><span class="line">w.fn.init [li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(&#x27;ul li:eq(2)&#x27;) # 放索引</span><br><span class="line">w.fn.init [li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(&#x27;ul li:even&#x27;) # 偶数索引 0包含在内</span><br><span class="line">w.fn.init(5) [li, li, li, li.c1, li#d1, prevObject: w.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(&#x27;ul li:odd&#x27;) # 奇数索引</span><br><span class="line">w.fn.init(<span class="number">5</span>) [li, li, li, li, li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(&#x27;ul li:gt(2)&#x27;) # 大于索引</span><br><span class="line">w.fn.init(7) [li, li, li, li.c1, li, li#d1, li, prevObject: w.fn.init(1)]</span><br><span class="line">              </span><br><span class="line">$(&#x27;ul li:lt(2)&#x27;) # 小于索引</span><br><span class="line">w.fn.init(<span class="number">2</span>) [li, li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(&#x27;ul li:not(&quot;#d1&quot;)&#x27;) # 移除满足条件的标签</span><br><span class="line">w.fn.init(<span class="number">9</span>) [li, li, li, li, li, li, li.c1, li, li, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(&#x27;div:has(&quot;p&quot;)&#x27;)  # 选取出一个或者多个标签在内的标签</span><br><span class="line">w.fn.init [div, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;[username]&#x27;</span>)</span><br><span class="line">w.fn.init(<span class="number">3</span>) [input, input, p, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;[username=&quot;jason&quot;]&#x27;</span>)</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;p[username=&quot;egon&quot;]&#x27;</span>)</span><br><span class="line">w.fn.init [p, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;[type]&#x27;</span>)</span><br><span class="line">w.fn.init(<span class="number">6</span>) [style, style, style, style, input, input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;[type=&quot;text&quot;]&#x27;</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [input, input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="筛选器方法"><a href="#筛选器方法" class="headerlink" title="筛选器方法"></a>筛选器方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>).next()  <span class="comment"># 同级别下一个 </span></span><br><span class="line">w.fn.init [span, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>).nextAll()</span><br><span class="line">w.fn.init(<span class="number">5</span>) [span, div<span class="comment">#d2, span, span, span.c1, prevObject: w.fn.init(1)]</span></span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>).nextUntil(<span class="string">&#x27;.c1&#x27;</span>) <span class="comment"># 不包括最后一个</span></span><br><span class="line">w.fn.init(<span class="number">4</span>) [span, div<span class="comment">#d2, span, span, prevObject: w.fn.init(1)]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#d3&#x27;</span>)</span><br><span class="line">w.fn.init [span<span class="comment">#d3]0: span#d3length: 1__proto__: Object(0)</span></span><br><span class="line">$(<span class="string">&#x27;#d3&#x27;</span>).parent() <span class="comment"># 第一级父标签</span></span><br><span class="line">w.fn.init [p, prevObject: w.fn.init(<span class="number">1</span>)]<span class="number">0</span>: plength: <span class="number">1</span>prevObject: w.fn.init [span<span class="comment">#d3]__proto__: Object(0)</span></span><br><span class="line">$(<span class="string">&#x27;#d3&#x27;</span>).parent().parent()</span><br><span class="line">w.fn.init [div<span class="comment">#d2, prevObject: w.fn.init(1)]</span></span><br><span class="line">$(<span class="string">&#x27;#d3&#x27;</span>).parent().parent().parent()</span><br><span class="line">w.fn.init [body, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;#d3&#x27;</span>).parent().parent().parent().parent()</span><br><span class="line">w.fn.init [html, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;#d3&#x27;</span>).parent().parent().parent().parent().parent()</span><br><span class="line">w.fn.init [document, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;#d3&#x27;</span>).parents()</span><br><span class="line">w.fn.init(<span class="number">4</span>) [p, div<span class="comment">#d2, body, html, prevObject: w.fn.init(1)]</span></span><br><span class="line">$(<span class="string">&#x27;#d3&#x27;</span>).parentsUntil(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">w.fn.init(<span class="number">2</span>) [p, div<span class="comment">#d2, prevObject: w.fn.init(1)]</span></span><br><span class="line">              </span><br><span class="line">$(<span class="string">&#x27;#d2&#x27;</span>).children() <span class="comment"># 拿后代儿子</span></span><br><span class="line">w.fn.init(<span class="number">3</span>) [span, p, span, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;#d2&#x27;</span>).siblings() <span class="comment"># 同级别上下所有</span></span><br><span class="line">w.fn.init(<span class="number">5</span>) [span<span class="comment">#d1, span, span, span, span.c1, prevObject: w.fn.init(1)]      </span></span><br><span class="line">              </span><br><span class="line">              </span><br><span class="line">$(<span class="string">&#x27;div p&#x27;</span>)</span><br><span class="line"><span class="comment"># 等价</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).find(<span class="string">&#x27;p&#x27;</span>)   <span class="comment"># find从某个区域内筛选出想要的标签</span></span><br><span class="line">     </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">下述方法两两等价</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">              </span><br><span class="line">$(<span class="string">&#x27;div span&#x27;</span>)</span><br><span class="line">w.fn.init(<span class="number">3</span>) [span, span<span class="comment">#d3, span, prevObject: w.fn.init(1)]</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;div span:first&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;div span&#x27;</span>).first()</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;div span:last&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;div span&#x27;</span>).last()</span><br><span class="line">              </span><br><span class="line">$(<span class="string">&#x27;div span:not(&quot;#d3&quot;)&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;div span&#x27;</span>).<span class="keyword">not</span>(<span class="string">&quot;#d3&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="2-层级选择器"><a href="#2-层级选择器" class="headerlink" title="2 层级选择器"></a>2 层级选择器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ancestor descendant    在给定的祖先元素下匹配所有的后代元素</span><br><span class="line">parent&gt;child        在给定的父元素下匹配所有的子元素</span><br><span class="line">prev+next            匹配所有紧接在 prev 元素后的 next 元素</span><br><span class="line">prev~siblings        匹配 prev 元素之后的所有 siblings 元素</span><br></pre></td></tr></table></figure>

<h2 id="3-过滤选择器"><a href="#3-过滤选择器" class="headerlink" title="3 过滤选择器"></a>3 过滤选择器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:first            获取第一个元素</span><br><span class="line">:not(selector)    去除所有与给定选择器匹配的元素</span><br><span class="line">:even            匹配所有索引值为偶数的元素，从 0 开始计数</span><br><span class="line">:odd            匹配所有索引值为奇数的元素，从 0 开始计数</span><br><span class="line">:eq(index)        匹配一个给定索引值的元素</span><br><span class="line">:gt(index)        匹配所有大于给定索引值的元素</span><br><span class="line">:lang           选择指定语言的所有元素。1.9+</span><br><span class="line">:last            获取最后个元素</span><br><span class="line">:lt(index)        匹配所有小于给定索引值的元素</span><br><span class="line">:header            匹配如 h1, h2, h3之类的标题元素</span><br><span class="line">:animated        匹配所有正在执行动画效果的元素</span><br><span class="line">:focus            匹配当前获取焦点的元素</span><br><span class="line">:root           选择该文档的根元素   1.9+</span><br><span class="line">:target         选择由文档URI的格式化识别码表示的目标元素    1.9</span><br></pre></td></tr></table></figure>

<h2 id="4-内容选择器"><a href="#4-内容选择器" class="headerlink" title="4 内容选择器"></a>4 内容选择器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:contains(text)    匹配包含给定文本的元素</span><br><span class="line">:empty            匹配所有不包含子元素或者文本的空元素</span><br><span class="line">:has(selector)    匹配含有选择器所匹配的元素的元素</span><br><span class="line">:parent            匹配含有子元素或者文本的元素</span><br></pre></td></tr></table></figure>

<h2 id="5-可见性选择器"><a href="#5-可见性选择器" class="headerlink" title="5 可见性选择器"></a>5 可见性选择器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:hidden        匹配所有不可见元素，或者type为hidden的元素</span><br><span class="line">:visible    匹配所有的可见元素</span><br></pre></td></tr></table></figure>

<h2 id="6-属性选择器"><a href="#6-属性选择器" class="headerlink" title="6 属性选择器"></a>6 属性选择器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[attribute]            匹配包含给定属性的元素</span><br><span class="line">[attribute&#x3D;value]    匹配给定的属性是某个特定值的元素</span><br><span class="line">[attribute!&#x3D;value]    匹配所有不含有指定的属性，或者属性不等于特定值的元素</span><br><span class="line">[attribute^&#x3D;value]    匹配给定的属性是以某些值开始的元素</span><br><span class="line">[attribute$&#x3D;value]    匹配给定的属性是以某些值结尾的元素</span><br><span class="line">[attribute*&#x3D;value]    匹配给定的属性是以包含某些值的元素</span><br><span class="line">[attrSel1][attrSel2][attrSelN]    复合属性选择器，需要同时满足多个条件时使用</span><br></pre></td></tr></table></figure>

<h2 id="7-子元素选择器"><a href="#7-子元素选择器" class="headerlink" title="7 子元素选择器"></a>7 子元素选择器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:first-child        匹配所给选择器( :之前的选择器)的第一个子元素</span><br><span class="line">:first-of-type      结构化伪类，匹配E的父元素的第一个E类型的孩子        1.9+</span><br><span class="line">:last-child            匹配最后一个子元素</span><br><span class="line">:last-of-type       结构化伪类，匹配E的父元素的最后一个E类型的孩子    1.9+</span><br><span class="line">:nth-child()        匹配其父元素下的第N个子或奇偶元素        </span><br><span class="line">:nth-last-child()    选择所有他们父元素的第n个子元素。计数从最后一个元素开始到第一个    1.9+</span><br><span class="line">:nth-last-of-type()    选择的所有他们的父级元素的第n个子元素，计数从最后一个元素到第一个    1.9+</span><br><span class="line">:nth-of-type()      选择同属于一个父元素之下，并且标签名相同的子元素中的第n个    1.9+</span><br><span class="line">:only-child            如果某个元素是父元素中唯一的子元素，那将会被匹配</span><br><span class="line">:only-of-type          选择所有没有兄弟元素，且具有相同的元素名称的元素    1.9+</span><br></pre></td></tr></table></figure>

<h2 id="8-表单选择器"><a href="#8-表单选择器" class="headerlink" title="8 表单选择器"></a>8 表单选择器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:input            匹配所有 input, textarea, select 和 button 元素</span><br><span class="line">:text            匹配所有的单行文本框</span><br><span class="line">:password        匹配所有密码框</span><br><span class="line">:radio            匹配所有单选按钮</span><br><span class="line">:checkbox        匹配所有复选框</span><br><span class="line">:submit            匹配所有提交按钮，匹配 type&#x3D;&quot;submit&quot; 的input或者button</span><br><span class="line">:image            匹配所有图像域</span><br><span class="line">:reset            匹配所有重置按钮</span><br><span class="line">:button            匹配所有按钮</span><br><span class="line">:file            匹配所有文件域</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;input[type=&quot;text&quot;]&#x27;</span>)</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;input[type=&quot;password&quot;]&#x27;</span>)</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">$(&#x27;:text&#x27;)  #等价于上1</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(&#x27;:password&#x27;) #等价于上2</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(&#x27;:checked&#x27;)   # 它会将checked 和 selected 都拿到  bug</span><br><span class="line">w.fn.init(<span class="number">2</span>) [input, option, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(&#x27;:selected&#x27;)  # 它不会，只拿selected</span><br><span class="line">w.fn.init [option, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(&#x27;input:checked&#x27;) # 自己加一个限制条件 只拿input 下的checked</span><br><span class="line">w.fn.init [input, <span class="attr">prevObject</span>: w.fn.init(<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>







<h2 id="9-表单对象选择器"><a href="#9-表单对象选择器" class="headerlink" title="9 表单对象选择器"></a>9 表单对象选择器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:enabled        匹配所有可用元素</span><br><span class="line">:disabled        匹配所有不可用元素</span><br><span class="line">:checked        匹配所有选中的被选中元素(复选框、单选框等，select中的option)</span><br><span class="line">:selected        匹配所有选中的option元素</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JQuery-03</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-JQuery-03/</url>
    <content><![CDATA[<p>JQuery 文本属性样式操作</p>
<a id="more"></a>

<h2 id="1-元素属性操作"><a href="#1-元素属性操作" class="headerlink" title="1 元素属性操作"></a>1 元素属性操作</h2><h3 id="1-1-属性"><a href="#1-1-属性" class="headerlink" title="1.1 属性"></a>1.1 属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">attr(name|pro|key,val|fn)    设置或返回被选元素的属性值</span><br><span class="line">removeAttr(name)            从每一个匹配的元素中删除一个属性</span><br><span class="line">prop(n|p|k,v|f)                获取在匹配的元素集中的第一个元素的属性值</span><br><span class="line">removeProp(name)            用来删除由.prop()方法设置的属性集</span><br></pre></td></tr></table></figure>

<h3 id="1-2-class"><a href="#1-2-class" class="headerlink" title="1.2 class"></a>1.2 class</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addClass(class|fn)            为每个匹配的元素添加指定的类名</span><br><span class="line">removeClass([class|fn])        从所有匹配的元素中删除全部或者指定的类</span><br><span class="line">toggleClass(class|fn[,sw])    如果存在（不存在）就删除（添加）一个类</span><br><span class="line">hasClass(class)                检查当前的元素是否含有某个特定的类，如果有，则返回true</span><br></pre></td></tr></table></figure>



<h3 id="1-3-代码、文本、值"><a href="#1-3-代码、文本、值" class="headerlink" title="1.3 代码、文本、值"></a>1.3 代码、文本、值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html([val|fn])        取得第一个匹配元素的html内容</span><br><span class="line">text([val|fn])        取得所有匹配元素的内容</span><br><span class="line">val([val|fn|arr])    获得匹配元素的当前值</span><br></pre></td></tr></table></figure>





<h2 id="2-元素样式操作"><a href="#2-元素样式操作" class="headerlink" title="2 元素样式操作"></a>2 元素样式操作</h2><h3 id="2-1-设置CSS"><a href="#2-1-设置CSS" class="headerlink" title="2.1 设置CSS"></a>2.1 设置CSS</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">css(name|pro|[,val|fn])        访问匹配元素的样式属性</span><br></pre></td></tr></table></figure>

<h3 id="2-2-元素位置"><a href="#2-2-元素位置" class="headerlink" title="2.2 元素位置"></a>2.2 元素位置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">offset()          相对于浏览器窗口，获取匹配元素在当前视口的相对偏移</span><br><span class="line">position()        相对于父标签，获取匹配元素相对父元素的偏移</span><br><span class="line">scrollLeft()    获取匹配元素相对滚动条顶部的偏移 </span><br><span class="line">scrollTop()        获取匹配元素相对滚动条左侧的偏移  <span class="comment"># #######需要掌握</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-元素尺寸"><a href="#2-3-元素尺寸" class="headerlink" title="2.3 元素尺寸"></a>2.3 元素尺寸</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">width()            取得第一个匹配元素当前计算的宽度值（px）</span><br><span class="line">height()        取得匹配元素当前计算的高度值（px)</span><br><span class="line">innerWidth()    匹配元素内部区域宽度（包括补白、不包括边框）</span><br><span class="line">innerHeight()    匹配元素内部区域高度（包括补白、不包括边框）</span><br><span class="line">outerWidth()    匹配元素外部宽度（默认包括补白和边框）</span><br><span class="line">outerHeight()    匹配元素外部高度（默认包括补白和边框）</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 样式类操作</span></span><br><span class="line">addClass(<span class="class"><span class="keyword">class</span>|<span class="title">fn</span>)            为每个匹配的元素添加指定的类名</span></span><br><span class="line"><span class="class"><span class="title">removeClass</span>(<span class="params">[class|fn]</span>)        从所有匹配的元素中删除全部或者指定的类</span></span><br><span class="line"><span class="class"><span class="title">toggleClass</span>(<span class="params">class|fn[,sw]</span>)    如果存在（不存在）就删除（添加）一个类</span></span><br><span class="line"><span class="class"><span class="title">hasClass</span>(<span class="params">class</span>)                检查当前的元素是否含有某个特定的类，如果有，则返回<span class="title">true</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># <span class="title">css</span>操作</span></span><br><span class="line"><span class="class">&lt;<span class="title">p</span>&gt;111&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">p</span>&gt;222&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">`一行代码将第一个<span class="title">p</span>标签变成红色，第二个<span class="title">p</span>标签变成绿色`</span></span><br><span class="line">$(&#x27;p&#x27;).first().css(&#x27;color&#x27;,&#x27;red&#x27;).next().css(&#x27;color&#x27;,&#x27;green&#x27;)</span><br><span class="line"><span class="comment"># jQuery的链式操作 使用jQuery可以做到一行代码操作很多标签</span></span><br><span class="line"><span class="comment"># jQuery对象调用jQuery方法之后返回的还是jQuery对象，也就可以继续调用</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;func1&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;func2&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line">obj.func1().func2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置操作</span></span><br><span class="line">$(window).scrollTop()  不加 参数就是获取</span><br><span class="line"><span class="number">0</span></span><br><span class="line">$(window).scrollTop()</span><br><span class="line"><span class="number">4082</span></span><br><span class="line">$(window).scrollTop(<span class="number">0</span>)  加了参数就是设置 回到顶部</span><br><span class="line">n.fn.init [Window]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尺寸</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).height()   <span class="comment"># 文本</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).width()</span><br><span class="line"><span class="number">936</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).innerHeight() <span class="comment"># 文本+padding</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).innerWidth()</span><br><span class="line"><span class="number">940</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).outerHeight() <span class="comment"># 文本+padding+border</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).outerWidth() </span><br><span class="line"><span class="number">940</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#文本操作</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">操作标签内文本</span></span><br><span class="line"><span class="string">js              jQuery</span></span><br><span class="line"><span class="string">innerText       text()</span></span><br><span class="line"><span class="string">innerHTML       html() </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">w.fn.init [div, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).text()</span><br><span class="line"><span class="string">&quot;\n    \n        有些话听听就过去了，年轻人！\n    \n&quot;</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).html()</span><br><span class="line"><span class="string">&quot;\n    &lt;p&gt;\n        有些话听听就过去了，年轻人！\n    &lt;/p&gt;\n&quot;</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).text(<span class="string">&#x27;你们都是我的宝贝&#x27;</span>)</span><br><span class="line">w.fn.init [div, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).text(<span class="string">&#x27;&lt;h1&gt;你们都是我的宝贝&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">w.fn.init [div, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).html(<span class="string">&#x27;&lt;h1&gt;你们都是我的宝贝&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">w.fn.init [div, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取值操作</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">js              jQuery</span></span><br><span class="line"><span class="string">.value          .val()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>).val()</span><br><span class="line">w.fn.init [input<span class="comment">#d1]</span></span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>).val(<span class="string">&#x27;529&#x27;</span>)  <span class="comment"># 括号内不加参数就是获取，加了参数就是设置值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#d2&#x27;</span>)[<span class="number">0</span>].files[<span class="number">0</span>] <span class="comment"># 牢记两个对象之间的转换</span></span><br><span class="line">File &#123;name: <span class="string">&quot;table图表示例.json&quot;</span>, lastModified: <span class="number">1618741191308</span>, lastModifiedDate: Sun Apr <span class="number">18</span> <span class="number">2021</span> <span class="number">18</span>:<span class="number">19</span>:<span class="number">51</span> GMT+<span class="number">0800</span> (中国标准时间), webkitRelativePath: <span class="string">&quot;&quot;</span>, size: <span class="number">3909</span>, …&#125;</span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line"><span class="comment"># 属性操作</span></span><br><span class="line">           </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">js                     jQuery</span></span><br><span class="line"><span class="string">setAttribute()         attr(name,value)</span></span><br><span class="line"><span class="string">getAttribute()         attr(name)</span></span><br><span class="line"><span class="string">removeAttribute()      removeAttr(name)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在用变量存储对象的时候  js中推荐使用</span></span><br><span class="line"><span class="string">  XXXEle   标签对象</span></span><br><span class="line"><span class="string">jQuery中推荐使用</span></span><br><span class="line"><span class="string">  $XXXEle  jQuery对象</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">let $pEle = $(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$pEle.attr(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="string">&quot;d1&quot;</span></span><br><span class="line">$pEle.attr(<span class="string">&#x27;class&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$pEle.attr(<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;c1&#x27;</span>)</span><br><span class="line">$pEle.attr(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;id666&#x27;</span>)</span><br><span class="line">$pEle.attr(<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;jason123&#x27;</span>)</span><br><span class="line">$pEle.removeAttr(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">$pEle.attr(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;d1&#x27;</span>)</span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">对于标签上有的能够看到的属性和自定义属性用attr</span></span><br><span class="line"><span class="string">对于返回布尔值比如checkbox radio option是否被选中用prop</span></span><br><span class="line"><span class="string">用attr 设置 是无效的</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">$(<span class="string">&#x27;#d4&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>)</span><br><span class="line">true</span><br><span class="line">$(<span class="string">&#x27;#d3&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>)</span><br><span class="line">true</span><br><span class="line">$(<span class="string">&#x27;#d4&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>)</span><br><span class="line">false</span><br><span class="line">$(<span class="string">&#x27;#d4&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>,true)</span><br><span class="line">w.fn.init [input<span class="comment">#d4]</span></span><br><span class="line">$(<span class="string">&#x27;#d4&#x27;</span>).prop(<span class="string">&#x27;checked&#x27;</span>,false)</span><br><span class="line">w.fn.init [input<span class="comment">#d4]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JQuery-04</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-JQuery-04/</url>
    <content><![CDATA[<p>JQuery 操作DOM</p>
<a id="more"></a>

<h2 id="1-内部插入"><a href="#1-内部插入" class="headerlink" title="1 内部插入"></a>1 内部插入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append(content|fn)        向每个匹配的元素内部追加内容</span><br><span class="line">appendTo(content)        把所有匹配的元素追加到另一个指定的元素元素集合中</span><br><span class="line">prepend(content|fn)        向每个匹配的元素内部前置内容</span><br><span class="line">prependTo(content)        把所有匹配的元素前置到另一个、指定的元素元素集合中</span><br></pre></td></tr></table></figure>

<h2 id="2-外部插入"><a href="#2-外部插入" class="headerlink" title="2 外部插入"></a>2 外部插入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">after(content|fn)        在每个匹配的元素之后插入内容</span><br><span class="line">before(content|fn)        在每个匹配的元素之前插入内容</span><br><span class="line">insertAfter(content)    把所有匹配的元素插入到另一个、指定的元素元素集合的后面</span><br><span class="line">insertBefore(content)    把所有匹配的元素插入到另一个、指定的元素元素集合的前面</span><br></pre></td></tr></table></figure>

<h2 id="3-包裹"><a href="#3-包裹" class="headerlink" title="3 包裹"></a>3 包裹</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wrap(html|ele|fn)        把所有匹配的元素用其他元素的结构化标记包裹起来</span><br><span class="line">unwrap()                这个方法将移出元素的父元素</span><br><span class="line">wrapAll(html|ele)        移出元素的父元素</span><br><span class="line">wrapInner(html|ele|fn)    将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来</span><br></pre></td></tr></table></figure>

<h2 id="4-替换"><a href="#4-替换" class="headerlink" title="4 替换"></a>4 替换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replaceWith(content|fn)        将所有匹配的元素替换成指定的HTML或DOM元素</span><br><span class="line">replaceAll(selector)        用匹配的元素替换掉所有 selector匹配到的元素</span><br></pre></td></tr></table></figure>

<h2 id="5-删除"><a href="#5-删除" class="headerlink" title="5 删除"></a>5 删除</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">empty()            删除匹配的元素集合中所有的子节点</span><br><span class="line">remove([expr])    从DOM中删除所有匹配的元素</span><br><span class="line">detach([expr])    从DOM中删除所有匹配的元素 这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来</span><br></pre></td></tr></table></figure>

<h2 id="6-复制"><a href="#6-复制" class="headerlink" title="6 复制"></a>6 复制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clone([Even[,deepEven]])    克隆匹配的DOM元素并且选中这些克隆的副本</span><br></pre></td></tr></table></figure>







<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文档处理</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">js                        jQuery</span></span><br><span class="line"><span class="string">createElement(&#x27;p&#x27;)        $(&#x27;&lt;p&gt;&#x27;)</span></span><br><span class="line"><span class="string">appendChild()             append()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">let $pEle = $(<span class="string">&#x27;&lt;p&gt;&#x27;</span>)</span><br><span class="line">undefined</span><br><span class="line">$pEle.text(<span class="string">&#x27;你好啊 草莓要不要来几个&#x27;</span>)</span><br><span class="line">pEle.attr(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;d1&#x27;</span>)</span><br><span class="line">$pEle[<span class="number">0</span>]</span><br><span class="line">&lt;p&gt;​你好啊 草莓要不要来几个​&lt;/p&gt;​</span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>).append($pEle) <span class="comment"># 内部尾部追加</span></span><br><span class="line">$pEle.appendTo(<span class="string">&#x27;#d1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>).prepend($pEle) <span class="comment"># 内部头部追加</span></span><br><span class="line">$pEle.prependTo($(<span class="string">&#x27;#d1&#x27;</span>))</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#d2&#x27;</span>).after($pEle) <span class="comment"># 放在标签后面</span></span><br><span class="line">$pEle.insertAfter($(<span class="string">&#x27;#d2&#x27;</span>)) </span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>).before($pEle)</span><br><span class="line">$pEle.insertBefore($(<span class="string">&#x27;#d1&#x27;</span>))</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>).remove() <span class="comment"># 将标签从DOM树中删除</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#d1&#x27;</span>).empty()  <span class="comment"># 清空标签内部所有内容</span></span><br></pre></td></tr></table></figure>

<ul>
<li>事件处理</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jQuery绑定事件的两种方式</span></span><br><span class="line"></span><br><span class="line">// 第一种</span><br><span class="line">    $(<span class="string">&#x27;#d1&#x27;</span>).click(function () &#123;</span><br><span class="line">            alert(<span class="string">&#x27;别说话 吻我&#x27;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">// 第二种(功能更加强大 还支持事件委托)</span><br><span class="line">    $(<span class="string">&#x27;#d2&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>,function () &#123;</span><br><span class="line">            alert(<span class="string">&#x27;借我钱买草莓 后面还你&#x27;</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>









<ul>
<li>克隆：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            border: 1px solid blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>屠龙宝刀，点击就送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#d1&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(this)  // this 指代是当前被操作的标签对象</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// $(this).clone().insertAfter($(&#x27;body&#x27;))    // clone默认情况下只克隆html 和 css 不克隆事件</span></span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).clone(<span class="literal">true</span>).insertAfter($(<span class="string">&#x27;body&#x27;</span>)) <span class="comment">// 括号内为true即可克隆事件</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>自定义模态框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">模态框的本质就是给标签移除活添加上hide属性</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义模态框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            background-color: darkgray;</span><br><span class="line">            z-index: 999;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.modal</span> &#123;</span></span><br><span class="line">            width: 680px;</span><br><span class="line">            height: 480px;</span><br><span class="line">            background-color: white;</span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 50%;</span><br><span class="line">            top: 50%;</span><br><span class="line">            margin-left: -300px;</span><br><span class="line">            margin-top: -200px;</span><br><span class="line">            z-index: 1000;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hide</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;弹&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover hide&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal hide&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;i1&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i1&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;i2&quot;</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;关闭&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#i0&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> coverEle = $(<span class="string">&quot;.cover&quot;</span>)[<span class="number">0</span>]; <span class="comment">//需要手动转</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(coverEle);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> modalEle = $(<span class="string">&quot;.modal&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(modalEle);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(coverEle).removeClass(<span class="string">&quot;hide&quot;</span>);</span></span><br><span class="line"><span class="javascript">        $(modalEle).removeClass(<span class="string">&quot;hide&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">123</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> cButton = $(<span class="string">&#x27;#i3&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    cButton.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> coverEle = $(<span class="string">&#x27;.cover&#x27;</span>)[<span class="number">0</span>]; <span class="comment">//需要手动转</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> modalEle = $(<span class="string">&#x27;.modal&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(coverEle).addClass(<span class="string">&quot;hide&quot;</span>);</span></span><br><span class="line"><span class="javascript">        $(modalEle).addClass(<span class="string">&quot;hide&quot;</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>三级菜单</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        .left &#123;</span><br><span class="line">            float: left;</span><br><span class="line">            background-color: darkgray;</span><br><span class="line">            width: <span class="number">20</span>%;</span><br><span class="line">            height: <span class="number">100</span>%;</span><br><span class="line">            position: fixed;</span><br><span class="line">        &#125;</span><br><span class="line">        .title &#123;</span><br><span class="line">            font-size: <span class="number">36</span>px;</span><br><span class="line">            color: white;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        .items &#123;</span><br><span class="line">            border: <span class="number">1</span>px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">        .hide &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;left&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;menu&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;title&quot;</span>&gt;菜单一</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;items&quot;</span>&gt;<span class="number">111</span>&lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;items&quot;</span>&gt;<span class="number">222</span>&lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;items&quot;</span>&gt;<span class="number">333</span>&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;title&quot;</span>&gt;菜单二</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;items&quot;</span>&gt;<span class="number">111</span>&lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;items&quot;</span>&gt;<span class="number">222</span>&lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;items&quot;</span>&gt;<span class="number">333</span>&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;title&quot;</span>&gt;菜单三</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;items&quot;</span>&gt;<span class="number">111</span>&lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;items&quot;</span>&gt;<span class="number">222</span>&lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;items&quot;</span>&gt;<span class="number">333</span>&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">     $(<span class="string">&#x27;.title&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 先给所有的items加hide</span></span><br><span class="line">         $(<span class="string">&#x27;.items&#x27;</span>).addClass(<span class="string">&#x27;hide&#x27;</span>)</span><br><span class="line">         <span class="comment">// 然后将被点击标签内部的hide移除</span></span><br><span class="line">         $(<span class="built_in">this</span>).children().removeClass(<span class="string">&#x27;hide&#x27;</span>)</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>返回顶部</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(window).scroll(function () &#123;</span><br><span class="line">        <span class="keyword">if</span>($(window).scrollTop() &gt; <span class="number">300</span>)&#123;</span><br><span class="line">            $(<span class="string">&#x27;#d1&#x27;</span>).removeClass(<span class="string">&#x27;hide&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">&#x27;#d1&#x27;</span>).addClass(<span class="string">&#x27;hide&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义登录校验</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在获取用户的用户名和密码的时候，用户如果没有填写，应该给用户展示提示信息</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    username: &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    &lt;span style=&quot;color: red&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    password: &lt;input type=<span class="string">&quot;password&quot;</span> id=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">    &lt;span style=&quot;color: red&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;button id=&quot;d1&quot;&gt;提交&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let $userName = $(<span class="string">&#x27;#username&#x27;</span>)</span><br><span class="line">    let $passWord = $(<span class="string">&#x27;#password&#x27;</span>)</span><br><span class="line">    $(<span class="string">&#x27;#d1&#x27;</span>).click(function () &#123;</span><br><span class="line">        // 获取用户输入的用户名和密码做校验</span><br><span class="line">        let userName = $userName.val()</span><br><span class="line">        let passWord = $passWord.val()</span><br><span class="line">        <span class="keyword">if</span> (!userName) &#123;</span><br><span class="line">            $userName.next().text(<span class="string">&#x27;用户名不能为空&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!passWord) &#123;</span><br><span class="line">            $passWord.next().text(<span class="string">&#x27;密码不能为空&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    $(<span class="string">&#x27;input&#x27;</span>).focus(function () &#123;</span><br><span class="line">        $(this).next().text(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>input框实时监控</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;#d1&#x27;</span>).on(<span class="string">&#x27;input&#x27;</span>,function () &#123;</span><br><span class="line">        console.log(this.value)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>hover事件</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">&#x27;#d1&#x27;</span>).hover(</span><br><span class="line">        function () &#123;</span><br><span class="line">            alert(<span class="string">&#x27;我来了&#x27;</span>) //悬浮</span><br><span class="line">    &#125;,</span><br><span class="line">        function() &#123;</span><br><span class="line">            alert(<span class="string">&#x27;我溜了&#x27;</span>) //离开</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>键盘按键按下事件</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(window).keydown(function (event) &#123;</span><br><span class="line">        console.log(event.keyCode)</span><br><span class="line">        <span class="keyword">if</span> (event.keyCode === <span class="number">16</span>) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;你按下了shift键&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JQuery-05</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-JQuery-05/</url>
    <content><![CDATA[<p>JQuery 动画效果</p>
<a id="more"></a>



<h2 id="1-基本效果"><a href="#1-基本效果" class="headerlink" title="1. 基本效果"></a>1. 基本效果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show([s,[e],[fn]])        显示隐藏的匹配元素</span><br><span class="line">hide([s,[e],[fn]])        隐藏显示的元素</span><br><span class="line">toggle([s],[e],[fn])    如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的</span><br></pre></td></tr></table></figure>

<p><strong>参数详解</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">speed    : 三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)</span><br><span class="line">easing    : (Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;</span><br><span class="line">fn        : 在动画完成时执行的函数，每个元素执行一次。</span><br></pre></td></tr></table></figure>

<h2 id="2-滑动效果"><a href="#2-滑动效果" class="headerlink" title="2. 滑动效果"></a>2. 滑动效果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slideDown([s],[e],[fn])        通过高度变化（向下增大）来动态地显示所有匹配的元素</span><br><span class="line">slideUp([s,[e],[fn]])        通过高度变化（向上减小）来动态地隐藏所有匹配的元素</span><br><span class="line">slideToggle([s],[e],[fn])    通过高度变化来切换所有匹配元素的可见性</span><br></pre></td></tr></table></figure>

<p><strong>参数详解</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">speed    : 三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)</span><br><span class="line">easing    : (Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;</span><br><span class="line">fn        : 在动画完成时执行的函数，每个元素执行一次。</span><br></pre></td></tr></table></figure>

<h2 id="3-淡入淡出效果"><a href="#3-淡入淡出效果" class="headerlink" title="3 淡入淡出效果"></a>3 淡入淡出效果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fadeIn([s],[e],[fn])        通过不透明度的变化来实现所有匹配元素的淡入效果</span><br><span class="line">fadeOut([s],[e],[fn])        通过不透明度的变化来实现所有匹配元素的淡出效果</span><br><span class="line">fadeToggle([s,[e],[fn]])    通过不透明度的变化来开关所有匹配元素的淡入和淡出效果</span><br><span class="line">fadeTo([[s],o,[e],[fn]])    把所有匹配元素的不透明度以渐进方式调整到指定的不透明度</span><br></pre></td></tr></table></figure>

<p><strong>参数详解</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">speed    : 三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)</span><br><span class="line">easing    : (Optional) 用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;</span><br><span class="line">fn        : 在动画完成时执行的函数，每个元素执行一次。</span><br><span class="line"></span><br><span class="line">opacity    : (用户fadeTo)一个0至1之间表示透明度的数字。</span><br></pre></td></tr></table></figure>

<h2 id="4-自定义动画"><a href="#4-自定义动画" class="headerlink" title="4 自定义动画"></a>4 自定义动画</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">animate(p,[s],[e],[fn])</span><br></pre></td></tr></table></figure>

<p><strong>参数详解</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">params    : 一组包含作为动画属性和终值的样式属性和及其值的集合</span><br><span class="line">speed    : 三种预定速度之一的字符串(&quot;slow&quot;,&quot;normal&quot;, or &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)</span><br><span class="line">easing    : 要使用的擦除效果的名称(需要插件支持).默认jQuery提供&quot;linear&quot; 和 &quot;swing&quot;.</span><br><span class="line">fn        : 在动画完成时执行的函数，每个元素执行一次。</span><br></pre></td></tr></table></figure>

<h2 id="5-动画控制"><a href="#5-动画控制" class="headerlink" title="5 动画控制"></a>5 动画控制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop([c],[j])        停止所有在指定元素上正在运行的动画</span><br><span class="line">delay(d,[q])        设置一个延时来推迟执行队列中之后的项目</span><br><span class="line">finish([queue])        停止当前正在运行的动画，删除所有排队的动画，并完成匹配元素所有的动画</span><br></pre></td></tr></table></figure>

<h2 id="6-设置"><a href="#6-设置" class="headerlink" title="6 设置"></a>6 设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;关闭页面上所有的动画</span><br><span class="line">jQuery.fx.off &#x3D; true;</span><br></pre></td></tr></table></figure>

<h2 id="7-事件"><a href="#7-事件" class="headerlink" title="7 事件"></a>7 事件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一种</span><br><span class="line">    $(&#39;#d1&#39;).click(function () &#123;</span><br><span class="line">            alert(&#39;别说话 吻我&#39;)</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">&#x2F;&#x2F; 第二种(功能更加强大 还支持事件委托)</span><br><span class="line">    $(&#39;#d2&#39;).on(&#39;click&#39;,function () &#123;</span><br><span class="line">            alert(&#39;借我钱买草莓 后面还你&#39;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="7-1-常用事件"><a href="#7-1-常用事件" class="headerlink" title="7-1 常用事件"></a>7-1 常用事件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">click(function()&#123;...&#125;)</span><br><span class="line">hover(function()&#123;...&#125;)</span><br><span class="line">blur(function()&#123;...&#125;)</span><br><span class="line">focus(function()&#123;...&#125;)</span><br><span class="line">change(function()&#123;...&#125;)</span><br><span class="line">keyup(function()&#123;...&#125;)</span><br></pre></td></tr></table></figure>

<p>keydown和keyup事件组合示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-Type&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-ua-compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Egon<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>上线<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>下线<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>停职<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Alex<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>上线<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>下线<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>停职<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yuan<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>上线<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>下线<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>停职<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>EvaJ<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>上线<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>下线<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>停职<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Gold<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>上线<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>下线<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>停职<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.3.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// shift按键被按下的时候</span></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">window</span>).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.keyCode);</span></span><br><span class="line">        if (event.keyCode === 16)&#123;</span><br><span class="line"><span class="javascript">            flag = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="comment">// shift按键被抬起的时候</span></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">window</span>).keyup(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event.keyCode);</span></span><br><span class="line">        if (event.keyCode === 16)&#123;</span><br><span class="line"><span class="javascript">            flag = <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="comment">// select标签的值发生变化的时候</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;select&quot;</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果shift按键被按下，就进入批量编辑模式</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// shift按键对应的code是16</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 判断当前select这一行是否被选中</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log($(<span class="built_in">this</span>).parent().siblings().first().find(<span class="string">&quot;:checkbox&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> isChecked = $(<span class="built_in">this</span>).parent().siblings().first().find(<span class="string">&quot;:checkbox&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(isChecked);</span></span><br><span class="line">        if (flag &amp;&amp; isChecked) &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 进入批量编辑模式</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1. 取到当前select选中的值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> value = $(<span class="built_in">this</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2. 给其他被选中行的select设置成和我一样的值</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2.1 找到那些被选中行的select</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $select = $(<span class="string">&quot;input:checked&quot;</span>).parent().parent().find(<span class="string">&quot;select&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 2.2 给选中的select赋值</span></span></span><br><span class="line">            $select.val(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>hover事件示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;苍茫的天涯是我的哎，绵绵的青山脚下一片海！&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;jQuery-3.3.1.js&quot;&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&#39;p&#39;).hover(</span><br><span class="line">        function () &#123;</span><br><span class="line">            alert(&#39;来啦，老弟&#39;)</span><br><span class="line">        &#125;,</span><br><span class="line">        function () &#123;</span><br><span class="line">            alert(&#39;慢走哦～&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>实时监听input输入值变化示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;x-ua-compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">  &lt;title&gt;实时监听input输入值变化&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;i1&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;jquery-3.2.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;*</span><br><span class="line">  * oninput是HTML5的标准事件</span><br><span class="line">  * 能够检测textarea,input:text,input:password和input:search这几个元素的内容变化，</span><br><span class="line">  * 在内容修改后立即被触发，不像onchange事件需要失去焦点才触发</span><br><span class="line">  * oninput事件在IE9以下版本不支持，需要使用IE特有的onpropertychange事件替代</span><br><span class="line">  * 使用jQuery库的话直接使用on同时绑定这两个事件即可。</span><br><span class="line">  * *&#x2F;</span><br><span class="line">  $(&quot;#i1&quot;).on(&quot;input propertychange&quot;, function () &#123;</span><br><span class="line">    alert($(this).val());</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-事件绑定"><a href="#7-2-事件绑定" class="headerlink" title="7-2 事件绑定"></a>7-2 事件绑定</h3><ol>
<li><code>.on( events [, selector ],function()&#123;&#125;)</code></li>
</ol>
<ul>
<li>events： 事件</li>
<li>selector: 选择器（可选的）</li>
<li>function: 事件处理函数</li>
</ul>
<h3 id="7-3-移除事件"><a href="#7-3-移除事件" class="headerlink" title="7-3 移除事件"></a>7-3 移除事件</h3><ol>
<li><code>.off( events [, selector ][,function()&#123;&#125;])</code></li>
</ol>
<p><code>off()</code> 方法移除用 <code>.on()</code>绑定的事件处理程序。</p>
<ul>
<li>events： 事件</li>
<li>selector: 选择器（可选的）</li>
<li>function: 事件处理函数</li>
</ul>
<h3 id="7-4-阻止后续事件执行"><a href="#7-4-阻止后续事件执行" class="headerlink" title="7-4 阻止后续事件执行"></a>7-4 阻止后续事件执行</h3><ol>
<li><code>return false; // 常见阻止表单提交等</code></li>
<li>e.preventDefault();</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>阻止默认事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">        alert(123);</span><br><span class="line"><span class="javascript">        <span class="comment">//return false;          // 推荐使用方式</span></span></span><br><span class="line">     </span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>像click、keydown等DOM中定义的事件，我们都可以使用<code>.on()</code>方法来绑定事件，但是<code>hover</code>这种jQuery中定义的事件就不能用<code>.on()</code>方法来绑定了。</p>
<p>想使用事件委托的方式绑定hover事件处理函数，可以参照如下代码分两步绑定事件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;ul&#39;).on(&#39;mouseenter&#39;, &#39;li&#39;, function() &#123;&#x2F;&#x2F;绑定鼠标进入事件</span><br><span class="line">    $(this).addClass(&#39;hover&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">$(&#39;ul&#39;).on(&#39;mouseleave&#39;, &#39;li&#39;, function() &#123;&#x2F;&#x2F;绑定鼠标划出事件</span><br><span class="line">    $(this).removeClass(&#39;hover&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="7-8-阻止事件冒泡"><a href="#7-8-阻止事件冒泡" class="headerlink" title="7-8 阻止事件冒泡"></a>7-8 阻止事件冒泡</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>阻止事件冒泡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;span&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;span&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 阻止事件冒泡 方式2</span></span></span><br><span class="line">        e.stopPropagation();</span><br><span class="line"><span class="javascript">        <span class="comment">// 阻止事件冒泡 方式1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;p&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;div&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7-9-页面载入"><a href="#7-9-页面载入" class="headerlink" title="7-9 页面载入"></a>7-9 页面载入</h3><p>当DOM载入就绪可以查询及操纵时绑定一个要执行的函数。这是事件模块中最重要的一个函数，因为它可以极大地提高web应用程序的响应速度。</p>
<p>两种写法：1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">&#x2F;&#x2F; 在这里写你的JS代码...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>简写：2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">&#x2F;&#x2F; 你在这里写你的代码</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>第三种:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">直接写在body内部最下方</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>文档加载完绑定事件，并且阻止默认事件发生：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;x-ua-compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">  &lt;title&gt;登录注册示例&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .error &#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form id&#x3D;&quot;myForm&quot;&gt;</span><br><span class="line">  &lt;label for&#x3D;&quot;name&quot;&gt;姓名&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;error&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;label for&#x3D;&quot;passwd&quot;&gt;密码&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;passwd&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;error&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;submit&quot; id&#x3D;&quot;modal-submit&quot; value&#x3D;&quot;登录&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;jquery-3.2.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;s7validate.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function myValidation() &#123;</span><br><span class="line">    &#x2F;&#x2F; 多次用到的jQuery对象存储到一个变量，避免重复查询文档树</span><br><span class="line">    var $myForm &#x3D; $(&quot;#myForm&quot;);</span><br><span class="line">    $myForm.find(&quot;:submit&quot;).on(&quot;click&quot;, function () &#123;</span><br><span class="line">      &#x2F;&#x2F; 定义一个标志位，记录表单填写是否正常</span><br><span class="line">      var flag &#x3D; true;</span><br><span class="line">      $myForm.find(&quot;:text, :password&quot;).each(function () &#123;</span><br><span class="line">        var val &#x3D; $(this).val();</span><br><span class="line">        if (val.length &lt;&#x3D; 0 )&#123;</span><br><span class="line">          var labelName &#x3D; $(this).prev(&quot;label&quot;).text();</span><br><span class="line">          $(this).next(&quot;span&quot;).text(labelName + &quot;不能为空&quot;);</span><br><span class="line">          flag &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      &#x2F;&#x2F; 表单填写有误就会返回false，阻止submit按钮默认的提交表单事件</span><br><span class="line">      return flag;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; input输入框获取焦点后移除之前的错误提示信息</span><br><span class="line">    $myForm.find(&quot;input[type!&#x3D;&#39;submit&#39;]&quot;).on(&quot;focus&quot;, function () &#123;</span><br><span class="line">      $(this).next(&quot;.error&quot;).text(&quot;&quot;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; 文档树就绪后执行</span><br><span class="line">  $(document).ready(function () &#123;</span><br><span class="line">    myValidation();</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-10-与window-onload的区别"><a href="#7-10-与window-onload的区别" class="headerlink" title="7-10 与window.onload的区别"></a>7-10 与window.onload的区别</h3><ul>
<li>window.onload()函数有覆盖现象，必须等待着图片资源加载完成之后才能调用</li>
<li>jQuery的这个入口函数没有函数覆盖现象，文档加载完成之后就可以调用（建议使用此函数）</li>
</ul>
<h3 id="7-11-事件委托"><a href="#7-11-事件委托" class="headerlink" title="7-11 事件委托"></a>7-11 事件委托</h3><p>事件委托是通过事件冒泡的原理，利用父标签去捕获子标签的事件。</p>
<p>示例：</p>
<p>表格中每一行的编辑和删除按钮都能触发相应的事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(&quot;table&quot;).on(&quot;click&quot;, &quot;.delete&quot;, function () &#123;</span><br><span class="line">  // 删除按钮绑定的事件</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>是兄弟，就来砍我!!!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 给页面上所有的button标签绑定点击事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;button&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 无法影响到动态创建的标签</span></span></span><br><span class="line">        alert(123)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">    //$(&#x27;body&#x27;).append(&#x27;<span class="tag">&lt;<span class="name">button</span>&gt;</span>是兄弟，就来砍我!!!<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#x27;)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 事件委托</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// $(&#x27;body&#x27;).on(&#x27;click&#x27;,&#x27;button&#x27;,function () &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     alert(123)  // 在指定的范围内 将事件委托给某个标签 无论该标签是事先写好的还是后面动态创建的</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="each"><a href="#each" class="headerlink" title="each"></a>each</h2><p><strong>jQuery.each(collection, callback(indexInArray, valueOfElement))：</strong></p>
<p><strong>第一种方式</strong></p>
<p>描述：一个通用的迭代函数，它可以用来无缝迭代对象和数组。数组和类似数组的对象通过一个长度属性（如一个函数的参数对象）来迭代数字索引，从0到length - 1。其他对象通过其属性名进行迭代。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">li &#x3D;[10,20,30,40]</span><br><span class="line">$.each(li,function(i, v)&#123;</span><br><span class="line">  console.log(i, v);&#x2F;&#x2F;index是索引，ele是每次循环的具体元素。</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">010</span><br><span class="line">120</span><br><span class="line">230</span><br><span class="line">340</span><br></pre></td></tr></table></figure>

<p><strong>.each(function(index, Element))：</strong></p>
<p><strong>第二种方式</strong></p>
<p>简单示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).each(function(index)&#123;console.log(index)&#125;)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">w.fn.init(<span class="number">10</span>) [div, div, div, div, div, div, div, div, div, div, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).each(function(index,obj)&#123;console.log(index,obj)&#125;)</span><br><span class="line">0 &lt;div&gt;​1​&lt;/div&gt;​</span><br><span class="line">1 &lt;div&gt;​2​&lt;/div&gt;​</span><br><span class="line">2 &lt;div&gt;​3​&lt;/div&gt;​</span><br><span class="line">3 &lt;div&gt;​4​&lt;/div&gt;​</span><br><span class="line">4 &lt;div&gt;​5​&lt;/div&gt;​</span><br><span class="line">5 &lt;div&gt;​6​&lt;/div&gt;​</span><br><span class="line">6 &lt;div&gt;​7​&lt;/div&gt;​</span><br><span class="line">7 &lt;div&gt;​8​&lt;/div&gt;​</span><br><span class="line">8 &lt;div&gt;​9​&lt;/div&gt;​</span><br><span class="line">9 &lt;div&gt;​10​&lt;/div&gt;​</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>描述：遍历一个jQuery对象，为每个匹配元素执行一个函数。</p>
<p><code>.each()</code> 方法用来迭代jQuery对象中的每一个DOM元素。每次回调函数执行时，会传递当前循环次数作为参数(从0开始计数)。由于回调函数是在当前DOM元素为上下文的语境中触发的，所以关键字 <code>this</code> 总是指向这个元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 为每一个li标签添加foo</span><br><span class="line">$(&quot;li&quot;).each(function()&#123;</span><br><span class="line">  $(this).addClass(&quot;c1&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意: jQuery的方法返回一个jQuery对象，遍历jQuery集合中的元素 - 被称为隐式<em>迭代</em>的过程。当这种情况发生时，它通常不需要显式地循环的 <code>.each()</code>方法：</p>
<p>也就是说，上面的例子没有必要使用each()方法，直接像下面这样写就可以了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;li&quot;).addClass(&quot;c1&quot;);  &#x2F;&#x2F; 对所有标签做统一操作</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>在遍历过程中可以使用 <code>return false</code>提前结束each循环。</p>
<p><strong>终止each循环</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return false；</span><br></pre></td></tr></table></figure>



<h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">能够让标签帮我们存储数据，并且用户肉眼看不见</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).first().data(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="string">&quot;躺平睡觉&quot;</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).data(<span class="string">&#x27;info&#x27;</span>,<span class="string">&#x27;躺平睡觉&#x27;</span>)</span><br><span class="line">w.fn.init(<span class="number">10</span>) [div, div, div, div, div, div, div, div, div, div, prevObject: w.fn.init(<span class="number">1</span>)]</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).first().data(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="string">&quot;躺平睡觉&quot;</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).last().data(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="string">&quot;躺平睡觉&quot;</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).last().data(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">undefined</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).last().removeData(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line">w.fn.init [div, prevObject: w.fn.init(<span class="number">10</span>)]</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).first().data(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="string">&quot;躺平睡觉&quot;</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).last().data(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JQuery-06</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-JQuery-06/</url>
    <content><![CDATA[<p>JQuery 插件</p>
<a id="more"></a>



<h2 id="1-jQuery-插件的网站"><a href="#1-jQuery-插件的网站" class="headerlink" title="1 jQuery 插件的网站"></a>1 jQuery 插件的网站</h2><ul>
<li><a href="http://plugins.jquery.com/">http://plugins.jquery.com/</a> 官网</li>
<li><a href="http://www.jq22.com/">http://www.jq22.com/</a> jQuery插件库</li>
<li><a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a> jQuery 之家</li>
<li><a href="http://www.jq-school.co/">http://www.jq-school.co</a> m jQuery-school</li>
</ul>
<h2 id="2-经典jQuery插件"><a href="#2-经典jQuery插件" class="headerlink" title="2 经典jQuery插件"></a>2 经典jQuery插件</h2><p>2.1 ### select2 下拉框搜索插件</p>
<ul>
<li><p>官网 <a href="https://select2.org/">https://select2.org/</a></p>
</li>
<li><p>github <a href="https://github.com/select2/select2">https://github.com/select2/select2</a></p>
</li>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(dom).select2()</span><br><span class="line">$(dom).select(&#123;</span><br><span class="line">  width:,</span><br><span class="line">  data:,</span><br><span class="line">  ajax:,</span><br><span class="line">  ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-datetimepicker-时间日期插件"><a href="#2-2-datetimepicker-时间日期插件" class="headerlink" title="2.2 datetimepicker 时间日期插件"></a>2.2 datetimepicker 时间日期插件</h3><ul>
<li><p>github <a href="https://github.com/xdan/datetimepicker">https://github.com/xdan/datetimepicker</a></p>
</li>
<li><p>文档 <a href="https://xdsoft.net/jqplugins/datetimepicker/">https://xdsoft.net/jqplugins/datetimepicker/</a></p>
</li>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;设置语言</span><br><span class="line">$.datetimepicker.setLocale(&#39;zh&#39;);</span><br><span class="line">&#x2F;&#x2F;调用插件</span><br><span class="line">$(dom).datetimepicker(&#123;</span><br><span class="line">  datepicker:,</span><br><span class="line">  timepicker:,</span><br><span class="line">  format:&quot;Y-m-d H:i&quot;,</span><br><span class="line">  value:，</span><br><span class="line">  ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3-fullpage-全屏滚动插件"><a href="#2-3-fullpage-全屏滚动插件" class="headerlink" title="2.3 fullpage 全屏滚动插件"></a>2.3 fullpage 全屏滚动插件</h3><ul>
<li><p>官网 <a href="https://alvarotrigo.com/fullPage/zh/">https://alvarotrigo.com/fullPage/zh/</a></p>
</li>
<li><p>github <a href="https://github.com/alvarotrigo/fullpage.js/">https://github.com/alvarotrigo/fullpage.js/</a></p>
</li>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--HTML部分--&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;fullpage&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;section&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;section&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;slide&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;slide&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;slide&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;section&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;section&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">自定义的导航 卸载包裹元素的外面</span><br><span class="line"></span><br><span class="line">&lt;!--JS部分--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(&quot;#fullpage&quot;).fullpage(&#123;</span><br><span class="line">      navigation: true,</span><br><span class="line">      sectionsColor: []</span><br><span class="line">      .....</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4-lazyload-图片懒加载"><a href="#2-4-lazyload-图片懒加载" class="headerlink" title="2.4 lazyload 图片懒加载"></a>2.4 lazyload 图片懒加载</h3><ul>
<li><p>官网 <a href="https://appelsiini.net/projects/lazyload/">https://appelsiini.net/projects/lazyload/</a></p>
</li>
<li><p>github <a href="https://github.com/tuupola/jquery_lazyload/tree/2.x">https://github.com/tuupola/jquery_lazyload/tree/2.x</a></p>
</li>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#lazyWrapper img&quot;).lazyload()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5-layer-弹窗插件"><a href="#2-5-layer-弹窗插件" class="headerlink" title="2.5 layer 弹窗插件"></a>2.5 layer 弹窗插件</h3><ul>
<li><p>官网 <a href="http://layer.layui.com/?alone">http://layer.layui.com/?alone</a></p>
</li>
<li><p>github <a href="https://github.com/sentsin/layer/">https://github.com/sentsin/layer/</a></p>
</li>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">layer.alert()</span><br><span class="line">layer.confirm()</span><br><span class="line">layer.msg()</span><br><span class="line">layer.load()</span><br><span class="line">layer.tips()</span><br><span class="line">layer.colse()</span><br><span class="line">layer.open(&#123;</span><br><span class="line">  type: ,</span><br><span class="line">  title: ,</span><br><span class="line">  content: </span><br><span class="line">  ....</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-6-nice-validator-表单验证"><a href="#2-6-nice-validator-表单验证" class="headerlink" title="2.6 nice validator 表单验证"></a>2.6 nice validator 表单验证</h3><ul>
<li><p>官网 <a href="https://validator.niceue.com/">https://validator.niceue.com/</a></p>
</li>
<li><p>github <a href="https://github.com/niceue/nice-validator">https://github.com/niceue/nice-validator</a></p>
</li>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;form&quot;).validator(&#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-7-jQuery-easing"><a href="#2-7-jQuery-easing" class="headerlink" title="2.7 jQuery-easing"></a>2.7 jQuery-easing</h3><ul>
<li><p>官网 <a href="http://gsgd.co.uk/sandbox/jquery/easing/">http://gsgd.co.uk/sandbox/jquery/easing/</a></p>
</li>
<li><p>github <a href="https://github.com/gdsmith/jquery.easing">https://github.com/gdsmith/jquery.easing</a></p>
</li>
<li><p>用法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(dom).hide(speed, easing, fn)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-自定义jQuery-插件"><a href="#3-自定义jQuery-插件" class="headerlink" title="3 自定义jQuery 插件"></a>3 自定义jQuery 插件</h2><p><strong>jQuery.fn.extend() 给jQueryDom扩展方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.fn.extend(&#123;</span><br><span class="line">  方法名:function()&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">$.fn.方法名 &#x3D; function()&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>jQuery.extend() 给jQuery 对象本身扩展方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.extend(&#123;</span><br><span class="line">   方法名: function()&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-jQuery-UI"><a href="#4-jQuery-UI" class="headerlink" title="4 jQuery UI"></a>4 jQuery UI</h2><ul>
<li>官网 <a href="https://jqueryui.com/">https://jqueryui.com/</a></li>
</ul>
<h2 id="5-jQueryMobile"><a href="#5-jQueryMobile" class="headerlink" title="5 jQueryMobile"></a>5 jQueryMobile</h2><ul>
<li>官网 <a href="https://jquerymobile.com/">https://jquerymobile.com/</a></li>
<li>教程 <a href="http://www.runoob.com/jquerymobile/jquerymobile-tutorial.html">http://www.runoob.com/jquerymobile/jquerymobile-tutorial.html</a></li>
</ul>
<h2 id="6-Sizzle"><a href="#6-Sizzle" class="headerlink" title="6 Sizzle"></a>6 Sizzle</h2><ul>
<li>官网 <a href="https://sizzlejs.com/">https://sizzlejs.com/</a></li>
</ul>
<h2 id="7-Zepto"><a href="#7-Zepto" class="headerlink" title="7 Zepto"></a>7 Zepto</h2><ul>
<li>官网 <a href="http://zeptojs.com/">http://zeptojs.com/</a></li>
<li>与jquery区别： <a href="https://www.zhihu.com/question/25379207">https://www.zhihu.com/question/25379207</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JS-01</title>
    <url>/2021/05/01/%E5%89%8D%E7%AB%AF-JS-01/</url>
    <content><![CDATA[<p>JavaScript 介绍/书写位置/语言规范/总结</p>
<a id="more"></a>

<h2 id="1、JavaScript是什么"><a href="#1、JavaScript是什么" class="headerlink" title="1、JavaScript是什么"></a>1、JavaScript是什么</h2><p>JavaScript（下文我们会用简称JS来代替）是脚本编程语言，JS语言开发的文件是以.js为后缀，通过在html文件中引入该js文件来控制html代码的交互功能以及前台数据处理的业务逻辑（js语言代码也可以直接写在html文件中），采用的<a href="https://baike.baidu.com/item/ECMAScript/1889420?fr=aladdin">ECMAScript</a>语法，属于编程语言。</p>
<p>ECMAScript目前普遍使用的存在ES5与ES6两个版本，我们也会基于这两个版本来介绍JS这么应用的学习</p>
<h2 id="2、JavaScript介绍"><a href="#2、JavaScript介绍" class="headerlink" title="2、JavaScript介绍"></a>2、JavaScript介绍</h2><h3 id="2-1-ECMAScript和JavaScript的关系"><a href="#2-1-ECMAScript和JavaScript的关系" class="headerlink" title="2-1 ECMAScript和JavaScript的关系"></a>2-1 ECMAScript和JavaScript的关系</h3><p>1996年11月，JavaScript的创造者–Netscape公司，决定将JavaScript提交给国际标准化组织ECMA，希望这门语言能够成为国际标准。次年，ECMA发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为ECMAScript，这个版本就是1.0版。</p>
<p>该标准一开始就是针对JavaScript语言制定的，但是没有称其为JavaScript，有两个方面的原因。一是商标，JavaScript本身已被Netscape注册为商标。而是想体现这门语言的制定者是ECMA，而不是Netscape，这样有利于保证这门语言的开发性和中立性。</p>
<p>因此ECMAScript和JavaScript的关系是，前者是后者的规格，后者是前者的一种实现。</p>
<h3 id="2-2-ECMAScript的历史"><a href="#2-2-ECMAScript的历史" class="headerlink" title="2-2 ECMAScript的历史"></a>2-2 ECMAScript的历史</h3><table>
<thead>
<tr>
<th>年份</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1997</td>
<td>ECMAScript 1</td>
<td>第一个版本</td>
</tr>
<tr>
<td>1998</td>
<td>ECMAScript 2</td>
<td>版本变更</td>
</tr>
<tr>
<td>1999</td>
<td>ECMAScript 3</td>
<td>添加正则表达式添加try/catch</td>
</tr>
<tr>
<td></td>
<td>ECMAScript 4</td>
<td>没有发布</td>
</tr>
<tr>
<td>2009</td>
<td>ECMAScript 5</td>
<td>添加”strict mode”严格模式添加JSON支持</td>
</tr>
<tr>
<td>2011</td>
<td>ECMAScript 5.1</td>
<td>版本变更</td>
</tr>
<tr>
<td>2015</td>
<td>ECMAScript 6</td>
<td>添加类和模块</td>
</tr>
<tr>
<td>2016</td>
<td>ECMAScript 7</td>
<td>增加指数运算符（**）增加Array.prototype.includes</td>
</tr>
</tbody></table>
<p><em>注：ES6就是指ECMAScript 6。</em></p>
<p>尽管 ECMAScript 是一个重要的标准，但它并不是 JavaScript 唯一的部分，当然，也不是唯一被标准化的部分。实际上，一个完整的 JavaScript 实现是由以下 3 个不同部分组成的：</p>
<ul>
<li>核心（ECMAScript）</li>
<li>文档对象模型（DOM） Document object model (整合js，css，html)</li>
<li>浏览器对象模型（BOM） Broswer object model（整合js和浏览器）</li>
</ul>
<p>简单地说，ECMAScript 描述了JavaScript语言本身的相关内容。</p>
<p>JavaScript 是脚本语言<br>JavaScript 是一种轻量级的编程语言。</p>
<p>JavaScript 是可插入 HTML 页面的编程代码。</p>
<p>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</p>
<p>JavaScript 很容易学习。</p>
<h2 id="3、JS代码书写位置"><a href="#3、JS代码书写位置" class="headerlink" title="3、JS代码书写位置"></a>3、JS代码书写位置</h2><p>JS属于脚本(可以以代码片段的方式内嵌到其他语言中)编程语言，可以内嵌到html代码中，但是可以根据实际情况书写在不同的位置，放在不同位置有不同的专业叫法，可以分为行间式、内联式和外联式三种。</p>
<h3 id="3-1-行间式"><a href="#3-1-行间式" class="headerlink" title="3-1 行间式"></a>3-1 行间式</h3><p>JS代码书写在标签的事件全局属性中，采用的是JS编程语言的语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 关键代码 --&gt;</span><br><span class="line">&lt;!-- 给div标签添加点击事件的交互逻辑：弹出文本提示框 --&gt;</span><br><span class="line">&lt;div onclick&#x3D;&quot;alert(&#39;点击我完成页面交互&#39;)&quot;&gt;点我&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-内联式"><a href="#3-2-内联式" class="headerlink" title="3-2 内联式"></a>3-2 内联式</h3><p>JS代码书写在script标签中，script标签可以出现在页面中的任意位置，建议放在body标签的最后(html代码是自上而下进行解析加载，放在body标签的最下方，会保证页面所有标签都加载完毕，html再去加载js文件，那么js脚步文件就会更好的控制页面标签的人机交互了)，采用的是JS编程语言的语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 关键代码 --&gt;</span><br><span class="line">&lt;!-- 页面被加载打开时，就会触发事件的交互逻辑：弹出文本提示框 --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- body标签中的所有子标签位置 --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- script标签出现在body标签的最下方 --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        alert(&#39;该页面被加载！&#39;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-外联式"><a href="#3-3-外联式" class="headerlink" title="3-3 外联式"></a>3-3 外联式</h3><p>JS代码书在外部js文件中，在html页面中用script标签引入js文件（建议在body标签最下方引入，理由同上）</p>
<ul>
<li>js文件夹下的my.js</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert(&#39;外联式js文件弹出框&#39;)</span><br></pre></td></tr></table></figure>

<ul>
<li>根目录下的first.html</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 关键代码 --&gt;</span><br><span class="line">&lt;!-- 页面被加载打开时，就会触发事件的交互逻辑：弹出文本提示框 --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- body标签中的所有子标签位置 --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- script标签出现在body标签的最下方 --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;my.js&quot;&gt;</span><br><span class="line">        &#x2F;* 不要在此写JS代码，原因是用来引入外部js文件的script标签，标签内部书写的JS代码不在起作用 *&#x2F;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>根目录下的second.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关键代码 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面被加载打开时，就会触发事件的交互逻辑：弹出文本提示框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body标签中的所有子标签位置 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- script标签出现在body标签的最下方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/my.js&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/* 不要在此写JS代码，原因是用来引入外部js文件的script标签，标签内部书写的JS代码不在起作用 */</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-JavaScript语言规范"><a href="#4-JavaScript语言规范" class="headerlink" title="4 JavaScript语言规范"></a>4 JavaScript语言规范</h2><h3 id="4-1-注释（注释是代码之母）"><a href="#4-1-注释（注释是代码之母）" class="headerlink" title="4-1 注释（注释是代码之母）"></a>4-1 注释（注释是代码之母）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 这是单行注释</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">这是</span><br><span class="line">多行注释</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-结束符"><a href="#4-2-结束符" class="headerlink" title="4-2 结束符"></a>4-2 结束符</h3><p>JavaScript中的语句要以分号（;）为结束符。</p>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>行间式控制交互最直接，但是交互逻辑多了直接导致页面可读性变差，且交互逻辑相同的标签样式也需要各自设置，复用性差，不建议使用；</p>
<p>内联式可以同时为多个标签提供交互逻辑（课程后面会详细介绍），学习阶段代码量不大的情况下，也不需要分文件处理的，这时候建议使用内联式；</p>
<p>外联式是分文件管理不同的页面存在的相同与不同的数据处理的业务逻辑与人机交互，可以极大提高开发效率，项目开发时一定要采用外联式来处理JS代码。</p>
<p>通过上面的介绍，大家很清楚JS是一门脚本编程语言，那么我们一定先要了解一下这门编程语言的基础语法，才可以慢慢的展开学。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JS-03</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-JS-03/</url>
    <content><![CDATA[<p>JavaScript 函数</p>
<a id="more"></a>

<h3 id="1-1-声明函数的方式"><a href="#1-1-声明函数的方式" class="headerlink" title="1-1 声明函数的方式"></a>1-1 声明函数的方式</h3><ul>
<li>function 关键字</li>
<li>匿名函数方式(表达式方式)</li>
<li>Function 构造函数方式</li>
</ul>
<h3 id="1-2-参数问题"><a href="#1-2-参数问题" class="headerlink" title="1-2 参数问题"></a>1-2 参数问题</h3><ul>
<li>形参和实参数量问题</li>
<li>可选形参(参数默认值)</li>
<li>可变长的实参列表:实参对象 aruguments</li>
</ul>
<h3 id="1-3-回调函数"><a href="#1-3-回调函数" class="headerlink" title="1-3 回调函数"></a>1-3 回调函数</h3><p>一个函数就可以接收另一个函数作为参数，这种函数就称之为回调函数(高阶函数)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function add(x, y, f) &#123;</span><br><span class="line">    return f(x) + f(y);</span><br><span class="line">&#125;</span><br><span class="line">add(-5, 6, Math.abs)</span><br></pre></td></tr></table></figure>

<h3 id="1-4-递归函数"><a href="#1-4-递归函数" class="headerlink" title="1-4 递归函数"></a>1-4 递归函数</h3><p>函数内部调用自己就是递归函数，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;用递归 实现阶乘</span><br><span class="line">function multiply(n) &#123;</span><br><span class="line">    if (n &#x3D;&#x3D; 1) &#123;</span><br><span class="line">        return 1</span><br><span class="line">    &#125;</span><br><span class="line">    return n * multiply(n - 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-自调函数"><a href="#1-5-自调函数" class="headerlink" title="1-5 自调函数"></a>1-5 自调函数</h3><p>函数生声明完 直接调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">    console.log(&#39;ok&#39;)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h3 id="1-6-闭包函数"><a href="#1-6-闭包函数" class="headerlink" title="1-6 闭包函数"></a>1-6 闭包函数</h3><p>当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，形成闭包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function count() &#123;</span><br><span class="line">    var arr &#x3D; [];</span><br><span class="line">    for (var i&#x3D;1; i&lt;&#x3D;3; i++) &#123;</span><br><span class="line">        arr.push((function (n) &#123;</span><br><span class="line">            return function () &#123;</span><br><span class="line">                return n * n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i));</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var results &#x3D; count();</span><br><span class="line">var f1 &#x3D; results[0];</span><br><span class="line">var f2 &#x3D; results[1];</span><br><span class="line">var f3 &#x3D; results[2];</span><br><span class="line"></span><br><span class="line">f1(); &#x2F;&#x2F; 1</span><br><span class="line">f2(); &#x2F;&#x2F; 4</span><br><span class="line">f3(); &#x2F;&#x2F; 9</span><br></pre></td></tr></table></figure>

<h3 id="1-7-总结"><a href="#1-7-总结" class="headerlink" title="1-7 总结"></a>1-7 总结</h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);  <span class="comment">// 内置的arguments对象</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">  <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// 调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果return多个返回值，只能拿到最后一个 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span></span><br><span class="line">&#125;</span><br><span class="line">res = index();   <span class="comment">// 只能拿到最后一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个返回值，建议用数组。 但是JS不支持解压赋值  a,b,c = res</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">666</span>,<span class="number">777</span>,<span class="number">888</span>]</span><br><span class="line">&#125;</span><br><span class="line">res = index(); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数方式</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行函数 书写立即执行的函数，首先先写两个括号()()这样防止书写混乱</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><em>补充：</em></p>
<h4 id="ES6中允许使用“箭头”（-gt-）定义函数"><a href="#ES6中允许使用“箭头”（-gt-）定义函数" class="headerlink" title="ES6中允许使用“箭头”（=&gt;）定义函数"></a>ES6中允许使用“箭头”（=&gt;）定义函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果箭头函数不需要参数或需要多个参数，就是用圆括号代表参数部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function">() =&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;  <span class="comment">//这里的return只能返回一个值，如果想返回多个值需要自己手动给他们包一个数组或对象中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数中的arguments参数"><a href="#函数中的arguments参数" class="headerlink" title="函数中的arguments参数"></a>函数中的arguments参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a+b);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);　<span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);<span class="comment">//arguments相当于将出传入的参数全部包含，这里取得就是第一个元素1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p><em>注意：</em></p>
<p>函数只能返回一个值，如果要返回多个值，只能将其放在数组或对象中返回。</p>
<h2 id="2、JavaScript-作用域"><a href="#2、JavaScript-作用域" class="headerlink" title="2、JavaScript 作用域"></a>2、JavaScript 作用域</h2><h3 id="2-1-局部作用域"><a href="#2-1-局部作用域" class="headerlink" title="2-1 局部作用域"></a>2-1 局部作用域</h3><p>函数中使用定义的变量就是局部变量，只能在本函数中使用</p>
<h3 id="2-2-全局作用域"><a href="#2-2-全局作用域" class="headerlink" title="2-2 全局作用域"></a>2-2 全局作用域</h3><p>在，函数外面，定义的变量是全局变量。哪都可以用</p>
<p><strong>变量提升</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 100</span><br><span class="line">function demo()&#123;</span><br><span class="line">    console.log(a)</span><br><span class="line">    var a &#x3D; 200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-作用域链"><a href="#2-3-作用域链" class="headerlink" title="2-3 作用域链"></a>2-3 作用域链</h3><p>函数嵌套函数会形成作用域链</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function demo()&#123;</span><br><span class="line">    function fn()&#123;</span><br><span class="line">        function fn1() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-块状作用域-ES6"><a href="#2-4-块状作用域-ES6" class="headerlink" title="2-4 块状作用域(ES6)"></a>2-4 块状作用域(ES6)</h3><p>使用<code>let</code>关键字声明的变量会具有块状作用域</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (let i &#x3D; 0; i &lt; 10; i ++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(i) &#x2F;&#x2F;变量不存在 Uncaught ReferenceError: i is not defined</span><br></pre></td></tr></table></figure>

<h2 id="3-函数使用案例"><a href="#3-函数使用案例" class="headerlink" title="3 函数使用案例"></a>3 函数使用案例</h2><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3-1 基本使用"></a>3-1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在python定义函数需要用到关键字def</span><br><span class="line"># 在js中定义函数需要用到关键字function</span><br><span class="line"></span><br><span class="line"># 格式</span><br><span class="line">function 函数名(形参1,形参2,形参3...)&#123;函数体代码&#125;</span><br><span class="line"></span><br><span class="line"># 无参函数</span><br><span class="line">function func1()&#123;</span><br><span class="line">  console.log(&#39;hello world&#39;)</span><br><span class="line">&#125;</span><br><span class="line">func1()  # 调用 加括调用 跟python是一样的</span><br><span class="line"></span><br><span class="line"># 有参函数</span><br><span class="line">function func2(a,b)&#123;</span><br><span class="line">  console.log(a,b)</span><br><span class="line">&#125;</span><br><span class="line">func2(1,2)</span><br><span class="line"></span><br><span class="line">func2(1,2,3,4,5,6,7,8,9)  # 多了没关系 只要对应的数据</span><br><span class="line">VM3610:2 1 2</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line">func2(1)  # 少了也没关系</span><br><span class="line">VM3610:2 1 undefined</span><br><span class="line">  </span><br><span class="line"># 关键字arguments</span><br><span class="line">function func2(a,b)&#123;</span><br><span class="line">  console.log(arguments)  # 能够获取到函数接受到的所有的参数</span><br><span class="line">  console.log(a,b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function func2(a,b)&#123;</span><br><span class="line">  if(arguments.length&lt;2)&#123;</span><br><span class="line">    console.log(&#39;传少了&#39;)</span><br><span class="line">  &#125;else if (arguments.length&gt;2)&#123;</span><br><span class="line">    console.log(&#39;传多了&#39;)</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    console.log(&#39;正常执行&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 函数的返回值  使用的也是关键字return</span><br><span class="line">function index()&#123;</span><br><span class="line">  return 666</span><br><span class="line">&#125;</span><br><span class="line">function index()&#123;</span><br><span class="line">  return 666,777,888,999</span><br><span class="line">&#125;</span><br><span class="line">res &#x3D; index();</span><br><span class="line">999</span><br><span class="line">res</span><br><span class="line">999  # 只能拿到最后一个</span><br><span class="line"></span><br><span class="line">function index()&#123;</span><br><span class="line">  return [666,777,888,999]</span><br><span class="line">&#125;</span><br><span class="line"># js不支持解压赋值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 匿名函数  就是没有名字</span><br><span class="line">function()&#123;</span><br><span class="line">  console.log(&#39;哈哈哈&#39;)</span><br><span class="line">&#125;</span><br><span class="line">var res &#x3D; function()&#123;</span><br><span class="line">  console.log(&#39;哈哈哈&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 箭头函数(要了解一下)  主要用来处理简单的业务逻辑 类似于python中的匿名函数</span><br><span class="line">var func1 &#x3D; v &#x3D;&gt; v;  &quot;&quot;&quot;箭头左边的是形参 右边的是返回值&quot;&quot;&quot;</span><br><span class="line">等价于</span><br><span class="line">var func1 &#x3D; function(v)&#123;</span><br><span class="line">  return v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var func2 &#x3D; (arg1,arg2) &#x3D;&gt; arg1+arg2</span><br><span class="line">等价于</span><br><span class="line">var func1 &#x3D; function(arg1,arg2)&#123;</span><br><span class="line">  return arg1+arg2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-作用域"><a href="#3-2-作用域" class="headerlink" title="3-2 作用域"></a>3-2 作用域</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 跟python查找变量的顺序一致</span><br><span class="line">var city &#x3D; &quot;BeiJing&quot;;</span><br><span class="line">function f() &#123;</span><br><span class="line">  var city &#x3D; &quot;ShangHai&quot;;</span><br><span class="line">  function inner()&#123;</span><br><span class="line">    var city &#x3D; &quot;ShenZhen&quot;;</span><br><span class="line">    console.log(city);</span><br><span class="line">  &#125;</span><br><span class="line">  inner();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();  &#x2F;&#x2F;输出结果是？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var city &#x3D; &quot;BeiJing&quot;;</span><br><span class="line">function Bar() &#123;</span><br><span class="line">  console.log(city);</span><br><span class="line">&#125;</span><br><span class="line">function f() &#123;</span><br><span class="line">  var city &#x3D; &quot;ShangHai&quot;;</span><br><span class="line">  return Bar;</span><br><span class="line">&#125;</span><br><span class="line">var ret &#x3D; f();</span><br><span class="line">ret();  &#x2F;&#x2F; 打印结果是？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var city &#x3D; &quot;BeiJing&quot;;</span><br><span class="line">function f()&#123;</span><br><span class="line">    var city &#x3D; &quot;ShangHai&quot;;</span><br><span class="line">    function inner()&#123;</span><br><span class="line">        console.log(city);</span><br><span class="line">    &#125;</span><br><span class="line">    return inner;</span><br><span class="line">&#125;</span><br><span class="line">var ret &#x3D; f();</span><br><span class="line">ret();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JS-04</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-JS-04/</url>
    <content><![CDATA[<p>JS 的 BOM操作</p>
<a id="more"></a>

<h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>到目前为止，我们已经学过了JavaScript的一些简单的语法。但是这些简单的语法，并没有和浏览器有任何交互。</p>
<p>也就是我们还不能制作一些我们经常看到的网页的一些交互，我们需要继续学习BOM和DOM相关知识。</p>
<p>JavaScript分为 ECMAScript，DOM，BOM。</p>
<p>BOM（Browser Object Model）是指浏览器对象模型，它使 JavaScript 有能力与浏览器进行“对话”。</p>
<p>DOM （Document Object Model）是指文档对象模型，通过它，可以访问HTML文档的所有元素。</p>
<p>Window对象是客户端JavaScript最高层对象之一，由于window对象是其它大部分对象的共同祖先，在调用window对象的方法和属性时，可以省略window对象的引用。例如：window.document.write()可以简写成：document.write()。</p>
<h2 id="2、window对象"><a href="#2、window对象" class="headerlink" title="2、window对象"></a>2、window对象</h2><p>所有浏览器都支持 window 对象。它表示浏览器窗口。</p>
<p>*<em>如果文档包含框架（frame 或 iframe 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。</em></p>
<p>*<em>没有应用于 window 对象的公开标准，不过所有浏览器都支持该对象。</em></p>
<p>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。</p>
<p>全局变量是 window 对象的属性。全局函数是 window 对象的方法。</p>
<p>接下来要讲的HTML DOM 的 document 也是 window 对象的属性之一。</p>
<p>一些常用的Window方法：</p>
<ul>
<li>window.innerHeight - 浏览器窗口的内部高度</li>
<li>window.innerWidth - 浏览器窗口的内部宽度</li>
<li>window.open() - 打开新窗口</li>
<li>window.close() - 关闭当前窗口</li>
</ul>
<h3 id="2-1-代码"><a href="#2-1-代码" class="headerlink" title="2-1 代码"></a>2-1 代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># window对象</span><br><span class="line">window对象指代的就是浏览器窗口</span><br><span class="line"></span><br><span class="line">window.innerHeight  浏览器窗口的高度</span><br><span class="line">900</span><br><span class="line">window.innerWidth   浏览器窗口的宽度</span><br><span class="line">1680</span><br><span class="line"></span><br><span class="line">window.open(&#39;https:&#x2F;&#x2F;www.mzitu.com&#x2F;&#39;,&#39;&#39;,&#39;height&#x3D;400px,width&#x3D;400px,top&#x3D;400px,left&#x3D;400px&#39;)</span><br><span class="line"># 新建窗口打开页面 第二个参数写空即可 第三个参数写新建的窗口的大小和位置</span><br><span class="line"># 扩展父子页面通信window.opener()  了解</span><br><span class="line"></span><br><span class="line">window.close()  关闭当前页面</span><br></pre></td></tr></table></figure>

<h2 id="3、window的子对象"><a href="#3、window的子对象" class="headerlink" title="3、window的子对象"></a>3、window的子对象</h2><h3 id="3-1-navigator对象（了解即可）"><a href="#3-1-navigator对象（了解即可）" class="headerlink" title="3-1 navigator对象（了解即可）"></a>3-1 navigator对象（了解即可）</h3><p>浏览器对象，通过这个对象可以判定用户所使用的浏览器，包含了浏览器相关信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">navigator.appName　　&#x2F;&#x2F; Web浏览器全称</span><br><span class="line">navigator.appVersion　　&#x2F;&#x2F; Web浏览器厂商和版本的详细字符串</span><br><span class="line">navigator.userAgent　　&#x2F;&#x2F; 客户端绝大部分信息</span><br><span class="line">navigator.platform　　　&#x2F;&#x2F; 浏览器运行所在的操作系统</span><br><span class="line">window.navigator.appName</span><br><span class="line">&quot;Netscape&quot;</span><br><span class="line">window.navigator.appVersion</span><br><span class="line">&quot;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;81.0.4044.138 Safari&#x2F;537.36&quot;</span><br><span class="line"></span><br><span class="line">window.navigator.userAgent        掌握  # 用来表示当前是否是一个浏览器</span><br><span class="line">&quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;81.0.4044.138 Safari&#x2F;537.36&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">扩展:仿爬措施</span><br><span class="line">    1.最简单最常用的一个就是校验当前请求的发起者是否是一个浏览器</span><br><span class="line">        userAgent</span><br><span class="line">        user-agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;81.0.4044.138 Safari&#x2F;537.36</span><br><span class="line">    如何破解该措施</span><br><span class="line">        在你的代码中加上上面的user-agent配置即可</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">window.navigator.platform</span><br><span class="line">&quot;MacIntel&quot;</span><br><span class="line"></span><br><span class="line"># 如果是window的子对象 那么window可以省略不写</span><br></pre></td></tr></table></figure>

<h3 id="3-2-screen对象（了解即可）"><a href="#3-2-screen对象（了解即可）" class="headerlink" title="3-2 screen对象（了解即可）"></a>3-2 screen对象（了解即可）</h3><p>屏幕对象，不常用。</p>
<p>一些属性：</p>
<ul>
<li>screen.availWidth - 可用的屏幕宽度</li>
<li>screen.availHeight - 可用的屏幕高度</li>
</ul>
<h3 id="3-3-history对象（了解即可）"><a href="#3-3-history对象（了解即可）" class="headerlink" title="3-3 history对象（了解即可）"></a>3-3 history对象（了解即可）</h3><p>window.history 对象包含浏览器的历史。</p>
<p>浏览历史对象，包含了用户对当前页面的浏览历史，但我们无法查看具体的地址，可以简单的用来前进或后退一个页面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">history.forward()  &#x2F;&#x2F; 前进一页</span><br><span class="line">history.back()  &#x2F;&#x2F; 后退一页</span><br></pre></td></tr></table></figure>

<h3 id="3-4-location对象"><a href="#3-4-location对象" class="headerlink" title="3-4 location对象"></a>3-4 location对象</h3><p>window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。</p>
<p>常用属性和方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location.href  获取URL</span><br><span class="line">location.href&#x3D;&quot;URL&quot; &#x2F;&#x2F; 跳转到指定页面</span><br><span class="line">location.reload() 重新加载页面</span><br></pre></td></tr></table></figure>

<h3 id="3-5-弹出框"><a href="#3-5-弹出框" class="headerlink" title="3-5 弹出框"></a>3-5 弹出框</h3><p>可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。</p>
<p><strong>警告框</strong></p>
<p>警告框经常用于确保用户可以得到某些信息。</p>
<p>当警告框出现后，用户需要点击确定按钮才能继续进行操作。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert(&quot;你看到了吗？&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>确认框（了解即可）</strong></p>
<p>确认框用于使用户可以验证或者接受某些信息。</p>
<p>当确认框出现后，用户需要点击确定或者取消按钮才能继续进行操作。</p>
<p>如果用户点击确认，那么返回值为 true。如果用户点击取消，那么返回值为 false。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">confirm(&quot;你确定吗？&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>提示框（了解即可）</strong></p>
<p>提示框经常用于提示用户在进入页面前输入某个值。</p>
<p>当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操纵。</p>
<p>如果用户点击确认，那么返回值为输入的值。如果用户点击取消，那么返回值为 null。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prompt(&quot;请在下方输入&quot;,&quot;你的答案&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="3-6-计时相关"><a href="#3-6-计时相关" class="headerlink" title="3-6 计时相关"></a>3-6 计时相关</h3><p>通过使用 JavaScript，我们可以在一定时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。</p>
<p><strong>setTimeout()</strong></p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var t&#x3D;setTimeout(&quot;JS语句&quot;,毫秒)</span><br></pre></td></tr></table></figure>

<p>setTimeout() 方法会返回某个值。在上面的语句中，值被储存在名为 t 的变量中。假如你希望取消这个 setTimeout()，你可以使用这个变量名来指定它。</p>
<p>setTimeout() 的第一个参数是含有 JavaScript 语句的字符串。这个语句可能诸如 “alert(‘5 seconds!’)”，或者对函数的调用，诸如 alertMsg()”。</p>
<p>第二个参数指示从当前起多少毫秒后执行第一个参数（1000 毫秒等于一秒）。</p>
<p><strong>clearTimeout()</strong></p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clearTimeout(setTimeout_variable)</span><br></pre></td></tr></table></figure>

<p>举个例子<strong>：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在指定时间之后执行一次相应函数</span><br><span class="line">var timer &#x3D; setTimeout(function()&#123;alert(123);&#125;, 3000)</span><br><span class="line">&#x2F;&#x2F; 取消setTimeout设置</span><br><span class="line">clearTimeout(timer);</span><br></pre></td></tr></table></figure>

<p><strong>setInterval()</strong></p>
<p>setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。</p>
<p>setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setInterval(&quot;JS语句&quot;,时间间隔)</span><br></pre></td></tr></table></figure>

<p>返回值</p>
<p>一个可以传递给 Window.clearInterval() 从而取消对 code 的周期性执行的值。</p>
<p><strong>clearInterval()</strong></p>
<p>clearInterval() 方法可取消由 setInterval() 设置的 timeout。</p>
<p>clearInterval() 方法的参数必须是由 setInterval() 返回的 ID 值。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clearInterval(setinterval返回的ID值)</span><br></pre></td></tr></table></figure>

<p>举个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 每隔一段时间就执行一次相应函数</span><br><span class="line">var timer &#x3D; setInterval(function()&#123;console.log(123);&#125;, 3000)</span><br><span class="line">&#x2F;&#x2F; 取消setInterval设置</span><br><span class="line">clearInterval(timer);</span><br></pre></td></tr></table></figure>

<h3 id="3-7-案例"><a href="#3-7-案例" class="headerlink" title="3-7 案例"></a>3-7 案例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function func1() &#123;</span><br><span class="line">        alert(123)</span><br><span class="line">    &#125;</span><br><span class="line">    let t &#x3D; setTimeout(func1,3000);  &#x2F;&#x2F; 毫秒为单位 3秒之后自动执行func1函数</span><br><span class="line"></span><br><span class="line">    clearTimeout(t)      &#x2F;&#x2F; 取消定时任务  如果你想要清除定时任务 需要日前用变量指代定时任务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function func2() &#123;</span><br><span class="line">        alert(123)</span><br><span class="line">    &#125;</span><br><span class="line">    function show()&#123;</span><br><span class="line">        let t &#x3D; setInterval(func2,3000);  &#x2F;&#x2F; 每隔3秒执行一次</span><br><span class="line">        function inner()&#123;</span><br><span class="line">            clearInterval(t)  &#x2F;&#x2F; 清除定时器</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(inner,9000)  &#x2F;&#x2F; 9秒中之后触发</span><br><span class="line">    &#125;</span><br><span class="line">    show()</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JS-05</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-JS-05/</url>
    <content><![CDATA[<p>JS 的 DOM操作</p>
<a id="more"></a>

<h2 id="1、DOM概述"><a href="#1、DOM概述" class="headerlink" title="1、DOM概述"></a>1、DOM概述</h2><h3 id="1-1-什么是DOM"><a href="#1-1-什么是DOM" class="headerlink" title="1-1 什么是DOM"></a>1-1 什么是DOM</h3><ul>
<li>文档对象模型 Document Object Model</li>
<li>文档对象模型 是表示和操作 HTML和XML文档内容的基础API</li>
<li>文档对象模型，是W3C组织推荐的处理可扩展标志语言的标准编程接口</li>
</ul>
<h3 id="1-2-DOM树的概念"><a href="#1-2-DOM树的概念" class="headerlink" title="1-2 DOM树的概念"></a>1-2 DOM树的概念</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">DOM树的概念</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">所有的标签都可以称之为是节点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">JavaScript可以通过DOM创建动态的 HTML;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">JavaScript 能够改变页面中的所有 HTML 元素</span></span><br><span class="line"><span class="string">JavaScript 能够改变页面中的所有 HTML 属性</span></span><br><span class="line"><span class="string">JavaScript 能够改变页面中的所有 CSS  样式</span></span><br><span class="line"><span class="string">JavaScript 能够改变页面中的所有 HTML 元素</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DOM操作的是标签  而一个HTML 页面上标签有很多</span></span><br><span class="line"><span class="string">  1. 先学会如何查找标签</span></span><br><span class="line"><span class="string">  2. 再学DOM操作标签</span></span><br><span class="line"><span class="string">DOM操作需要关键字 document</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>





<h3 id="1-3-DOM分类"><a href="#1-3-DOM分类" class="headerlink" title="1-3 DOM分类"></a>1-3 DOM分类</h3><ul>
<li>核心 DOM - 针对任何结构化文档的标准模型</li>
<li>XML DOM - 针对 XML 文档的标准模型</li>
<li></li>
<li>HTML DOM - 针对 HTML 文档的标准模型</li>
</ul>
<h3 id="1-4-DOM分级"><a href="#1-4-DOM分级" class="headerlink" title="1-4 DOM分级"></a>1-4 DOM分级</h3><ul>
<li><p>1级dom</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1级DOM在1998年10月份成为W3C的提议，由DOM核心与DOM HTML两个模块组成。DOM核心能映射以XML为基础的文档结构，允许获取和操作文档的任意部分。DOM HTML通过添加HTML专用的对象与函数对DOM核心进行了扩展。</span><br></pre></td></tr></table></figure>
</li>
<li><p>2级dom</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过对原有DOM的扩展，2级DOM通过对象接口增加了对鼠标和用户界面事件、范围、遍历（重复执行DOM文档）和层叠样式表（CSS）的支持。</span><br></pre></td></tr></table></figure>
</li>
<li><p>3级dom</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3级DOM通过引入统一方式载入和保存文档和文档验证方法对DOM进行进一步扩展，DOM3包含一个名为“DOM载入与保存”的新模块，DOM核心扩展后可支持XML1.0的所有内容，包括XML Infoset、 XPath、和XML Base。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4-DOM树"><a href="#1-4-DOM树" class="headerlink" title="1-4 DOM树"></a>1-4 DOM树</h3><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/0081Kckwgy1gkftm8npgvj30di07edfr.jpg" alt="img"></p>
<h2 id="2-查找标签"><a href="#2-查找标签" class="headerlink" title="2 查找标签"></a>2 查找标签</h2><h3 id="2-1-直接查找"><a href="#2-1-直接查找" class="headerlink" title="2-1 直接查找"></a>2-1 直接查找</h3><p>“””<br>id查找<br>类查找<br>标签查找<br>“””</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;div上面的div&lt;/div&gt;</span><br><span class="line">&lt;div&gt;div上面的div&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;d1&quot;</span>&gt;div</span><br><span class="line">    &lt;div&gt;div&gt;div&lt;/div&gt;</span><br><span class="line">    &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;c1&quot;</span>&gt;div&gt;p</span><br><span class="line">        &lt;span&gt;div&gt;p&gt;span&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;div&gt;p&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;div下面div&lt;/div&gt;</span><br><span class="line">&lt;div&gt;div下面div&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"># 注意三个方法的返回值是不一样的</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span><br><span class="line">&lt;div id=<span class="string">&quot;d1&quot;</span>&gt;…&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;c1&#x27;</span>)</span><br><span class="line">HTMLCollection [p.c1]<span class="number">0</span>: p.c1length: <span class="number">1</span>__proto__: HTMLCollection</span><br><span class="line">      </span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">HTMLCollection(3) [div#d1, div, div, d1: div#d1]</span><br><span class="line">                   </span><br><span class="line">                   </span><br><span class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">divEle</span><br><span class="line">&lt;div&gt;div&gt;div&lt;/div&gt;</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">当你用变量名指代标签对象的时候 一般情况下都推荐你书写成</span></span><br><span class="line"><span class="string">xxxEle</span></span><br><span class="line"><span class="string">    divEle</span></span><br><span class="line"><span class="string">    aEle</span></span><br><span class="line"><span class="string">    pEle</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-间接查找-熟悉"><a href="#2-2-间接查找-熟悉" class="headerlink" title="2-2 间接查找(熟悉)"></a>2-2 间接查找(熟悉)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">let pEle = document.getElementsByClassName(&#x27;c1&#x27;)[0]  # 注意是否需要索引取值</span><br><span class="line"></span><br><span class="line">pEle.parentElement  # 拿父节点</span><br><span class="line">&lt;div id=<span class="string">&quot;d1&quot;</span>&gt;<span class="string">&quot;div</span></span><br><span class="line"><span class="string">    &quot;</span>&lt;div&gt;div&gt;div&lt;<span class="regexp">/div&gt;&lt;p class=&quot;c1&quot;&gt;…&lt;/</span>p&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>div&gt;p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line">pEle.parentElement.parentElement</span><br><span class="line">&lt;body&gt;…&lt;/body&gt;</span><br><span class="line">pEle.parentElement.parentElement.parentElement</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span>…<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span>…<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span>&lt;/html&gt;</span><br><span class="line">pEle.parentElement.parentElement.parentElement.parentElement</span><br><span class="line"><span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;d1&#x27;</span>)</span><br><span class="line">divEle.children  # 获取所有的子标签</span><br><span class="line">divEle.children[<span class="number">0</span>]</span><br><span class="line">&lt;div&gt;div&gt;div&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">divEle.firstElementChild</span><br><span class="line">&lt;div&gt;div&gt;div&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">divEle.lastElementChild</span><br><span class="line">&lt;p&gt;div&gt;p&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">divEle.nextElementSibling  # 同级别下面第一个</span><br><span class="line">&lt;div&gt;div下面div&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">divEle.previousElementSibling  # 同级别上面第一个</span><br><span class="line">&lt;div&gt;div上面的div&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-节点操作"><a href="#3-节点操作" class="headerlink" title="3 节点操作"></a>3 节点操作</h2><h3 id="3-1-基本操作"><a href="#3-1-基本操作" class="headerlink" title="3-1 基本操作"></a>3-1 基本操作</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>div</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>div&gt;p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>div&gt;span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">通过DOM操作动态的创建img标签</span><br><span class="line">并且给标签加属性</span><br><span class="line">最后将标签添加到文本中</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">let imgEle = document.createElement(&#x27;img&#x27;)  # 创建标签</span><br><span class="line"></span><br><span class="line">imgEle.src = &#x27;111.png&#x27;  # 给标签设置默认的属性</span><br><span class="line">&quot;111.png&quot;</span><br><span class="line">imgEle</span><br><span class="line"></span><br><span class="line">imgEle.username = &#x27;jason&#x27;  # 自定义的属性没办法点的方式直接设置</span><br><span class="line">&quot;jason&quot;</span><br><span class="line">imgEle</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;111.png&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">imgEle.setAttribute(&#x27;username&#x27;,&#x27;jason&#x27;)   # 既可以设置自定义的属性也可以设置默认的书写</span><br><span class="line">undefined</span><br><span class="line">imgEle</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;111.png&quot;</span> <span class="attr">username</span>=<span class="string">&quot;jason&quot;</span>&gt;</span></span><br><span class="line">imgEle.setAttribute(&#x27;title&#x27;,&#x27;一张图片&#x27;)</span><br><span class="line">imgEle</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;111.png&quot;</span> <span class="attr">username</span>=<span class="string">&quot;jason&quot;</span> <span class="attr">title</span>=<span class="string">&quot;一张图片&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">let divEle = document.getElementById(&#x27;d1&#x27;)</span><br><span class="line">undefined</span><br><span class="line">divEle.appendChild(imgEle)  # 标签内部添加元素(尾部追加)</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;111.png&quot;</span> <span class="attr">username</span>=<span class="string">&quot;jason&quot;</span> <span class="attr">title</span>=<span class="string">&quot;一张图片&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">创建a标签</span><br><span class="line">设置属性</span><br><span class="line">设置文本</span><br><span class="line">添加到标签内部</span><br><span class="line">    添加到指定的标签的上面</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">let aEle = document.createElement(&#x27;a&#x27;)</span><br><span class="line"></span><br><span class="line">aEle</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">aEle.href = &#x27;https://www.mzitu.com/&#x27;</span><br><span class="line">&quot;https://www.mzitu.com/&quot;</span><br><span class="line">aEle</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mzitu.com/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">aEle.innerText = &#x27;点我有你好看!&#x27;  # 给标签设置文本内容</span><br><span class="line">&quot;点我有你好看!&quot;</span><br><span class="line">aEle</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mzitu.com/&quot;</span>&gt;</span>点我有你好看!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">let divEle = document.getElementById(&#x27;d1&#x27;)</span><br><span class="line">undefined</span><br><span class="line">let pEle = document.getElementById(&#x27;d2&#x27;)</span><br><span class="line">undefined</span><br><span class="line">divEle.insertBefore(aEle,pEle)  # 添加标签内容指定位置添加</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mzitu.com/&quot;</span>&gt;</span>点我有你好看!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">额外补充</span><br><span class="line">    appendChild()</span><br><span class="line">        removeChild()</span><br><span class="line">        replaceChild()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    setAttribute()  设置属性</span><br><span class="line">        getAttribute()  获取属性</span><br><span class="line">        removeAttribute()  移除属性</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># innerText与innerHTML</span><br><span class="line">divEle.innerText  # 获取标签内部所有的文本</span><br><span class="line">&quot;div 点我有你好看!</span><br><span class="line">div&gt;p</span><br><span class="line">div&gt;span&quot;</span><br><span class="line"></span><br><span class="line">divEle.innerHTML  # 内部文本和标签都拿到</span><br><span class="line">&quot;div</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mzitu.com/&quot;</span>&gt;</span>点我有你好看!<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>div<span class="symbol">&amp;gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>div<span class="symbol">&amp;gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &quot;</span><br><span class="line">    </span><br><span class="line">divEle.innerText = &#x27;heiheihei&#x27;</span><br><span class="line">&quot;heiheihei&quot;</span><br><span class="line">divEle.innerHTML = &#x27;hahahaha&#x27;</span><br><span class="line">&quot;hahahaha&quot;</span><br><span class="line"></span><br><span class="line">divEle.innerText = &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>heiheihei<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;  # 不识别html标签</span><br><span class="line">&quot;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>heiheihei<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&quot;</span><br><span class="line">divEle.innerHTML = &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hahahaha<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;  # 识别html标签</span><br><span class="line">&quot;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hahahaha<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&quot;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-获取值操作"><a href="#3-2-获取值操作" class="headerlink" title="3-2 获取值操作"></a>3-2 获取值操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;d1&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; id&#x3D;&quot;d3&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;d2&quot;&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;111&quot;&gt;哈哈&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;222&quot;&gt;嘿嘿&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;333&quot;&gt;么么&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"># 获取用户数据标签内部的数据</span><br><span class="line">let seEle &#x3D; document.getElementById(&#39;d2&#39;)</span><br><span class="line">seEle.value</span><br><span class="line">&quot;111&quot;</span><br><span class="line">seEle.value</span><br><span class="line">&quot;333&quot;</span><br><span class="line"></span><br><span class="line">let inputEle &#x3D; document.getElementById(&#39;d1&#39;)</span><br><span class="line">inputEle.value</span><br><span class="line"></span><br><span class="line"># 如何获取用户上传的文件数据</span><br><span class="line">let fileEle &#x3D; document.getElementById(&#39;d3&#39;)</span><br><span class="line">fileEle.value  # 无法获取到文件数据</span><br><span class="line">&quot;C:\fakepath\02_测试路由.png&quot;</span><br><span class="line"></span><br><span class="line">fileEle.files</span><br><span class="line">FileList &#123;0: File, length: 1&#125;0: File &#123;name: &quot;02_测试路由.png&quot;, lastModified: 1557043082000, lastModifiedDate: Sun May 05 2019 15:58:02 GMT+0800 (中国标准时间), webkitRelativePath: &quot;&quot;, size: 29580, …&#125;length: 1__proto__: FileList</span><br><span class="line">      </span><br><span class="line">fileEle.files[0]  # 获取文件数据</span><br><span class="line">File &#123;name: &quot;02_测试路由.png&quot;, lastModified: 1557043082000, lastModifiedDate: Sun May 05 2019 15:58:02 GMT+0800 (中国标准时间), webkitRelativePath: &quot;&quot;, size: 29580, …&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-class、css操作"><a href="#3-3-class、css操作" class="headerlink" title="3-3 class、css操作"></a>3-3 class、css操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .c1 &#123;</span><br><span class="line">            height: 400px;</span><br><span class="line">            width: 400px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">        &#125;</span><br><span class="line">        .bg_green &#123;</span><br><span class="line">            background-color: greenyellow;</span><br><span class="line">        &#125;</span><br><span class="line">        .bg_red &#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;d1&quot; class&#x3D;&quot;c1 bg_red bg_green&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;p&gt;今天难得拖堂 大伙儿见谅&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">let divEle &#x3D; document.getElementById(&#39;d1&#39;)</span><br><span class="line">undefined</span><br><span class="line">divEle.classList  # 获取标签所有的类属性</span><br><span class="line">DOMTokenList(3) [&quot;c1&quot;, &quot;bg_red&quot;, &quot;bg_green&quot;, value: &quot;c1 bg_red bg_green&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">divEle.classList.remove(&#39;bg_red&#39;)  # 移除某个类属性</span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line">divEle.classList.add(&#39;bg_red&#39;)  # 添加类属性</span><br><span class="line">undefined</span><br><span class="line">divEle.classList.contains(&#39;c1&#39;)  # 验证是否包含某个类属性</span><br><span class="line">true</span><br><span class="line">divEle.classList.contains(&#39;c2&#39;)</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">divEle.classList.toggle(&#39;bg_red&#39;)  # 有则删除无则添加</span><br><span class="line">false</span><br><span class="line">divEle.classList.toggle(&#39;bg_red&#39;)</span><br><span class="line">true</span><br><span class="line">divEle.classList.toggle(&#39;bg_red&#39;)</span><br><span class="line">false</span><br><span class="line">divEle.classList.toggle(&#39;bg_red&#39;)</span><br><span class="line">true</span><br><span class="line">divEle.classList.toggle(&#39;bg_red&#39;)</span><br><span class="line">false</span><br><span class="line">divEle.classList.toggle(&#39;bg_red&#39;)</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># DOM操作操作标签样式 统一先用style起手</span><br><span class="line">let pEle &#x3D; document.getElementsByTagName(&#39;p&#39;)[0]</span><br><span class="line">undefined</span><br><span class="line">pEle.style.color &#x3D; &#39;red&#39;</span><br><span class="line">&quot;red&quot;</span><br><span class="line">pEle.style.fontSize &#x3D; &#39;28px&#39;</span><br><span class="line">&quot;28px&quot;</span><br><span class="line">pEle.style.backgroundColor &#x3D; &#39;yellow&#39;</span><br><span class="line">&quot;yellow&quot;</span><br><span class="line">pEle.style.border &#x3D; &#39;3px solid red&#39;</span><br><span class="line">&quot;3px solid red&quot;</span><br></pre></td></tr></table></figure>

<h2 id="4-事件"><a href="#4-事件" class="headerlink" title="4 事件"></a>4 事件</h2><p>HTML 4.0 的新特性之一是有能力使 HTML 事件触发浏览器中的动作（action），比如当用户点击某个 HTML 元素时启动一段 JavaScript。下面是一个属性列表，这些属性可插入 HTML 标签来定义事件动作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onclick        当用户点击某个对象时调用的事件句柄。</span><br><span class="line">ondblclick     当用户双击某个对象时调用的事件句柄。</span><br><span class="line"></span><br><span class="line">onfocus        元素获得焦点。               &#x2F;&#x2F; 练习：输入框</span><br><span class="line">onblur         元素失去焦点。               应用场景：用于表单验证,用户离开某个输入框时,代表已经输入完了,我们可以对它进行验证.</span><br><span class="line">onchange       域的内容被改变。             应用场景：通常用于表单元素,当元素内容被改变时触发.（select联动）</span><br><span class="line"></span><br><span class="line">onkeydown      某个键盘按键被按下。          应用场景: 当用户在最后一个输入框按下回车按键时,表单提交.</span><br><span class="line">onkeypress     某个键盘按键被按下并松开。</span><br><span class="line">onkeyup        某个键盘按键被松开。</span><br><span class="line">onload         一张页面或一幅图像完成加载。</span><br><span class="line">onmousedown    鼠标按钮被按下。</span><br><span class="line">onmousemove    鼠标被移动。</span><br><span class="line">onmouseout     鼠标从某元素移开。</span><br><span class="line">onmouseover    鼠标移到某元素之上。</span><br><span class="line"></span><br><span class="line">onselect      在文本框中的文本被选中时发生。</span><br><span class="line">onsubmit      确认按钮被点击，使用的对象是form。</span><br></pre></td></tr></table></figure>

<h3 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4-1 基本使用"></a>4-1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">达到某个事先设定的条件 自动触发的动作</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 绑定事件的两种方式</span><br><span class="line">&lt;button onclick&#x3D;&quot;func1()&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;d1&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 第一种绑定事件的方式</span><br><span class="line">    function func1() &#123;</span><br><span class="line">        alert(111)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 第二种</span><br><span class="line">    let btnEle &#x3D; document.getElementById(&#39;d1&#39;);</span><br><span class="line">    btnEle.onclick &#x3D; function () &#123;</span><br><span class="line">        alert(222)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">script标签既可以放在head内 也可以放在body内</span><br><span class="line">但是通常情况下都是放在body内的最底部</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 等待浏览器窗口加载完毕之后再执行代码</span><br><span class="line">window.onload &#x3D; function () &#123;</span><br><span class="line">            &#x2F;&#x2F; 第一种绑定事件的方式</span><br><span class="line">            function func1() &#123;</span><br><span class="line">                alert(111)</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 第二种</span><br><span class="line">            let btnEle &#x3D; document.getElementById(&#39;d1&#39;);</span><br><span class="line">            btnEle.onclick &#x3D; function () &#123;</span><br><span class="line">                alert(222)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-事件案例"><a href="#4-2-事件案例" class="headerlink" title="4-2 事件案例"></a>4-2 事件案例</h3><ul>
<li><p>开关灯案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;d1&quot; class&#x3D;&quot;c1 bg_red bg_green&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;button id&#x3D;&quot;d2&quot;&gt;变色&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        let btnEle &#x3D; document.getElementById(&#39;d2&#39;)</span><br><span class="line">        let divEle &#x3D; document.getElementById(&#39;d1&#39;)</span><br><span class="line">        btnEle.onclick &#x3D; function () &#123;  &#x2F;&#x2F; 绑定点击事件</span><br><span class="line">            &#x2F;&#x2F; 动态的修改div标签的类属性</span><br><span class="line">            divEle.classList.toggle(&#39;bg_red&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>input框获取焦点失去焦点案例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;老板 去吗?&quot; id&#x3D;&quot;d1&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let iEle &#x3D; document.getElementById(&#39;d1&#39;)</span><br><span class="line">    &#x2F;&#x2F; 获取焦点事件</span><br><span class="line">    iEle.onfocus &#x3D; function () &#123;</span><br><span class="line">        &#x2F;&#x2F; 将input框内部值去除</span><br><span class="line">        iEle.value &#x3D; &#39;&#39;</span><br><span class="line">        &#x2F;&#x2F;  点value就是获取   等号赋值就是设置</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 失去焦点事件</span><br><span class="line">    iEle.onblur &#x3D; function () &#123;</span><br><span class="line">        &#x2F;&#x2F; 给input标签重写赋值</span><br><span class="line">        iEle.value &#x3D; &#39;没钱 不去!&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实时展示当前时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;d1&quot; style&#x3D;&quot;display: block;height: 50px;width: 200px&quot;&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;d2&quot;&gt;开始&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;d3&quot;&gt;结束&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 先定义一个全局存储定时器的变量</span><br><span class="line">    let t &#x3D; null</span><br><span class="line">    let inputEle &#x3D; document.getElementById(&#39;d1&#39;)</span><br><span class="line">    let startBtnEle &#x3D; document.getElementById(&#39;d2&#39;)</span><br><span class="line">    let endBtnEle &#x3D; document.getElementById(&#39;d3&#39;)</span><br><span class="line">    &#x2F;&#x2F; 1 访问页面之后 将访问的时间展示到input框中</span><br><span class="line">    &#x2F;&#x2F; 2 动态展示当前时间</span><br><span class="line">    &#x2F;&#x2F; 3 页面上加两个按钮 一个开始 一个结束</span><br><span class="line">    function showTime() &#123;</span><br><span class="line">        let currentTime &#x3D; new Date();</span><br><span class="line">        inputEle.value &#x3D; currentTime.toLocaleString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    startBtnEle.onclick &#x3D; function () &#123;</span><br><span class="line">        &#x2F;&#x2F; 限制定时器只能开一个</span><br><span class="line">        if(!t)&#123; </span><br><span class="line">            t &#x3D; setInterval(showTime,1000)  &#x2F;&#x2F; 每点击一次就会开设一个定时器 而t只指代最后一个</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endBtnEle.onclick &#x3D; function () &#123;</span><br><span class="line">        clearInterval(t)</span><br><span class="line">        &#x2F;&#x2F; 还应该将t重置为空</span><br><span class="line">        t &#x3D; null</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>省市联动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;d1&quot;&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;&quot; selected disabled&gt;--请选择--&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;d2&quot;&gt;&lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let proEle &#x3D; document.getElementById(&#39;d1&#39;)</span><br><span class="line">    let cityEle &#x3D; document.getElementById(&#39;d2&#39;)</span><br><span class="line">    &#x2F;&#x2F; 先模拟省市数据</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &quot;河北&quot;: [&quot;廊坊&quot;, &quot;邯郸&quot;,&#39;唐山&#39;],</span><br><span class="line">        &quot;北京&quot;: [&quot;朝阳区&quot;, &quot;海淀区&quot;,&#39;昌平区&#39;],</span><br><span class="line">        &quot;山东&quot;: [&quot;威海市&quot;, &quot;烟台市&quot;,&#39;临沂市&#39;],</span><br><span class="line">        &#39;上海&#39;:[&#39;浦东新区&#39;,&#39;静安区&#39;,&#39;黄浦区&#39;],</span><br><span class="line">        &#39;深圳&#39;:[&#39;南山区&#39;,&#39;宝安区&#39;,&#39;福田区&#39;]</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F; 选for循环获取省</span><br><span class="line">    for(let key in data)&#123;</span><br><span class="line">        &#x2F;&#x2F; 将省信息做成一个个option标签 添加到第一个select框中</span><br><span class="line">        &#x2F;&#x2F; 1 创建option标签</span><br><span class="line">        let opEle &#x3D; document.createElement(&#39;option&#39;)</span><br><span class="line">        &#x2F;&#x2F; 2 设置文本</span><br><span class="line">        opEle.innerText &#x3D; key</span><br><span class="line">        &#x2F;&#x2F; 3 设置value</span><br><span class="line">        opEle.value &#x3D; key  &#x2F;&#x2F; &lt;option value&#x3D;&quot;省&quot;&gt;省&lt;&#x2F;option&gt;</span><br><span class="line">        &#x2F;&#x2F; 4 将创建好的option标签添加到第一个select中</span><br><span class="line">        proEle.appendChild(opEle)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 文本域变化事件  change事件</span><br><span class="line">    proEle.onchange &#x3D; function () &#123;</span><br><span class="line">        &#x2F;&#x2F; 先获取到用户选择的省</span><br><span class="line">        let currentPro &#x3D; proEle.value</span><br><span class="line">        &#x2F;&#x2F; 获取对应的市信息</span><br><span class="line">        let currentCityList &#x3D; data[currentPro]</span><br><span class="line">        &#x2F;&#x2F; 清空市select中所有的option</span><br><span class="line">        cityEle.innerHTML &#x3D; &#39;&#39;</span><br><span class="line">        &#x2F;&#x2F; 自己加一个请选择</span><br><span class="line">        let ss &#x3D; &quot;&lt;option disabled selected&gt;请选择&lt;&#x2F;option&gt;&quot;</span><br><span class="line">        &#x2F;&#x2F; let oppEle &#x3D; document.createElement(&#39;option&#39;)</span><br><span class="line">        &#x2F;&#x2F; oppEle.innerText &#x3D; &#39;请选择&#39;</span><br><span class="line">        &#x2F;&#x2F; oppEle.setAttribute(&#39;selected&#39;,&#39;selected&#39;)</span><br><span class="line">        cityEle.innerHTML &#x3D; ss</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; for循环所有的市 渲染到第二个select中</span><br><span class="line">        for (let i&#x3D;0;i&lt;currentCityList.length;i++)&#123;</span><br><span class="line">            let currentCity &#x3D; currentCityList[i]</span><br><span class="line">            &#x2F;&#x2F; 1 创建option标签</span><br><span class="line">            let opEle &#x3D; document.createElement(&#39;option&#39;)</span><br><span class="line">            &#x2F;&#x2F; 2 设置文本</span><br><span class="line">            opEle.innerText &#x3D; currentCity</span><br><span class="line">            &#x2F;&#x2F; 3 设置value</span><br><span class="line">            opEle.value &#x3D; currentCity  &#x2F;&#x2F; &lt;option value&#x3D;&quot;省&quot;&gt;省&lt;&#x2F;option&gt;</span><br><span class="line">            &#x2F;&#x2F; 4 将创建好的option标签添加到第一个select中</span><br><span class="line">            cityEle.appendChild(opEle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Vue-01</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Vue-01/</url>
    <content><![CDATA[<p>Vue介绍</p>
<a id="more"></a>

<h1 id="Vue入门"><a href="#Vue入门" class="headerlink" title="Vue入门"></a>Vue入门</h1><h2 id="零：前端目前形势"><a href="#零：前端目前形势" class="headerlink" title="零：前端目前形势"></a>零：前端目前形势</h2><h3 id="前端的发展史"><a href="#前端的发展史" class="headerlink" title="前端的发展史"></a>前端的发展史</h3><p><strong>1</strong>.<code>HTML</code>(5)、<code>CSS</code>(3)、<code>JavaScript</code>(ES5、ES6)：编写一个个的页面 -&gt; 给后端(PHP、Python、Go、Java) -&gt; 后端嵌入模板语法 -&gt; 后端渲染完数据 -&gt; 返回数据给前端 -&gt; 在浏览器中查看</p>
<p><strong>2</strong>.Ajax的出现 -&gt; 后台发送异步请求，<code>Render</code>+<code>Ajax</code>混合</p>
<p><strong>3</strong>.单用Ajax（加载数据，DOM渲染页面）：<code>前后端分离的雏形</code></p>
<p><strong>4</strong>.<a href="https://angular.cn/">Angular框架</a>的出现（1个JS框架）：出现了“<code>前端工程化</code>”的概念（前端也是1个工程、1个项目）</p>
<p><strong>5</strong>.<a href="https://react.docschina.org/">React</a>、<a href="https://cn.vuejs.org/">Vue框架</a>：当下最火的2个前端框架（<code>Vue</code>：国人喜欢用，<code>React</code>：外国人喜欢用）</p>
<p><strong>6</strong>.移动开发（Android+IOS） + Web（Web+微信小程序+支付宝小程序） + 桌面开发（Windows桌面）：前端 -&gt; <code>大前端</code></p>
<p><strong>7</strong>.一套代码在各个平台运行（<strong>大前端</strong>）：<code>谷歌Flutter（Dart语言：和Java很像）</code>可以运行在IOS、Android、PC端</p>
<p><strong>8</strong>.在Vue框架的基础性上 <a href="https://uniapp.dcloud.io/">uni-app</a>：<strong>一套编码 编到10个平台</strong></p>
<p><strong>9</strong>.在不久的将来 ，前端框架可能会一统天下</p>
<blockquote>
<p><strong>详细的发展史：</strong></p>
<p><a href="https://zhuanlan.zhihu.com/p/337276087?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=41967790587904">https://zhuanlan.zhihu.com/p/337276087?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=41967790587904</a></p>
</blockquote>
<h2 id="一：Vue介绍-和-基本使用"><a href="#一：Vue介绍-和-基本使用" class="headerlink" title="一：Vue介绍 和 基本使用"></a>一：Vue介绍 和 基本使用</h2><h3 id="1-Vue介绍"><a href="#1-Vue介绍" class="headerlink" title="1.Vue介绍"></a>1.Vue介绍</h3><p><a href="https://cn.vuejs.org/">Vue</a> (读音 <code>/vjuː/</code>，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong></p>
<p>与其它大型框架不同的是，Vue 被设计为可以<code>自底向上逐层应用</code></p>
<p>Vue 的核心库<strong>只关注视图层</strong>，不仅易于上手，还便于与第三方库或既有项目整合</p>
<h4 id="渐进式框架"><a href="#渐进式框架" class="headerlink" title="渐进式框架"></a>渐进式框架</h4><p>可以一点一点地使用它，只用一部分，也可以整个工程都使用它</p>
<h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><ul>
<li>官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></li>
<li>文档：<a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></li>
</ul>
<h3 id="2-Vue特点"><a href="#2-Vue特点" class="headerlink" title="2.Vue特点"></a>2.Vue特点</h3><h4 id="易用"><a href="#易用" class="headerlink" title="易用"></a>易用</h4><ul>
<li>通过 HTML、CSS、JavaScript构建应用</li>
</ul>
<h4 id="灵活"><a href="#灵活" class="headerlink" title="灵活"></a>灵活</h4><ul>
<li>不断繁荣的生态系统，可以在一个库和一套完整框架之间自如伸缩。</li>
</ul>
<h4 id="高效"><a href="#高效" class="headerlink" title="高效"></a>高效</h4><ul>
<li>20kB min+gzip 运行大小</li>
<li>超快虚拟 DOM</li>
<li>最省心的优化</li>
</ul>
<h3 id="3-M-V-VM思想"><a href="#3-M-V-VM思想" class="headerlink" title="3.M-V-VM思想"></a>3.M-V-VM思想</h3><h4 id="①-MVVM介绍"><a href="#①-MVVM介绍" class="headerlink" title="① MVVM介绍"></a>① MVVM介绍</h4><p>MVVM 是<code>Model-View-ViewModel</code> 的缩写，它是一种基于前端开发的架构模式，是一种<strong>事件驱动编程方式</strong></p>
<ul>
<li><code>Model</code> ：vue对象的data属性里面的<strong>数据</strong>，这里的数据要显示到页面中</li>
<li><code>View</code> ：vue中数据要显示的HTML页面，在vue中，也称之为“<strong>视图模板</strong>” （HTML+CSS）</li>
<li><code>ViewModel</code>：vue中编写代码时的vm对象，它是vue.js的核心，负责连接 View 和 Model数据的<strong>中转</strong>，保证视图和数据的一致性，所以前面代码中，data里面的数据被显示中p标签中就是vm对象自动完成的（<strong>双向数据绑定</strong>：JS中变量变了，HTML中数据也跟着改变）</li>
</ul>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gprqsts5q2j321s09saan.jpg" alt="img"></p>
<h4 id="②-MVVM的特性"><a href="#②-MVVM的特性" class="headerlink" title="② MVVM的特性"></a>② MVVM的特性</h4><ul>
<li><strong>低耦合</strong>：<code>视图</code>（View）可以<code>独立于Model变化和修改</code>，1个ViewModel可以绑定到不同的View上，当View变化的时候 Model可以不变，当Model变化的时候 View也可以不变</li>
<li><strong>可复用</strong>：可以把一些视图逻辑放在1个ViewModel中，让很多View<code>重用这端视图的逻辑</code>（以此减少代码冗余）</li>
<li><strong>独立开发</strong>：<code>开发</code>人员可以专注于<code>业务逻辑</code>和<code>数据的开发</code>（ViewModel），<code>设计</code>人员可以专注于<code>页面设计</code></li>
<li><strong>可测试</strong>：界面元素是比较难以测试的，而现在的测试可以<code>针对ViewModel</code>来编写</li>
</ul>
<h4 id="③-MVVM的逻辑"><a href="#③-MVVM的逻辑" class="headerlink" title="③ MVVM的逻辑"></a>③ MVVM的逻辑</h4><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gprqt5s5v2j30u00yr75o.jpg" alt="img"></p>
<h3 id="4-组件化开发、单页面开发"><a href="#4-组件化开发、单页面开发" class="headerlink" title="4.组件化开发、单页面开发"></a>4.组件化开发、单页面开发</h3><h4 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h4><p>类似于DTL中的<code>include</code>，<strong>每一个组件</strong>的内容都可以被<strong>替换</strong>和<strong>复用</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gprqthy0spj31fx0u0wf8.jpg" alt="img"></p>
<h4 id="单页面开发"><a href="#单页面开发" class="headerlink" title="单页面开发"></a>单页面开发</h4><p>只需要1个页面，结合组件化开发来替换页面中的内容</p>
<p>页面的切换只是组件的替换，页面还是只有1个<code>index.html</code></p>
<h3 id="5-版本"><a href="#5-版本" class="headerlink" title="5.版本"></a>5.版本</h3><p>1.X：使用得较少</p>
<p>2.X：<strong>普遍使用</strong></p>
<p>3.X：刚出没多久，只有Beta版</p>
<h3 id="6-引入方式"><a href="#6-引入方式" class="headerlink" title="6.引入方式"></a>6.引入方式</h3><h4 id="①-CDN的方式引入"><a href="#①-CDN的方式引入" class="headerlink" title="① CDN的方式引入"></a>① CDN的方式引入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="②-下载后导入"><a href="#②-下载后导入" class="headerlink" title="② 下载后导入"></a>② 下载后导入</h4><p>其实就是直接在浏览器中打开<a href="https://cdn.jsdelivr.net/npm/vue/dist/vue.js%EF%BC%8C%E7%84%B6%E5%90%8E%E5%A4%8D%E5%88%B6%E4%B8%8B%E6%9D%A5%EF%BC%8C%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAjs%E6%96%87%E4%BB%B6%E5%86%8D%E7%B2%98%E8%B4%B4%E8%BF%9B%E5%8E%BB">https://cdn.jsdelivr.net/npm/vue/dist/vue.js，然后复制下来，创建一个js文件再粘贴进去</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-补充"><a href="#7-补充" class="headerlink" title="7.补充"></a>7.补充</h3><h4 id="解释型的语言是需要解释器的"><a href="#解释型的语言是需要解释器的" class="headerlink" title="解释型的语言是需要解释器的"></a>解释型的语言是需要解释器的</h4><p>js就是一门解释型语言，只不过js解释器被集成到了浏览器中</p>
<p>所以，在浏览器的Console中输入命令，就和在cmd中输入python后，进入交互式环境一样</p>
<h4 id="nodejs：一门后端语言"><a href="#nodejs：一门后端语言" class="headerlink" title="nodejs：一门后端语言"></a>nodejs：一门后端语言</h4><p>把chrome的v8引擎（解释器），安装到操作系统之上</p>
<h3 id="8-简单使用"><a href="#8-简单使用" class="headerlink" title="8.简单使用"></a>8.简单使用</h3><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;vue的简单使用&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;, &#x2F;&#x2F; 在box这个div中可以写 vue的语法</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#39;Hello World&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="双向数据绑定测试"><a href="#双向数据绑定测试" class="headerlink" title="双向数据绑定测试"></a>双向数据绑定测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm._data.name&#x3D;&#39;darker&#39;    &#x2F;&#x2F; 修改js中变量的值</span><br><span class="line"></span><br><span class="line">$(&#39;#box&#39;).text(&#39;hahah&#39;)    &#x2F;&#x2F; 修改HTML的div中的值</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gprqtvb0w1g314o0n6wg6.gif" alt="img"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Vue-03</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Vue-03/</url>
    <content><![CDATA[<h2 id="Vue生命期钩子"><a href="#Vue生命期钩子" class="headerlink" title="Vue生命期钩子"></a>Vue生命期钩子</h2><a id="more"></a>

<h2 id="一：生命周期图"><a href="#一：生命周期图" class="headerlink" title="一：生命周期图"></a>一：生命周期图</h2><h3 id="1-官网原图"><a href="#1-官网原图" class="headerlink" title="1.官网原图"></a>1.官网原图</h3><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpswhmw0z6j30u023zt9s.jpg" alt="img"></p>
<h3 id="3-我理解的图"><a href="#3-我理解的图" class="headerlink" title="3.我理解的图"></a>3.我理解的图</h3><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpswhjm1pbj30u01957u3.jpg" alt="img"></p>
<h2 id="二：生命周期"><a href="#二：生命周期" class="headerlink" title="二：生命周期"></a>二：生命周期</h2><table>
<thead>
<tr>
<th>钩子函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>beforeCreate</td>
<td>创建Vue实例之前调用</td>
</tr>
<tr>
<td>created</td>
<td>创建Vue实例成功后调用（可以在此处发送异步请求后端数据）</td>
</tr>
<tr>
<td>beforeMount</td>
<td>渲染DOM之前调用</td>
</tr>
<tr>
<td>mounted</td>
<td>渲染DOM之后调用</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>重新渲染之前调用（数据更新等操作时，控制DOM重新渲染）</td>
</tr>
<tr>
<td>updated</td>
<td>重新渲染完成之后调用</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>销毁之前调用</td>
</tr>
<tr>
<td>destroyed</td>
<td>销毁之后调用</td>
</tr>
</tbody></table>
<h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let vm &#x3D; new Vue()</span><br></pre></td></tr></table></figure>

<h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><p>挂载，把div挂载到组件中</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpswi39tm1j30zz0q8q4o.jpg" alt="img"></p>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let vm &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#box&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        isShow: true    &#x2F;&#x2F; 修改这个内容</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleClick() &#123;</span><br><span class="line">            console.log(&#39;我是根组件&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="1-bedoreCreate"><a href="#1-bedoreCreate" class="headerlink" title="1.bedoreCreate"></a>1.bedoreCreate</h3><h3 id="2-created"><a href="#2-created" class="headerlink" title="2.created"></a>2.created</h3><h3 id="3-beforeMount"><a href="#3-beforeMount" class="headerlink" title="3.beforeMount"></a>3.beforeMount</h3><h3 id="4-mounted（用得最多）"><a href="#4-mounted（用得最多）" class="headerlink" title="4.mounted（用得最多）"></a>4.mounted（用得最多）</h3><p>这时候可以向后端发送数据了</p>
<h3 id="5-beforeUpdate"><a href="#5-beforeUpdate" class="headerlink" title="5.beforeUpdate"></a>5.beforeUpdate</h3><h3 id="6-updated"><a href="#6-updated" class="headerlink" title="6.updated"></a>6.updated</h3><h3 id="7-beforeDestroy"><a href="#7-beforeDestroy" class="headerlink" title="7.beforeDestroy"></a>7.beforeDestroy</h3><h3 id="8-destroyed"><a href="#8-destroyed" class="headerlink" title="8.destroyed"></a>8.destroyed</h3><p>组件销毁 - 给组件写一个定时器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setTimeout()    &#x2F;&#x2F; 延迟3s干什么事</span><br><span class="line">setInterval()    &#x2F;&#x2F; 延迟3s干什么事</span><br></pre></td></tr></table></figure>

<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;生命周期&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;child v-if&#x3D;&quot;isShow&quot;&gt;&lt;&#x2F;child&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;terminate&quot;&gt;删除子组件&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;reborn&quot;&gt;显示子组件&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#39;child&#39;, &#123;</span><br><span class="line">        template: &#96;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;&#123;name&#125;&#125;</span><br><span class="line">                &lt;button @click&#x3D;&quot;name&#x3D;&#39;Darker1&#39;&quot;&gt;更新数据1&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;button @click&#x3D;&quot;name&#x3D;&#39;Darker2&#39;&quot;&gt;更新数据2&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;&#96;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name: &#39;Darker1&#39;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">            console.group(&#39;当前状态：beforeCreate&#39;)</span><br><span class="line">            console.log(&#39;当前el状态：&#39;, this.$el)</span><br><span class="line">            console.log(&#39;当前data状态：&#39;, this.$data)</span><br><span class="line">            console.log(&#39;当前name状态：&#39;, this.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            console.group(&#39;当前状态：created&#39;)</span><br><span class="line">            console.log(&#39;当前el状态：&#39;, this.$el)</span><br><span class="line">            console.log(&#39;当前data状态：&#39;, this.$data)</span><br><span class="line">            console.log(&#39;当前name状态：&#39;, this.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount() &#123;</span><br><span class="line">            console.group(&#39;当前状态：beforeMount&#39;)</span><br><span class="line">            console.log(&#39;当前el状态：&#39;, this.$el)</span><br><span class="line">            console.log(&#39;当前data状态：&#39;, this.$data)</span><br><span class="line">            console.log(&#39;当前name状态：&#39;, this.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            console.group(&#39;当前状态：mounted&#39;)</span><br><span class="line">            console.log(&#39;当前el状态：&#39;, this.$el)</span><br><span class="line">            console.log(&#39;当前data状态：&#39;, this.$data)</span><br><span class="line">            console.log(&#39;当前name状态：&#39;, this.name)</span><br><span class="line">          &#x2F;&#x2F;用的最多，向后端加载数据，创建定时器等</span><br><span class="line">            console.log(&quot;页面已被vue实例渲染, data, methods已更新&quot;);</span><br><span class="line">            console.log(&#39;mounted&#39;)</span><br><span class="line">            this.t &#x3D; setInterval(function () &#123;</span><br><span class="line">                console.log(&#39;daada&#39;)</span><br><span class="line">            &#125;, 3000)</span><br><span class="line">          </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate() &#123;</span><br><span class="line">            console.group(&#39;当前状态：beforeUpdate&#39;)</span><br><span class="line">            console.log(&#39;当前el状态：&#39;, this.$el)</span><br><span class="line">            console.log(&#39;当前data状态：&#39;, this.$data)</span><br><span class="line">            console.log(&#39;当前name状态：&#39;, this.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">            console.group(&#39;当前状态：updated&#39;)</span><br><span class="line">            console.log(&#39;当前el状态：&#39;, this.$el)</span><br><span class="line">            console.log(&#39;当前data状态：&#39;, this.$data)</span><br><span class="line">            console.log(&#39;当前name状态：&#39;, this.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy() &#123;</span><br><span class="line">            console.group(&#39;当前状态：beforeDestroy&#39;)</span><br><span class="line">            console.log(&#39;当前el状态：&#39;, this.$el)</span><br><span class="line">            console.log(&#39;当前data状态：&#39;, this.$data)</span><br><span class="line">            console.log(&#39;当前name状态：&#39;, this.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed() &#123;</span><br><span class="line">            console.group(&#39;当前状态：destroyed&#39;)</span><br><span class="line">            console.log(&#39;当前el状态：&#39;, this.$el)</span><br><span class="line">            console.log(&#39;当前data状态：&#39;, this.$data)</span><br><span class="line">            console.log(&#39;当前name状态：&#39;, this.name)</span><br><span class="line">          &#x2F;&#x2F;组件销毁，清理定时器</span><br><span class="line">            clearInterval(this.t)</span><br><span class="line">            this.t &#x3D; null</span><br><span class="line">            console.log(&#39;destoryed&#39;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isShow: true</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            terminate() &#123;</span><br><span class="line">                this.isShow &#x3D; false</span><br><span class="line">            &#125;,</span><br><span class="line">            reborn() &#123;</span><br><span class="line">                this.isShow &#x3D; true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Vue-06</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Vue-06/</url>
    <content><![CDATA[<p>Vue-cli项目搭建</p>
<a id="more"></a>

<h1 id="Vue-CLI-项目搭建"><a href="#Vue-CLI-项目搭建" class="headerlink" title="Vue-CLI 项目搭建"></a>Vue-CLI 项目搭建</h1><h2 id="1-单文件组件"><a href="#1-单文件组件" class="headerlink" title="1 单文件组件"></a>1 单文件组件</h2><blockquote>
<p><a href="https://cn.vuejs.org/v2/guide/single-file-components.html#ad">https://cn.vuejs.org/v2/guide/single-file-components.html#ad</a></p>
</blockquote>
<h2 id="2-Vue-CLI-项目搭建"><a href="#2-Vue-CLI-项目搭建" class="headerlink" title="2 Vue-CLI 项目搭建"></a>2 Vue-CLI 项目搭建</h2><h3 id="2-1-环境搭建"><a href="#2-1-环境搭建" class="headerlink" title="2.1 环境搭建"></a>2.1 环境搭建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 安装node</span><br><span class="line"></span><br><span class="line">官网下载安装包，傻瓜式安装：https:&#x2F;&#x2F;nodejs.org&#x2F;zh-cn&#x2F;</span><br><span class="line"></span><br><span class="line">- 安装cnpm</span><br><span class="line"></span><br><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">- 安装脚手架</span><br><span class="line"></span><br><span class="line">cnpm install -g @vue&#x2F;cli</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 清空缓存处理</span><br><span class="line"></span><br><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure>

<h3 id="2-2-项目的创建"><a href="#2-2-项目的创建" class="headerlink" title="2.2 项目的创建"></a>2.2 项目的创建</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create 项目名</span><br><span class="line">&#x2F;&#x2F; 要提前进入目标目录(项目应该创建在哪个目录下)</span><br><span class="line">&#x2F;&#x2F; 选择自定义方式创建项目，选取Router, Vuex插件</span><br><span class="line">&#x2F;&#x2F;标准eslint，自动修复（ESlint+Standard config--》lint on save+Lint and fix on commit）</span><br><span class="line">vue ui 使用图形界面创建项目</span><br></pre></td></tr></table></figure>

<h4 id="启动-停止项目"><a href="#启动-停止项目" class="headerlink" title="启动/停止项目"></a>启动/停止项目</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run serve &#x2F; ctrl+c</span><br><span class="line">&#x2F;&#x2F; 要提前进入项目根目录</span><br></pre></td></tr></table></figure>

<h4 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line">&#x2F;&#x2F; 要在项目根目录下进行打包操作</span><br></pre></td></tr></table></figure>

<h4 id="package-json中"><a href="#package-json中" class="headerlink" title="package.json中"></a>package.json中</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,  # 运行项目</span><br><span class="line">    &quot;build&quot;: &quot;vue-cli-service build&quot;,  # 编译项目成html，css，js</span><br><span class="line">    &quot;lint&quot;: &quot;vue-cli-service lint&quot;     # 代码格式化</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="2-3-认识项目"><a href="#2-3-认识项目" class="headerlink" title="2.3 认识项目"></a>2.3 认识项目</h3><h4 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dist: 打包的项目目录(打包后会生成)</span><br><span class="line">node_modules: 项目依赖(删掉，不上传git，使用npm install重新安装)</span><br><span class="line">public: 共用资源</span><br><span class="line">    --favicon.ico</span><br><span class="line">    --index.html:项目入口页面，单页面</span><br><span class="line">src: 项目目标,书写代码的地方</span><br><span class="line">    -- assets:资源</span><br><span class="line">    -- components:组件</span><br><span class="line">    -- views:视图组件</span><br><span class="line">    -- App.vue:根组件</span><br><span class="line">    -- main.js: 入口js</span><br><span class="line">    -- router.js: 路由文件</span><br><span class="line">    -- store.js: 状态库文件</span><br><span class="line">vue.config.js: 项目配置文件(没有可以自己新建)</span><br><span class="line">package.json：项目配置依赖（等同于python项目的reqirement.txt）</span><br></pre></td></tr></table></figure>

<h4 id="配置文件：vue-config-js"><a href="#配置文件：vue-config-js" class="headerlink" title="配置文件：vue.config.js"></a>配置文件：vue.config.js</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;https:&#x2F;&#x2F;cli.vuejs.org&#x2F;zh&#x2F;config&#x2F; 配置参考</span><br><span class="line">module.exports&#x3D;&#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: 8888</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 修改端口,选做</span><br></pre></td></tr></table></figure>

<h4 id="main-js-整个项目入口文件"><a href="#main-js-整个项目入口文件" class="headerlink" title="main.js 整个项目入口文件"></a>main.js 整个项目入口文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;es6 模块导入规范，等同于python导包</span><br><span class="line">&#x2F;&#x2F;commonJs的导入规范：var Vue&#x3D;require(&#39;vue&#39;)</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;  &#x2F;&#x2F;根组件</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#39;#app&#39; &#x2F;&#x2F;原来是用el:&#39;#app&#39;，现在是new出Vue对象，挂载到#app上---》.$mount(&#39;#app&#39;)</span><br><span class="line">  render: h &#x3D;&gt; h(App) &#x2F;&#x2F;原来是在页面上div中写样式，现在组件化开发 把根组件（import App from &#39;.&#x2F;App.vue&#39;），通过render渲染上，渲染组件的方式</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="vue文件"><a href="#vue文件" class="headerlink" title="vue文件"></a>vue文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 模板区域 --&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 逻辑代码区域</span><br><span class="line">    &#x2F;&#x2F; 该语法和script绑定出现</span><br><span class="line">      &#x2F;&#x2F;export default--&gt;es6的默认导出（导出一个对象），模拟commonJS的导出方式制定的</span><br><span class="line">    export default &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    &#x2F;* 样式区域 *&#x2F;</span><br><span class="line">    &#x2F;* scoped表示这里的样式只适用于组件内部, scoped与style绑定出现 *&#x2F;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1 新建xx.vue</span><br><span class="line">components--&gt;HelloWorld.vue</span><br><span class="line">#2 引入使用</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    # es6的引入import from </span><br><span class="line">  import HelloWorld from &#39;@&#x2F;components&#x2F;HelloWorld.vue&#39;</span><br><span class="line">  import Vue from &#39;vue&#39;</span><br><span class="line">  Vue.component(&#39;HelloWorld&#39;,HelloWorld) # 全局组件</span><br><span class="line">  export default &#123;</span><br><span class="line">     components: &#123; # 局部组件</span><br><span class="line">            HelloWorld:HelloWorld</span><br><span class="line">          &#125;,</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ESLint 是一个开源的 JavaScript 代码检查工具，由 Nicholas C. Zakas 于2013年6月创建。代码检查是一种静态的分析，常用于寻找有问题的模式或者代码，并且不依赖于具体的编码风格。对大多数编程语言来说都会有代码检查，一般来说编译程序会内置检查工具。</span><br><span class="line"></span><br><span class="line">JavaScript 是一个动态的弱类型语言，在开发中比较容易出错。因为没有编译程序，为了寻找 JavaScript 代码错误通常需要在执行过程中不断调试。像 ESLint 这样的可以让程序员在编码的过程中发现问题而不是在执行的过程中。</span><br><span class="line"></span><br><span class="line">ESLint 的初衷是为了让程序员可以创建自己的检测规则。ESLint 的所有规则都被设计成可插入的。ESLint 的默认规则与其他的插件并没有什么区别，规则本身和测试可以依赖于同样的模式。为了便于人们使用，ESLint 内置了一些规则，当然，你可以在使用过程中自定义规则。</span><br><span class="line"></span><br><span class="line">ESLint 使用 Node.js 编写，这样既可以有一个快速的运行环境的同时也便于安装</span><br><span class="line">js语法规范性检查，类似于PEP8规范</span><br><span class="line">官网</span><br><span class="line">https:&#x2F;&#x2F;eslint.bootcss.com&#x2F;docs&#x2F;about&#x2F;</span><br></pre></td></tr></table></figure>

<h3 id="1、使用vue-cli："><a href="#1、使用vue-cli：" class="headerlink" title="1、使用vue-cli："></a>1、使用vue-cli：</h3><p>在vue-cli在init初始化时会询问是否需要添加ESLint，确认之后在创建的项目中就会出现.eslintignore和.eslintrc.js两个文件。</p>
<blockquote>
<p>.eslintignore类似Git的.gitignore用来忽略一些文件不使用ESLint检查。<br>.eslintrc.js是ESLint配置文件，用来设置插件、自定义规则、解析器等配置。</p>
<p>执行：npm run lint 会自动修复代码</p>
</blockquote>
<h3 id="2、配置ESLint："><a href="#2、配置ESLint：" class="headerlink" title="2、配置ESLint："></a>2、配置ESLint：</h3><p>Vue的项目配置eslint还是很简单的。它属于依赖插件中的一种，可以像安装其他插件一样在命令行用npm install eslint -g安装，也可以修改package.json文件去更新项目的依赖包，重新跑一遍npm install就可以了。 eslint常用的依赖有很多，我贴出我用的一些。在package.jsonde 的dependencies或者devDependencies中添加下列属性即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;babel-eslint&quot;: &quot;^7.1.1&quot;,  </span><br><span class="line">&quot;eslint-config-standard&quot;: &quot;^6.2.1&quot;,  </span><br><span class="line">&quot;eslint-friendly-formatter&quot;: &quot;^2.0.7&quot;,  </span><br><span class="line">&quot;eslint-loader&quot;: &quot;^1.6.1&quot;,  </span><br><span class="line">&quot;eslint-plugin-html&quot;: &quot;^2.0.0&quot;,  </span><br><span class="line">&quot;eslint-plugin-promise&quot;: &quot;^3.4.0&quot;,  </span><br><span class="line">&quot;eslint-plugin-standard&quot;: &quot;^2.0.1&quot;,</span><br></pre></td></tr></table></figure>

<p>但是有可能项目没有生成 eslintrc.js，码友可以去网上搜eslintrc.js然后放在项目根目录下即可。</p>
<h3 id="3-vue项目中关闭ESLint"><a href="#3-vue项目中关闭ESLint" class="headerlink" title="3 vue项目中关闭ESLint"></a>3 vue项目中关闭ESLint</h3><p>时候会被ESLint的报错阻止程序的运行，这时候我们就想关闭这个ESLint了。在vue项目中关闭ESLint方法：</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/0081Kckwgy1glran2ptj3j315k0r642h.jpg" alt="image-20201217235753547"></p>
<h3 id="4-配置示例"><a href="#4-配置示例" class="headerlink" title="4 配置示例"></a>4 配置示例</h3><p>在package.json中通过eslintConfig配置，示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;eslintConfig&quot;: &#123;</span><br><span class="line">    &quot;root&quot;: true,</span><br><span class="line">    &quot;env&quot;: &#123;</span><br><span class="line">      &quot;node&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;extends&quot;: [</span><br><span class="line">      &quot;plugin:vue&#x2F;essential&quot;,</span><br><span class="line">      &quot;@vue&#x2F;standard&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">      &quot;eol-last&quot;: [0],</span><br><span class="line">      &quot;semi&quot;: [2, &quot;always&quot;], &#x2F;&#x2F; 强制语句分号结尾</span><br><span class="line">      &quot;indent&quot;: [2, 4], &#x2F;&#x2F; 强制缩进4 spaces</span><br><span class="line">      &quot;no-new&quot;: [0], &#x2F;&#x2F; 不允许new一个实例后不赋值或不比较</span><br><span class="line">      &quot;no-debugger&quot;: [0], &#x2F;&#x2F; 不允许出现debugger语句</span><br><span class="line">      &quot;camelcase&quot;: [0, &#123;&quot;properties&quot;: &quot;never&quot;&#125;] &#x2F;&#x2F; 关闭驼峰命名规则</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;parserOptions&quot;: &#123;</span><br><span class="line">      &quot;parser&quot;: &quot;babel-eslint&quot;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;eslintIgnore&quot;: [</span><br><span class="line">    &quot;dist&#x2F;*&quot;,</span><br><span class="line">    &quot;node_modules&#x2F;*&quot;,</span><br><span class="line">    &quot;build&#x2F;*&quot;,</span><br><span class="line">    &quot;*.md&quot;</span><br><span class="line"> ],</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Vue-07</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Vue-07/</url>
    <content><![CDATA[<p>Vue插件</p>
<a id="more"></a>

<h1 id="项目功能插件"><a href="#项目功能插件" class="headerlink" title="项目功能插件"></a>项目功能插件</h1><h2 id="1、vue-router"><a href="#1、vue-router" class="headerlink" title="1、vue-router"></a>1、vue-router</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: &#39;&#x2F;&#39;,</span><br><span class="line">    name: &#39;home&#39;,</span><br><span class="line">    &#x2F;&#x2F; 路由的重定向</span><br><span class="line">    redirect: &#39;&#x2F;home&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 一级路由, 在根组件中被渲染, 替换根组件的&lt;router-view&#x2F;&gt;标签</span><br><span class="line">    path: &#39;&#x2F;one-view&#39;,</span><br><span class="line">    name: &#39;one&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;.&#x2F;views&#x2F;OneView.vue&#39;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 多级路由, 在根组件中被渲染, 替换根组件的&lt;router-view&#x2F;&gt;标签</span><br><span class="line">    path: &#39;&#x2F;one-view&#x2F;one-detail&#39;,</span><br><span class="line">    component: () &#x3D;&gt; import(&#39;.&#x2F;views&#x2F;OneDetail.vue&#39;),</span><br><span class="line">    &#x2F;&#x2F; 子路由, 在所属路由指向的组件中被渲染, 替换该组件(OneDetail)的&lt;router-view&#x2F;&gt;标签</span><br><span class="line">    children: [&#123;</span><br><span class="line">        path: &#39;show&#39;,</span><br><span class="line">        component: () &#x3D;&gt; import(&#39;.&#x2F;components&#x2F;OneShow.vue&#39;)</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- router-link渲染为a标签 --&gt;</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;router-link&gt; |</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt; |</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123;name: &#39;one&#39;&#125;&quot;&gt;One&lt;&#x2F;router-link&gt; |</span><br><span class="line"></span><br><span class="line">&lt;!-- 为路由渲染的组件占位 --&gt;</span><br><span class="line">&lt;router-view &#x2F;&gt;</span><br><span class="line">a.router-link-exact-active &#123;</span><br><span class="line">    color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; router的逻辑转跳</span><br><span class="line">this.$router.push(&#39;&#x2F;one-view&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; router采用history方式访问上一级</span><br><span class="line">this.$router.go(-1)</span><br></pre></td></tr></table></figure>

<h2 id="2、vuex"><a href="#2、vuex" class="headerlink" title="2、vuex"></a>2、vuex</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在任何一个组件中,均可以通过this.$store.state.msg访问msg的数据</span><br><span class="line">&#x2F;&#x2F; state永远只能拥有一种状态值</span><br><span class="line">state: &#123;</span><br><span class="line">    msg: &quot;状态管理器&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 让state拥有多个状态值</span><br><span class="line">mutations: &#123;</span><br><span class="line">    &#x2F;&#x2F; 在一个一个组件中,均可以通过this.$store.commit(&#39;setMsg&#39;, new_msg)来修改state中的msg</span><br><span class="line">    setMsg(state, new_msg) &#123;</span><br><span class="line">        state.msg &#x3D; new_msg</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 让mutations拥有多个状态值</span><br><span class="line">actions: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、vue-cookies"><a href="#3、vue-cookies" class="headerlink" title="3、vue-cookies"></a>3、vue-cookies</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装cookie的命令</span><br><span class="line">&#x2F;&#x2F; npm install vue-cookies --save</span><br><span class="line">&#x2F;&#x2F; 为项目配置全局vue-cookie</span><br><span class="line">import VueCookies from &#39;vue-cookies&#39;</span><br><span class="line">&#x2F;&#x2F; 将插件设置给Vue原型,作为全局的属性,在任何地方都可以通过this.$cookie进行访问</span><br><span class="line">Vue.prototype.$cookies &#x3D; VueCookies</span><br><span class="line">&#x2F;&#x2F; 持久化存储val的值到cookie中</span><br><span class="line">this.$cookies.set(&#39;val&#39;, this.val, 300)</span><br><span class="line">&#x2F;&#x2F; 获取cookie中val字段值</span><br><span class="line">this.$cookies.get(&#39;val&#39;)</span><br><span class="line">&#x2F;&#x2F; 删除cookie键值对</span><br><span class="line">this.$cookies.remove(&#39;val&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="4、axios"><a href="#4、axios" class="headerlink" title="4、axios"></a>4、axios</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39; # 安装的模块不用加相对路径</span><br><span class="line"></span><br><span class="line">axios.get().then()</span><br><span class="line">&#x2F;&#x2F; 安装 axios(ajax)的命令</span><br><span class="line">&#x2F;&#x2F; npm install axios--save</span><br><span class="line">&#x2F;&#x2F; 为项目配置全局axios</span><br><span class="line">import Axios from &#39;axios&#39;</span><br><span class="line">Vue.prototype.$ajax &#x3D; Axios</span><br><span class="line">let _this &#x3D; this</span><br><span class="line">this.$ajax(&#123;</span><br><span class="line">    method: &#39;post&#39;,</span><br><span class="line">    url: &#39;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;loginAction&#39;,</span><br><span class="line">    params: &#123;</span><br><span class="line">        usr: this.usr,</span><br><span class="line">        ps: this.ps</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(function(res) &#123;</span><br><span class="line">    &#x2F;&#x2F; this代表的是回调then这个方法的调用者(axios插件),也就是发生了this的重指向</span><br><span class="line">    &#x2F;&#x2F; 要更新页面的title变量,title属于vue实例</span><br><span class="line">    &#x2F;&#x2F; res为回调的对象,该对象的data属性就是后台返回的数据</span><br><span class="line">    _this.title &#x3D; res.data</span><br><span class="line">&#125;).catch(function(err) &#123;</span><br><span class="line">    window.console.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"># 用pycharm启动该文件模拟后台</span><br><span class="line">from flask import Flask, request, render_template</span><br><span class="line">from flask_cors import CORS</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">CORS(app, supports_credentials&#x3D;True)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;&lt;h1&gt;主页&lt;&#x2F;h1&gt;&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;loginAction&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def test_action():</span><br><span class="line">    # print(request.args)</span><br><span class="line">    # print(request.form)</span><br><span class="line">    # print(request.values)</span><br><span class="line">    usr &#x3D; request.args[&#39;usr&#39;]</span><br><span class="line">    ps &#x3D; request.args[&#39;ps&#39;]</span><br><span class="line">    if usr !&#x3D; &#39;abc&#39; or ps !&#x3D; &#39;123&#39;:</span><br><span class="line">        return &#39;login failed&#39;</span><br><span class="line">    return &#39;login success&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<h2 id="5、跨域问题解决"><a href="#5、跨域问题解决" class="headerlink" title="5、跨域问题解决"></a>5、跨域问题解决</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># http:&#x2F;&#x2F;www.mei.com&#x2F;silo&#x2F;women 响应头中Access-Control-Allow-Origin: * 允许所有的域访问</span><br><span class="line"># 以猫眼电影为例 ：https:&#x2F;&#x2F;m.maoyan.com&#x2F;#movie</span><br><span class="line"></span><br><span class="line"># devServer.proxy</span><br><span class="line"># https:&#x2F;&#x2F;cli.vuejs.org&#x2F;zh&#x2F;config&#x2F;#devserver-proxy</span><br></pre></td></tr></table></figure>

<h4 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#39;&#x2F;ajax&#39;: &#123;</span><br><span class="line">        target: &#39;https:&#x2F;&#x2F;m.maoyan.com&#x2F;&#39;,</span><br><span class="line">        changeOrigin: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件中"><a href="#组件中" class="headerlink" title="组件中"></a>组件中</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">mounted () &#123;</span><br><span class="line">  axios.get(&#39;ajax&#x2F;moreClassicList?sortId&#x3D;1&amp;showType&#x3D;3&#39;).then(res &#x3D;&gt; &#123;</span><br><span class="line">    console.log(res.data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Vue-08</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Vue-08/</url>
    <content><![CDATA[<p>Vue第三方框架ElementUI</p>
<a id="more"></a>

<h1 id="热门组件库"><a href="#热门组件库" class="headerlink" title="热门组件库"></a>热门组件库</h1><h2 id="1-使用第三方插件"><a href="#1-使用第三方插件" class="headerlink" title="1 使用第三方插件"></a>1 使用第三方插件</h2><p><a href="https://github.com/vuejs/awesome-vue#components--libraries">https://github.com/vuejs/awesome-vue#components--libraries</a></p>
<p>集合了来自社区贡献的数以千计的插件和库。</p>
<h2 id="2-使用第三方UI框架"><a href="#2-使用第三方UI框架" class="headerlink" title="2 使用第三方UI框架"></a>2 使用第三方UI框架</h2><p>饿了么UED团队推出的vue 前端框架：</p>
<h3 id="PC框架："><a href="#PC框架：" class="headerlink" title="PC框架："></a>PC框架：</h3><p>(element UI ， iview)</p>
<p>element UI 官网：<a href="http://element.eleme.io/">http://element.eleme.io/</a></p>
<p>element UI github：<a href="https://github.com/ElemeFE/element">https://github.com/ElemeFE/element</a></p>
<h3 id="移动端框架："><a href="#移动端框架：" class="headerlink" title="移动端框架："></a>移动端框架：</h3><p>(mint UI)</p>
<p>mint UI官网：<a href="https://mint-ui.github.io/docs/">https://mint-ui.github.io/docs/</a></p>
<p>mint UI github：<a href="https://github.com/ElemeFE/mint-ui">https://github.com/ElemeFE/mint-ui</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-skill</title>
    <url>/2021/04/28/%E5%89%8D%E7%AB%AF-skill/</url>
    <content><![CDATA[<p>前端基础</p>
<a id="more"></a>

<ol>
<li>快捷键相关</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、！ Tab   ----快速生成文档结构</span><br><span class="line">2、SETTINGS-EDITOR-LIVE TEMPLATES   ---定义模板、快捷键</span><br><span class="line">3、(h$)*6  Tab   ---六个标题标签 h1,h2,h3,h4,h5,h6</span><br><span class="line">4、p*n  Tab   ---多个段落标签 p, p, ...</span><br><span class="line">5、div &gt; span  Tab   ---嵌套父子模式</span><br><span class="line">6、div&gt;(span+a)   ---嵌套兄弟模式</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><font color="red">注意: 能够触发表单提交数据的按钮有哪些？</font></p>
<p><font color="red"><strong>submit 和 button</strong></font></p>
</li>
<li><p>背景属性</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background-attachment: fixed; # 图片不动</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>去除body标签自带的margin</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 浏览器会识别body标签默认自带8px的margin，一般情况下我们在写页面的时候，上来就会先将body的margin去除</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>盒子模型</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">盒模型允许我们在其它元素和周围元素边框之间的空间放置元素</span><br><span class="line"></span><br><span class="line">- **margin**: 用于控制元素与元素之间的距离；**两个元素的margin不叠加，取最大值**；**两个元素的margin不叠加，取最大值**；**两个元素的margin不叠加，取最大值**;margin的最基本用途就是控制元素周围空间的间隔，从视觉角度上达到相互隔开的目的。</span><br><span class="line">- **padding**: 用于控制内容与边框之间的距离；</span><br><span class="line">- **Border**(边框): 围绕在内边距和内容外的边框。</span><br><span class="line">- **Content**(内容): 盒子的内容，显示文本和图像。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>标签水平居中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#dd &#123;</span><br><span class="line">            margin: 0 auto;  &#x2F;*只能做到标签的水平居中*&#x2F;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="5">
<li>边框：画圆</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 画圆</span><br><span class="line">height: 400px;</span><br><span class="line">width: 400px;</span><br><span class="line">border-raddius: 50%</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>文字属性–a标签去掉自带的下划线</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 文字装饰 记忆 主要就是用来给a标签去掉自带的下划线</span><br><span class="line">text-decoration</span><br><span class="line">     none</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>display属性(能够让标签具有自身没有的属性和特征)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display</span><br><span class="line">    none 隐藏 并且原来的位置也没了</span><br><span class="line">    inline</span><br><span class="line">    block</span><br><span class="line">    inline-block</span><br><span class="line">ps: visibility:hidden 只隐藏，位置还在。</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>浮动float</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">只要是前期页面布局 一般都是用浮动来设计页面</span><br><span class="line">能够让标签脱离正常的文档流漂浮到空中（距离用户更近）</span><br><span class="line"></span><br><span class="line">浮动的元素没有块和行内一说，标签多大浮动起来之后就占多大</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>解决浮动带来的影响</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.clearfix:after &#123; &#x2F;&#x2F; 带有clearfix属性的标签后面都带有这些属性</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;  &#x2F;&#x2F; 独占一行</span><br><span class="line">  clear: both;    &#x2F;&#x2F; 左右两侧都不能有浮动元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>定位</li>
</ol>
<p>所有标签默认都是静态的static ，无法改变位置。</p>
<ul>
<li>相对定位 relative</li>
</ul>
<p><code>position: relative;</code></p>
<p>通俗解释：标签由static 变为 relative 它的性质就从原来没有定位的标签变成了已经定位过的标签；即使没动，性质也变了。</p>
<p><strong>注意：position：relative的一个主要用法：方便绝对定位元素找到参照物。</strong></p>
<ul>
<li>绝对定位 absolute</li>
</ul>
<p><code>position: absolute;</code></p>
<p>如果父级设置了position属性，例如position:relative;，<strong>那么子元素就会以父级的左上角为原始点进行定位。</strong></p>
<p>如果没有父级标签，则参照body</p>
<ul>
<li>固定定位 fixed</li>
</ul>
<p>在理论上，被设置为fixed的元素会被定位于浏览器窗口的一个指定坐标，不论窗口是否滚动，它都会固定在这个位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-ua-compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>返回顶部示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.d1</span> &#123;</span></span><br><span class="line">      height: 1000px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#eeee</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.scrollTop</span> &#123;</span></span><br><span class="line">      background-color: darkgrey;</span><br><span class="line">      padding: 10px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      position: fixed;</span><br><span class="line">      right: 10px;</span><br><span class="line">      bottom: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scrollTop&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="10">
<li>定位和浮动是否脱离文档流</li>
</ol>
<p>脱离：原来位置不在</p>
<p>未脱离：原来位置还在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 不脱离文档流</span><br><span class="line">    1.相对定位</span><br><span class="line"># 脱离文档流</span><br><span class="line">    1.浮动</span><br><span class="line">  2.绝对定位</span><br><span class="line">  3.固定定位</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>发布方式对比</title>
    <url>/2020/08/13/%E5%8F%91%E5%B8%83%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>灰度、蓝绿、ABtest发布等部署方案对比</p>
<a id="more"></a>
<h2 id="蓝绿发布（Blue-Green-Deployment）"><a href="#蓝绿发布（Blue-Green-Deployment）" class="headerlink" title="蓝绿发布（Blue/Green Deployment）"></a>蓝绿发布（Blue/Green Deployment）</h2><ol>
<li>定义</li>
</ol>
<p>蓝绿部署是不停老版本，部署新版本然后进行测试。确认OK后将流量切到新版本，然后老版本同时也升级到新版本。</p>
<ol start="2">
<li>特点</li>
</ol>
<p>蓝绿部署无需停机，并且风险较小。</p>
<ol start="3">
<li>部署过程</li>
</ol>
<p>部署版本 1 的应用（初始的状态）<br>所有外部请求的流量都打到这个版本上。<br>部署版本 2 的应用<br>版本 2 的代码与版本 1 不同(新功能、Bug修复等)。</p>
<p>将流量从版本 1 切换到版本 2。<br>如版本 2 测试正常，就删除版本 1 正在使用的资源（例如实例），从此正式用版本 2。<br>4. 小结</p>
<p>从过程不难发现，在部署的过程中，我们的应用始终在线。并且新版本上线的过程中，并没有修改老版本的任何内容，在部署期间，老版本的状态不受影响，这样风险很小。并且只要老版本的资源不被删除，理论上，我们可以在任何时间回滚到老版本。</p>
<ol start="5">
<li>蓝绿发布的注意事项</li>
</ol>
<p>当你切换到蓝色环境时，需要妥当处理未完成的业务和新的业务。如果你的数据库后端无法处理，会是一个比较麻烦的问题。</p>
<p>可能会出现需要同时处理微服务架构应用和传统架构应用的情况，如果在蓝绿部署中协调不好这两者，还是有可能会导致服务停止。<br>需要提前考虑数据库与应用部署同步迁移/回滚的问题。<br>蓝绿部署需要有基础设施支持。<br>在非隔离基础架构（ VM 、 Docker 等）上执行蓝绿部署，蓝色环境和绿色环境有被摧毁的风险。<br>6. 优势和不足</p>
<p>优势<br>升级切换和回退速度非常快。</p>
<p>不足<br>切换是全量的，如果 V2 版本有问题，则对用户体验有直接影响。</p>
<p>需要两倍机器资源。</p>
<ol start="7">
<li>适用场合</li>
</ol>
<p>对用户体验有一定容忍度的场景。<br>机器资源有富余或者可以按需分配（AWS 云，或自建容器云）。</p>
<h2 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h2><ol>
<li>定义</li>
</ol>
<p>灰度发布是指在黑与白之间，能够平滑过渡的一种发布方式。AB Test 就是一种灰度发布方式，让一部分用户继续用 A，一部分用户开始用 B，如果用户对 B 没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到 B 上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</p>
<ol start="2">
<li><p>A/B Testing<br>A/B 测试是用来测试应用功能表现的方法，例如可用性、受欢迎程度、可见性等等。 A/B 测试通常用在应用的前端上，不过当然需要后端来支持。<br>A/B 测试与蓝绿部署的区别在于， A/B 测试目的在于通过科学的实验设计、采样样本代表性、流量分割与小流量测试等方式来获得具有代表性的实验结论，并确信该结论在推广到全部流量可信；蓝绿部署的目的是安全稳定地发布新版本应用，并在必要时回滚。</p>
</li>
<li><p>金丝雀发布</p>
</li>
</ol>
<p>我们平常所说的金丝雀部署也是灰度发布的一种方式，在原有版本可用的情况下，同时部署一个新版本应用作为「金丝雀」服务器来测试新版本的性能和表现，以保障整体系统稳定的情况下，尽早发现、调整问题。</p>
<blockquote>
<p>矿井中的金丝雀：17 世纪，英国矿井工人发现，金丝雀对瓦斯这种气体十分敏感。空气中哪怕有极其微量的瓦斯，金丝雀也会停止歌唱；当瓦斯含量超过一定限度时，虽然鲁钝的人类毫无察觉，金丝雀却早已毒发身亡。当时在采矿设备相对简陋的条件下，工人们每次下井都会带上一只金丝雀作为瓦斯检测指标，以便在危险状况下紧急撤离。</p>
</blockquote>
<p>灰度发布／金丝雀发布由以下几个步骤组成：</p>
<p>准备好部署各个阶段的工件，包括：构建工件，测试脚本，配置文件和部署清单文件。<br>从负载均衡列表中移除掉「金丝雀」服务器。<br>升级「金丝雀」应用（排掉原有流量并进行部署）。<br>对应用进行自动化测试。<br>将「金丝雀」服务器重新添加到负载均衡列表中（连通性和健康检查）。<br>如果「金丝雀」在线使用测试成功，升级剩余的其他服务器（否则就回滚）。<br>除此之外灰度发布还可以设置路由权重，动态调整不同的权重来进行新老版本的验证。</p>
<ol start="4">
<li>优势和不足</li>
</ol>
<p>优势<br>用户体验影响小，灰度发布过程出现问题只影响少量用户。</p>
<p>不足<br>发布自动化程度不够，发布期间可引发服务中断。</p>
<h2 id="滚动发布（Rolling-Update-Deployment）"><a href="#滚动发布（Rolling-Update-Deployment）" class="headerlink" title="滚动发布（Rolling Update Deployment）"></a>滚动发布（Rolling Update Deployment）</h2><p>在金丝雀发布基础上的进一步优化改进，是一种自动化程度较高的发布方式，用户体验比较平滑，是目前成熟型技术组织所采用的主流发布方式。</p>
<ol>
<li>定义</li>
</ol>
<p>滚动发布：一般是取出一个或者多个服务器停止服务，执行更新，并重新将其投入使用。周而复始，直到集群中所有的实例都更新成新版本。</p>
<ol start="2">
<li>特点</li>
</ol>
<p>这种部署方式相对于蓝绿部署，更加节约资源——它不需要运行两个集群、两倍的实例数。我们可以部分部署，例如每次只取出集群的 20% 进行升级。</p>
<ol start="3">
<li>部署过程</li>
</ol>
<p>滚动式发布一般先发 1 台，或者一个小比例，如 2% 服务器，主要做流量验证用，类似金丝雀 (Canary) 测试。<br>滚动式发布需要比较复杂的发布工具和智能 LB，支持平滑的版本替换和流量拉入拉出。<br>每次发布时，先将老版本 V1 流量从 LB 上摘除，然后清除老版本，发新版本 V2，再将 LB 流量接入新版本。这样可以尽量保证用户体验不受影响。<br>一次滚动式发布一般由若干个发布批次组成，每批的数量一般是可以配置的（可以通过发布模板定义）。例如第一批 1 台（金丝雀），第二批 10%，第三批 50%，第四批 100%。每个批次之间留观察间隔，通过手工验证或监控反馈确保没有问题再发下一批次，所以总体上滚动式发布过程是比较缓慢的 (其中金丝雀的时间一般会比后续批次更长，比如金丝雀 10 分钟，后续间隔 2 分钟)。<br>回退是发布的逆过程，将新版本流量从 LB 上摘除，清除新版本，发老版本，再将 LB 流量接入老版本。和发布过程一样，回退过程一般也比较慢的。<br>4. 优势和不足</p>
<p>优势<br>用户体验影响小，体验较平滑。</p>
<p>不足<br>发布和回退时间比较缓慢。</p>
<p>发布工具比较复杂，LB 需要平滑的流量摘除和拉入能力。</p>
<h2 id="其它发布方式"><a href="#其它发布方式" class="headerlink" title="其它发布方式"></a>其它发布方式</h2><p>上述都是偏传统的发布方式，能覆盖大部分应用发布场景。针对一些关键新功能的上线发布，或者一些特定的场景，还有一些特殊的发布方式。</p>
<p>功能开关发布</p>
<p>利用代码中的功能开关（Feature Flag/Toggle/Switch）来控制发布逻辑，一般不需要复杂的发布工具和智能 LB 配合，是一种相对比较低成本和简单的发布方式。这种方式也是支持现代 DevOps 理念，研发人员可以灵活定制和自助完成的发布方式。功能开关的原理如下图所示：</p>
<ol>
<li>部署过程</li>
</ol>
<p>功能开关发布需要一个配置中心或者开关中心这样的服务支持，例如携程的 Apollo 配置中心或者开源的 FF4J，这些都支持开关发布。业界还有专门的功能开关 SaaS 服务，例如 LaunchDarkly。通过配置中心，运维或研发人员可以在运行期动态配置功能开关的值。当然，功能开关发布只是配置中心的一种使用场景，配置中心还能支持其它很多动态配置场景。<br>功能开关服务一般提供客户端 SDK，方便开发人员集成。在运行期，客户端 SDK 会同步最新的开关值，技术实现有推方式 (push)，也有拉方式 (pull)，或者推拉结合方式。<br>新功能（V2 new feature）和老功能（V1 old feature）住在同一套代码中，新功能隐藏在开关后面，如果开关没有打开，则走老代码逻辑，如果开关打开，则走新代码逻辑。技术实现上可以理解为一个简单的 if/else 逻辑。<br>应用上线后，开关先不打开，然后运维或研发人员通过开关中心打开新功能，经过流量验证新功能没有问题，则发布完成；如果有问题，则随时可以通过开关中心切回老功能逻辑。<br>2. 优势和不足</p>
<p>优势<br>升级切换和回退速度非常快。</p>
<p>相对于复杂的发布工具，实施比较简单，成本相对低廉。</p>
<p>研发能够灵活定制发布逻辑，支持 DevOps 自助发布。</p>
<p>不足<br>切换是全量的，如果 V2 版本有问题，则对用户体验有直接影响。</p>
<p>对代码有侵入，代码逻辑会变复杂，需要定期清理老版本逻辑，维护成本变高。</p>
]]></content>
      <categories>
        <category>ops</category>
      </categories>
      <tags>
        <tag>deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-01</title>
    <url>/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-01/</url>
    <content><![CDATA[<p>进程理论/ 同步异步/ 如何开启进程/ multiprocess/ 同时运行多个进程</p>
<a id="more"></a>

<h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><h3 id="操作系统发展史"><a href="#操作系统发展史" class="headerlink" title="操作系统发展史"></a>操作系统发展史</h3><p>参考博客：<a href="https://www.cnblogs.com/Dominic-Ji/articles/10929381.html">https://www.cnblogs.com/Dominic-Ji/articles/10929381.html</a></p>
<h3 id="多道技术"><a href="#多道技术" class="headerlink" title="多道技术"></a>多道技术</h3><p>单核实现并发的效果</p>
<h3 id="必备知识点"><a href="#必备知识点" class="headerlink" title="必备知识点"></a>必备知识点</h3><ul>
<li><p>并发</p>
<p>看起来像同时运行的就可以称之为并发</p>
</li>
<li><p>并行</p>
<p>真正意义上的同时执行</p>
</li>
</ul>
<p>ps:</p>
<ul>
<li>并行肯定算并发</li>
<li>只有多核才涉及到并行</li>
</ul>
<p>补充: 我们直接假设单核就是一个核心,干活的就一个人，不要考虑cpu里面的内核数</p>
<h3 id="多道技术图解"><a href="#多道技术图解" class="headerlink" title="多道技术图解"></a>多道技术图解</h3><p>节省了多个程序运行的总耗时</p>
<img src="/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-01/%E5%A4%9A%E9%81%93%E6%8A%80%E6%9C%AF.png" class title="并发编程-01">

<h4 id="多道技术重点知识"><a href="#多道技术重点知识" class="headerlink" title="多道技术重点知识"></a>多道技术重点知识</h4><p>空间上的复用和时间上的复用</p>
<ul>
<li><p>空间上的复用</p>
<p>多个程序公用一套计算机硬件</p>
</li>
<li><p>时间上的复用</p>
<p>例子: 洗衣服30s，做饭50s，烧水30s</p>
<p>单道110s，多道时间最长的那个               切换节省时间</p>
<p>例子: 吃饭，玩游戏，边吃饭边玩游戏      保存状态</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">切换（cpu）分为两种情况，</span></span><br><span class="line"><span class="string">  1. 当一个程序遇到IO操作的时候，这会没使用cpu，操作系统会剥夺该程序的CPU执行权限</span></span><br><span class="line"><span class="string">     作用: 提高了cpu的利用率，并且也不影响程序的执行效率</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  2. 当一个程序长时间占用cpu的时候，操作系统也会剥夺该程序的CPU执行权限 </span></span><br><span class="line"><span class="string">         作用: 降低了程序的执行效率（原本时间+切换时间）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="进程理论"><a href="#进程理论" class="headerlink" title="进程理论"></a>进程理论</h2><h3 id="必备知识点-1"><a href="#必备知识点-1" class="headerlink" title="必备知识点"></a>必备知识点</h3><h4 id="程序和进程的区别"><a href="#程序和进程的区别" class="headerlink" title="程序和进程的区别"></a>程序和进程的区别</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">程序就是一堆躺在硬盘上的代码，是”死“的</span></span><br><span class="line"><span class="string">进程则是表示程序正在执行的过程，是”活“的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3><ul>
<li><p>先来先服务的调度算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;对长作业有利，对短作业无益&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>短作业优先调度算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;对短作业有利, 对长作业无益&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>时间片轮转+多级反馈队列</p>
</li>
</ul>
<img src="/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-01/%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC.png" class title="并发编程-01">



<h3 id="进程运行的三状态图"><a href="#进程运行的三状态图" class="headerlink" title="进程运行的三状态图"></a>进程运行的三状态图</h3><img src="/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-01/%E8%BF%9B%E7%A8%8B%E4%B8%89%E7%8A%B6%E6%80%81%E5%9B%BE.png" class title="并发编程-01">



<img src="/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-01/%E4%B8%89%E7%8A%B6%E6%80%81%E5%9B%BE%E4%BB%A3%E7%A0%81%E8%AE%B2%E8%A7%A3.png" class title="并发编程-01">



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进程是资源分配的最小单位，线程是cpu执行的最小单位</span><br><span class="line">#一个程序运行，最少有一个进程</span><br><span class="line">#一个进程里最少有一条线程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 进程和程序的区分</span><br><span class="line">程序可以作为一种软件资料长期存在，而进程是有一定生命期的。</span><br><span class="line">程序是永久的，进程是暂时的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 进程的状态（）</span><br><span class="line">    -就绪态：可以被cpu调度执行了，还没有执行，排着队</span><br><span class="line">    -运行态：在cpu中运行，正在运行（如果到了时间片，也会被调度出去，调度出去的程序是就绪态）</span><br><span class="line">    -阻塞态：io操作，把数据加载到内存中</span><br></pre></td></tr></table></figure>







<h2 id="两对重要概念"><a href="#两对重要概念" class="headerlink" title="两对重要概念"></a>两对重要概念</h2><ul>
<li><strong>同步和异步</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;描述的是任务的提交方式&quot;&quot;&quot;</span></span><br><span class="line">同步: 任务提交之后，原地等待任务的返回结果，等待的过程中不做任何事（干等）</span><br><span class="line">      程序层面上表现出来的就是夯住了</span><br><span class="line">异步: 任务提交之后，不原地等待任务的返回结果，直接去做其他事情</span><br><span class="line">      我提交的任务结果如何获取？</span><br><span class="line">      任务的返回结果，会有一个异步回调机制自动处理</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>阻塞非阻塞</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;描述进程的运行状态&quot;&quot;&quot;</span></span><br><span class="line">阻塞: 阻塞态</span><br><span class="line">非阻塞: 就绪态、运行态</span><br><span class="line">  </span><br><span class="line">理想状态: 我们应该让我们写的代码永远在就绪态和运行态之间切换</span><br></pre></td></tr></table></figure>

<p>上述概念的组合: 最高效的一种组合就是 <strong>异步非阻塞</strong></p>
<h3 id="开启进程的两种方式"><a href="#开启进程的两种方式" class="headerlink" title="开启进程的两种方式"></a>开启进程的两种方式</h3><p>定心丸: 代码开启进程和线程的方式，代码书写基本是一样的，你学会了如何开启进程就学会了如何开启线程.</p>
<p><strong>进程创建的第一种方式</strong>.p,start()告诉操作系统创建一个进程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程创建的第一种方式</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s is running&#x27;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s is over&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 实例化一个对象</span></span><br><span class="line">    p = Process(target=task, args=(<span class="string">&#x27;jason&#x27;</span>,))</span><br><span class="line">    <span class="comment"># 容器类型无论里面有几个元素，建议一定要用逗号隔开</span></span><br><span class="line">    <span class="comment"># 2 开启进程</span></span><br><span class="line">    p.start()  <span class="comment"># 告诉操作系统创建一个进程</span></span><br><span class="line">    print(<span class="string">&#x27;主&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">windows 操作系统下创建进程一定要在main下面创建</span></span><br><span class="line"><span class="string">因为windows下创建进程类似于模块导入的方式</span></span><br><span class="line"><span class="string">会从上往下依次执行代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<p><strong>进程创建的第二种方式</strong>: 类的继承</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProcess</span>(<span class="params">Process</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name1, age</span>)</span></span><br><span class="line"><span class="function">        <span class="title">super</span>().<span class="title">__init__</span>()</span></span><br><span class="line">        self.name1 = name1</span><br><span class="line">        self.age = age</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;hello bf girl&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">&#x27;get out!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = MyProcess()</span><br><span class="line">    p.start()</span><br><span class="line">    print(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>**总结: **</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建进程就是在内存中申请一块内存空间将需要运行的代码丢进去</span></span><br><span class="line"><span class="string">一个进程对应在内存中就是一块独立的内存空间</span></span><br><span class="line"><span class="string">多个进程对应在内存中就是多块独立的内存空间</span></span><br><span class="line"><span class="string">进程与进程之间默认情况下无法直接交互，如果想交互可以借助于第三方工具、模块</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h3><p>join方法是让主进程的代码等待子进程代码运行结束之后，再继续运行。不影响其他子进程之间的运行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name, n</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s is running&#x27;</span> % name)</span><br><span class="line">    time.sleep(n)</span><br><span class="line">    print(<span class="string">&#x27;%s is over&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 实例化一个对象</span></span><br><span class="line">    <span class="comment"># p1 = Process(target=task, args=(&#x27;jason&#x27;,1))</span></span><br><span class="line">    <span class="comment"># p2 = Process(target=task, args=(&#x27;egon&#x27;,2))</span></span><br><span class="line">    <span class="comment"># p3 = Process(target=task, args=(&#x27;tank&#x27;,3))</span></span><br><span class="line">    <span class="comment"># start_time = time.time()</span></span><br><span class="line">    <span class="comment"># p1.start()</span></span><br><span class="line">    <span class="comment"># p2.start()</span></span><br><span class="line">    <span class="comment"># p3.start()  # 仅仅是告诉操作系统要创建进程，什么时候操作系统操作是看系统什么时候加载程序到内存，cpu什么时候执行</span></span><br><span class="line">    <span class="comment"># # p.join()  # 主进程等待子进程p运行结束之后再继续往后执行</span></span><br><span class="line">    <span class="comment"># p1.join()</span></span><br><span class="line">    <span class="comment"># p2.join()</span></span><br><span class="line">    <span class="comment"># p3.join()</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    p_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        p = Process(target=task, args=(<span class="string">&#x27;子进程 %s&#x27;</span> %i, i))</span><br><span class="line">        p.start()</span><br><span class="line">        p_list.append(p)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> p_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;主&#x27;</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>



<h3 id="同时运行多个进程"><a href="#同时运行多个进程" class="headerlink" title="同时运行多个进程"></a>同时运行多个进程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name, n</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s is running&#x27;</span> % name)</span><br><span class="line">    time.sleep(n)</span><br><span class="line">    print(<span class="string">&#x27;%s is over&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    p_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        p = Process(target=task, args=(<span class="string">&#x27;子进程 %s&#x27;</span> %i, i))</span><br><span class="line">        p.start()</span><br><span class="line">        p_list.append(p)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> p_list:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;主&#x27;</span>, time.time() - start_time)</span><br></pre></td></tr></table></figure>





<h3 id="进程之间数据相互隔离"><a href="#进程之间数据相互隔离" class="headerlink" title="进程之间数据相互隔离"></a>进程之间数据相互隔离</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> money  <span class="comment"># 局部修改全局</span></span><br><span class="line">    money = <span class="number">666</span></span><br><span class="line">    print(<span class="string">&#x27;子 %s&#x27;</span> %money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=task)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(money)</span><br></pre></td></tr></table></figure>

<h3 id="进程对象及其他方法"><a href="#进程对象及其他方法" class="headerlink" title="进程对象及其他方法"></a>进程对象及其他方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">一台计算机上面运行很多进程，那么计算机是如何区分并管理这些进程服务端的呢？</span></span><br><span class="line"><span class="string">计算机会给每一个运行的进程分配一个PID 号</span></span><br><span class="line"><span class="string">查看方法：</span></span><br><span class="line"><span class="string">        windows电脑:</span></span><br><span class="line"><span class="string">            tasklist|findstr PID 查看具体的进程</span></span><br><span class="line"><span class="string">        mac:</span></span><br><span class="line"><span class="string">          ps aux |grep PID</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">查看当前进程号</span><br><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, current_process</span><br><span class="line">current_process().pid  查看当前进程的进程号</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getpid()   <span class="comment"># 查看当前进程的进程号</span></span><br><span class="line">os.getppid()  <span class="comment"># 查看父进程的进程号</span></span><br><span class="line"></span><br><span class="line">杀死进程</span><br><span class="line">p.terminate() <span class="comment"># 杀死当前进程,是告诉操作系统帮你kill当前进程,但是需要一定的时间 而代码的运行速度快</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, current_process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;%s is running&#x27;</span> %os.getpid())  <span class="comment"># 查看当前进程的进程号</span></span><br><span class="line">    <span class="comment"># print(&#x27;子进程的主进程号%s&#x27; %os.getppid())  # 查看当前进程的进程号</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=task)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="comment"># p.run()  # 实际进程在执行的时候，执行的是run方法, 但是调用run不会开进程。</span></span><br><span class="line">    p.terminate() <span class="comment"># 杀死当前进程,是告诉操作系统帮你kill当前进程,但是需要一定的时间 而代码的运行速度快</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(p.is_alive()) <span class="comment"># 判断当前进程是否存活</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    一般情况下，我们会默认将</span></span><br><span class="line"><span class="string">    存储布尔值的变量名</span></span><br><span class="line"><span class="string">    和返回结果布尔值的方法名</span></span><br><span class="line"><span class="string">    都起成以is_开头</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&#x27;主&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(&#x27;主&#x27;,os.getpid())</span></span><br><span class="line">    <span class="comment"># print(&#x27;父进程pid&#x27;,os.getppid())  # 查看父进程的进程号</span></span><br></pre></td></tr></table></figure>







<p>复习:</p>
<ul>
<li>阐述同步异步阻塞非阻塞</li>
<li>手写开启进程的两种方式</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-02</title>
    <url>/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-02/</url>
    <content><![CDATA[<p>僵尸和孤儿进程，守护进程，互斥锁，生产消费模型</p>
<a id="more"></a>

<p><strong>通过通信的方式 共享变量，比如redis, MySQL, **, **不通过共享变量的方式共享数据</strong></p>
<h2 id="僵尸进程与孤儿进程"><a href="#僵尸进程与孤儿进程" class="headerlink" title="僵尸进程与孤儿进程"></a>僵尸进程与孤儿进程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 僵尸进程</span></span><br><span class="line">进程结束后不会立刻释放占用的资源(PID)，会保留一段时间共父进程查看</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">死了但是没死透</span></span><br><span class="line"><span class="string">当你开设了子进程之后，该进程死后不会立刻释放占用的进程号</span></span><br><span class="line"><span class="string">因为我要父进程能够查看到它开设的子进程的一些基本信息，占用的pid号 运行时间</span></span><br><span class="line"><span class="string">所有的进程都会步入僵尸进程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    父进程不死并且在无限制的创建的子进程，并且子进程也不结束</span></span><br><span class="line"><span class="string">  回收子进程占用的pid号</span></span><br><span class="line"><span class="string">     父进程等待子进程运行结束</span></span><br><span class="line"><span class="string">     或者父进程调用join方法</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 孤儿进程</span></span><br><span class="line">子进程存活，父进程意外死亡，孤儿进程操作系统会自动回收相应资源</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">子进程存活，父进程意外死亡</span></span><br><span class="line"><span class="string">操作系统会开设一个(儿童福利院)，专门管理孤儿进程，回收相关资源</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">被守护进程结束之后守护进程立刻跟着结束</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s总管正在活着&#x27;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s总管正在死亡&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=task, args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">    <span class="comment"># p = Process(target=task, kwargs=&#123;(&#x27;name&#x27;:&#x27;egon&#x27;)&#125;)  # kwargs 传关键字参数</span></span><br><span class="line">    p.daemon = <span class="literal">True</span>  <span class="comment"># 将进程p 设置成守护进程 这句一定放在start方法上面才有效，否则会直接报错</span></span><br><span class="line">    p.start()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;皇帝json寿终正寝&#x27;</span>)</span><br></pre></td></tr></table></figure>





<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p><strong>概念:</strong>    多个进程操作同一份数据的时候，会出现数据错乱的问题；出现上述问题通常加锁处理。</p>
<p><strong>作用：</strong> 针对上述，解决方式就是加锁处理: <strong>将并发变成串行，牺牲效率保证了数据的安全</strong></p>
<p><strong>注意:</strong>   只在操作数据的部分加锁即可；锁尽量不要自己去处理，很容易造成死锁现象。</p>
<p><strong>扩展:</strong>   行锁，表锁</p>
<p>​            操作表格中的一行数据的时候其他人都不能操作；</p>
<p>​            操作一张表的时候其他人都不能操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="comment"># 文件操作读取票数</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">    print(<span class="string">&#x27;用户%s查询余票: %s&#x27;</span> % (i, dic.get(<span class="string">&#x27;ticket_num&#x27;</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 买票  1. 先查 2.再买</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="comment"># 先查票</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dic = json.load(f)</span><br><span class="line">    <span class="comment"># 模拟网络延迟</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">    <span class="comment"># 判断当前是否有票</span></span><br><span class="line">    <span class="keyword">if</span> dic.get(<span class="string">&#x27;ticket_num&#x27;</span>) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 修改数据库 买票</span></span><br><span class="line">        dic[<span class="string">&#x27;ticket_num&#x27;</span>] -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 写入数据库</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(dic, f)</span><br><span class="line">        print(<span class="string">&#x27;用户%s买票成功&#x27;</span> % i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;用户%s买票失败&#x27;</span> % i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">i, mutex</span>):</span></span><br><span class="line">    search(i)</span><br><span class="line">    <span class="comment"># 给买票环节枷锁处理</span></span><br><span class="line">    <span class="comment"># 抢锁</span></span><br><span class="line">    mutex.acquire()</span><br><span class="line">    buy(i)</span><br><span class="line">    <span class="comment"># 释放锁</span></span><br><span class="line">    mutex.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 在主进程中生成一把锁，让所有的子进程抢，谁先抢到谁先买票</span></span><br><span class="line">    mutex = Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        p = Process(target=run, args=(i, mutex))</span><br><span class="line">        p.start()</span><br><span class="line">        </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><strong>将并发变成串行，牺牲效率保证了数据的安全</strong></p>
<ul>
<li>行锁</li>
<li>表锁</li>
</ul>
<p><strong>注意</strong>:</p>
<ol>
<li><p>锁不要轻易的使用，容易造成死锁的现象(我们写代码一般不会用到，都是内部封装好的)</p>
<pre><code>      2. 锁只在处理数据的部分加，来保证数据安全(只在争抢数据的环节加锁处理即可)</code></pre>
</li>
</ol>
<h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><h3 id="队列Queue模块"><a href="#队列Queue模块" class="headerlink" title="队列Queue模块"></a>队列Queue模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">管道: subprocess</span></span><br><span class="line"><span class="string">         stdin stdout stderr </span></span><br><span class="line"><span class="string">队列: 管道+锁 通常会用队列</span></span><br><span class="line"><span class="string">队列: 先进先出</span></span><br><span class="line"><span class="string">堆栈: 先进后出 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># maxsize表示Queue的大小是多少，能放多少东西</span></span><br><span class="line">    queue=Queue(<span class="number">3</span>)</span><br><span class="line">    <span class="comment">## 放数据</span></span><br><span class="line">    queue.put(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line">    queue.put(<span class="string">&#x27;liss&#x27;</span>)</span><br><span class="line">    queue.put(<span class="string">&#x27;wwwww&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    queue.put(<span class="string">&#x27;wwwww&#x27;</span>,timeout=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># queue.put_nowait(&#x27;sdafsd&#x27;)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># res=queue.get()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># res=queue.get()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    res=queue.get()</span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># # 卡住</span></span><br><span class="line">    <span class="comment"># # res=queue.get()</span></span><br><span class="line">    <span class="comment"># res=queue.get_nowait()</span></span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  # 实例化得到一个对象，数字表示queue的大熊</span></span><br><span class="line"><span class="string">  queue=Queue(3)</span></span><br><span class="line"><span class="string">  # 放值</span></span><br><span class="line"><span class="string">  # block:是否阻塞</span></span><br><span class="line"><span class="string">  #timeout：等待的时间</span></span><br><span class="line"><span class="string">  queue.put()</span></span><br><span class="line"><span class="string">  #取值</span></span><br><span class="line"><span class="string">  # block:是否阻塞</span></span><br><span class="line"><span class="string">  #timeout：等待的时间</span></span><br><span class="line"><span class="string">  queue.get()</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  # 不等待，如果满了，就报错</span></span><br><span class="line"><span class="string">  queue.put_nowait()</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  # 去取值，如果没有值，直接报错</span></span><br><span class="line"><span class="string">  res=queue.get_nowait()</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  #查看这个queue是否满</span></span><br><span class="line"><span class="string">  queue.full()</span></span><br><span class="line"><span class="string">  #查看queue是否是空的</span></span><br><span class="line"><span class="string">  queue.empty()</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  # 查看queue中有几个值</span></span><br><span class="line"><span class="string">  queue.qsize()</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">q.full()</span></span><br><span class="line"><span class="string">q.empty()</span></span><br><span class="line"><span class="string">q.get_nowait()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在多进程的情况下是无法使用的，不精确的( 你刚判断完，另一个进程操作了)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>





<h2 id="IPC机制，进程间通信"><a href="#IPC机制，进程间通信" class="headerlink" title="IPC机制，进程间通信"></a>IPC机制，进程间通信</h2><img src="/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-02/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1.png" class title="并发编程-02">

<p><strong>进程间是无法直接进行数据交互的，但是可以通过队列或者管道实现数据交互的</strong></p>
<ol>
<li>管道    2. 队列= 管道 + 锁</li>
</ol>
<p>本地测试的时候才可能用得到Queue，实际生产用的都是别人封装好的功能非常强大的工具</p>
<p>redis kafka RQ</p>
<p>进程1往队列里存数据，进程2从队列里取数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue, Process</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   1. 主进程跟子进程之间借助于队列通信</span></span><br><span class="line"><span class="string">   2. 子进程和子进程之间借助于队列通信</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">q</span>):</span></span><br><span class="line">    q.put(<span class="string">&#x27;我是23号技师&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;hello big baby!!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">q</span>):</span></span><br><span class="line">    print(q.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    p = Process(target=producer, args=(q,))</span><br><span class="line">    p1 = Process(target=consumer, args=(q,))</span><br><span class="line">    p.start()</span><br><span class="line">    p1.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="进程间数据共享"><a href="#进程间数据共享" class="headerlink" title="进程间数据共享"></a>进程间数据共享</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">from multiprocessing import Process,Manager,Lock</span><br><span class="line"></span><br><span class="line"># 魔法方法：类内以__开头__结尾的方法，都叫魔法方法,某种情况下会触发它的执行</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">__init__ ：类()触发</span><br><span class="line">__new__：</span><br><span class="line">__getattr__</span><br><span class="line">__setattr__</span><br><span class="line">__getitem__</span><br><span class="line">__setitem__</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"># def task(dic,lock):</span><br><span class="line">#     # lock.acquire()</span><br><span class="line">#     # dic[&#39;count&#39;]-&#x3D;1</span><br><span class="line">#     # lock.release()</span><br><span class="line">#     with lock:</span><br><span class="line">#         dic[&#39;count&#39;] -&#x3D; 1</span><br><span class="line">#</span><br><span class="line"># if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">#     lock &#x3D; Lock()</span><br><span class="line">#     with Manager() as m:</span><br><span class="line">#         # 如果直接定义dict，这个dict在多个进程中其实是多份，进程如果改，只改了自己的</span><br><span class="line">#         #如果定义的是m.dict(&#123;&#39;count&#39;: 100&#125;)，多个进程之间就可以共享这个数据</span><br><span class="line">#         dic &#x3D; m.dict(&#123;&#39;count&#39;: 100&#125;)</span><br><span class="line">#</span><br><span class="line">#         p_l &#x3D; []</span><br><span class="line">#         for i in range(100):</span><br><span class="line">#             p &#x3D; Process(target&#x3D;task, args&#x3D;(dic, lock))</span><br><span class="line">#             p_l.append(p)</span><br><span class="line">#             p.start()</span><br><span class="line">#         for p in p_l:</span><br><span class="line">#             p.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def task(dic,lock):</span><br><span class="line">    with lock:</span><br><span class="line">        dic[&#39;count&#39;] -&#x3D; 1</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    lock &#x3D; Lock()</span><br><span class="line">    dic&#x3D;&#123;&#39;count&#39;:100&#125;</span><br><span class="line">    p_l &#x3D; []</span><br><span class="line">    for i in range(100):</span><br><span class="line">        p &#x3D; Process(target&#x3D;task, args&#x3D;(dic, lock))</span><br><span class="line">        p_l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    for p in p_l:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    print(dic)</span><br></pre></td></tr></table></figure>



<h2 id="生产消费模型"><a href="#生产消费模型" class="headerlink" title="生产消费模型"></a>生产消费模型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">生产者和消费者之间不是直接交互的，而是借助于媒介做交互</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">生产者 + 消息队列 + 消费者</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">消息队列的存在 ， 为了解决供需不平衡的问题</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># JoinableQueue</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可以被等待的q</span></span><br><span class="line"><span class="string">你在往队列中放数据的时候  内部有一个计数器自动加1</span></span><br><span class="line"><span class="string">你在从队列中取数据的时候，调用task_done() 内部计数器自动 -1</span></span><br><span class="line"><span class="string">q.join() 当计数器为0 的时候，才继续往下运行。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue, JoinableQueue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span>(<span class="params">name, food, q</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        data = <span class="string">&#x27;%s 生产了 %s %s&#x27;</span> % (name, food, i)</span><br><span class="line">        <span class="comment"># 模拟延迟</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        print(data)</span><br><span class="line">        <span class="comment"># 数据放入队列</span></span><br><span class="line">        q.put(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span>(<span class="params">name, q</span>):</span></span><br><span class="line">    <span class="comment"># 光盘</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        food = q.get()  <span class="comment"># 没有数据就会卡住</span></span><br><span class="line">        <span class="comment"># 判断当前是否有结束的标识</span></span><br><span class="line">        <span class="comment"># if food is None:break</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        print(<span class="string">&#x27;%s 吃了 %s&#x27;</span> % (name, food))</span><br><span class="line">        q.task_done()  <span class="comment"># 告诉队列你已经从里面取出了一个数据并且处理完毕了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># q = Queue()</span></span><br><span class="line">    q = JoinableQueue()</span><br><span class="line">    p1 = Process(target=producer, args=(<span class="string">&#x27;大厨egon&#x27;</span>, <span class="string">&#x27;包子&#x27;</span>, q))</span><br><span class="line">    p2 = Process(target=producer, args=(<span class="string">&#x27;马叉虫tank&#x27;</span>, <span class="string">&#x27;泔水&#x27;</span>, q))</span><br><span class="line">    c1 = Process(target=consumer, args=(<span class="string">&#x27;春哥&#x27;</span>, q))</span><br><span class="line">    c2 = Process(target=consumer, args=(<span class="string">&#x27;新哥&#x27;</span>, q))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    <span class="comment"># 将消费者设置成守护进程</span></span><br><span class="line">    c1.daemon = <span class="literal">True</span></span><br><span class="line">    c2.daemon = <span class="literal">True</span></span><br><span class="line">    c1.start()</span><br><span class="line">    c2.start()</span><br><span class="line"></span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    <span class="comment"># 等待生产者生产完毕后 往队列里添加特定的结束符号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># q.put(None)  # 肯定在所有生产者生产的数据的末尾</span></span><br><span class="line">    <span class="comment"># q.put(None)  # 肯定在所有生产者生产的数据的末尾</span></span><br><span class="line">    q.join()  <span class="comment"># 等待队列中所有的数据取完再往下执行代码</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    JoinableQueue 每当往队列中存入数据的时候，内部会有一个计数器+1</span></span><br><span class="line"><span class="string">    每当调用task_done的时候，计数器-1</span></span><br><span class="line"><span class="string">    q.join() 当计数器为0的时候，才往后运行</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 只要q.join()执行完毕，说明消费者已经处理完数据了 消费者就没有存在的必要了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<p>每日测验:</p>
<ul>
<li>说出你所知道的关于人工智能的API网站</li>
<li>互斥锁的作用</li>
<li>队列的作用及你所接触到的队列模块及该模块的常用方法</li>
<li>简述生产者消费者模型</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-03</title>
    <url>/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-03/</url>
    <content><![CDATA[<p>线程、TCP服务端多线程实现并发的效果(链接循环+通信循环)、线程对象的join方法</p>
<a id="more"></a>



<h2 id="线程理论"><a href="#线程理论" class="headerlink" title="线程理论"></a>线程理论</h2><h3 id="致命三问？"><a href="#致命三问？" class="headerlink" title="致命三问？"></a>致命三问？</h3><ul>
<li>什么是线程</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">进程: 资源单位</span></span><br><span class="line"><span class="string">线程: 执行单位</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">将操作系统比喻成大的工厂，进程相当于车间，线程相当于车间里面的流水线</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">每一个进程肯定自带一个线程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">再次总结: </span></span><br><span class="line"><span class="string">        进程: 资源单位(起一个进程仅仅是在内存空间中开辟一块独立的空间)</span></span><br><span class="line"><span class="string">        线程: 执行单位(真正被执行的其实是线程里面的线程，线程指的就是代码的执行过程，执行代码中所需要使用到的资源都找到所在的的进程索要)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">进程和线程都是虚拟单位，只是为了我们更加方便的描述问题。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>为何要有线程</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">开设进程:</span></span><br><span class="line"><span class="string">    1. 申请内存空间 耗资源</span></span><br><span class="line"><span class="string">    2. “拷贝代码”  耗资源</span></span><br><span class="line"><span class="string">开设线程:</span></span><br><span class="line"><span class="string">  一个进程内可以开设多个线程, 在用一个进程内开设多个线程无需再次申请内存空间操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">总结: </span></span><br><span class="line"><span class="string">        开设线程的开销远远的小于进程的开销</span></span><br><span class="line"><span class="string">        同一个进程下的多个线程数据是共享的</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">开发一款文本编辑器</span><br><span class="line">    获取用户输入的功能</span><br><span class="line">  实时展示到屏幕的功能</span><br><span class="line">  自动保存到硬盘的功能</span><br><span class="line">针对上面三个功能, 开设进程还是线程合适???</span><br><span class="line">    开三个线程处理上面的三个功能更加的合理</span><br></pre></td></tr></table></figure>



<ul>
<li>如何使用，开启线程的两种方式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种  </span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s is running&#x27;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s is over&#x27;</span>  % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启线程不需要在main下面执行代码，直接书写就可以了</span></span><br><span class="line"><span class="comment"># 但是还是习惯性的将启动命令写在main下面</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;</span></span><br><span class="line"></span><br><span class="line">t = Thread(target=task, args=(<span class="string">&#x27;egon&#x27;</span>,))</span><br><span class="line">t.start() <span class="comment"># 创建线程的开销非常小，几乎是代码一执行线程就已经创建了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = Process(target=task, args=(&#x27;矮跟&#x27;,))</span></span><br><span class="line"><span class="comment"># p.start()</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;主&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">      <span class="comment"># 重写了别人的方法，父类的init永远不能找到。但是又不知道别人的方法里写了啥，你就调用父类的方法</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is running&#x27;</span> % self.name)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">&#x27;egon dsb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = MyThread(<span class="string">&#x27;egon&#x27;</span>)   <span class="comment"># 会用</span></span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="TCP服务端实现并发的效果-每一个连接对象开启一个线程-进程也可以"><a href="#TCP服务端实现并发的效果-每一个连接对象开启一个线程-进程也可以" class="headerlink" title="TCP服务端实现并发的效果(每一个连接对象开启一个线程(进程也可以))"></a>TCP服务端实现并发的效果(每一个连接对象开启一个线程(进程也可以))</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">服务端</span></span><br><span class="line"><span class="string">    1.要有固定的ip和port</span></span><br><span class="line"><span class="string">    2.24小时不间断提供服务</span></span><br><span class="line"><span class="string">    3.能够支持并发</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">server = socket.socket()  <span class="comment"># 括号内不加参数默认就是TCP</span></span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将服务的代码单独封装成一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">conn</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">           data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">           <span class="comment"># 在unix系统中，一旦data收到的是空，以为着是一种异常的行为: 客户端非法断开了连接</span></span><br><span class="line">           <span class="comment"># 服务端报错connect error</span></span><br><span class="line">           <span class="keyword">if</span> len(data) == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">           <span class="comment"># print(data.decode(&#x27;utf-8&#x27;))</span></span><br><span class="line">           conn.send(data.upper())</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 针对windows系统</span></span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接循环</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        conn, addr = server.accept()</span><br><span class="line">        <span class="comment"># 叫其他人来服务</span></span><br><span class="line">        print(conn, addr)</span><br><span class="line">        t = Thread(target=talk, args=(conn, ))</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>


<h3 id="server也可以封装一下，启动server开启一个线程"><a href="#server也可以封装一下，启动server开启一个线程" class="headerlink" title="server也可以封装一下，启动server开启一个线程"></a>server也可以封装一下，启动server开启一个线程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">communication</span>(<span class="params">conn</span>):</span></span><br><span class="line">    <span class="comment"># 通信循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(data) == <span class="number">0</span>:<span class="keyword">break</span></span><br><span class="line">            print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            conn.send(data.upper())</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span>(<span class="params">ip, port</span>):</span></span><br><span class="line">    server = socket.socket()</span><br><span class="line">    server.bind((ip, port))</span><br><span class="line">    server.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 链接循环</span></span><br><span class="line">        conn, addr = server.accept()</span><br><span class="line">        <span class="comment"># 开启多进程或者多线程处理客户端连接</span></span><br><span class="line">        t = Thread(target=communication, args=(conn, ))</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 再开一个线程启动server</span></span><br><span class="line">    s = Thread(target=server, args=(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">    s.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="线程对象的join方法"><a href="#线程对象的join方法" class="headerlink" title="线程对象的join方法"></a>线程对象的join方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s is running&#x27;</span> %name)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s is over&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Thread(target=task, args=(<span class="string">&#x27;egon&#x27;</span>, ))</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="同一个进程下线程间数据是共享的"><a href="#同一个进程下线程间数据是共享的" class="headerlink" title="同一个进程下线程间数据是共享的"></a>同一个进程下线程间数据是共享的</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    money = <span class="number">666</span></span><br><span class="line">    print(money)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Thread(target=task)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(money)</span><br></pre></td></tr></table></figure>







<h2 id="线程对象属性及其他方法"><a href="#线程对象属性及其他方法" class="headerlink" title="线程对象属性及其他方法"></a>线程对象属性及其他方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Thread实例对象的方法：</span><br><span class="line"></span><br><span class="line">isAlive()：返回线程是否活动的。</span><br><span class="line">getName()：返回线程名。</span><br><span class="line">setName()：设置线程名。</span><br><span class="line">threading模块提供的一些方法：</span><br><span class="line"></span><br><span class="line">threading.currentThread()：返回当前的线程变量。</span><br><span class="line">threading.enumerate()：返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</span><br><span class="line">threading.activeCount()：返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(threading.current_thread().getName())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 在主进程下开启线程</span></span><br><span class="line">    t=Thread(target=work)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    print(threading.current_thread().getName())</span><br><span class="line">    print(threading.current_thread()) <span class="comment"># 主线程</span></span><br><span class="line">    print(threading.enumerate()) <span class="comment"># 连同主线程在内有两个运行的线程</span></span><br><span class="line">    print(threading.active_count())</span><br><span class="line">    print(<span class="string">&#x27;主线程/主进程&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    打印结果:</span></span><br><span class="line"><span class="string">    MainThread</span></span><br><span class="line"><span class="string">    &lt;_MainThread(MainThread, started 140735268892672)&gt;</span></span><br><span class="line"><span class="string">    [&lt;_MainThread(MainThread, started 140735268892672)&gt;, &lt;Thread(Thread-1, started 123145307557888)&gt;]</span></span><br><span class="line"><span class="string">    主线程/主进程</span></span><br><span class="line"><span class="string">    Thread-1</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s is runing&#x27;</span> % name)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s is over&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Thread(target=task, args=(<span class="string">&#x27;egon&#x27;</span>, ))</span><br><span class="line">    t.daemon = <span class="literal">True</span></span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">&#x27;主&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">主线程运行结束后不会立刻结束，会等待所有其他非守护线程结束才会结束</span></span><br><span class="line"><span class="string">    因为主线程的结束意味着所在的进程结束</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 迷惑例子</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;end123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="number">456</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;end456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   t1 = Thread(target=foo)</span><br><span class="line">   t2 = Thread(target=func)</span><br><span class="line">   t1.daemon = <span class="literal">True</span></span><br><span class="line">   t1.start()</span><br><span class="line">   t2.start()</span><br><span class="line">   print(<span class="string">&#x27;主.........&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="线程互斥锁"><a href="#线程互斥锁" class="headerlink" title="线程互斥锁"></a>线程互斥锁</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line">mutex = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    mutex.acquire()</span><br><span class="line">    tmp = money</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    money = tmp - <span class="number">1</span></span><br><span class="line">    mutex.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = Thread(target=task)</span><br><span class="line">        t.start()</span><br><span class="line">        t_list.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> t_list:</span><br><span class="line">        t.join()</span><br><span class="line">    print(money)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-04</title>
    <url>/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-04/</url>
    <content><![CDATA[<p>GIL全局解释器锁</p>
<a id="more"></a>



<h2 id="GIL全局解释器锁"><a href="#GIL全局解释器锁" class="headerlink" title="GIL全局解释器锁"></a>GIL全局解释器锁</h2><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">重点：</span><br><span class="line">     <span class="number">1.</span> GIL不是Python的特点而是CPython解释器的特点</span><br><span class="line">     <span class="number">2.</span> GIL是保证解释器级别的数据的安全</span><br><span class="line">     <span class="number">3.</span> GIL会导致同一个进程下的多个线程无法同时执行, 即无法利用多核优势</span><br><span class="line">     <span class="number">4.</span> 针对不同的数据还是需要加不同的锁处理</span><br><span class="line">     <span class="number">5.</span> 解释型语言的通病: 遇到一行执行一行，不能编译后整体分析。同一个进程下多个线程无法利用多核优势。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 只针对于python解释器（其他解释器，包括其他语言不这样）</span></span><br><span class="line"><span class="number">2.</span> 如果是计算密集型 ： 开多进程处理</span><br><span class="line"><span class="number">3.</span> 如果是IO密集型：开多线程处理</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="GIL与普通互斥锁-同步锁-的区别"><a href="#GIL与普通互斥锁-同步锁-的区别" class="headerlink" title="GIL与普通互斥锁(同步锁)的区别"></a>GIL与普通互斥锁(同步锁)的区别</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">mutex = Lock()</span><br><span class="line"></span><br><span class="line">money = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    mutex.acquire()</span><br><span class="line">    tmp = money</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)   <span class="comment"># 0.1s 时间内 所有线程都抢到了GIL 锁，手上都有money 了,所以就是99; 遇到IO操作，就会切线程。</span></span><br><span class="line">    <span class="comment"># 只能自己加锁，100个线程要先去抢GIL,抢到了之后再去抢自己的锁；这个时候sleep 进入IO，GIL自动释放，自己的锁没释放，手上海有一把自己的锁。</span></span><br><span class="line">    <span class="comment"># 其他线程虽然抢到了GIL，但是抢不到互斥锁</span></span><br><span class="line">    money = tmp - <span class="number">1</span></span><br><span class="line">    mutex.release()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = Thread(target=task)</span><br><span class="line">        t.start()</span><br><span class="line">        t_list.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> t_list:</span><br><span class="line">        t.join()</span><br><span class="line">    print(money)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">互斥锁和join的区别</span></span><br><span class="line"><span class="string">如果使用互斥锁，只锁临界区，其他地方还是并发的</span></span><br><span class="line"><span class="string">如果使用join，全部变成了串行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a>一 介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">定义：</span></span><br><span class="line"><span class="string">In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple </span></span><br><span class="line"><span class="string">native threads from executing Python bytecodes at once. This lock is necessary mainly </span></span><br><span class="line"><span class="string">because CPython’s memory management is not thread-safe. (However, since the GIL </span></span><br><span class="line"><span class="string">exists, other features have grown to depend on the guarantees that it enforces.)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">结论：在Cpython解释器中，同一个进程下开启的多线程，同一时刻只能有一个线程执行，无法利用多核优势</span><br></pre></td></tr></table></figure>

<p>首先需要明确的一点是<code>GIL</code>并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。有名的编译器例如GCC，INTEL C++，Visual C++等。Python也一样，同样一段代码可以通过CPython，PyPy，Psyco等不同的Python执行环境来执行。像其中的JPython就没有GIL。然而因为CPython是大部分环境下默认的Python执行环境。所以在很多人的概念里CPython就是Python，也就想当然的把<code>GIL</code>归结为Python语言的缺陷。所以这里要先明确一点：GIL并不是Python的特性，Python完全可以不依赖于GIL</p>
<h3 id="二-GIL介绍"><a href="#二-GIL介绍" class="headerlink" title="二 GIL介绍"></a>二 GIL介绍</h3><p>GIL本质就是一把互斥锁，既然是互斥锁，所有互斥锁的本质都一样，都是将并发运行变成串行，以此来控制同一时间内共享数据只能被一个任务所修改，进而保证数据安全。</p>
<p>可以肯定的一点是：保护不同的数据的安全，就应该加不同的锁。</p>
<p>要想了解GIL，首先确定一点：每次执行python程序，都会产生一个独立的进程。例如python test.py，python aaa.py，python bbb.py会产生3个不同的python进程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">u&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#验证python test.py只会产生一个进程</span></span><br><span class="line"><span class="string">#test.py内容</span></span><br><span class="line"><span class="string">import os,time</span></span><br><span class="line"><span class="string">print(os.getpid())</span></span><br><span class="line"><span class="string">time.sleep(1000)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">python3 test.py </span><br><span class="line"><span class="comment">#在windows下</span></span><br><span class="line">tasklist |findstr python</span><br><span class="line"><span class="comment">#在linux下</span></span><br><span class="line">ps aux |grep python</span><br></pre></td></tr></table></figure>



<p>在一个python的进程内，不仅有test.py的主线程或者由该主线程开启的其他线程，还有解释器开启的垃圾回收等解释器级别的线程，总之，所有线程都运行在这一个进程内，毫无疑问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1 所有数据都是共享的，这其中，代码作为一种数据也是被所有线程共享的（test.py的所有代码以及Cpython解释器的所有代码）</span><br><span class="line">例如：test.py定义一个函数work（代码内容如下图），在进程内所有线程都能访问到work的代码，于是我们可以开启三个线程然后target都指向该代码，能访问到意味着就是可以执行。</span><br><span class="line"></span><br><span class="line">#2 所有线程的任务，都需要将任务的代码当做参数传给解释器的代码去执行，即所有的线程要想运行自己的任务，首先需要解决的是能够访问到解释器的代码。</span><br></pre></td></tr></table></figure>



<p>综上：</p>
<p>如果多个线程的target=work，那么执行流程是</p>
<p>多个线程先访问到解释器的代码，即拿到执行权限，然后将target的代码交给解释器的代码去执行</p>
<p>解释器的代码是所有线程共享的，所以垃圾回收线程也可能访问到解释器的代码而去执行，这就导致了一个问题:对于同一个数据100，可能线程1执行x=100的同时，而垃圾回收执行的是回收100的操作，解决这种问题没有什么高明的方法，就是加锁处理，如下图的GIL，保证python解释器同一时间只能执行一个任务的代码</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/1825659-20191021220724804-1109544761..png" alt="777777"></p>
<h3 id="三-GIL与Lock"><a href="#三-GIL与Lock" class="headerlink" title="三 GIL与Lock"></a>三 GIL与Lock</h3><p><strong>GIL保护的是解释器级的数据，保护用户自己的数据则需要自己加锁处理，如下图</strong></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/1825659-20191021220726026-2037111188..png" alt="87878"></p>
<h3 id="四-GIL与多线程"><a href="#四-GIL与多线程" class="headerlink" title="四 GIL与多线程"></a>四 GIL与多线程</h3><p>有了GIL的存在，同一时刻同一进程中只有一个线程被执行</p>
<p>听到这里，有的同学立马质问：进程可以利用多核，但是开销大，而python的多线程开销小，但却无法利用多核优势，也就是说python没用了，php才是最牛逼的语言？</p>
<p>别着急啊，老娘还没讲完呢。</p>
<p>要解决这个问题，我们需要在几个点上达成一致：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. cpu到底是用来做计算的，还是用来做I&#x2F;O的？</span><br><span class="line">#2. 多cpu，意味着可以有多个核并行完成计算，所以多核提升的是计算性能</span><br><span class="line">#3. 每个cpu一旦遇到I&#x2F;O阻塞，仍然需要等待，所以多核对I&#x2F;O操作没什么用处 </span><br></pre></td></tr></table></figure>



<p>一个工人相当于cpu，此时计算相当于工人在干活，I/O阻塞相当于为工人干活提供所需原材料的过程，工人干活的过程中如果没有原材料了，则工人干活的过程需要停止，直到等待原材料的到来。</p>
<p>如果你的工厂干的大多数任务都要有准备原材料的过程（I/O密集型），那么你有再多的工人，意义也不大，还不如一个人，在等材料的过程中让工人去干别的活，</p>
<p>反过来讲，如果你的工厂原材料都齐全，那当然是工人越多，效率越高</p>
<p><strong>结论：</strong></p>
<p>　　对计算来说，cpu越多越好，但是对于I/O来说，再多的cpu也没用</p>
<p>　　当然对运行一个程序来说，随着cpu的增多执行效率肯定会有所提高（不管提高幅度多大，总会有所提高），这是因为一个程序基本上不会是纯计算或者纯I/O，所以我们只能相对的去看一个程序到底是计算密集型还是I/O密集型，从而进一步分析python的多线程到底有无用武之地</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分析：</span></span><br><span class="line">我们有四个任务需要处理，处理方式肯定是要玩出并发的效果，解决方案可以是：</span><br><span class="line">方案一：开启四个进程</span><br><span class="line">方案二：一个进程下，开启四个线程</span><br><span class="line"></span><br><span class="line"><span class="comment">#单核情况下，分析结果: </span></span><br><span class="line">　　如果四个任务是计算密集型，没有多核来并行计算，方案一徒增了创建进程的开销，方案二胜</span><br><span class="line">　　如果四个任务是I/O密集型，方案一创建进程的开销大，且进程的切换速度远不如线程，方案二胜</span><br><span class="line"></span><br><span class="line"><span class="comment">#多核情况下，分析结果：</span></span><br><span class="line">　　如果四个任务是计算密集型，多核意味着并行计算，在python中一个进程中同一时刻只有一个线程执行用不上多核，方案一胜</span><br><span class="line">　　如果四个任务是I/O密集型，再多的核也解决不了I/O问题，方案二胜</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">#结论：现在的计算机基本上都是多核，python对于计算密集型的任务开多线程的效率并不能带来多大性能上的提升，甚至不如串行(没有大量切换)，但是，对于IO密集型的任务效率还是有显著提升的。</span></span><br></pre></td></tr></table></figure>



<h3 id="五-多线程性能测试"><a href="#五-多线程性能测试" class="headerlink" title="五 多线程性能测试"></a>五 多线程性能测试</h3><p><strong>计算密集型:多进程效率高</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    res=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000000</span>):</span><br><span class="line">        res*=i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l=[]</span><br><span class="line">    print(os.cpu_count()) <span class="comment">#本机为4核</span></span><br><span class="line">    start=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        p=Process(target=work) <span class="comment">#耗时5s多</span></span><br><span class="line">        p=Thread(target=work) <span class="comment">#耗时18s多</span></span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line">    stop=time.time()</span><br><span class="line">    print(<span class="string">&#x27;run time is %s&#x27;</span> %(stop-start))</span><br></pre></td></tr></table></figure>



<p><strong>I/O密集型:多线程效率高</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;===&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l=[]</span><br><span class="line">    print(os.cpu_count()) <span class="comment">#本机为4核</span></span><br><span class="line">    start=time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">400</span>):</span><br><span class="line">        <span class="comment"># p=Process(target=work) #耗时12s多,大部分时间耗费在创建进程上</span></span><br><span class="line">        p=Thread(target=work) <span class="comment">#耗时2s多</span></span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line">    stop=time.time()</span><br><span class="line">    print(<span class="string">&#x27;run time is %s&#x27;</span> %(stop-start))</span><br></pre></td></tr></table></figure>

<p>应用：</p>
<p>多线程用于IO密集型，如socket，爬虫，web<br>多进程用于计算密集型，如金融分析</p>
<h2 id="多进程与多线程的实际应用场景"><a href="#多进程与多线程的实际应用场景" class="headerlink" title="多进程与多线程的实际应用场景"></a>多进程与多线程的实际应用场景</h2>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-05</title>
    <url>/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-05/</url>
    <content><![CDATA[<p>多进程与多线程比较</p>
<a id="more"></a>



<h4 id="python同一个进程下多线程无法利用多核心优势，是不是没有用了"><a href="#python同一个进程下多线程无法利用多核心优势，是不是没有用了" class="headerlink" title="python同一个进程下多线程无法利用多核心优势，是不是没有用了"></a>python同一个进程下多线程无法利用多核心优势，是不是没有用了</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">多线程是否有用要看具体情况</span><br><span class="line">单核：<span class="number">4</span>个任务（IO密集型/计算密集型）</span><br><span class="line">多核：<span class="number">4</span>个任务（IO密集型/计算密集型）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算密集型  每个任务执行时间都需要10s</span></span><br><span class="line">单核(不用考虑了):</span><br><span class="line">  多进程: 额外的消耗资源</span><br><span class="line">  多线程: 节省开销</span><br><span class="line"></span><br><span class="line">多核:</span><br><span class="line">  多进程: 总耗时 <span class="number">10</span>+</span><br><span class="line">  多线程: 总耗时 <span class="number">40</span>+</span><br><span class="line"></span><br><span class="line"><span class="comment"># IO密集型</span></span><br><span class="line">多核:</span><br><span class="line">  多进程: 相对来说更消耗资源</span><br><span class="line">  多线程: 多线程更节省资源</span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">######计算密集型</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100000000</span>):</span><br><span class="line">        res *= i</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l = []</span><br><span class="line">    cpu_count = os.cpu_count()</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(cpu_count):</span><br><span class="line">        <span class="comment"># p = Process(target=work)   # 8.5 s</span></span><br><span class="line">        t = Thread(target=work)      <span class="comment"># 41.5s</span></span><br><span class="line">        t.start()</span><br><span class="line">        <span class="comment"># p.start()</span></span><br><span class="line">        <span class="comment"># l.append(p)</span></span><br><span class="line">        l.append(t)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line">    print(time.time() - start_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#######IO密集型</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> os,time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l = []</span><br><span class="line">    cpu_count = os.cpu_count()</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4000</span>):</span><br><span class="line">        <span class="comment"># p = Process(target=work)     # 20.5s</span></span><br><span class="line">        t = Thread(target=work)      <span class="comment"># 3s</span></span><br><span class="line">        t.start()</span><br><span class="line">        <span class="comment"># p.start()</span></span><br><span class="line">        <span class="comment"># l.append(p)</span></span><br><span class="line">        l.append(t)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br><span class="line">    print(time.time() - start_time)</span><br></pre></td></tr></table></figure>





<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多进程和多线程都有各自的优势</span></span><br><span class="line"><span class="string">并且后面写项目的时候通常可以</span></span><br><span class="line"><span class="string">    多进程下面再开设多线程</span></span><br><span class="line"><span class="string">这样的话可以利用多线程也可以减少资源消耗</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-06</title>
    <url>/2021/04/21/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-06/</url>
    <content><![CDATA[<p>进程池与线程池/ 协程 / gevent模块 / 协程实现TCP服务端的并发效果</p>
<a id="more"></a>

<h2 id="死锁与递归锁"><a href="#死锁与递归锁" class="headerlink" title="死锁与递归锁"></a>死锁与递归锁</h2><p>所谓死锁：是指两个或两个以上的进程或线程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p>
<p>当你知道锁的使用抢锁必须要释放锁，其实你再操作锁的时候也极其容易产生死锁现象(整个程序卡死)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">mutexA = Lock()</span><br><span class="line">mutexB = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类只要加括号实例化多次  产生肯定是不同的对象</span></span><br><span class="line"><span class="comment"># 如果想要实现多次加()得到的是相同的对象   单例模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.func1()</span><br><span class="line">        self.func2()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">self</span>):</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(<span class="string">&#x27;%s 抢到A锁&#x27;</span> % self.name)  <span class="comment"># 获取当前线程名</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(<span class="string">&#x27;%s 抢到B锁&#x27;</span> % self.name)  <span class="comment"># 获取当前线程名</span></span><br><span class="line">        mutexB.release()</span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">self</span>):</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(<span class="string">&#x27;%s 抢到B锁&#x27;</span> % self.name)  <span class="comment"># 获取当前线程名</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(<span class="string">&#x27;%s 抢到A锁&#x27;</span> % self.name)  <span class="comment"># 获取当前线程名</span></span><br><span class="line">        mutexA.release()</span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Thread-1 抢到A锁,其他9个线程只能等，Thread-1 打印操作;  Thread-1 抢B锁,还是没有竞争者， 打印; 然后 Thread-1 释放B锁, 还是没人抢,其余还开在A锁</span></span><br><span class="line"><span class="comment">## Thread-1 释放A锁, 其余9个线程还在抢A锁;Thread-1执行func2,紧接着抢B锁, 打印。其余9个线程中Thread-2抢到了A锁,准备抢B锁;</span></span><br><span class="line"><span class="comment">#  Thread-1睡两秒,准备抢A锁,未释放A锁和B锁,但是Thread-2没释放A锁； 此时造成死锁</span></span><br></pre></td></tr></table></figure>



<h2 id="递归锁（解决死锁）"><a href="#递归锁（解决死锁）" class="headerlink" title="递归锁（解决死锁）"></a>递归锁（解决死锁）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">递归锁的特点</span></span><br><span class="line"><span class="string">    可以被连续的acquire和release</span></span><br><span class="line"><span class="string">    但是只能被第一个人抢到这把锁执行上述操作</span></span><br><span class="line"><span class="string">    它的内部有一个计数器，每acquire一次计数加一 每release一次计数+1</span></span><br><span class="line"><span class="string">    只要计数不为0，那么其他人 都无法抢到这把锁</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上述的代码</span></span><br><span class="line">mutexA = Lock()</span><br><span class="line">mutexB = Lock()</span><br><span class="line"><span class="comment"># 换成</span></span><br><span class="line">mutexA = mutexB = RLock()</span><br></pre></td></tr></table></figure>





<h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>信号量在不同的阶段可能对应不同的技术点<br>在并发变成中信号量指的是锁，同一时间可以有几个线程共同执行。同时允许多个线程同时进入临界区操作。</p>
<p>应用场景：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">如果把互斥锁比喻成一个厕所的话，</span></span><br><span class="line"><span class="string">那么信号量就相当于多个厕所</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Semaphore</span><br><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">利用random模块打印随机验证码(搜狗的一道笔试题)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">sm = Semaphore(<span class="number">5</span>)  <span class="comment"># 括号有几次，显示有几个坑位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">name</span>):</span></span><br><span class="line">    sm.acquire()</span><br><span class="line">    print(<span class="string">&#x27;%s 正在蹲坑&#x27;</span> % name)</span><br><span class="line">    <span class="comment"># time.sleep(3)</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">    sm.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        t = Thread(target=task, args=(<span class="string">&#x27;伞兵%s号&#x27;</span> % i,))</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>



<p>​                           </p>
<h2 id="Event事件"><a href="#Event事件" class="headerlink" title="Event事件"></a>Event事件</h2><p>一些线程或者进程需要等待另外一些进程/线程运行完毕后才能运行，类似于发射信号一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Event</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">event = Event()  <span class="comment"># 造了一个红绿灯</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">light</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;红灯亮着的&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;绿灯亮了&#x27;</span>)</span><br><span class="line">    <span class="comment"># 告诉等待红灯的人你可以走了</span></span><br><span class="line">    event.set()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">car</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s 车正在等红灯&#x27;</span> % name)</span><br><span class="line">    event.wait()  <span class="comment"># 等待别人给你发信号</span></span><br><span class="line">    print(<span class="string">&#x27;%s 车加油开走了&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Thread(target=light)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        t = Thread(target=car, args=(<span class="string">&#x27;%s&#x27;</span>%i, ))</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>



<h2 id="线程q-了解"><a href="#线程q-了解" class="headerlink" title="线程q(了解)"></a>线程q(了解)</h2><p>同一个进程下多个线程数据是共享的</p>
<p>为什么同一个进程下还会去使用队列呢</p>
<p>因为队列是 <strong>管道+锁</strong></p>
<p>所以用队列还是为了保证数据安全的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 队列q  先进先出</span></span><br><span class="line"></span><br><span class="line">q = queue.Queue(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.get()</span><br><span class="line">q.get_nowait()</span><br><span class="line">q.get(timeout=<span class="number">3</span>)</span><br><span class="line">q.full()</span><br><span class="line">q.empty()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.后进先出q</span></span><br><span class="line">q = queue.LifoQueue(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">1</span>)</span><br><span class="line">q.put(<span class="number">2</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">print(q.get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优先级q  你可以给放入队列中的设置进出的优先级</span></span><br><span class="line">q = queue.PriorityQueue(<span class="number">4</span>)</span><br><span class="line">q.put((<span class="number">10</span>, <span class="string">&#x27;111&#x27;</span>))</span><br><span class="line">q.put((<span class="number">100</span>, <span class="string">&#x27;222&#x27;</span>))</span><br><span class="line">q.put((<span class="number">0</span>, <span class="string">&#x27;333&#x27;</span>))</span><br><span class="line">q.put((<span class="number">-5</span>, <span class="string">&#x27;444&#x27;</span>))</span><br><span class="line"></span><br><span class="line">print(q.get()) <span class="comment"># (-5, &#x27;444&#x27;)</span></span><br><span class="line"><span class="comment"># put 括号内放一个元祖 第一个放数字表示优先级</span></span><br><span class="line"><span class="comment"># 需要注意的是 数字越小，优先级越高</span></span><br></pre></td></tr></table></figure>





<h2 id="进程池与线程池（需要掌握）"><a href="#进程池与线程池（需要掌握）" class="headerlink" title="进程池与线程池（需要掌握）"></a>进程池与线程池（需要掌握）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">无论是开设进程也好还是开设线程也好  是不是都需要消耗资源</span></span><br><span class="line"><span class="string">只不过开设线程的比开设进程的消耗小一点而已</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们是不可能做到无限制的开设进程和线程的，因为计算机硬件资源跟不上！！</span></span><br><span class="line"><span class="string">硬件的开发速度跟不上软件！！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">宗旨应该是在保证计算机硬件能够正常工作的情况下最大限度的利用它</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">池的概念</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">什么是池</span></span><br><span class="line"><span class="string">    池是用来保证计算机硬件安全的情况下最大限度的利用计算机</span></span><br><span class="line"><span class="string">    它降低了程序的运行效率但是保证了计算机硬件的安全 从而让你写的程序能够正常运行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># pool = ThreadPoolExecutor(5)  # 池子里固定只有5个线程</span></span><br><span class="line"><span class="comment"># 括号内可以传数字 不传的话默认会开设当前计算机cpu个数5倍的线程</span></span><br><span class="line">pool = ProcessPoolExecutor(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 括号内可以传数字 不传的话默认会开设当前计算机cpu个数的进程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">池子造出来之后会固定存在5个线程，这5个线程不会出现重复创建和销毁的过程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">池子造出来之后会固定存在5个进程，这5个进程不会出现重复创建和销毁的过程</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">池子的使用非常简单</span></span><br><span class="line"><span class="string">你只需要将需要的任务往池子中提交即可，自动会有人来服务你</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(n, os.getpid())</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> n ** n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">任务的提交方式</span></span><br><span class="line"><span class="string">    同步: 提交任务之后原地等待任务的返回结果  期间不做任何事</span></span><br><span class="line"><span class="string">    异步: 提交任务之后不等待任务的返回结果   执行继续往下执行</span></span><br><span class="line"><span class="string">    返回结果如何获取？？？</span></span><br><span class="line"><span class="string">    异步提交任务的返回结果 应该通过回调机制来获取</span></span><br><span class="line"><span class="string">    回调机制</span></span><br><span class="line"><span class="string">        就相当于给每个异步任务绑定了一个定时炸弹</span></span><br><span class="line"><span class="string">        一旦该任务有结果就立刻爆炸</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_back</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;call_back&gt;&gt;&gt;:&#x27;</span>, n.result())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># pool.submit(task, 1)  # 朝池子中提交任务   异步提交</span></span><br><span class="line">    <span class="comment"># print(&#x27;主....&#x27;)</span></span><br><span class="line"></span><br><span class="line">    t_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):  <span class="comment"># 朝池子中提交20个任务</span></span><br><span class="line">        <span class="comment"># res = pool.submit(task, i)  # &lt;Future at 0x7f9d19e9f470 state=pending&gt;</span></span><br><span class="line">        res = pool.submit(task, i).add_done_callback(call_back)</span><br><span class="line">        <span class="comment"># print(res.result())  # 对象中有一个方法，result，程序回调的结果 -------&gt;  同步提交</span></span><br><span class="line">        <span class="comment"># t_list.append(res)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待线程池中所有的任务执行完毕之后再继续往下执行</span></span><br><span class="line">    <span class="comment"># pool.shutdown()  # 关闭线程池，等待线程池中所有的任务执行完毕</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># for t in t_list:</span></span><br><span class="line">    <span class="comment">#     print(&#x27;&gt;&gt;&gt;&gt;:&#x27;, t.result())  # 有序的</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">    <span class="comment"># pool.map(task, range(10))</span></span><br><span class="line">    <span class="comment"># pool.shutdown()</span></span><br><span class="line">    <span class="comment"># print(&#x27;主进程&#x27;)</span></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="comment"># 等价于</span></span><br><span class="line">    <span class="comment"># for i in range(10):  # 朝池子中提交20个任务</span></span><br><span class="line">    <span class="comment">#    res = pool.submit(task, i)  </span></span><br><span class="line">    <span class="comment"># pool.shutdown()</span></span><br><span class="line">    <span class="comment"># print(&#x27;主进程&#x27;)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">程序由并发变成了串行</span></span><br><span class="line"><span class="string">任务的结果 就是函数的返回结果</span></span><br><span class="line"><span class="string">res.result() 拿到的就是异步提交的任务返回结果</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line">pool = ProcessPoolExecutor(<span class="number">5</span>)</span><br><span class="line">res = pool.submit(task, i).add_done_callback(call_back) <span class="comment"># add_done_callback 给 前面任务添加一个回调机制</span></span><br><span class="line"></span><br><span class="line">对象中有一个方法，result，程序回调的结果 -------&gt;  同步提交</span><br><span class="line"><span class="comment"># add_done_callback 给 前面任务添加一个回调机制</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_back</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;call_back&gt;&gt;&gt;:&#x27;</span>, n.result())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">进程: 资源单位</span></span><br><span class="line"><span class="string">线程: 执行单位</span></span><br><span class="line"><span class="string">协程: 概念是yy的，根本不存在</span></span><br><span class="line"><span class="string">        单线程下实现并发</span></span><br><span class="line"><span class="string">多道技术:</span></span><br><span class="line"><span class="string">      切换+保存状态</span></span><br><span class="line"><span class="string">      cpu什么时候切换，两种场景</span></span><br><span class="line"><span class="string">      1. 程序遇到IO</span></span><br><span class="line"><span class="string">      2. 程序长时间占用</span></span><br><span class="line"><span class="string">accept</span></span><br><span class="line"><span class="string">recv</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">想通过代码层面自己检测IO行为，一旦遇到IO代码层面实现切换</span></span><br><span class="line"><span class="string">这样给操作系统的感觉好像我这个程序一直运行 没有IO</span></span><br><span class="line"><span class="string">欺骗操作系统从而最大化的利用CPU</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一味的切换加保存状态也有可能会降低程序的效率(遇到IO切换提升效率,没有IO切降低效率)</span></span><br><span class="line"><span class="string">计算密集型的   不行</span></span><br><span class="line"><span class="string">IO密集型的    可以</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="验证切换是否一定提升效率"><a href="#验证切换是否一定提升效率" class="headerlink" title="验证切换是否一定提升效率"></a>验证切换是否一定提升效率</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># def func1():</span></span><br><span class="line"><span class="comment">#     for i in range(1000000):</span></span><br><span class="line"><span class="comment">#         i + 1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def func2():</span></span><br><span class="line"><span class="comment">#     for i in range(1000000):</span></span><br><span class="line"><span class="comment">#         i + 1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># start_time = time.time()</span></span><br><span class="line"><span class="comment"># func1()</span></span><br><span class="line"><span class="comment"># func2()</span></span><br><span class="line"><span class="comment"># end_time = time.time()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(end_time - start_time)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换+yield </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="number">1000000</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    g = func1()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000</span>):</span><br><span class="line">        i + <span class="number">1</span></span><br><span class="line">        next(g)</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">func2()</span><br><span class="line">end_time = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(end_time - start_time)</span><br></pre></td></tr></table></figure>





<h3 id="gevent模块"><a href="#gevent模块" class="headerlink" title="gevent模块"></a>gevent模块</h3><p>Gevent 是一个第三方库，可以轻松通过gevent实现并发同步或异步编程，在gevent中用到的主要模式是<strong>Greenlet</strong>, 它是以C扩展模块形式接入Python的轻量级协程。 Greenlet全部运行在主程序操作系统进程的内部，但它们被协作式地调度。</p>
<p><strong>该模块能够检测IO 实现自动切换</strong></p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><strong>spawn</strong> 在检测的时候 是异步提交的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用法</span></span><br><span class="line">g1=gevent.spawn(func,<span class="number">1</span>,,<span class="number">2</span>,<span class="number">3</span>,x=<span class="number">4</span>,y=<span class="number">5</span>)创建一个协程对象g1，spawn括号内第一个参数是函数名，如eat，后面可以有多个参数，可以是位置实参或关键字实参，都是传给函数eat的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g2=gevent.spawn(func2)</span><br><span class="line"></span><br><span class="line">g1.join() <span class="comment">#等待g1结束</span></span><br><span class="line"></span><br><span class="line">g2.join() <span class="comment">#等待g2结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者上述两步合作一步：gevent.joinall([g1,g2])</span></span><br><span class="line"></span><br><span class="line">g1.value<span class="comment">#拿到func1的返回值</span></span><br></pre></td></tr></table></figure>



<h3 id="示例1-遇到io自动切-这个不会自动切-并且变成了串行-需要打猴子补丁"><a href="#示例1-遇到io自动切-这个不会自动切-并且变成了串行-需要打猴子补丁" class="headerlink" title="示例1(遇到io自动切)这个不会自动切,并且变成了串行,需要打猴子补丁"></a>示例1(遇到io自动切)这个不会自动切,并且变成了串行,需要打猴子补丁</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s eat 1&#x27;</span> %name)</span><br><span class="line">    gevent.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s eat 2&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;%s play 1&#x27;</span> %name)</span><br><span class="line">    gevent.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;%s play 2&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g1=gevent.spawn(eat,<span class="string">&#x27;lqz&#x27;</span>)</span><br><span class="line">g2=gevent.spawn(play,name=<span class="string">&#x27;lqz&#x27;</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line"><span class="comment">#或者gevent.joinall([g1,g2])</span></span><br><span class="line">print(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="示例二（打补丁）"><a href="#示例二（打补丁）" class="headerlink" title="示例二（打补丁）"></a>示例二（打补丁）</h3><blockquote>
<p>为什么原来time.sleep 它不会自动切</p>
<p>解答：现在想做的是线程内切换，如果用原来time.sleep进入的IO操作 ，它的问题是：GIL锁立马就释放了。只要遇到IO，GIL锁立马释放，线程不被CPU执行，就立马扔出去了。 里面再怎么切都没用了。gevent的io不释放GIL锁，切来窃去还在这个CPU上，所以要把IO换成不释放GIL锁的IO操作。所以需要把原来的IO操作 都重写一遍。</p>
</blockquote>
<p><strong>一旦开始用了异步，后面全部都用异步。异步框架，你操作MySQL的时候，也需要CPU异步框架，否则把CPU执行权限让出来的时候，线程都不执行了，协程里面再切也没有用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">上例gevent.sleep(2)模拟的是gevent可以识别的io阻塞,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">而time.sleep(2)或其他的阻塞,gevent是不能直接识别的需要用下面一行代码,打补丁,就可以识别了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">time.sleep 换成了 gevent.sleep</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">from gevent import monkey;monkey.patch_all()必须放到被打补丁者的前面，如time，socket模块之前</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">或者我们干脆记忆成：要用gevent，需要将from gevent import monkey;monkey.patch_all()放到文件的开头</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey;monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;eat food 1&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;eat food 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;play 1&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;play 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">g1=gevent.spawn(eat)</span><br><span class="line">g2=gevent.spawn(play)</span><br><span class="line">gevent.joinall([g1,g2]) <span class="comment"># 分别join也可以，等待监测的任务执行完毕，再往后继续执行</span></span><br><span class="line">print(<span class="string">&#x27;主&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们可以用threading.current_thread().getName()来查看每个g1和g2，查看的结果为DummyThread-n，即假线程</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="协程实现TCP服务端-单线程的并发效果"><a href="#协程实现TCP服务端-单线程的并发效果" class="headerlink" title="协程实现TCP服务端 单线程的并发效果"></a>协程实现TCP服务端 单线程的并发效果</h2><p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey, spawn;monkey.patch_all()</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">communication</span>(<span class="params">conn</span>):</span></span><br><span class="line">    <span class="comment"># 通信循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(data) == <span class="number">0</span>:<span class="keyword">break</span></span><br><span class="line">            print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            conn.send(data.upper())</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span>(<span class="params">ip, port</span>):</span></span><br><span class="line">    server = socket.socket()</span><br><span class="line">    server.bind((ip, port))</span><br><span class="line">    server.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 链接循环</span></span><br><span class="line">        conn, addr = server.accept()</span><br><span class="line">        <span class="comment"># 开启多进程或者多线程处理客户端连接</span></span><br><span class="line">        spawn(communication, conn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    g1 = spawn(server, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>)</span><br><span class="line">    g1.join()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> current_thread, Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x_client</span>():</span></span><br><span class="line">    client = socket.socket()</span><br><span class="line">    client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg = <span class="string">&#x27;%s say hello %s&#x27;</span>%(current_thread().name, n)</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        client.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        data = client.recv(<span class="number">1024</span>)</span><br><span class="line">        print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">        t = Thread(target=x_client)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure>



<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">理想状态: 异步框架已经实现</span></span><br><span class="line"><span class="string">可以通过多进程下面开启多线程，多线程下面再开设协程</span></span><br><span class="line"><span class="string">从而使我们的程序利用率执行效率提升。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>进程池 线程池 掌握3句代码 </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line">pool = ProcessPoolExecutor(<span class="number">5</span>)</span><br><span class="line">res = pool.submit(task, i).add_done_callback(call_back) <span class="comment"># add_done_callback 给 前面任务添加一个回调机制</span></span><br><span class="line"></span><br><span class="line">对象中有一个方法，result，程序回调的结果 -------&gt;  同步提交</span><br><span class="line"><span class="comment"># add_done_callback 给 前面任务添加一个回调机制</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_back</span>(<span class="params">n</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;call_back&gt;&gt;&gt;:&#x27;</span>, n.result())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程-IO模型</title>
    <url>/2021/04/22/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-IO%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>IO模型</p>
<a id="more"></a>



<h2 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h2><h3 id="IO模型简介"><a href="#IO模型简介" class="headerlink" title="IO模型简介"></a>IO模型简介</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">讨论是Linux环境下的network IO。</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Stevens在文章中一共比较了五种IO Model：</span></span><br><span class="line"><span class="string">    * blocking IO 阻塞IO</span></span><br><span class="line"><span class="string">    * nonblocking IO 非阻塞IO</span></span><br><span class="line"><span class="string">    * IO multiplexing 异步IO模型</span></span><br><span class="line"><span class="string">    * signal driven IO</span></span><br><span class="line"><span class="string">    * asynchronous IO</span></span><br><span class="line"><span class="string">    由signal driven IO（信号驱动IO）在实际中并不常用，所以主要介绍其余四种IO Model。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>    </span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210421235438169.png" alt="image-20210421235438169"></p>
<blockquote>
<p>1）等待数据准备 (Waiting for the data to be ready) </p>
</blockquote>
<blockquote>
<p>2）将数据从内核拷贝到进程中(Copying the data from the kernel to the process)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同步异步</span><br><span class="line">阻塞非阻塞</span><br><span class="line">常见的网络阻塞状态</span><br><span class="line">    accept</span><br><span class="line">    recv</span><br><span class="line">    recvfrom</span><br><span class="line">    </span><br><span class="line">    send操作虽然也有io行为，但是不在考虑范围内</span><br></pre></td></tr></table></figure>

<ul>
<li><p>recv的情况</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210422002452223.png" alt="image-20210422002452223"></p>
</li>
</ul>
<h3 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">之前写的都是阻塞IO模型，协程除外</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 在服务端开启多进程或者多线程 进程池线程池 其实还是没有解决IO问题</span></span><br><span class="line"><span class="string">该等的地方还是得等 没有规避</span></span><br><span class="line"><span class="string">只不过多个人等待的彼此互不干扰</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(data) == <span class="number">0</span>:<span class="keyword">break</span></span><br><span class="line">            print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            conn.send(data.upper())</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># client端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">&#x27;&gt;&gt;&gt;&gt;:&#x27;</span>).strip()</span><br><span class="line">    client.send(cmd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210422003047720.png" alt="image-20210422003047720"></p>
<h3 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a>非阻塞IO</h3><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210422010241146.png" alt="image-20210422010241146"></p>
<p>Ps ：gevent 其实是实现了代码的非阻塞</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该模型会长时间占用cpu并且不干活，让cpu不听的转</span><br><span class="line">实际应用中不会考虑使用非阻塞IO模型</span><br></pre></td></tr></table></figure>



<h3 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h3><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210422024859570.png" alt="image-20210422024859570"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当监管的对象只有一个的时候， 其实IO多路复用连阻塞IO都比不上，</span></span><br><span class="line"><span class="string">但是IO多路复用可以一次监管很多个对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可能IO的对象交给监管机制，监管机制会向操作系统发送请求，监管机制轮流监管是否有对象被触发。有其中一个对象如被触发(比如有一个人发消息或者连接了)，监管机制就会立刻返回一个socket对象或者server对象，然后你拿着这个对象执行accept方法或者recv方法都可以。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">server  = socket.socket()</span></span><br><span class="line"><span class="string">conn = server.accept</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">监管机制是操作系统本身就有的， 如果你想要用的监管机制(select)</span></span><br><span class="line"><span class="string">需要你导入对应的select 模块。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line">server.setblocking(<span class="literal">False</span>)</span><br><span class="line">read_list = [server]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 监管模板发给监管的人</span></span><br><span class="line">    r_list, w_list, x_list = select.select(read_list, [], [])</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    帮你监管</span></span><br><span class="line"><span class="string">    一旦有人来了 立刻给你返回对应的监管对象</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(res) # ([&lt;socket.socket fd=3, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=(&#x27;127.0.0.1&#x27;, 8080)&gt;], [], [])</span></span><br><span class="line">    <span class="comment"># print(server) # [&lt;socket.socket fd=3, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=(&#x27;127.0.0.1&#x27;, 8080)&gt;]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> r_list:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;针对不同对象做不同的处理&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">is</span> server:</span><br><span class="line">            conn ,addr = i.accept()  <span class="comment"># 这个地方就不会堵了，因为前面肯定确定的是有人来了</span></span><br><span class="line">            <span class="comment"># conn 也要添加到监管机制</span></span><br><span class="line">            read_list.append(conn)   <span class="comment"># 这时候 r_List里面既有server 对象，又有conn对象，conn没有accept方法所以报错</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = i.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(res) == <span class="number">0</span>:</span><br><span class="line">                i.close()</span><br><span class="line">                <span class="comment"># 将无效的监管对象 移除</span></span><br><span class="line">                read_list.remove(i)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            print(res)</span><br><span class="line">            i.send(<span class="string">b&#x27;heiheiheiheiheihei&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client.send(<span class="string">b&#x27;hello world&#x27;</span>)</span><br><span class="line">    data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">监管机制其实有很多</span></span><br><span class="line"><span class="string">select机制  windows Linux都有</span></span><br><span class="line"><span class="string">poll机制， 只在linux有  poll 和 select 都可以监管多个对象 但是poll监管的数量更多</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上述select和poll机制其实都不是很完美 </span></span><br><span class="line"><span class="string">当监管的对象特别多的时候可能会出现  极其大的延时响应</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">原因: 有点类似于for 循环，第一个对象有没有人来连接的时候，没有，就遍历后面的；这时候第一个对象有人来连接了，只能等，遍历10000个对象耗时很多。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">epoll机制  只在Linux有</span></span><br><span class="line"><span class="string">  它给每一个监管对象都绑定一个回调机制</span></span><br><span class="line"><span class="string">  一旦有响应，回调机制立刻发起提醒</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">针对不同的操作系统还需要考虑不同监测机制  书写代码太多繁琐</span></span><br><span class="line"><span class="string">有一个人能够根据你run的平台的不同自动帮你选择对应的监管机制</span></span><br><span class="line"><span class="string">selectors模块</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>







<h3 id="异步IO模型"><a href="#异步IO模型" class="headerlink" title="异步IO模型"></a>异步IO模型</h3><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210422094405017.png" alt="image-20210422094405017"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">异步IO模型是所有模型中效率最高的  也是使用最广泛的</span></span><br><span class="line"><span class="string">相关模型和框架</span></span><br><span class="line"><span class="string">    模块: asyncio 模块</span></span><br><span class="line"><span class="string">    异步框架: sanid tronado twisted</span></span><br><span class="line"><span class="string">       速度快!!!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="asyncio模块"><a href="#asyncio模块" class="headerlink" title="asyncio模块"></a>asyncio模块</h4><blockquote>
<p>内置模块，3.4退出。 异步，能在单线程下实现并发。</p>
</blockquote>
<p><strong>目前还是gevent用的多一些</strong></p>
<p>模型特点: 调用1次就不管了，只要有结果来了，立马拿着结果去处理，期间想做什么做什么</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python 3.4</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello world %s&#x27;</span>%threading.current_thread())</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)   <span class="comment"># 换成真正的io操作</span></span><br><span class="line">    print(<span class="string">&#x27;hello world %s&#x27;</span> % threading.current_thread())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [hello(), hello()]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># loop 相当于上下执行的东西</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3.5以上</span></span><br><span class="line"><span class="comment"># 内置模块   python 3.4 推出这个模块，python作者主导的</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="comment"># 这个函数是协程函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task</span>():</span></span><br><span class="line">    res=threading.current_thread().getName()</span><br><span class="line">    print(res)</span><br><span class="line">    print(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;协程执行完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task2</span>():</span></span><br><span class="line">    res=threading.current_thread().getName()</span><br><span class="line">    print(res)</span><br><span class="line">    print(<span class="string">&#x27;2222&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&#x27;222协程执行完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctime=time.time()</span><br><span class="line">loop=asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks=[task(),task2()]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>引用：</p>
<p><a href="http://www.liuqingzheng.top/python/Python%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91/7-Python%E5%BC%82%E6%AD%A5%E5%BA%93%E4%B9%8Basyncio/">http://www.liuqingzheng.top/python/Python%E5%BC%82%E6%AD%A5IO%E5%B9%B6%E5%8F%91/7-Python%E5%BC%82%E6%AD%A5%E5%BA%93%E4%B9%8Basyncio/</a></p>
<h2 id="四个IO模型对比"><a href="#四个IO模型对比" class="headerlink" title="四个IO模型对比"></a>四个IO模型对比</h2><p>脑海中有图</p>
<h2 id="网络并发知识点梳理"><a href="#网络并发知识点梳理" class="headerlink" title="网络并发知识点梳理"></a>网络并发知识点梳理</h2><ul>
<li>软件开发架构</li>
<li>互联网协议<ul>
<li>OSI7层(5层)  每一层都是干嘛的<ul>
<li>以太网协议  广播风暴</li>
<li>io协议</li>
<li>TCP/UDP</li>
<li><strong>三次握手四次挥手</strong></li>
</ul>
</li>
</ul>
</li>
<li>socket简介</li>
<li>TCP粘包问题   定制固定长度的报头</li>
<li>UDP协议</li>
<li>socketserver模块</li>
</ul>
<ul>
<li>操作系统发展史</li>
<li>多道技术</li>
<li>进程理论</li>
<li>开启进程的两种方式</li>
<li>互斥锁</li>
<li>生产者 和消费者模型</li>
<li>线程理论</li>
<li>开启线程的两种方式</li>
<li>GIL全局解释器锁</li>
<li>进程池和线程池</li>
<li>协程的概念</li>
<li>IO模型的了解(面试问 每个IO模型意思，特点)</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>面试问题复习</title>
    <url>/2020/09/13/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>面试问题</p>
<a id="more"></a>

<ol>
<li>TCP三次握手四次挥手面试题：<br><a href="https://www.cnblogs.com/Qing-840/p/9283367.html">https://www.cnblogs.com/Qing-840/p/9283367.html</a></li>
</ol>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlly1gjrnmxyuwrj30uz0enab6.jpg" alt="120-TCP三次握手和四次挥手-三次握手静态.jpg?x-oss-process=style/watermark"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一次握手是在建立连接，服务器就进入LISTEN（监听）状态；客户端发送连接请求报文段，把标有SYN的数据包发给服务器端即为接收端。此时TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。</span><br><span class="line">第二次握手是服务器端即接收端收到客户端的SYN的报文段，同时发送标有SYN&#x2F;ACK的数据包。TCP服务器进程进入了SYN-RCVD（同步收到）状态。</span><br><span class="line">第三次握手是客户端收到服务器端的SYN&#x2F;ACK的数据包后，向服务器端发送标有ACK的数据包。TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态.当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/007S8ZIlly1gjrnn2jht0j30ry0f73zx.jpg" alt="120-TCP三次握手和四次挥手-四次挥手静态.png?x-oss-process=style/watermark"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一次挥手</span><br><span class="line">客户端设置seq和 ACK ,向服务器发送一个 FIN&#x3D;1报文段。此时，（第一次挥手，FIN&#x3D;1，seq&#x3D;u）客户端进入 FIN_WAIT 状态，表示客户端没有数据要发送给服务端了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二次挥手</span><br><span class="line">服务端收到了客户端发送的 FIN 报文段，向客户端回了一个 ACK 报文段。服务端进入CLOSE_WAIT状态，客户端进入FIN-WAIT-1状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三次挥手</span><br><span class="line">服务端向客户端发送FIN 报文段，请求关闭连接，同时服务端进入 LAST_ACK 状态。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第四次挥手</span><br><span class="line">客户端收到服务端发送的 FIN 报文段后，向服务端发送 ACK 报文段,然后客户端进入 TIME_WAIT 状态。服务端收到客户端的 ACK 报文段以后，就关闭连接。此时，客户端等待 2MSL（指一个片段在网络中最大的存活时间）后依然没有收到回复，则说明服务端已经正常关闭，这样客户端就可以关闭连接了。</span><br></pre></td></tr></table></figure>



<p>1.1. <strong>高并发的情况下会存在大量的timewait，timewait过高会占用大量内存和cpu使用率</strong></p>
<ul>
<li>优化timewait方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发现系统存在大量TIME_WAIT状态的连接，通过调整linux内核参数解决，</span><br><span class="line">vi &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line"></span><br><span class="line">编辑文件，加入以下内容：</span><br><span class="line">net.ipv4.tcp_syncookies &#x3D; 1</span><br><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1</span><br><span class="line">net.ipv4.tcp_tw_recycle &#x3D; 1</span><br><span class="line">net.ipv4.tcp_fin_timeout &#x3D; 30</span><br><span class="line"></span><br><span class="line">然后执行 &#x2F;sbin&#x2F;sysctl -p 让参数生效。</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_syncookies &#x3D; 1 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_recycle &#x3D; 1 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_fin_timeout 修改系統默认的 TIMEOUT 时间</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>1.2. <strong>如果机器上存在大量SYN_RCVD状态，证明遭遇泛洪攻击</strong></p>
<ul>
<li>优化建议（待补充）</li>
</ul>
<ol start="2">
<li>粘包问题<br>TCP独有（流式协议）<br>把数据像水流一样发出去；TCP协议nagle算法会把时间间隔较短，数据量较小的数据粘到一起，基于网络发出去。<br>解决方案：收数据的时候收干净就好了</li>
</ol>
<ol start="3">
<li><p>mac地址多少位表示<br>48位二进制 –&gt; 看到的是16进制表示</p>
</li>
<li><p>OSI每一层功能</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 物理层</span><br><span class="line">网线 光纤</span><br><span class="line">网线 ---&gt; 01010101 电信号 ---&gt; 从网线中传输信号</span><br><span class="line">- 8个比特位一个字节</span><br><span class="line">2. 数据链路层</span><br><span class="line">网卡</span><br><span class="line">  - 数据帧: 一组电信号是一个数据帧, 有头和数据部分</span><br><span class="line">  - 网卡 --&gt; mac地址 --&gt; 全球唯一 --&gt; 烧制在网卡上</span><br><span class="line">  - 48位二进制 --&gt; 看到的是16进制表示</span><br><span class="line">  广播: 局域网内通信，所有人都会接收到，通过mac地址确定给谁的数据报，如果不是自己的就不处理</span><br><span class="line">  -广播风暴</span><br><span class="line">3. 网络层</span><br><span class="line">路由器</span><br><span class="line">   - 跨局域网通信，需要经过网络层</span><br><span class="line">   - IP地址: 0.0.0.0 - 255.255.255.255</span><br><span class="line">   - 子网掩码</span><br><span class="line">   - ARP: ip和mac对照表</span><br><span class="line">4. 传输层</span><br><span class="line">四层路由器</span><br><span class="line">   - 端口: 0-65535 一个应用程序可以监听多个端口，但是一个端口只能属于一个应用程序</span><br><span class="line">   - TCP协议: 可靠传输(可靠传输如何保证)三次挥手四次挥手  绝对多数视频传输也都是用TCP了</span><br><span class="line">   - UDP协议: 不可靠传输</span><br><span class="line">5. 应用层</span><br><span class="line">HTTP,DNS, DHCP,FTP，WebSocket,Telnet，NFS，SMTP,SNMP</span><br><span class="line">   - http(所有http协议都是基于基于TCP封装), 因为网络对现在来说不重要，相比于成本没必要在TCP上再封装。</span><br><span class="line">   补充: Mysql redis这种cs架构软件通信是基于TCP协议封装的</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>常用端口号</li>
</ol>
<table>
<thead>
<tr>
<th>应用程序</th>
<th>FTP</th>
<th>TFTP</th>
<th>TELNET</th>
<th>SMTP</th>
<th>DNS</th>
<th>HTTP</th>
<th>SSH</th>
<th>MYSQL</th>
</tr>
</thead>
<tbody><tr>
<td>熟知端口</td>
<td>21,20</td>
<td>69</td>
<td>23</td>
<td>25</td>
<td>53</td>
<td>80</td>
<td>22</td>
<td>3306</td>
</tr>
<tr>
<td>传输层协议</td>
<td>TCP</td>
<td>UDP</td>
<td>TCP</td>
<td>TCP</td>
<td>UDP</td>
<td>TCP</td>
<td>TCP</td>
<td><strong>TCP</strong></td>
</tr>
</tbody></table>
<ol start="6">
<li>6.1 为什么客户端最后还要等待2MSL？<br>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。</li>
</ol>
<p>保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。<br>防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。<br>6.2 为什么建立连接是三次握手，关闭连接确是四次挥手呢？<br>建立连接的时候，服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>
<p>6.3 如果已经建立了连接，但是客户端突然出现故障了怎么办？<br>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>
<h3 id="1-IO模型（面试）"><a href="#1-IO模型（面试）" class="headerlink" title="1. IO模型（面试）"></a>1. IO模型（面试）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-猴子补丁"><a href="#2-猴子补丁" class="headerlink" title="2. 猴子补丁"></a>2. 猴子补丁</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">它得益于python灵活的语法、一切皆对象的思想</span><br><span class="line">猴子补丁（monkey patch）的主要功能就是运行时动态改变方法、类的方法。但是只要和“模块运行时替换的功能”对应就行了.其实不管是定义在类外的普通方法、类里面的方法、甚至是模块这些都可以进行“动态替换的操作”</span><br><span class="line"></span><br><span class="line">monkey patch允许在运行期间动态修改一个类或模块（注意python中一切皆对象，包括类、方法、甚至是模块）</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">class A:</span><br><span class="line">    def func(self):</span><br><span class="line">        print(&quot;Hi&quot;)</span><br><span class="line">    def monkey(self):</span><br><span class="line">        print(&quot;Hi, monkey&quot;)</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">a.func()</span><br><span class="line">&#39;&#39;&#39;运行结果</span><br><span class="line">Hi</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面的结果无可厚非，大家都知道，但是看一下下面的例子：</span><br><span class="line">class A:</span><br><span class="line">    def func(self):</span><br><span class="line">        print(&quot;Hi&quot;)</span><br><span class="line">    def monkey(self):</span><br><span class="line">        print(&quot;Hi, monkey&quot;)</span><br><span class="line">a &#x3D; A()</span><br><span class="line">A.func&#x3D;A.monkey   #在运行的时候，才改变了func</span><br><span class="line">a.func()</span><br><span class="line">&#39;&#39;&#39;运行结果</span><br><span class="line">Hi, monkey</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">还可以这样</span><br><span class="line">class A:</span><br><span class="line">    def func(self):</span><br><span class="line">        print(&quot;Hi&quot;)</span><br><span class="line">    def monkey(self):</span><br><span class="line">        print(&quot;Hi, monkey&quot;)</span><br><span class="line"></span><br><span class="line">def outer_monkey(a):  # a 这个参数是没有用到的，因为func有一个参数，如果这个函数没有参数的话不能这样直接赋值</span><br><span class="line">    print(&quot;Hi,outer monkey&quot;)</span><br><span class="line"></span><br><span class="line">a &#x3D; A()</span><br><span class="line">A.func&#x3D;outer_monkey</span><br><span class="line">a.func()</span><br><span class="line">&#39;&#39;&#39;运行结果</span><br><span class="line">Hi, outer monkey</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-MySQL相关问题"><a href="#3-MySQL相关问题" class="headerlink" title="3. MySQL相关问题"></a>3. MySQL相关问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事务的四大特性：</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">ACID</span><br><span class="line">A: 原子性</span><br><span class="line">   一个事务是一个不可分割的单位，事务中包含了诸多操作，要么同时成功，要么同时失败。</span><br><span class="line">C: 一致性</span><br><span class="line">   事务必须是使数据库从一个一致性的状态变到另外一个一致性的状态。</span><br><span class="line">I: 隔离性</span><br><span class="line">   一个事务的执行不能被其他事务干扰，其一个事务内部的操作及其使用到的数据对并发的其他事务是隔离的，并发执行的事务文件也是互不干扰的。</span><br><span class="line">D: 持久性</span><br><span class="line">    也叫”永久性“。</span><br><span class="line">    一个事务一旦提交成功执行成功，那么它对数据库中数据的修改应该是永久的。</span><br><span class="line">    接下来的其他操作或者故障不应该改对其他有任何的影响。</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>



<ol start="4">
<li><h3 id="乐观锁悲观锁"><a href="#乐观锁悲观锁" class="headerlink" title="乐观锁悲观锁"></a>乐观锁悲观锁</h3></li>
</ol>
<ol start="5">
<li><h3 id="http协议工作原理，数据格式"><a href="#http协议工作原理，数据格式" class="headerlink" title="http协议工作原理，数据格式"></a>http协议工作原理，数据格式</h3></li>
</ol>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210507213828564.png" alt="image-20210507213828564"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">超文本传输协议 用来规定服务端和浏览器之间的数据交互的格式。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 四大特性</span></span><br><span class="line"><span class="number">1.</span> 基于请求响应</span><br><span class="line"><span class="number">2.</span> 基于TCP/IP作用于应用层之上的协议</span><br><span class="line"><span class="number">3.</span> 无状态</span><br><span class="line">   不保存用户信息</span><br><span class="line">   eg: 一个人来了<span class="number">1000</span>次，都如初见</span><br><span class="line">      由于是无状态的，所以出现了一些专门用来记录用户状态的而技术</span><br><span class="line">      cookie，session，token</span><br><span class="line"><span class="number">4.</span>无链接，短链接</span><br><span class="line">  请求来一次/响应一次，之后就没有任何关系了。</span><br><span class="line">  补充知识点: 长连接：双方建立连接之后默认不断开  websocket</span><br><span class="line"></span><br><span class="line"><span class="comment">## 请求数据格式</span></span><br><span class="line">   请求首行: 协议和版本，请求方法</span><br><span class="line">   请求头: (kv键值对) host:端口 路径  请求参数(请求类型text/html，压缩，语言，缓存，认证，长连接，UA等)</span><br><span class="line">   空行</span><br><span class="line">   请求体(get没有 / post有；存放的是post的请求提交的敏感数据)</span><br><span class="line"><span class="comment">## 响应数据格式</span></span><br><span class="line">   响应首行: 协议和版本 状态码</span><br><span class="line">   响应头: (kv键值对) 服务器信息，时间，返回内容类型+字符集，Etag缓存，长连接和超时时间，缓存过期时间，压缩方法，命中缓存</span><br><span class="line">   空行</span><br><span class="line">   响应体(返回的数据)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Django进阶-视图-02</title>
    <url>/2021/05/09/Django%E8%BF%9B%E9%98%B6-%E8%A7%86%E5%9B%BE-02/</url>
    <content><![CDATA[<p>Django 视图</p>
<a id="more"></a>



<h1 id="Django之视图层"><a href="#Django之视图层" class="headerlink" title="Django之视图层"></a>Django之视图层</h1><h2 id="一-视图函数"><a href="#一-视图函数" class="headerlink" title="一 视图函数"></a>一 视图函数</h2><p>视图函数，简称视图，属于Django的视图层，默认定义在views.py文件中，是用来处理web请求信息以及返回响应信息的函数，所以研究视图函数只需熟练掌握两个对象即可：请求对象(HttpRequest)和响应对象(HttpResponse)</p>
<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222544245-79299495..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222544245-79299495..png" alt="1554198422515"></a></p>
<h3 id="二-请求对象-HttpRequest"><a href="#二-请求对象-HttpRequest" class="headerlink" title="二 请求对象(HttpRequest)"></a>二 请求对象(HttpRequest)</h3><p>django将http协议请求报文中的请求行、首部信息、内容主体封装到了HttpRequest对象中（类似于我们自定义框架的environ参数）。 django会将HttpRequest对象当做参数传给视图函数的第一个参数request，在视图函数中，通过访问该对象的属性便可以提取http协议的请求数据</p>
<h4 id="2-1、HttpRequest对象常用属性part1"><a href="#2-1、HttpRequest对象常用属性part1" class="headerlink" title="2.1、HttpRequest对象常用属性part1"></a>2.1、HttpRequest对象常用属性part1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy一.HttpRequest.method</span><br><span class="line">　　获取请求使用的方法（值为纯大写的字符串格式）。例如：<span class="string">&quot;GET&quot;</span>、<span class="string">&quot;POST&quot;</span></span><br><span class="line">   应该通过该属性的值来判断请求方法</span><br><span class="line"></span><br><span class="line">二.HttpRequest.GET</span><br><span class="line">　　值为一个类似于字典的QueryDict对象，封装了GET请求的所有参数，可通过HttpRequest.GET.get(<span class="string">&#x27;键&#x27;</span>)获取相对应的值</span><br><span class="line">   注意：get只会获取列表最后一个元素</span><br><span class="line">  </span><br><span class="line">三.HttpRequest.POST</span><br><span class="line">   值为一个类似于字典的QueryDict对象，封装了POST请求所包含的表单数据，可通过HttpRequest.POST.get(<span class="string">&#x27;键&#x27;</span>)获取相对应的值</span><br><span class="line">   </span><br><span class="line">   针对表单中checkbox类型的input标签、select标签提交的数据，键对应的值为多个，需要用：HttpRequest.POST.getlist(<span class="string">&quot;hobbies&quot;</span>)获取存有多个值的列表,同理也有HttpRequest.GET.getlist(<span class="string">&quot;键&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p>urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^login/$&#x27;</span>,views.login),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>Views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="comment"># 当请求url为：http://127.0.0.1:8001/login/?a=1&amp;b=2&amp;c=3&amp;c=4&amp;c=5</span></span><br><span class="line">        <span class="comment"># 请求方法是GET，?后的请求参数都存放于request.GET中</span></span><br><span class="line">        print(request.GET)</span><br><span class="line">        <span class="comment"># 输出&lt;QueryDict: &#123;&#x27;a&#x27;: [&#x27;1&#x27;], &#x27;b&#x27;: [&#x27;2&#x27;], &#x27;c&#x27;: [&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]&#125;&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取？后参数的方式为</span></span><br><span class="line">        a=request.GET.get(<span class="string">&#x27;a&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">        b=request.GET.get(<span class="string">&#x27;b&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line">        c=request.GET.getlist(<span class="string">&#x27;c&#x27;</span>) <span class="comment"># [&#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 在输入框内输入用户名egon、年龄18，选择爱好，点击提交</span></span><br><span class="line">        <span class="comment"># 请求方法为POST，表单内的数据都会存放于request.POST中</span></span><br><span class="line">        print(request.POST) </span><br><span class="line">        <span class="comment"># 输出&lt;QueryDict: &#123;..., &#x27;name&#x27;: [&#x27;egon&#x27;], &#x27;age&#x27;: [&#x27;18&#x27;], &#x27;hobbies&#x27;: [&#x27;music&#x27;, &#x27;read&#x27;]&#125;&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取表单中数据的方式为</span></span><br><span class="line">        name=request.POST.get(<span class="string">&#x27;name&#x27;</span>) <span class="comment"># egon</span></span><br><span class="line">        age=request.POST.get(<span class="string">&#x27;age&#x27;</span>) <span class="comment"># 18</span></span><br><span class="line">        hobbies=request.POST.getlist(<span class="string">&#x27;hobbies&#x27;</span>) <span class="comment"># [&#x27;music&#x27;, &#x27;read&#x27;]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;提交成功&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在templates目录下新建login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">method=&quot;post&quot;代表在提交表单时会以POST方法提交表单数据</span></span><br><span class="line"><span class="comment">action=&quot;/login/&quot; 代表表单数据的提交地址为http://127.0.0.1:8001/login/,可以简写为action=&quot;/login/&quot;,或者action=&quot;&quot;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:8001/login/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125; <span class="comment">&lt;!--强调：必须加上这一行，后续我们会详细介绍--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span>音乐</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;read&quot;</span>&gt;</span>阅读</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dancing&quot;</span>&gt;</span>跳舞</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2、HttpRequest对象常用属性part2"><a href="#2-2、HttpRequest对象常用属性part2" class="headerlink" title="2.2、HttpRequest对象常用属性part2"></a>2.2、HttpRequest对象常用属性part2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy一.HttpRequest.body</span><br><span class="line">   当浏览器基于http协议的POST方法提交数据时，数据会被放到请求体中发送给django，django会将接收到的请求体数据存放于HttpRequest.body属性中，因为该属性的值为Bytes类型，所以通常情况下直接处理Bytes、并从中提取有用数据的操作是复杂而繁琐的，好在django会对它做进一步的处理与封装以便我们更为方便地提取数据，比如</span><br><span class="line">   对于form表单来说，提交数据的常用方法为GET与POST</span><br><span class="line">   <span class="number">1</span>：如果表单属性method=<span class="string">&#x27;GET&#x27;</span>,那么在提交表单时，表单内数据不会存放于请求体中，而是会将表单数据按照k1=v1&amp;k2=v2&amp;k3=v3的格式放到url中，然后发送给django，django会将这些数据封装到request.GET中，注意此时的request.body为空、无用</span><br><span class="line">   <span class="number">2</span>：如果表单属性method=<span class="string">&#x27;POST&#x27;</span>，那么在提交表单时，表单内的所有数据都会存放于请求体中，在发送给django后会封装到request.body里，此时django为了方便我们提取数据，会request.body的数据进行进一步的处理，具体如何处理呢，需要从form表单提交数据的编码格式说起：</span><br><span class="line">    form表单对提交的表单数据有两种常用的编码格式，可以通过属性enctype进行设置，如下</span><br><span class="line">    编码格式<span class="number">1</span>(默认的编码格式):enctype=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span> </span><br><span class="line">    编码格式<span class="number">2</span>(使用form表单上传文件时只能用该编码):enctype=<span class="string">&quot;multipart/form-data&quot;</span> </span><br><span class="line">    如果form表单提交数据是按照编码格式<span class="number">1</span>,那么request.body中数据的格式类似于GET方法的数据格式，如k1=v1&amp;k2=v2，此时django会将request.body中的数据提取出来封装到request.POST中方便我们提取</span><br><span class="line">    如果form表单提交数据是按照编码格式<span class="number">2</span>,那么request.body中数据的格式为<span class="string">b&#x27;------WebKitFormBoundaryKtcwuksQltpNprep\r\nContent-Disposition: form-data;......&#x27;</span>,，此时django会将request.body中的数据提取出来封装到request.POST中，将上传的文件数据专门提取出来封装到request.FILES属性中</span><br><span class="line">    强调：毫无疑问，编码格式<span class="number">2</span>的数据量要大于编码格式<span class="number">1</span>，如果无需上传文件，还是推荐使用更为精简的编码格式<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    我们除了可以采用form表单向django提交数据外，还可以采用ajax技术，ajax可以提交的数据格式有：<span class="number">1</span>、编码格式<span class="number">1</span> <span class="number">2</span>、编码格式<span class="number">2</span> <span class="number">3</span>、json，当ajax采用POST方法提交前两种格式的数据时，django的处理方案同上，但是当ajax采用POST方法提交json格式的数据时，django会将接收到的数据存放于HttpRequest.body，此时需要我们自己对HttpRequest.body属性值做反序列化操作，</span><br><span class="line">具体的，我们在讲解ajax时再做具体介绍</span><br><span class="line">    </span><br><span class="line">二.HttpRequest.FILES</span><br><span class="line">   如果使用form表单POST上传文件的话，文件数据将包含在HttpRequest.FILES属性中。</span><br><span class="line"></span><br><span class="line">　　该属性值为一个类似于字典的对象，可以包含多组key:value（对应多个上传的文件），其中每个key为&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;&quot;</span> /&gt; 中name属性的值，而value则为对应的文件数据</span><br><span class="line">　　强调：HttpRequest.FILES 只有在请求的方法为POST 且提交的&lt;form&gt; 带有enctype=<span class="string">&quot;multipart/form-data&quot;</span> 的情况下才会包含数据。否则，FILES 将为一个空的类似于字典的对象。</span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222544559-341096432..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222544559-341096432..png" alt="1554198484654"></a></p>
<p>案例：form表单上传文件</p>
<p>urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.urls <span class="keyword">import</span> path,register_converter,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^register/$&#x27;</span>,views.register),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        print(request.body)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从request.POST中获取用户名</span></span><br><span class="line">        name=request.POST.get(<span class="string">&#x27;name&#x27;</span>) </span><br><span class="line">        <span class="comment"># 从request.FILES获取文件对象</span></span><br><span class="line">        file_obj=request.FILES.get(<span class="string">&#x27;header_img&#x27;</span>) </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 上传的文件存放于templates文件夹下</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;templates/header.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: </span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file_obj:</span><br><span class="line">                f.write(line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;注册成功&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在templates目录下新建register.html</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Copy&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;注册页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        用户名:&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        头像:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;header_img&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-3、HttpRequest对象常用属性part3"><a href="#2-3、HttpRequest对象常用属性part3" class="headerlink" title="2.3、HttpRequest对象常用属性part3"></a>2.3、HttpRequest对象常用属性part3</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy一.HttpRequest.path</span><br><span class="line">　　获取url地址的路径部分，只包含路径部分</span><br><span class="line"></span><br><span class="line">二.HttpRequest.get_full_path()</span><br><span class="line">　　获取url地址的完整path，既包含路径又包含参数部分</span><br><span class="line"></span><br><span class="line">如果请求地址是http://127.0.0.1:8001/order/?name=egon&amp;age=10#_label3，</span><br><span class="line">HttpRequest.path的值为<span class="string">&quot;/order/&quot;</span></span><br><span class="line">HttpRequest.get_full_path()的值为<span class="string">&quot;/order/?name=egon&amp;age=10&quot;</span></span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p>urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.urls <span class="keyword">import</span> path,register_converter,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^order&#x27;</span>,views.order),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对请求的url地址：http://127.0.0.1:8001/order/?name=egon&amp;age=10#_label3</span></span><br><span class="line"><span class="comment"># 从域名后的最后一个“/”开始到“？”为止是路径部分，即/order/</span></span><br><span class="line"><span class="comment"># 从“？”开始到“#”为止之间的部分为参数部分,即name=egon&amp;age=10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(request.path) <span class="comment"># 结果为“/order/”</span></span><br><span class="line">    print(request.get_full_path()) <span class="comment"># 结果为&quot;/order/?name=egon&amp;age=10&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;order page&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-4、HttpRequest对象常用属性part4"><a href="#2-4、HttpRequest对象常用属性part4" class="headerlink" title="2.4、HttpRequest对象常用属性part4"></a>2.4、HttpRequest对象常用属性part4</h4><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222544968-1223937559.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222544968-1223937559.gif" alt="img"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy一.HttpRequest.META</span><br><span class="line"> 　 值为包含了HTTP协议的请求头数据的Python字典，字典中的key及期对应值的解释如下</span><br><span class="line">    CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。</span><br><span class="line">    CONTENT_TYPE —— 请求的正文的MIME类型。</span><br><span class="line">    HTTP_ACCEPT —— 响应可接收的Content-Type。</span><br><span class="line">    HTTP_ACCEPT_ENCODING —— 响应可接收的编码。</span><br><span class="line">    HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。</span><br><span class="line">    HTTP_HOST —— 客服端发送数据的目标主机与端口</span><br><span class="line">    HTTP_REFERER —— Referring 页面。</span><br><span class="line">    HTTP_USER_AGENT —— 客户端使用的软件版本信息</span><br><span class="line">    QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。</span><br><span class="line">    REMOTE_ADDR —— 客户端的IP地址。</span><br><span class="line">    REMOTE_HOST —— 客户端的主机名。</span><br><span class="line">    REMOTE_USER —— 服务器认证后的用户。</span><br><span class="line">    REQUEST_METHOD —— 一个字符串，例如<span class="string">&quot;GET&quot;</span> 或<span class="string">&quot;POST&quot;</span>。</span><br><span class="line">    SERVER_NAME —— 服务器的主机名。</span><br><span class="line">    SERVER_PORT —— 服务器的端口（是一个字符串）。</span><br><span class="line"> 　　从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，HTTP协议的请求头数据转换为 META 的键时，</span><br><span class="line">    都会</span><br><span class="line">    <span class="number">1</span>、将所有字母大写</span><br><span class="line">    <span class="number">2</span>、将单词的连接符替换为下划线</span><br><span class="line">    <span class="number">3</span>、加上前缀HTTP_。</span><br><span class="line">    所以，一个叫做 X-Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键。</span><br><span class="line">   </span><br><span class="line">注意：下述常用属性暂且了解即可，待我们讲到专门的知识点时再专门详细讲解</span><br><span class="line">二.HttpRequest.COOKIES</span><br><span class="line">　　一个标准的Python 字典，包含所有的cookie。键和值都为字符串。</span><br><span class="line"></span><br><span class="line">三.HttpRequest.session</span><br><span class="line"> 　一个既可读又可写的类似于字典的对象，表示当前的会话。只有当Django 启用会话的支持时才可用。</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>HttpRequest.user(用户认证组件下使用)</span><br><span class="line"></span><br><span class="line">　　一个 AUTH_USER_MODEL 类型的对象，表示当前登录的用户。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>HttpRequest.is_ajax()</span><br><span class="line"></span><br><span class="line">　　如果请求是通过XMLHttpRequest 发起的，则返回<span class="literal">True</span>，方法是检查 HTTP_X_REQUESTED_WITH 相应的首部是否是字符串<span class="string">&#x27;XMLHttpRequest&#x27;</span>。</span><br><span class="line"></span><br><span class="line">　　大部分现代的 JavaScript 库都会发送这个头部。如果你编写自己的 XMLHttpRequest 调用（在浏览器端），你必须手工设置这个值来让 is_ajax() 可以工作。</span><br><span class="line"></span><br><span class="line">　　如果一个响应需要根据请求是否是通过AJAX 发起的，并且你正在使用某种形式的缓存例如Django 的 cache middleware，</span><br><span class="line">   你应该使用 vary_on_headers(<span class="string">&#x27;HTTP_X_REQUESTED_WITH&#x27;</span>) 装饰你的视图以让响应能够正确地缓存。</span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222545209-1618629404..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222545209-1618629404..png" alt="1554198681139"></a></p>
<h3 id="三-响应对象-HttpResponse"><a href="#三-响应对象-HttpResponse" class="headerlink" title="三 响应对象(HttpResponse)"></a>三 响应对象(HttpResponse)</h3><p>响应可以是任何形式的内容，比如一个HTML文件的内容，一个重定向，一个404错误，一个XML文档，或者一张图片等。总之，无论视图本身包含什么逻辑，都要返回响应，具体的说，响应对象主要有三种形式:HttpResponse,render,redirect</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> HttpResponse,render,redirect</span><br></pre></td></tr></table></figure>

<h3 id="3-1、HttpResponse"><a href="#3-1、HttpResponse" class="headerlink" title="3.1、HttpResponse()"></a>3.1、HttpResponse()</h3><p>括号内直接跟一个具体的字符串作为响应体，比较直接很简单，所以这里主要介绍后面两种形式。</p>
<h4 id="3-2、render"><a href="#3-2、render" class="headerlink" title="3.2、render()"></a>3.2、render()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyrender(request, template_name[, context]）</span><br><span class="line">参数：</span><br><span class="line">    <span class="number">1</span>、request：用于生成响应的请求对象，固定必须传入的第一个参数</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>、template_name：要使用的模板的完整名称，必须传入，render默认会去templates目录下查找模板文件</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>、context：可选参数，可以传入一个字典用来替换模块文件中的变量</span><br><span class="line"></span><br><span class="line">综上，render的功能可以总结为：根据给定字典渲染模板文件，并返回一个渲染后的 HttpResponse对象。</span><br></pre></td></tr></table></figure>

<h4 id="3-3、redirect"><a href="#3-3、redirect" class="headerlink" title="3.3、redirect()"></a>3.3、redirect()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment"># 返回重定向信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/some/url/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向的地址也可以是一个完整的URL：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)　</span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222545525-832902557.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222545525-832902557.gif" alt="img"></a></p>
<p>重定向转态码301与302的区别（了解）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy一、<span class="number">301</span>和<span class="number">302</span>的异同。</span><br><span class="line">   <span class="number">1</span>、相同之处：</span><br><span class="line">   <span class="number">301</span>和<span class="number">302</span>状态码都表示重定向，具体点说就是浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址（浏览器会从响应头Location中获取新地址），用户看到的效果都是输入地址A后瞬间跳转到了另一个地址B</span><br><span class="line">   </span><br><span class="line">   <span class="number">2</span>、不同之处：</span><br><span class="line">　　<span class="number">301</span>表示旧地址A的资源已经被永久地移除了，即这个资源不可访问了。搜索引擎在抓取新内容的同时也将旧的网址转换为重定向之后的地址；</span><br><span class="line">　　<span class="number">302</span>表示旧地址A的资源还在，即这个资源仍然可以访问，这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容、并且会保存旧的网址。 从SEO层面考虑，<span class="number">302</span>要好于<span class="number">301</span></span><br><span class="line"></span><br><span class="line">二、重定向原因：</span><br><span class="line">   <span class="number">1</span>、网站调整（如改变网页目录结构）；</span><br><span class="line">   <span class="number">2</span>、网页被移到一个新地址；</span><br><span class="line">   <span class="number">3</span>、网页扩展名改变(如应用需要把.php改成.Html或.shtml)。</span><br><span class="line">      这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个<span class="number">404</span>页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。</span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222545750-1325469848..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222545750-1325469848..png" alt="1554198744154"></a></p>
<h3 id="四-JsonResponse"><a href="#四-JsonResponse" class="headerlink" title="四 JsonResponse"></a>四 JsonResponse</h3><p>向前端返回一个json格式字符串的两种方式</p>
<p>方式一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyimport json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    data=[<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;kevin&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(data) )</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    data=[<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;kevin&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(data,safe=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment">#默认safe=True代表只能序列化字典对象，safe=False代表可以序列化字典以外的对象</span></span><br></pre></td></tr></table></figure>

<h3 id="五-FBV和CBV"><a href="#五-FBV和CBV" class="headerlink" title="五 FBV和CBV"></a>五 FBV和CBV</h3><p>django的视图层由两种形式构成：FBV和CBV</p>
<p>1、FBV基于函数的视图（Function base view），我们之前一直介绍的都是FBV</p>
<p>2、CBV基于类的视图(Class base view)</p>
<p>案例：</p>
<p>urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.urls <span class="keyword">import</span> path,register_converter,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^login/&#x27;</span>,views.LoginView.as_view()), <span class="comment"># 必须调用类下的方法as_view</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render,HttpResponse,redirect</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span> <span class="comment"># 可在该方法内做一些预处理操作</span></span><br><span class="line">        <span class="comment"># 当请求url为：http://127.0.0.1:8008/login/会先触发dispatch的执行</span></span><br><span class="line">        <span class="comment"># 如果http协议的请求方法为GET，则调用下述get方法</span></span><br><span class="line">        <span class="comment"># 如果http协议的请求方法为POST，则调用下述post方法</span></span><br><span class="line">        obj=super().dispatch(request, *args, **kwargs) <span class="comment"># 必须继承父类的dispatch功能</span></span><br><span class="line">        <span class="keyword">return</span> obj <span class="comment"># 必须返回obj</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        name=request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        pwd=request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name  == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            res=<span class="string">&#x27;登录成功&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res=<span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(res)</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copypython manage.py runserver <span class="number">8001</span> </span><br><span class="line"><span class="comment"># 验证GET请求：在浏览器输入：http://127.0.0.1:8001/login/</span></span><br><span class="line"><span class="comment"># 验证POST请求：在表单内输入数据然后提交</span></span><br></pre></td></tr></table></figure>

<p>采用CBV可以引入面向对象的思想对数据进行更高程度的封装，此处简单了解即可，我们将在后续的项目中详细介绍它的应用于强大之处</p>
<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222546418-369381076.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222546418-369381076.gif" alt="img"></a></p>
<p>作者： 小猿取经</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django进阶-路由-01</title>
    <url>/2021/05/09/Django%E8%BF%9B%E9%98%B6-%E8%B7%AF%E7%94%B1-01/</url>
    <content><![CDATA[<p>Django 路由</p>
<a id="more"></a>

<h1 id="Django之路由层"><a href="#Django之路由层" class="headerlink" title="Django之路由层"></a>Django之路由层</h1><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222443378-1794220073.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222443378-1794220073.gif" alt="img"></a></p>
<h2 id="一-路由的作用"><a href="#一-路由的作用" class="headerlink" title="一 路由的作用"></a>一 路由的作用</h2><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222443672-661946893..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222443672-661946893..png" alt="1554196338393"></a></p>
<p>路由即请求地址与视图函数的映射关系，如果把网站比喻为一本书，那路由就好比是这本书的目录，在Django中路由默认配置在urls.py中，如下图：</p>
<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222443889-1706228438..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222443889-1706228438..png" alt="urls"></a></p>
<h2 id="二-简单的路由配置"><a href="#二-简单的路由配置" class="headerlink" title="二 简单的路由配置"></a>二 简单的路由配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment"># urls.py </span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由一条条映射关系组成的urlpatterns这个列表称之为路由表</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">     url(regex, view, kwargs=<span class="literal">None</span>, name=<span class="literal">None</span>), <span class="comment"># url本质就是一个函数</span></span><br><span class="line">]</span><br><span class="line"><span class="comment">#函数url关键参数介绍</span></span><br><span class="line"><span class="comment"># regex：正则表达式,用来匹配url地址的路径部分，</span></span><br><span class="line">        <span class="comment"># 例如url地址为：http://127.0.0.1:8001/index/，正则表达式要匹配的部分是index/</span></span><br><span class="line"><span class="comment"># view：通常为一个视图函数，用来处理业务逻辑</span></span><br><span class="line"><span class="comment"># kwargs：略（用法详见有名分组）</span></span><br><span class="line"><span class="comment"># name：略（用法详见反向解析）</span></span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p>urls.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views <span class="comment"># 导入模块views.py</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    </span><br><span class="line">    url(<span class="string">r&#x27;^index/$&#x27;</span>,views.index), <span class="comment"># 新增一条</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>views.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse <span class="comment"># 导入HttpResponse，用来生成响应信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增视图函数index</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;index page...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Copypython manage.py runserver <span class="number">8001</span> # 在浏览器输入：http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8001</span>/index/ 会看到 index page...</span><br></pre></td></tr></table></figure>

<p>注意一：</p>
<p>刚刚我们在浏览器输入：<a href="http://127.0.0.1:8001/index/%EF%BC%8CDjango%E4%BC%9A%E6%8B%BF%E7%9D%80%E8%B7%AF%E5%BE%84%E9%83%A8%E5%88%86index/%E5%8E%BB%E8%B7%AF%E7%94%B1%E8%A1%A8%E4%B8%AD%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%8C%B9%E9%85%8D%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E4%B8%80%E6%97%A6%E5%8C%B9%E9%85%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E5%88%99%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%85%B6%E5%90%8E%E7%9A%84%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%EF%BC%8C%E4%B8%8D%E4%BC%9A%E7%BB%A7%E7%BB%AD%E5%BE%80%E4%B8%8B%E5%8C%B9%E9%85%8D%EF%BC%8C%E6%AD%A4%E5%A4%84%E5%8C%B9%E9%85%8D%E6%88%90%E5%8A%9F%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%98%AF">http://127.0.0.1:8001/index/，Django会拿着路径部分index/去路由表中自上而下匹配正则表达式，一旦匹配成功，则立即执行其后的视图函数，不会继续往下匹配，此处匹配成功的正则表达式是</a> r’^index/$’。</p>
<p>注意二：</p>
<p>但是我们在浏览器输入：<a href="http://127.0.0.1:8001/index%EF%BC%8CDjango%E5%90%8C%E6%A0%B7%E4%BC%9A%E6%8B%BF%E7%9D%80%E8%B7%AF%E5%BE%84%E9%83%A8%E5%88%86index%E5%8E%BB%E8%B7%AF%E7%94%B1%E8%A1%A8%E4%B8%AD%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%8C%B9%E9%85%8D%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E8%B2%8C%E4%BC%BC%E5%B9%B6%E4%B8%8D%E4%BC%9A%E5%8C%B9%E9%85%8D%E6%88%90%E5%8A%9F%E4%BB%BB%E4%BD%95%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88">http://127.0.0.1:8001/index，Django同样会拿着路径部分index去路由表中自上而下匹配正则表达式，貌似并不会匹配成功任何正则表达式（</a> r’^index/$’匹配的是必须以 / 结尾，所以不会匹配成功index），但实际上仍然会看到结果 index page…，原因如下：</p>
<p>在配置文件settings.py中有一个参数APPEND_SLASH，该参数有两个值True或False</p>
<p>当APPEND_SLASH=True（如果配置文件中没有该配置，APPEND_SLASH的默认值为True），并且用户请求的url地址的路径部分不是以 / 结尾，例如请求的url地址是 <a href="http://127.0.0.1:8001/index%EF%BC%8CDjango%E4%BC%9A%E6%8B%BF%E7%9D%80%E8%B7%AF%E5%BE%84%E9%83%A8%E5%88%86%EF%BC%88%E5%8D%B3index%EF%BC%89%E5%8E%BB%E8%B7%AF%E7%94%B1%E8%A1%A8%E4%B8%AD%E5%8C%B9%E9%85%8D%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E5%8F%91%E7%8E%B0%E5%8C%B9%E9%85%8D%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E9%82%A3%E4%B9%88Django%E4%BC%9A%E5%9C%A8%E8%B7%AF%E5%BE%84%E5%90%8E%E5%8A%A0">http://127.0.0.1:8001/index，Django会拿着路径部分（即index）去路由表中匹配正则表达式，发现匹配不成功，那么Django会在路径后加</a> / （即index/）再去路由表中匹配，如果匹配失败则会返回路径未找到，如果匹配成功，则会返回重定向信息给浏览器，要求浏览器重新向 <a href="http://127.0.0.1:8001/index/%E5%9C%B0%E5%9D%80%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E3%80%82">http://127.0.0.1:8001/index/地址发送请求。</a></p>
<p>当APPEND_SLASH=False时，则不会执行上述过程，即一旦url地址的路径部分匹配失败就立即返回路径未找到，不会做任何的附加操作<br>ps：注意！！！在末尾加/然后重新发起请求，这是浏览器的功能，如果是在终端直接执行curl <a href="http://127.0.0.1:8901/index%EF%BC%8C%E5%88%99%E6%B2%A1%E6%9C%89%E8%AF%A5%E5%8A%9F%E8%83%BD">http://127.0.0.1:8901/index，则没有该功能</a></p>
<h2 id="三-分组"><a href="#三-分组" class="headerlink" title="三 分组"></a>三 分组</h2><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222444233-977445247.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222444233-977445247.gif" alt="img"></a></p>
<p>什么是分组、为何要分组呢？比如我们开发了一个博客系统，当我们需要根据文章的id查看指定文章时，浏览器在发送请求时需要向后台传递参数（文章的id号），可以使用 <a href="http://127.0.0.1:8001/article/?id=3%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%B0%86%E5%8F%82%E6%95%B0%E6%94%BE%E5%88%B0%E8%B7%AF%E5%BE%84%E4%B8%ADhttp://127.0.0.1:8001/article/3/">http://127.0.0.1:8001/article/?id=3，也可以直接将参数放到路径中http://127.0.0.1:8001/article/3/</a></p>
<p>针对后一种方式Django就需要直接从路径中取出参数，这就用到了正则表达式的分组功能了，分组分为两种：无名分组与有名分组</p>
<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222444524-429200914..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222444524-429200914..png" alt="1554196523649"></a></p>
<h4 id="3-1-无名分组"><a href="#3-1-无名分组" class="headerlink" title="3.1 无名分组"></a>3.1 无名分组</h4><p>urls.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 下述正则表达式会匹配url地址的路径部分为:article/数字/，匹配成功的分组部分会以位置参数的形式传给视图函数，有几个分组就传几个位置参数</span></span><br><span class="line">    url(<span class="string">r&#x27;^aritcle/(\d+)/$&#x27;</span>,views.article), </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>views.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要额外增加一个形参用于接收传递过来的分组数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article</span>(<span class="params">request,article_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;id为 %s 的文章内容...&#x27;</span> %article_id)</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Copypython manage.py runserver <span class="number">8001</span> # 在浏览器输入：http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8001</span>/article/<span class="number">3</span>/ 会看到: id为 <span class="number">3</span> 的文章内容...</span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222444817-1176355275..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222444817-1176355275..png" alt="1554196591100"></a></p>
<h4 id="3-2-有名分组"><a href="#3-2-有名分组" class="headerlink" title="3.2 有名分组"></a>3.2 有名分组</h4><p>urls.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 该正则会匹配url地址的路径部分为:article/数字/，匹配成功的分组部分会以关键字参数（article_id=匹配成功的数字）的形式传给视图函数，有几个有名分组就会传几个关键字参数</span></span><br><span class="line">    url(<span class="string">r&#x27;^aritcle/(?P&lt;article_id&gt;\d+)/$&#x27;</span>,views.article), </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>views.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要额外增加一个形参，形参名必须为article_id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article</span>(<span class="params">request,article_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;id为 %s 的文章内容...&#x27;</span> %article_id)</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Copypython manage.py runserver <span class="number">8001</span> # 在浏览器输入：http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8001</span>/article/<span class="number">3</span>/ 会看到: id为 <span class="number">3</span> 的文章内容...</span><br></pre></td></tr></table></figure>

<p>总结：有名分组和无名分组都是为了获取路径中的参数，并传递给视图函数，区别在于无名分组是以位置参数的形式传递，有名分组是以关键字参数的形式传递。</p>
<p>强调：无名分组和有名分组不要混合使用</p>
<h2 id="四-路由分发"><a href="#四-路由分发" class="headerlink" title="四 路由分发"></a>四 路由分发</h2><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222445154-1444675186.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222445154-1444675186.gif" alt="img"></a></p>
<p>随着项目功能的增加，app会越来越多，路由也越来越多，每个app都会有属于自己的路由，如果再将所有的路由都放到一张路由表中，会导致结构不清晰，不便于管理，所以我们应该将app自己的路由交由自己管理，然后在总路由表中做分发，具体做法如下</p>
<p>1 创建两个app</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment"># 新建项目mystie2</span></span><br><span class="line">E:\git&gt;django-admin startproject mysite2</span><br><span class="line"><span class="comment"># 切换到项目目录下</span></span><br><span class="line">E:\git&gt;cd mysite2</span><br><span class="line"><span class="comment"># 创建app01和app02</span></span><br><span class="line">E:\git\mysite2&gt;python3 manage.py startapp app01</span><br><span class="line">E:\git\mysite2&gt;python3 manage.py startapp app02</span><br></pre></td></tr></table></figure>

<p>2 在每个app下手动创建urls.py来存放自己的路由，如下：</p>
<p>app01下的urls.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="comment"># 导入app01的views</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^index/$&#x27;</span>,views.index), </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>app01下的views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;我是app01的index页面...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>app02下的urls.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="comment"># 导入app02的views</span></span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^index/$&#x27;</span>,views.index), </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>app02下的views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;我是app02的index页面...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>3 在总的urls.py文件中（mysite2文件夹下的urls.py）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url,include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由表</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 新增两条路由，注意不能以$结尾</span></span><br><span class="line">    <span class="comment"># include函数就是做分发操作的，当在浏览器输入http://127.0.0.1:8001/app01/index/时，会先进入到总路由表中进行匹配，正则表达式r&#x27;^app01/&#x27;会先匹配成功路径app01/，然后include功能会去app01下的urls.py中继续匹配剩余的路径部分</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>, include(<span class="string">&#x27;app01.urls&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>, include(<span class="string">&#x27;app02.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Copypython manage.py runserver <span class="number">8001</span>  </span><br><span class="line"># 在浏览器输入：http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8001</span>/app01/index/ 会看到:我是app01的index页面...</span><br><span class="line"># 在浏览器输入：http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8001</span>/app02/index/ 会看到:我是app02的index页面...</span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222445422-2146488130..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222445422-2146488130..png" alt="1554196705126"></a></p>
<h2 id="五-反向解析"><a href="#五-反向解析" class="headerlink" title="五 反向解析"></a>五 反向解析</h2><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222445615-540719174..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222445615-540719174..png" alt="1554196814235"></a></p>
<p>在软件开发初期，url地址的路径设计可能并不完美，后期需要进行调整，如果项目中很多地方使用了该路径，一旦该路径发生变化，就意味着所有使用该路径的地方都需要进行修改，这是一个非常繁琐的操作。</p>
<p>解决方案就是在编写一条url(regex, view, kwargs=None, name=None)时，可以通过参数name为url地址的路径部分起一个别名，项目中就可以通过别名来获取这个路径。以后无论路径如何变化别名与路径始终保持一致。</p>
<p>上述方案中通过别名获取路径的过程称为反向解析</p>
<p>案例：登录成功跳转到index.html页面</p>
<p>在urls.py文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    </span><br><span class="line">    url(<span class="string">r&#x27;^login/$&#x27;</span>, views.login,name=<span class="string">&#x27;login_page&#x27;</span>), <span class="comment"># 路径login/的别名为login_page</span></span><br><span class="line">    url(<span class="string">r&#x27;^index/$&#x27;</span>, views.index,name=<span class="string">&#x27;index_page&#x27;</span>), <span class="comment"># 路径index/的别名为index_page</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在views.py中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render </span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse <span class="comment"># 用于反向解析</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect <span class="comment">#用于重定向页面</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="comment"># 当为get请求时，返回login.html页面,页面中的&#123;% url &#x27;login_page&#x27; %&#125;会被反向解析成路径：/login/</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 当为post请求时，可以从request.POST中取出请求体的数据</span></span><br><span class="line">    name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    pwd = request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;kevin&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        url = reverse(<span class="string">&#x27;index_page&#x27;</span>)  <span class="comment"># reverse会将别名&#x27;index_page&#x27;反向解析成路径：/index/       </span></span><br><span class="line">        <span class="keyword">return</span> redirect(url) <span class="comment"># 重定向到/index/</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--强调：login_page必须加引号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;login_page&#x27; %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125; <span class="comment">&lt;!--强调：必须加上这一行，后续我们会详细介绍--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是index页面...<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copypython manage.py runserver <span class="number">8001</span>  </span><br><span class="line"><span class="comment"># 在浏览器输入：http://127.0.0.1:8001/login/ 会看到登录页面，输入正确的用户名密码会跳转到index.html</span></span><br><span class="line"><span class="comment"># 当我们修改路由表中匹配路径的正则表达式时，程序其余部分均无需修改</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy在views.py中，反向解析的使用：</span><br><span class="line">    url = reverse(<span class="string">&#x27;index_page&#x27;</span>)</span><br><span class="line">在模版login.html文件中，反向解析的使用</span><br><span class="line">    &#123;% url <span class="string">&#x27;login_page&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222447282-379992817.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222447282-379992817.gif" alt="img"></a></p>
<p>拓展阅读：</p>
<p>如果路径存在分组的反向解析使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    </span><br><span class="line">    url(<span class="string">r&#x27;^aritcle/(\d+)/$&#x27;</span>,views.article,name=<span class="string">&#x27;article_page&#x27;</span>), <span class="comment">#　无名分组</span></span><br><span class="line">    url(<span class="string">r&#x27;^user/(?P&lt;uid&gt;\d+)/$&#x27;</span>,views.article,name=<span class="string">&#x27;user_page&#x27;</span>), <span class="comment"># 有名分组</span></span><br><span class="line">]</span><br><span class="line">Copy<span class="comment"># 1 针对无名分组，比如我们要反向解析出：/aritcle/1/ 这种路径，写法如下</span></span><br><span class="line">在views.py中，反向解析的使用：</span><br><span class="line">    url = reverse(<span class="string">&#x27;article_page&#x27;</span>,args=(<span class="number">1</span>,)) </span><br><span class="line">在模版login.html文件中，反向解析的使用</span><br><span class="line">    &#123;% url <span class="string">&#x27;article_page&#x27;</span> <span class="number">1</span> %&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2 针对有名分组，比如我们要反向解析出：/user/1/ 这种路径，写法如下</span></span><br><span class="line">在views.py中，反向解析的使用：</span><br><span class="line">    url = reverse(<span class="string">&#x27;user_page&#x27;</span>,kwargs=&#123;<span class="string">&#x27;uid&#x27;</span>:<span class="number">1</span>&#125;) </span><br><span class="line">在模版login.html文件中，反向解析的使用</span><br><span class="line">    &#123;% url <span class="string">&#x27;user_page&#x27;</span> uid=<span class="number">1</span> %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六-名称空间"><a href="#六-名称空间" class="headerlink" title="六 名称空间"></a>六 名称空间</h2><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222448014-1450117168..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222448014-1450117168..png" alt="1554196891080"></a></p>
<p>当我们的项目下创建了多个app，并且每个app下都针对匹配的路径起了别名，如果别名存在重复，那么在反向解析时则会出现覆盖，如下</p>
<p>1 创建两个app</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment"># 新建项目mystie2</span></span><br><span class="line">E:\git&gt;django-admin startproject mysite2</span><br><span class="line"><span class="comment"># 切换到项目目录下</span></span><br><span class="line">E:\git&gt;cd mysite2</span><br><span class="line"><span class="comment"># 创建app01和app02</span></span><br><span class="line">E:\git\mysite2&gt;python3 manage.py startapp app01</span><br><span class="line">E:\git\mysite2&gt;python3 manage.py startapp app02</span><br></pre></td></tr></table></figure>

<p>2 在每个app下手动创建urls.py来存放自己的路由，并且为匹配的路径起别名</p>
<p>app01下的urls.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 为匹配的路径app01/index/起别名&#x27;index_page&#x27;</span></span><br><span class="line">    url(<span class="string">r&#x27;^index/$&#x27;</span>,views.index,name=<span class="string">&#x27;index_page&#x27;</span>), </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>app02下的urls.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 为匹配的路径app02/index/起别名&#x27;index_page&#x27;,与app01中的别名相同</span></span><br><span class="line">    url(<span class="string">r&#x27;^index/$&#x27;</span>,views.index,name=<span class="string">&#x27;index_page&#x27;</span>), </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>3 在每个app下的view.py中编写视图函数，在视图函数中针对别名’index_page’做反向解析</p>
<p>app01下的views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    url=reverse(<span class="string">&#x27;index_page&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;app01的index页面，反向解析结果为%s&#x27;</span> %url)</span><br></pre></td></tr></table></figure>

<p>app02下的views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    url=reverse(<span class="string">&#x27;index_page&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;app02的index页面，反向解析结果为%s&#x27;</span> %url)</span><br></pre></td></tr></table></figure>

<p>3 在总的urls.py文件中（mysite2文件夹下的urls.py）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url,include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由表</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 新增两条路由，注意不能以$结尾</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>, include(<span class="string">&#x27;app01.urls&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>, include(<span class="string">&#x27;app02.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>4、测试：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Copypython manage.py runserver <span class="number">8001</span>  </span><br></pre></td></tr></table></figure>

<p>在测试时，无论在浏览器输入：<a href="http://127.0.0.1:8001/app01/index/%E8%BF%98%E6%98%AF%E8%BE%93%E5%85%A5http://127.0.0.1:8001/app02/index/">http://127.0.0.1:8001/app01/index/还是输入http://127.0.0.1:8001/app02/index/</a> 针对别名’index_page’反向解析的结果都是/app02/index/，覆盖了app01下别名的解析。</p>
<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222448254-332583287..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222448254-332583287..png" alt="1554196964803"></a></p>
<p>解决这个问题的方法之一就是避免使用相同的别名，如果就想使用相同的别名，那就需要用到django中名称空间的概念，将别名放到不同的名称空间中，这样即便是出现重复，彼此也不会冲突，具体做法如下</p>
<p>1、总urls.py在路由分发时，指定名称空间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总路由表</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 传给include功能一个元组，元组的第一个值是路由分发的地址，第二个值则是我们为名称空间起的名字</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>, include((<span class="string">&#x27;app01.urls&#x27;</span>,<span class="string">&#x27;app01&#x27;</span>))),</span><br><span class="line">    url(<span class="string">r&#x27;^app02/&#x27;</span>, include((<span class="string">&#x27;app02.urls&#x27;</span>,<span class="string">&#x27;app02&#x27;</span>))),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>2、修改每个app下的view.py中视图函数，针对不同名称空间中的别名’index_page’做反向解析</p>
<p>app01下的views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    url=reverse(<span class="string">&#x27;app01:index_page&#x27;</span>) <span class="comment"># 解析的是名称空间app01下的别名&#x27;index_page&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;app01的index页面，反向解析结果为%s&#x27;</span> %url)</span><br></pre></td></tr></table></figure>

<p>app02下的views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    url=reverse(<span class="string">&#x27;app02:index_page&#x27;</span>) <span class="comment"># 解析的是名称空间app02下的别名&#x27;index_page&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;app02的index页面，反向解析结果为%s&#x27;</span> %url)</span><br></pre></td></tr></table></figure>

<p>3、测试：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Copypython manage.py runserver <span class="number">8001</span>  </span><br></pre></td></tr></table></figure>

<p>浏览器输入：<a href="http://127.0.0.1:8001/app01/index/%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF/app01/index/">http://127.0.0.1:8001/app01/index/反向解析的结果是/app01/index/</a></p>
<p>在浏览器输入<a href="http://127.0.0.1:8001/app02/index/">http://127.0.0.1:8001/app02/index/</a> 反向解析的结果是/app02/index/</p>
<p>总结+补充</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Copy1、在视图函数中基于名称空间的反向解析，用法如下</span><br><span class="line">url=reverse(<span class="string">&#x27;名称空间的名字:待解析的别名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、在模版里基于名称空间的反向解析，用法如下</span><br><span class="line">&lt;a href=&quot;&#123;% url &#x27;名称空间的名字:待解析的别名&#x27;%&#125;&quot;&gt;哈哈&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h2 id="七-django2-0版的re-path与path"><a href="#七-django2-0版的re-path与path" class="headerlink" title="七 django2.0版的re_path与path"></a>七 django2.0版的re_path与path</h2><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222448429-1874906406..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222448429-1874906406..png" alt="1554197031700"></a></p>
<h4 id="7-1-re-path"><a href="#7-1-re-path" class="headerlink" title="7.1 re_path"></a>7.1 re_path</h4><p>Django2.0中的re_path与django1.0的url一样，传入的第一个参数都是正则表达式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.urls <span class="keyword">import</span> re_path <span class="comment"># django2.0中的re_path</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url <span class="comment"># 在django2.0中同样可以导入1.0中的url</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 用法完全一致</span></span><br><span class="line">    url(<span class="string">r&#x27;^app01/&#x27;</span>, include((<span class="string">&#x27;app01.urls&#x27;</span>,<span class="string">&#x27;app01&#x27;</span>))),</span><br><span class="line">    re_path(<span class="string">r&#x27;^app02/&#x27;</span>, include((<span class="string">&#x27;app02.urls&#x27;</span>,<span class="string">&#x27;app02&#x27;</span>))),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="7-2-path"><a href="#7-2-path" class="headerlink" title="7.2 path"></a>7.2 path</h4><p>在Django2.0中新增了一个path功能，用来解决：数据类型转换问题与正则表达式冗余问题，如下</p>
<p>urls.py文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.urls <span class="keyword">import</span> re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 问题一：数据类型转换</span></span><br><span class="line">    <span class="comment"># 正则表达式会将请求路径中的年份匹配成功然后以str类型传递函数year_archive，在函数year_archive中如果想以int类型的格式处理年份，则必须进行数据类型转换</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&#x27;</span>, views.year_archive),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题二：正则表达式冗余</span></span><br><span class="line">    <span class="comment"># 下述三个路由中匹配article_id采用了同样的正则表达式，重复编写了三遍，存在冗余问题，并且极不容易管理，因为一旦article_id规则需要改变，则必须同时修改三处代码</span></span><br><span class="line">    </span><br><span class="line">    re_path(<span class="string">r&#x27;^article/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/detail/$&#x27;</span>, views.detail_view),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/edit/$&#x27;</span>, views.edit_view),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;article_id&gt;[a-zA-Z0-9]+)/delete/$&#x27;</span>, views.delete_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">year_archive</span>(<span class="params">request,year</span>):</span></span><br><span class="line">    print(year,type(year))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;year_archive page&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail_view</span>(<span class="params">request,article_id</span>):</span></span><br><span class="line">    print(article_id, type(article_id))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;detail_view page&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_view</span>(<span class="params">request,article_id</span>):</span></span><br><span class="line">    print(article_id, type(article_id))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;edit_view page&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_view</span>(<span class="params">request,article_id</span>):</span></span><br><span class="line">    print(article_id, type(article_id))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;delete_view page&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222448718-148154582..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222448718-148154582..png" alt="1554197083806"></a></p>
<p>Django2.0中的path如何解决上述两个问题的呢？请看示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 问题一的解决方案：</span></span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive), <span class="comment"># &lt;int:year&gt;相当于一个有名分组，其中int是django提供的转换器，相当于正则表达式，专门用于匹配数字类型，而year则是我们为有名分组命的名，并且int会将匹配成功的结果转换成整型后按照格式（year=整型值）传给函数year_archive</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 问题二解决方法：用一个int转换器可以替代多处正则表达式</span></span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:article_id&gt;/detail/&#x27;</span>, views.detail_view), </span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:article_id&gt;/edit/&#x27;</span>, views.edit_view),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:article_id&gt;/delete/&#x27;</span>, views.delete_view),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>强调：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment">#1、path与re_path或者1.0中的url的不同之处是，传给path的第一个参数不再是正则表达式，而是一个完全匹配的路径，相同之处是第一个参数中的匹配字符均无需加前导斜杠</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、使用尖括号(&lt;&gt;)从url中捕获值，相当于有名分组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、&lt;&gt;中可以包含一个转化器类型（converter type），比如使用 &lt;int:name&gt; 使用了转换器int。若果没有转化器，将匹配任何字符串，当然也包括了 / 字符</span></span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222449112-578457427.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222449112-578457427.gif" alt="img"></a></p>
<p>django默认支持一下5种转换器（Path converters）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copystr,匹配除了路径分隔符（/）之外的非空字符串，这是默认的形式</span><br><span class="line">int,匹配正整数，包含<span class="number">0</span>。</span><br><span class="line">slug,匹配字母、数字以及横杠、下划线组成的字符串。</span><br><span class="line">uuid,匹配格式化的uuid，如 <span class="number">075194</span>d3<span class="number">-6885</span><span class="number">-417</span>e-a8a8<span class="number">-6</span>c931e272f00。</span><br><span class="line">path,匹配任何非空字符串，包含了路径分隔符（/）（不能用？）</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copypath(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:other&gt;/&#x27;</span>, views.article_detail) </span><br><span class="line"><span class="comment"># 针对路径http://127.0.0.1:8000/articles/2009/123/hello/，path会匹配出参数year=2009,month=123,other=&#x27;hello&#x27;传递给函数article_detail</span></span><br></pre></td></tr></table></figure>

<p>很明显针对月份month，转换器int是无法精准匹配的，如果我们只想匹配两个字符，那么转换器slug也无法满足需求，针对等等这一系列复杂的需要，我们可以定义自己的转化器。转化器是一个类或接口，它的要求有三点：</p>
<ul>
<li><code>regex</code> 类属性，字符串类型</li>
<li><code>to_python(self, value)</code> 方法，value是由类属性 <code>regex</code> 所匹配到的字符串，返回具体的Python变量值，以供Django传递到对应的视图函数中。</li>
<li><code>to_url(self, value)</code> 方法，和 <code>to_python</code> 相反，value是一个具体的Python变量值，返回其字符串，通常用于url反向引用。</li>
</ul>
<p>自定义转换器示例：</p>
<ol>
<li><p>在app01下新建文件path_ converters.py,文件名可以随意命名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyclass MonthConverter:</span><br><span class="line">    regex=<span class="string">&#x27;\d&#123;2&#125;&#x27;</span> <span class="comment"># 属性名必须为regex</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> int(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> value <span class="comment"># 匹配的regex是两个数字，返回的结果也必须是两个数字</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在urls.py中，使用<code>register_converter</code> 将其注册到URL配置中：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.urls <span class="keyword">import</span> path,register_converter</span><br><span class="line"><span class="keyword">from</span> app01.path_converts <span class="keyword">import</span> MonthConverter</span><br><span class="line"></span><br><span class="line">register_converter(MonthConverter,<span class="string">&#x27;mon&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;mon:month&gt;/&lt;slug:other&gt;/&#x27;</span>, views.article_detail, name=<span class="string">&#x27;aaa&#x27;</span>),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>views.py中的视图函数article_detail</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render,HttpResponse,reverse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article_detail</span>(<span class="params">request,year,month,other</span>):</span></span><br><span class="line">    print(year,type(year))</span><br><span class="line">    print(month,type(month))</span><br><span class="line">    print(other,type(other))</span><br><span class="line">    print(reverse(<span class="string">&#x27;xxx&#x27;</span>,args=(<span class="number">1988</span>,<span class="number">12</span>,<span class="string">&#x27;hello&#x27;</span>))) <span class="comment"># 反向解析结果/articles/1988/12/hello/</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;xxxx&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Copy</span># <span class="number">1</span>、在浏览器输入http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8000</span>/articles/<span class="number">2009</span>/<span class="number">12</span>/hello/，<span class="built_in">path</span>会成功匹配出参数year=<span class="number">2009</span>,month=<span class="number">12</span>,other=&#x27;hello&#x27;传递给函数article_detail</span><br><span class="line"># <span class="number">2</span>、在浏览器输入http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8000</span>/articles/<span class="number">2009</span>/<span class="number">123</span>/hello/，<span class="built_in">path</span>会匹配失败，因为我们自定义的转换器mon只匹配两位数字，而对应位置的<span class="number">123</span>超过了<span class="number">2</span>位</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes网络通信原理</title>
    <url>/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>了解通信原理</p>
<a id="more"></a>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>1、网络的命名空间：Linux在网络栈中引入网络命名空间，将独立的网络协议栈隔离到不同的命令空间中，彼此间无法通信；docker利用这一特性，实现不容器间的网络隔离。</p>
<p>2、Veth设备对：也叫虚拟网络接口对。Veth设备对的引入是为了实现在不同网络命名空间的通信。</p>
<p>3、Iptables/Netfilter：Netfilter负责在内核中执行各种挂接的规则(过滤、修改、丢弃等)，运行在内核 模式中；Iptables模式是在用户模式下运行的进程，负责协助维护内核中Netfilter的各种规则表；通过二者的配合来实现整个Linux网络协议栈中灵活的数据包处理机制。</p>
<p>4、网桥：网桥是一个二层网络设备,通过网桥可以将linux支持的不同的端口连接起来,并实现类似交换机那样的多对多的通信。</p>
<p>5、路由：Linux系统包含一个完整的路由功能，当IP层在处理数据发送或转发的时候，会使用路由表来决定发往哪里。</p>
<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>Kubernetes对集群内部的网络进行了重新抽象，以实现整个集群网络扁平化。我们可以理解网络模型时，可以完全抽离物理节点去理解，我们用图说话，先有基本印象。</p>
<img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/kubernetes-proxy-model.jpg" class title="kubernetes网络通信原理">

<h3 id="一个Service"><a href="#一个Service" class="headerlink" title="一个Service"></a>一个Service</h3><p>Service是Kubernetes为为屏蔽这些后端实例（Pod）的动态变化和对多实例的负载均衡而引入的资源对象。Service通常与deployment绑定，定义了服务的访问入口地址，应用(Pod)可以通过这个入口地址访问其背后的一组由Pod副本组成的集群实例。Service与其后端Pod副本集群之间则是通过Label Selector来实现映射。</p>
<p>Service的类型(Type)决定了Service如何对外提供服务，根据类型不同，服务可以只在Kubernetes cluster中可见，也可以暴露到集群外部。Service有三种类型，ClusterIP，NodePort和LoadBalancer。具体的使用场景会在下文中进行阐述。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc --selector app&#x3D;nginx</span><br><span class="line">NAME   TYPE     CLUSTER-IP  EXTERNAL-IP PORT(S) AGE</span><br><span class="line">nginx ClusterIP 172.19.0.166   &lt;none&gt;    80&#x2F;TCP  1m</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">describe</span> <span class="string">svc</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">Namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">Labels:</span> <span class="string">app=nginx</span></span><br><span class="line"><span class="attr">Annotations:</span> <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">Selector:</span> <span class="string">app=nginx</span></span><br><span class="line"><span class="attr">Type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">IP:</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.166</span></span><br><span class="line"><span class="attr">Port:</span> <span class="string">&lt;unset&gt;</span> <span class="number">80</span><span class="string">/TCP</span></span><br><span class="line"><span class="attr">TargetPort:</span> <span class="number">80</span><span class="string">/TCP</span></span><br><span class="line"><span class="attr">Endpoints:</span> <span class="number">172.16</span><span class="number">.2</span><span class="number">.125</span><span class="string">:80,172.16.2.229:80</span></span><br><span class="line"><span class="attr">Session Affinity:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">Events:</span> <span class="string">&lt;none&gt;</span></span><br></pre></td></tr></table></figure>
<p>该svc后端代理了2个Pod实例:172.16.2.125:80,172.16.2.229:80</p>
<h3 id="三个IP"><a href="#三个IP" class="headerlink" title="三个IP"></a>三个IP</h3><p>Kubernetes为描述其网络模型的IP对象，抽象出Cluster IP和Pod IP的概念。</p>
<p>PodIP是Kubernetes集群中每个Pod的IP地址。它是Docker Engine 根据docker0网桥的IP地址段进行分配的，是一个虚拟的二层网络。Kubernetes中Pod间能够彼此直接通讯，Pod里的容器访问另外一个Pod里的容器，是通过Pod IP所在进行通信。</p>
<p>Cluster IP仅作用于Service，其没有实体对象所对应，因此Cluster IP无法被ping通。它的作用是为Service后端的实例提供统一的访问入口。当访问ClusterIP时，请求将被转发到后端的实例上，默认是轮询方式。Cluster IP和Service一样由kube-proxy组件维护，其实现方式主要有两种，<strong>iptables</strong>和<strong>IPVS</strong>。在<strong>1.8版本后kubeproxy开始支持IPVS方式</strong>。在上例中，SVC的信息中包含了Cluster IP。</p>
<p>这里未列出nodeip概念，由于其本身是物理机的网卡IP。因此可理解为nodeip就是物理机IP。</p>
<h3 id="三个Port"><a href="#三个Port" class="headerlink" title="三个Port"></a>三个Port</h3><p>在Kubernetes中，涉及容器，Pod，Service，集群各等多个层级的对象间的通信，为在网络模型中区分各层级的通信端口，这里对Port进行了抽象。</p>
<h4 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h4><p>该Port非一般意义上的TCP/IP中的Port概念，它是特指Kubernetes中Service的port，是Service间的访问端口，例如Mysql的Service默认3306端口。它仅对进群内容器提供访问权限，而无法从集群外部通过该端口访问服务。</p>
<h4 id="nodePort"><a href="#nodePort" class="headerlink" title="nodePort"></a>nodePort</h4><p>nodePort为外部机器提供了访问集群内服务的方式。比如一个Web应用需要被其他用户访问，那么需要配置type=NodePort，而且配置nodePort=30001，那么其他机器就可以通过浏览器访问scheme://node:30001访问到该服务，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;node:30001</span><br></pre></td></tr></table></figure>
<h4 id="targetPort"><a href="#targetPort" class="headerlink" title="targetPort"></a>targetPort</h4><p>targetPort是容器的端口（最根本的端口入口），与制作容器时暴露的端口一致（DockerFile中EXPOSE），例如<a href="http://docker.io官方的nginx暴露的是80端口./">http://docker.io官方的nginx暴露的是80端口。</a></p>
<p>eg:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mallh5-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">abcdocker</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">  <span class="attr">app:</span> <span class="string">mallh5web</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">     <span class="attr">port:</span> <span class="number">3017</span></span><br><span class="line">     <span class="attr">targetPort:</span> <span class="number">5003</span></span><br><span class="line">     <span class="attr">nodePort:</span> <span class="number">31122</span></span><br></pre></td></tr></table></figure>
<p>举出了一个service的yaml，其部署在abcdocker的namespace中。这里配置了nodePort，因此其类型Type就是NodePort，注意大小写。若没有配置nodePort，那这里需要填写ClusterIP，即表示只支持集群内部服务访问。</p>
<h2 id="集群内部通信"><a href="#集群内部通信" class="headerlink" title="集群内部通信"></a>集群内部通信</h2><h3 id="单节点通信"><a href="#单节点通信" class="headerlink" title="单节点通信"></a>单节点通信</h3><p>集群单节点内的通信，主要包括两种情况，同一个pod内的多容器间通信以及同一节点不同pod间的通信。由于不涉及跨节点访问，因此流量不会经过物理网卡进行转发。</p>
<p>查看路由表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@node-1:&#x2F;opt&#x2F;bin# route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination Gateway Genmask Flags Metric Ref Use Iface</span><br><span class="line">0.0.0.0 172.23.100.1 0.0.0.0 UG 0 0 0 eth0</span><br><span class="line">10.1.0.0 0.0.0.0 255.255.0.0 U 0 0 0 flannel.1 #flannel 网络内跨节点的通信会交给 flannel.1 处理</span><br><span class="line">10.1.1.0 0.0.0.0 255.255.255.0 U 0 0 0 docker0 #flannel 网络内节点内的通信会走 docker0</span><br></pre></td></tr></table></figure>

<h3 id="1-Pod内通信"><a href="#1-Pod内通信" class="headerlink" title="1 Pod内通信"></a>1 Pod内通信</h3><img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/pod%E5%86%85%E9%80%9A%E4%BF%A1.jpg" class title="kubernetes网络通信原理">
<p>同一个pod内共享网络命名空间，容器之间通过访问127.0.0.1:（端口）即可。图中的veth<em>即指veth对的一端（另一端未标注，但实际上是成对出现），该veth对是由Docker Daemon挂载在docker0网桥上，另一端添加到容器所属的网络命名空间，图上显示是容器中的eth0。<br>图中演示了bridge模式下的容器间通信。docker1向docker2发送请求，docker1，docker2均与docker0建立了veth对进行通讯。<br>当请求经过docker0时，由于容器和docker0同属于一个子网，因此请求经过docker2与docker0的veth</em>对，转发到docker2，该过程并未跨节点，因此不经过eth0。</p>
<p>总结：同一个pod内的多个容器间的通信，通过lo即可实现；</p>
<h3 id="Pod间通信"><a href="#Pod间通信" class="headerlink" title="Pod间通信"></a>Pod间通信</h3><p>同节点pod间通信<br>由于Pod内共享网络命名空间（由pause容器创建），所以本质上也是同节点容器间的通信。同时，同一Node中Pod的默认路由都是docker0的地址，由于它们关联在同一个docker0网桥上，地址网段相同，所有它们之间应当是能直接通信的。来看看实际上这一过程如何实现。如上图，Pod1中容器1和容器2共享网络命名空间，因此对pod外的请求通过pod1和Docker0网桥的veth对（图中挂在eth0和ethx上）实现。</p>
<p>总结：<br>同一Node中Pod的默认路由都是docker0的地址<br>pod ip &lt;—&gt; pod ip，pod和pod之间要不经过任何转换即可通信；</p>
<img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/%E5%90%8C%E8%8A%82%E7%82%B9pod%E9%97%B4%E9%80%9A%E4%BF%A1.jpg" class title="kubernetes网络通信原理">

<h3 id="pod和service通信"><a href="#pod和service通信" class="headerlink" title="pod和service通信"></a>pod和service通信</h3><p>pod ip &lt;—-&gt; cluster ip（即service ip）&lt;—-&gt;pod ip，他们通过iptables或ipvs实现通信，另外大家要注意ipvs取代不了iptables，因为ipvs只能做负载均衡，而做不了nat转换；</p>
<h3 id="跨节点通信"><a href="#跨节点通信" class="headerlink" title="跨节点通信"></a>跨节点通信</h3><h4 id="CNI：容器网络接口"><a href="#CNI：容器网络接口" class="headerlink" title="CNI：容器网络接口"></a>CNI：容器网络接口</h4><p>CNI 是一种标准，它旨在为容器平台提供网络的标准化。不同的容器平台（比如目前的 kubernetes、mesos 和 rkt）能够通过相同的接口调用不同的网络组件。</p>
<p>目前kubernetes支持的CNI组件种类很多，例如：flannel，callco，canel，kube-router。</p>
<p>flanel只支持网络通讯，但是不支持网络策略。<br>callco网络通讯和网络策略都支持。<br>canel：flanel+callco合起来的功能。</p>
<p>主流的跨主机通信方案主要有一下几种：<br>1）基于隧道的overlay网络：按隧道类型来说，不同的公司或者组织有不同的实现方案。docker原生的overlay网络就是基于vxlan隧道实现的。ovn则需要通过geneve或者stt隧道来实现的。flannel最新版本也开始默认基于vxlan实现overlay网络。</p>
<p>2）基于包封装的overlay网络：基于UDP封装等数据包包装方式，在docker集群上实现跨主机网络。典型实现方案有weave、flannel的早期版本。</p>
<p>3）基于三层实现SDN网络：基于三层协议和路由，直接在三层上实现跨主机网络，并且通过iptables实现网络的安全隔离。典型的方案为Project Calico。同时对不支持三层路由的环境，Project Calico还提供了基于IPIP封装的跨主机网络实现</p>
<p>总结：<br>    1）虚拟网桥，虚拟网卡，多个容器共用一个虚拟网卡进行通信；<br>    2）多路复用：MacVLAN，多个容器共用一个物理网卡进行通信；<br>    3）硬件交换：SR-LOV，一个物理网卡可以虚拟出多个接口，这个性能最好。</p>
<h4 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h4><img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/flannel1.jpg" class title="kubernetes网络通信原理">
<p>集群内跨节点通信涉及到不同的子网间通信，仅靠docker0无法实现，这里需要借助CNI网络插件来实现。图中展示了使用flannel实现跨节点通信的方式。</p>
<p>简单说来，flannel的用户态进程flanneld会为每个node节点创建一个flannel.1的网桥，根据etcd或apiserver的全局统一的集群信息为每个node分配全局唯一的网段，避免地址冲突。同时会为docker0和flannel.1创建veth对，docker0将报文丢给flannel.1,。</p>
<p>Flanneld维护了一份全局node的网络表，通过flannel.1接收到请求后，根据node表，将请求二次封装为UDP包，扔给eth0，由eth0出口进入物理网路发送给目的node。</p>
<p>在另一端以相反的流程。Flanneld解包并发往docker0，进而发往目的Pod中的容器</p>
<p>两个节点上的pod可以借助flannel隧道进行通信。默认使用的VxLAN协议，因为它有额外开销，所以性能有点低。</p>
<p>flannel第二种协议叫host-gw(host gateway)，即Node节点把自己的网络接口当做pod的网关使用，从而使不同节点上的node进行通信，这个性能比VxLAN高，因为它没有额外开销。不过他有个缺点， 就是各node节点必须在同一个网段中 。</p>
<p>另外，如果两个pod所在节点在同一个网段中 ，可以让VxLAN也支持host-gw的功能， 即直接通过物理网卡的网关路由转发，而不用隧道flannel叠加，从而提高了VxLAN的性能，这种flannel的功能叫directrouting。<br>flannel支持多种后端：<br>    1.Vxlan<br>        1.1 vxlan<br>        1.2 Dirextrouting<br>    2.host-gw：Host Gateway  #不推荐，只能在二层网络中，不支持跨网络，如果有成千上万的Pod，容易产生广播风暴<br>    3.UDP：性能差</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                             READY     STATUS             RESTARTS   AGE       IP             NODE</span><br><span class="line">myapp-deploy-69b47bc96d-79fqh    1/1       Running            4          7d        10.244.1.97    node1</span><br><span class="line">myapp-deploy-69b47bc96d-tc54k    1/1       Running            4          7d        10.244.2.88    node2</span><br><span class="line">[root@master ~]<span class="comment"># kubectl exec -it myapp-deploy-69b47bc96d-79fqh -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># ping 10.244.2.88 #ping对方Node上容器的ip</span></span><br><span class="line">PING 10.244.2.88 (10.244.2.88): 56 data bytes</span><br><span class="line">64 bytes from 10.244.2.88: seq=0 ttl=62 time=0.459 ms</span><br><span class="line">64 bytes from 10.244.2.88: seq=0 ttl=62 time=0.377 ms</span><br><span class="line">64 bytes from 10.244.2.88: seq=1 ttl=62 time=0.252 ms</span><br><span class="line">64 bytes from 10.244.2.88: seq=2 ttl=62 time=0.261 ms</span><br></pre></td></tr></table></figure>
<p>在其他节点上抓包，发现根本就在ens192上抓不到包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># tcpdump -i ens192 -nn icmp</span></span><br><span class="line">[root@master ~]<span class="comment"># yum install bridge-utils -y</span></span><br><span class="line">[root@master ~]<span class="comment"># brctl show docker0</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.024283f8b8ffno</span><br><span class="line">[root@master ~]<span class="comment"># brctl show cni0</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">cni08000.0a580af40001noveth6ec94aab</span><br><span class="line">vethf703483a</span><br><span class="line">vethff579703</span><br></pre></td></tr></table></figure>
<p> 可以看到veth这些接口都是桥接到cni0上的。</p>
<pre><code>brctl show表示查看已有网桥。</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;[root@node1 ~]<span class="comment">#  tcpdump -i cni0 -nn icmp</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on cni0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">23:40:11.370754 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 96, length 64</span><br><span class="line">23:40:11.370988 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 96, length 64</span><br><span class="line">23:40:12.370888 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 97, length 64</span><br><span class="line">23:40:12.371090 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 97, length 64</span><br><span class="line">^X23:40:13.371015 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 98, length 64</span><br><span class="line">23:40:13.371239 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 98, length 64</span><br><span class="line">23:40:14.371128 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 99, length 64</span><br></pre></td></tr></table></figure>
<p>可以看到，在node节点，可以在cni0端口上抓到容器里面的Ping时的包。</p>
<pre><code>其实，上面ping时的数据流是先从cni0进来，然后从flannel.1出去，最后借助物理网卡ens32发出去。所以，我们在flannel.1上也能抓到包：</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment">#  tcpdump -i flannel.1 -nn icmp</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on flannel.1, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">03:12:36.823315 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 12840, length 64</span><br><span class="line">03:12:36.823496 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 12840, length 64</span><br><span class="line">03:12:37.823490 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 12841, length 64</span><br><span class="line">03:12:37.823634 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 12841, length 64</span><br></pre></td></tr></table></figure>
<p>同样，在ens192物理网卡上也能抓到包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># tcpdump -i ens192 -nn host 172.16.1.102  #172.16.1.102是node2的物理ip</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">10:59:24.234174 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 0, length 64</span><br><span class="line">10:59:24.234434 IP 172.16.1.102.54894 &gt; 172.16.1.101.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 7168, seq 0, length 64</span><br><span class="line">10:59:25.234301 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 1, length 64</span><br><span class="line">10:59:25.234469 IP 172.16.1.102.54894 &gt; 172.16.1.101.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 7168, seq 1, length 64</span><br><span class="line">10:59:26.234415 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 2, length 64</span><br><span class="line">10:59:26.234592 IP 172.16.1.102.54894 &gt; 172.16.1.101.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 7168, seq 2, length 64</span><br><span class="line">10:59:27.234528 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 3, length 64</span><br></pre></td></tr></table></figure>
<pre><code>下面我们把flannel的通信模式改成directrouting的方式</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master flannel]<span class="comment"># cd /root/manifests/flannel</span></span><br><span class="line">[root@master flannel]<span class="comment"># kubectl edit configmap kube-flannel-cfg -n kube-system</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.244.0.0/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Directrouting&quot;</span>: <span class="literal">true</span> <span class="comment">#加一行这个</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">[root@master flannel]<span class="comment"># ip route show</span></span><br><span class="line">default via 172.16.1.254 dev ens192 proto static metric 100 </span><br><span class="line">10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1 <span class="comment">#访问10.244.0.0/24要通过10.244.0.1</span></span><br><span class="line">10.244.1.0/24 via 10.244.1.0 dev flannel.1 onlink <span class="comment">#10.244.1.0是配置在flannel上的地址，表示访问10.244.1.0/24通过本机flannel.1上的10.244.1.0送出去，下同</span></span><br><span class="line">10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink  <span class="comment">#10.244.2.0是配置在flannel上的地址</span></span><br><span class="line">172.16.1.0/24 dev ens192 proto kernel scope link src 172.16.1.100 metric 100</span><br><span class="line"></span><br><span class="line">[root@master flannel]<span class="comment"># kubectl get configmap kube-flannel-cfg -o json -n kube-system</span></span><br><span class="line">　　　　　　<span class="string">&quot;net-conf.json&quot;</span>: <span class="string">&quot;&#123;\n \&quot;Network\&quot;: \&quot;10.244.0.0/16\&quot;,\n \&quot;Backend\&quot;: &#123;\n \&quot;Type\&quot;: \&quot;vxlan\&quot;,\n \&quot;Directrouting\&quot;: true\n &#125;\n&#125;\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>看到有Directrouting，说明生效了。</p>
<pre><code>重启整个k8s，然后再看：</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># ip route show</span></span><br><span class="line">default via 172.16.1.254 dev ens192 proto static metric 100 </span><br><span class="line">10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1 <span class="comment">#访问本机直接在本机直接转发，而不需要其他接口，这就是directrouting</span></span><br><span class="line">10.244.1.0/24 via 172.16.1.101 dev ens192 <span class="comment">#看到现在访问10.244.1.0，通过本地物理网卡ens192上的172.16.1.101送出去，即通过物理网卡通信了，而不再通过隧道flannel通信。</span></span><br><span class="line">10.244.2.0/24 via 172.16.1.102 dev ens192 </span><br><span class="line">172.16.1.0/24 dev ens192 proto kernel scope link src 172.16.1.100 metric 100 </span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1</span><br><span class="line">继续登录到一个pod中进行ping测试：</span><br><span class="line"></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                             READY     STATUS             RESTARTS   AGE       IP             NODE</span><br><span class="line">myapp-deploy-69b47bc96d-75g2b    1/1       Running            0          12m       10.244.1.124   node1</span><br><span class="line">myapp-deploy-69b47bc96d-jwgwm    1/1       Running            0          3s        10.244.2.100   node2</span><br><span class="line">[root@master ~]<span class="comment"># kubectl exec  -it myapp-deploy-69b47bc96d-75g2b -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># ping 10.244.2.100</span></span><br><span class="line">PING 10.244.2.100 (10.244.2.100): 56 data bytes</span><br><span class="line">64 bytes from 10.244.2.100: seq=0 ttl=62 time=0.536 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=1 ttl=62 time=0.206 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=2 ttl=62 time=0.206 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=3 ttl=62 time=0.203 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=4 ttl=62 time=0.210 ms</span><br><span class="line">[root@node1 ~]<span class="comment"># tcpdump -i ens192 -nn icmp</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">12:31:10.899403 IP 10.244.1.124 &gt; 10.244.2.100: ICMP <span class="built_in">echo</span> request, id 8960, seq 24, length 64</span><br><span class="line">12:31:10.899546 IP 10.244.2.100 &gt; 10.244.1.124: ICMP <span class="built_in">echo</span> reply, id 8960, seq 24, length 64</span><br><span class="line">12:31:11.899505 IP 10.244.1.124 &gt; 10.244.2.100: ICMP <span class="built_in">echo</span> request, id 8960, seq 25, length 64</span><br><span class="line">12:31:11.899639 IP 10.244.2.100 &gt; 10.244.1.124: ICMP <span class="built_in">echo</span> reply, id 8960, seq 25, length 64</span><br><span class="line">通过抓包可以看到，现在在pod中进行互ping，是从物理网卡ens192进出的，这就是directrouting，这种性能比默认vxlan高。</span><br></pre></td></tr></table></figure>
<h2 id="外部访问集群"><a href="#外部访问集群" class="headerlink" title="外部访问集群"></a>外部访问集群</h2><p>从集群外访问集群有多种方式，比如loadbalancer，Ingress，nodeport，nodeport和loadbalancer是service的两个基本类型，是将service直接对外暴露的方式，ingress则是提供了七层负载均衡，其基本原理将外部流量转发到内部的service，再转发到后端endpoints，在平时的使用中，我们可以依据具体的业务需求选用不同的方式。这里主要介绍nodeport和ingress方式。</p>
<h3 id="Nodeport"><a href="#Nodeport" class="headerlink" title="Nodeport"></a>Nodeport</h3><p>通过将Service的类型设置为NodePort，就可以在Cluster中的主机上通过一个指定端口暴露服务。注意通过Cluster中每台主机上的该指定端口都可以访问到该服务，发送到该主机端口的请求会被kubernetes路由到提供服务的Pod上。采用这种服务类型，可以在kubernetes cluster网络外通过主机IP：端口的方式访问到服务。</p>
<img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/nodeport.jpg" class title="kubernetes网络通信原理">
<p>这里给出一个influxdb的例子，我们也可以针对这个模板去修改成其他的类型：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31112</span></span><br><span class="line">      <span class="attr">selector:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">influxdb</span></span><br></pre></td></tr></table></figure>

<h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/ingress.jpg" class title="kubernetes网络通信原理">
<p>Ingress是推荐在生产环境使用的方式，它起到了七层负载均衡器和Http方向代理的作用，可以根据不同的url把入口流量分发到不同的后端Service。外部客户端只看到<a href="http://foo.bar.com这个服务器,屏蔽了内部多个service的实现方式.采用这种方式,简化了客户端的访问,并增加了后端实现和部署的灵活性,可以在不影响客户端的情况下对后端的服务部署进行调整./">http://foo.bar.com这个服务器，屏蔽了内部多个Service的实现方式。采用这种方式，简化了客户端的访问，并增加了后端实现和部署的灵活性，可以在不影响客户端的情况下对后端的服务部署进行调整。</a></p>
<p>其部署的yaml可以参考如下模板：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line"> <span class="attr">annotations:</span></span><br><span class="line"> <span class="attr">ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">rules:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">test.name.com</span></span><br><span class="line"> <span class="attr">http:</span></span><br><span class="line"> <span class="attr">paths:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/test</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">service-1</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">8118</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/name</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">service-2</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">8228</span></span><br></pre></td></tr></table></figure>
<p>这里我们定义了一个ingress模板，定义通过<a href="http://test.name.com来访问服务,在虚拟主机http//test.name.com%E4%B8%8B%E9%9D%A2%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%A4%E4%B8%AAPath%EF%BC%8C%E5%85%B6%E4%B8%AD/test%E8%A2%AB%E5%88%86%E5%8F%91%E5%88%B0%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1s1%EF%BC%8C/name%E8%A2%AB%E5%88%86%E5%8F%91%E5%88%B0%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1s2%E3%80%82">http://test.name.com来访问服务，在虚拟主机http://test.name.com下面定义了两个Path，其中/test被分发到后端服务s1，/name被分发到后端服务s2。</a><br>集群中可以定义多个ingress，来完成不同服务的转发，这里需要一个ingress controller来管理集群中的Ingress规则。Ingress Contronler 通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段 Nginx 配置，再写到 Nginx-ingress-control的 Pod 里，这个 Ingress Contronler 的pod里面运行着一个nginx服务，控制器会把生成的nginx配置写入/etc/nginx.conf文件中，然后 reload使用配置生效。</p>
<p>Kubernetes提供的Ingress Controller模板如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line"> <span class="attr">annotations:</span></span><br><span class="line"> <span class="attr">ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">rules:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">foo.bar.com</span></span><br><span class="line"> <span class="attr">http:</span></span><br><span class="line"> <span class="attr">paths:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/foo</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">s1</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/bar</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">s2</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>



<p><a href="https://blog.51cto.com/liuzhengwei521/2427495">https://blog.51cto.com/liuzhengwei521/2427495</a></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>py_day01_exercise</title>
    <url>/2020/08/09/py-day01-exercise/</url>
    <content><![CDATA[<p>温故知新</p>
<a id="more"></a>

<h3 id="1-列举你了解的编码及他们之间的区别？"><a href="#1-列举你了解的编码及他们之间的区别？" class="headerlink" title="1.列举你了解的编码及他们之间的区别？"></a>1.列举你了解的编码及他们之间的区别？</h3><ul>
<li>ASCII: python2默认的编码，一个字母是8位</li>
<li>Unicode(万国码)：一个字母是32位</li>
<li>UTF - 8：万国码的压缩码，最少用一个字节，最多用4个字节，一个中文是三个字节，24<br>位</li>
<li>GBK: 专门用作汉文的编码，其中一个中文用两个字节<blockquote>
<p>注意：用什么格式编写保存文件，就用什么格式打开</p>
</blockquote>
</li>
</ul>
<h3 id="2-Python2和Python3的区别？"><a href="#2-Python2和Python3的区别？" class="headerlink" title="2.Python2和Python3的区别？"></a>2.Python2和Python3的区别？</h3><ul>
<li>编码<ul>
<li>python2默认的编码是ACSII</li>
<li>python3默认的编码是UTF-8,所以开发过程中最好加一句：  # -<em>- coding:utf-8 -</em>-</li>
</ul>
</li>
<li>输入<ul>
<li>python2: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = raw_input(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>python3 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>print<ul>
<li>python2: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>python3 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;123456&quot;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-python都有那些数据类型？"><a href="#3-python都有那些数据类型？" class="headerlink" title="3.python都有那些数据类型？"></a>3.python都有那些数据类型？</h3><p>Python基本数据类型一般分为：数字、字符串、列表、元组、字典、集合</p>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a><strong>数字</strong></h4><p>数字类型是不可更改的对象。对变量改变数字值就是生成/创建新的对象。<br>Python支持多种数字类型：<br>整型(标准整型和长整型(Python2.7及之前的有这种类型))、布尔型、双精度浮点型、十进制浮点型、复数。</p>
<h4 id="标准整型"><a href="#标准整型" class="headerlink" title="标准整型"></a><strong>标准整型</strong></h4><p>int，标准整型，在大多数32位机器上标准整型取值范围是-2^31到2^31-1，也就是-2147483648~2147483647，如果在64位机器使用64位编译器，那么这个系统的标准整型将是64位。</p>
<h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a><strong>布尔型</strong></h4><p>bool，从Python2.3开始Python中添加了布尔类型。布尔类型有两种True和False。对于没有__nozero__方法的对象默认是True。</p>
<p>对于值为0的数字、空集（空列表、空元组、空字典等）在Python中的布尔类型中都是False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a><strong>浮点型</strong></h4><p>float，每个浮点型占8个字节（64位），完全遵守IEEE754号规范（52M/11E/1S）,其中52个位用于表示底，11个位用于表示指数（可表示的范围大约是±10**308.25），剩下的一个位表示符号。这看上去相当完美，然而，实际精度依赖于机器架构和创建Python解释器的编译器。</p>
<p>浮点型值通常都有一个小数点和一个可选的后缀e（大写或小写，表示科学计数法）。在e和指数之间可以用正（+）或负（-）表示指数的正负（正数的话可以省略符号）。更多内容，请点击python学习网。</p>
<p>以上是Python核心编程的对浮点型(双精度浮点型)的说明。经过Python实测浮点型默认长度是24字节如果超出这个范围会自动</p>
<p>复数类型</p>
<p>complex，在复数中虚数不能单独存在，它们总是和一个值为0.0的实数部分一起来构成一个复数。<br>复数由实数部分和虚数部分构成。<br>表示虚数的语法：real+imagj。<br>实数部分和虚数部分都是浮点型。<br>虚数部分必须有后缀j或J。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h4><p>字符串(string)是不可变类型，就是说改变一个字符串的元素需要新建一个新的字符串。字符串是由独立的字符组成的，并且这些字符可以通过切片操作顺序地访问。Python里面通过在引号间包含字符的方式创建字符串，单引号和双引号的作用是相同的。</p>
<p>Python用“原始字符串”操作符来创建直接量字符串，所以再做区分就没什么意义了。其他的语言，比如C语言里面用单引号来标示字符，双引号标示字符串，而在Python里面没有字符这个类型。这可能是双引号和单引号在Python里面被视作一样的另一个原因。</p>
<p>Python实际上有三类字符串。通常意义的字符串（str） 和Unicode字符串（unicode） 实际上都是抽象类basestring的子类。这个basestring是不能实例化的。</p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h4><p>列表(list)像字符串类型一样，列表类型也是序列式的数据类型。字符串只能由字符组成，而且是不可变的（不能单独改变它的某个值），而列表则是能保留任意数目的Python对象的灵活的容器。</p>
<p>列表不仅可以包含Python的标准类型，而且可以用用户定义的对象作为自己的元素。列表可以包含不同类型的对象，而且要比C或者Python自己的数组类型（包含在array扩展包中）都要灵活，因为数组类型所有的元素只能是一种类型。列表可以执行pop,sort、reverse等操作。列表也可以添加或者减少元素，还可以跟其他的列表结合或者把一个列表分成几个。可以对单独一个元素或者多个元素执行insert、update或remove操作。</p>
<h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a><strong>元组</strong></h4><p>元组类型在很多操作上都跟列表一样，许多用在列表上的例子在元组上照样能跑，我们有一节内容专门讲解元组类型。它们的主要不同在于元组是不可变的，或者说是只读的，所以那些用于更新列表的操作，比如用切片操作来更新一部分元素的操作，就不能用于元组类型。</p>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a><strong>字典</strong></h4><p>字典是Python语言中唯一的映射类型。映射类型对象里哈希值（键，key） 和指向的对象（值。value） 是一对多的关系。一个字典对象是可变的，它是一个容器类型，能存储任意个数的Python对象，其中也包括其他容器类型。字典类型和序列类型容器类（列表、元组） 的区别是存储和访问数据的方式不同。序列类型只用数字类型的键（从序列的开始起按数值顺序索引） 。映射类型可以用其他对象类型做键，一般最常见的是用字符串做键。和序列类型的键不同，映像类型的键直接或间接地和存储的数据值相关联。但因为在映射类型中，我们不再用“序列化排序”的键，所以映像类型中的数据是无序排列的映射类型不要求用数字值做索引以从一个容器中获取对应的数据项。你可以用键直接“映射”到值，这就是为什么叫映射类型（“mappingtype”） 的原因。映射类型通常被称做哈希表，是因为字典对象就是哈希类型的。字典是Python中最强大的数据类型之一。</p>
<p>字典常见的操作有：字典创建、字典赋值、字典中值的访问、字典更新、字典元素删除等操作。</p>
<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a><strong>集合</strong></h4><p>集合最早出现在Python2.3版本中，通过集合模块来创建，并通过ImmutableSet类和Set类进行访问。</p>
<p>集合有两种不同的类型，可变集合（set）和不可变集合（frozenset）。可变集合，你可以添加和删除元素，对不可变集合则不允许这样做。请注意，可变集合不是可哈希的，因此既不能用做字典的键也不能做其他集合中的元素。不可变集合则正好相反，即，他们有哈希值，能被用做字典的键或是作为集合中的一个成员。集合对象是一组无序排列的可哈希的值。</p>
<p>集合支持用in和not in操作符检查成员，由len()内建函数得到集合的基数（大小） ，用for循环迭代集合的成员。但是因为集合本身是无序的，你不可以为集合创建索引或执行切片（slice） 操作，也没有键可用来获取集合中元素的值。</p>
<h3 id="4-补充代码，实现以下功能"><a href="#4-补充代码，实现以下功能" class="headerlink" title="4.补充代码，实现以下功能"></a>4.补充代码，实现以下功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = <span class="string">&#x27;51devops&quot;niubi&#x27;</span></span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure>
<h3 id="5-用print打印出下面内容："><a href="#5-用print打印出下面内容：" class="headerlink" title="5.用print打印出下面内容："></a>5.用print打印出下面内容：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">⽂能提笔安天下,</span></span><br><span class="line"><span class="string">武能上⻢定乾坤.</span></span><br><span class="line"><span class="string">⼼存谋略何⼈胜,</span></span><br><span class="line"><span class="string">古今英雄唯是君。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="6-变量名的命名规范和建议？"><a href="#6-变量名的命名规范和建议？" class="headerlink" title="6.变量名的命名规范和建议？"></a>6.变量名的命名规范和建议？</h3><blockquote>
<ol>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名的第一个字符不能是数字</li>
<li>关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li>
</ol>
</blockquote>
<h3 id="7-如下那个变量名是正确的？"><a href="#7-如下那个变量名是正确的？" class="headerlink" title="7.如下那个变量名是正确的？"></a>7.如下那个变量名是正确的？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name &#x3D; &#39;51devops&#39;  ✔️</span><br><span class="line">_ &#x3D; &#39;echo&#39;         ✔️</span><br><span class="line">_9 &#x3D; &quot;zhangsan&quot;    ✔️</span><br><span class="line">9name &#x3D; &quot;xxx&quot;      ×</span><br><span class="line">devops(edu &#x3D; 666   ×</span><br></pre></td></tr></table></figure>

<h3 id="8-简述你了解if条件语句的基本结构。"><a href="#8-简述你了解if条件语句的基本结构。" class="headerlink" title="8.简述你了解if条件语句的基本结构。"></a>8.简述你了解if条件语句的基本结构。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br><span class="line">(2)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">elif 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br><span class="line">(3)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>

<h3 id="9-设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确。"><a href="#9-设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确。" class="headerlink" title="9.设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确。"></a>9.设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line"></span><br><span class="line">num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">    print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">    print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="10-写程序，成绩有ABCDE5个等级，与分数的对应关系如下"><a href="#10-写程序，成绩有ABCDE5个等级，与分数的对应关系如下" class="headerlink" title="10.写程序，成绩有ABCDE5个等级，与分数的对应关系如下."></a>10.写程序，成绩有ABCDE5个等级，与分数的对应关系如下.</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">grade = int(input(<span class="string">&quot;请输入分数:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> grade &gt;= <span class="number">100</span> <span class="keyword">or</span> grade &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&#x27;请输入正确分数:0-100&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">90</span> &lt;= grade &lt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= grade &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= grade &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">40</span> &lt;= grade &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;E&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="11-模拟10086客服电话（条件语句的嵌套）"><a href="#11-模拟10086客服电话（条件语句的嵌套）" class="headerlink" title="11.模拟10086客服电话（条件语句的嵌套）"></a>11.模拟10086客服电话（条件语句的嵌套）</h3><hr>
<h3 id="1-猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确，然后退出循环。"><a href="#1-猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确，然后退出循环。" class="headerlink" title="1.猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确，然后退出循环。"></a>1.猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确，然后退出循环。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="2-在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。"><a href="#2-在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。" class="headerlink" title="2.在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。"></a>2.在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">    num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;太笨了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-使用两种方法实现输出-1-2-3-4-5-6-8-9-10"><a href="#3-使用两种方法实现输出-1-2-3-4-5-6-8-9-10" class="headerlink" title="3.使用两种方法实现输出 1 2 3 4 5 6 8 9 10"></a>3.使用两种方法实现输出 1 2 3 4 5 6 8 9 10</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(n)</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">7</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="4-求1-100的所有数的和"><a href="#4-求1-100的所有数的和" class="headerlink" title="4.求1-100的所有数的和"></a>4.求1-100的所有数的和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    res += n</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="5-输出-1-100-内的所有奇数"><a href="#5-输出-1-100-内的所有奇数" class="headerlink" title="5.输出 1-100 内的所有奇数"></a>5.输出 1-100 内的所有奇数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="6-输出-1-100-内的所有偶数"><a href="#6-输出-1-100-内的所有偶数" class="headerlink" title="6.输出 1-100 内的所有偶数"></a>6.输出 1-100 内的所有偶数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="7-求1-2-3-4-5-…-99的所有数的和"><a href="#7-求1-2-3-4-5-…-99的所有数的和" class="headerlink" title="7.求1-2+3-4+5 … 99的所有数的和"></a>7.求1-2+3-4+5 … 99的所有数的和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        res += n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res -= n</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h3 id="8-⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）"><a href="#8-⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）" class="headerlink" title="8.⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）"></a>8.⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">user = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">passwd = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    valid_user = input(<span class="string">&#x27;请输入用户名:&#x27;</span>)</span><br><span class="line">    valid_passwd = input(<span class="string">&#x27;请输入密码:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> valid_user == user <span class="keyword">and</span> valid_passwd == passwd:</span><br><span class="line">        print(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;用户名或密码错误(剩余尝试次数: %s次)&quot;</span> %(count))</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br></pre></td></tr></table></figure>

<h3 id="9-猜年龄游戏"><a href="#9-猜年龄游戏" class="headerlink" title="9.猜年龄游戏"></a>9.猜年龄游戏</h3><p>要求：允许用户最多尝试3次，3次都没猜对的话，就直接退出，如果猜对了，打印恭喜信息并退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#年龄</span></span><br><span class="line">age = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">&#x27;猜猜我的年龄:&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess_age &gt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess_age &lt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="10-猜年龄游戏升级版"><a href="#10-猜年龄游戏升级版" class="headerlink" title="10.猜年龄游戏升级版"></a>10.猜年龄游戏升级版</h3><p>要求：允许用户最多尝试3次，每尝试3次后，如果还没猜对，就问用户是否还想继续玩，如果回答Y，就继续让其猜3次，以此往复，如果回答N，就退出程序，如何猜对了，就直接退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#年龄</span></span><br><span class="line">age = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">&#x27;猜猜我的年龄:&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess_age &gt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess_age &lt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        chance = input(<span class="string">&#x27;Do you want continue(Y/N):&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> chance == <span class="string">&#x27;Y&#x27;</span> <span class="keyword">or</span> chance == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            count = <span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> chance == <span class="string">&#x27;N&#x27;</span> <span class="keyword">or</span> chance == <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;pls input correct choice&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-写代码，有如下列表，按照要求实现每一个功能。"><a href="#1-写代码，有如下列表，按照要求实现每一个功能。" class="headerlink" title="1.写代码，有如下列表，按照要求实现每一个功能。"></a>1.写代码，有如下列表，按照要求实现每一个功能。</h3><p>li = [“pounds”, “szk”, “haoda”, “barry”, “devops”]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算列表的长度并输出</span></span><br><span class="line">print(len(li))</span><br><span class="line"></span><br><span class="line"><span class="comment">#请通过步长获取索引为偶数的所有值，并打印出获取后的列表</span></span><br><span class="line">print(li[::<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表中追加元素”seven”,并输出添加后的列表</span></span><br><span class="line">li.append(<span class="string">&quot;seven&quot;</span>)</span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请在列表的第1个位置插入元素”Tony”,并输出添加后的列表</span></span><br><span class="line">li.insert(<span class="number">1</span>,<span class="string">&quot;Tony&quot;</span>)</span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请修改列表第2个位置的元素为”Kelly”,并输出修改后的列表</span></span><br><span class="line">li[<span class="number">2</span>] = <span class="string">&quot;Kelly&quot;</span></span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请删除列表中的元素”haoda”,并输出添加后的列表</span></span><br><span class="line">li.remove(<span class="string">&quot;haoda&quot;</span>)</span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请删除列表中的第2个元素，并输出删除元素后的列表</span></span><br><span class="line">li.pop(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># del li[2]</span></span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请删除列表中的第2至第4个元素，并输出删除元素后的列表</span></span><br><span class="line"><span class="keyword">del</span> li[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure>

<h3 id="2-写代码，有如下列表，利用切片实现每一个功能"><a href="#2-写代码，有如下列表，利用切片实现每一个功能" class="headerlink" title="2.写代码，有如下列表，利用切片实现每一个功能"></a>2.写代码，有如下列表，利用切片实现每一个功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>, <span class="number">4</span>, <span class="string">&quot;b&quot;</span>, <span class="number">5</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [1,3,2]</span></span><br><span class="line">new_list = li[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [“a”,4,”b”]</span></span><br><span class="line">new_list = li[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [1,2,4,5]</span></span><br><span class="line">new_list = li[::<span class="number">2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [3,”a”,”b”]</span></span><br><span class="line">new_list = li[<span class="number">1</span>:<span class="number">-2</span>:<span class="number">2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [3,”a”,”b”,”c”]</span></span><br><span class="line">new_list = li[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [“c”]</span></span><br><span class="line">new_list = li[<span class="number">-1</span>:]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [“b”,”a”,3]</span></span><br><span class="line">new_list = li[<span class="number">-3</span>::<span class="number">-2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-写代码，有如下列表，按照要求实现每一个功能。"><a href="#3-写代码，有如下列表，按照要求实现每一个功能。" class="headerlink" title="3.写代码，有如下列表，按照要求实现每一个功能。"></a>3.写代码，有如下列表，按照要求实现每一个功能。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;k&quot;</span>, [<span class="string">&quot;qwe&quot;</span>, <span class="number">20</span>, [<span class="string">&quot;k1&quot;</span>, [<span class="string">&quot;tt&quot;</span>, <span class="number">3</span>, <span class="string">&quot;1&quot;</span>]], <span class="number">89</span>], <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;adv&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表lis中的”k”变成大写，并打印列表。</span></span><br><span class="line">lis[<span class="number">2</span>] = lis[<span class="number">2</span>].upper()</span><br><span class="line">lis[<span class="number">2</span>] = <span class="string">&quot;K&quot;</span></span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#将列表中的数字3变成字符串”100”</span></span><br><span class="line">lis[<span class="number">1</span>] = <span class="string">&quot;100&quot;</span></span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#将列表中的字符串”tt”变成数字 101</span></span><br><span class="line">lis[<span class="number">3</span>][<span class="number">2</span>][<span class="number">0</span>] = <span class="number">101</span></span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#在 “qwe”前面插入字符串：”火车头”</span></span><br><span class="line">lis[<span class="number">3</span>].insert(<span class="number">0</span>,<span class="string">&quot;火车头&quot;</span>)</span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>


<h3 id="4-请用代码实现循环输出元素和值：users-“szk”-”pounds”-”波姐”-，如："><a href="#4-请用代码实现循环输出元素和值：users-“szk”-”pounds”-”波姐”-，如：" class="headerlink" title="4.请用代码实现循环输出元素和值：users = [“szk”,”pounds”,”波姐”] ，如："></a>4.请用代码实现循环输出元素和值：users = [“szk”,”pounds”,”波姐”] ，如：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="string">&quot;szk&quot;</span>,<span class="string">&quot;pounds&quot;</span>,<span class="string">&quot;波姐&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx,value <span class="keyword">in</span> enumerate(users):</span><br><span class="line">    print(idx,value)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-写代码实现以下功能"><a href="#5-写代码实现以下功能" class="headerlink" title="5.写代码实现以下功能"></a>5.写代码实现以下功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如有变量 googs = [‘汽车’,’飞机’,’火箭’] 提示用户可供选择的商品：用户输入索引后，将指定商品的内容拼接打印，如：用户输入0，则打印 您选择的商品是汽车。</span></span><br><span class="line">goods = [<span class="string">&#x27;汽车&#x27;</span>,<span class="string">&#x27;飞机&#x27;</span>,<span class="string">&#x27;火箭&#x27;</span>]</span><br><span class="line">tag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> tag:</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(goods):</span><br><span class="line">        print(<span class="string">&quot;编号:%s   商品名称: %s&quot;</span> %(k,v))</span><br><span class="line">    choice = int(input(<span class="string">&quot;输入商品编号:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> choice &gt;= <span class="number">0</span> <span class="keyword">and</span> choice &lt; <span class="number">3</span>:</span><br><span class="line">        print(goods[choice])</span><br><span class="line">        tag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;商品编号输入错误&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6-请用代码实现"><a href="#6-请用代码实现" class="headerlink" title="6.请用代码实现"></a>6.请用代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = <span class="string">&quot;szk&quot;</span></span><br><span class="line"><span class="comment">#转成列表</span></span><br><span class="line">convert_list = list(li)</span><br><span class="line">print(convert_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转成字符串</span></span><br><span class="line">convert_str = <span class="string">&quot;_&quot;</span>.join(convert_list)</span><br><span class="line">print(convert_str,type(convert_str))</span><br></pre></td></tr></table></figure>

<h3 id="8-利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中"><a href="#8-利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中" class="headerlink" title="8.利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中"></a>8.利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        new_list.append(num)</span><br><span class="line"></span><br><span class="line">print(new_list)</span><br></pre></td></tr></table></figure>


<h3 id="9-利用for循环和range-找出50以内能被3整除的数，并将这些数插入到一个新列表中"><a href="#9-利用for循环和range-找出50以内能被3整除的数，并将这些数插入到一个新列表中" class="headerlink" title="9.利用for循环和range 找出50以内能被3整除的数，并将这些数插入到一个新列表中"></a>9.利用for循环和range 找出50以内能被3整除的数，并将这些数插入到一个新列表中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        new_list.append(num)</span><br><span class="line"></span><br><span class="line">print(new_list)</span><br></pre></td></tr></table></figure>
<h3 id="10-利用for循环和range从100-1，倒序打印"><a href="#10-利用for循环和range从100-1，倒序打印" class="headerlink" title="10.利用for循环和range从100~1，倒序打印"></a>10.利用for循环和range从100~1，倒序打印</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">num_list = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    num_list.append(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#倒序</span></span><br><span class="line">num_list.reverse()</span><br><span class="line"></span><br><span class="line">print(num_list)</span><br></pre></td></tr></table></figure>
<h3 id="11-利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。"><a href="#11-利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。" class="headerlink" title="11.利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。"></a>11.利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">list_3 = []</span><br><span class="line">list_4 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">31</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        list_3.append(num)</span><br><span class="line">    <span class="keyword">elif</span> num % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">        list_4.append(num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">print(list_3)</span><br><span class="line">print(list_4)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python_exercise</category>
      </categories>
      <tags>
        <tag>python_exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day02</title>
    <url>/2020/08/16/py-day02/</url>
    <content><![CDATA[<p>python基础<br>列表 字典 集合 元祖<br>对文件操作<br>函数  函数(位置参数， 关键字参数， 默认参数)</p>
<a id="more"></a>

<ul>
<li><p>python的基础数据结构</p>
<ul>
<li>整型     1，2，3，</li>
<li>字符串  <ul>
<li>单引号  ‘hello’</li>
<li>双引号  “hello”</li>
<li>三引号  “”””””</li>
</ul>
</li>
<li>布尔类型<ul>
<li>True  </li>
<li>False  0,None,’’ 都为假 注意的是：js true false</li>
</ul>
</li>
</ul>
</li>
<li><p>python的变量</p>
<ul>
<li>变量的作用：保存中间结果    num = 1+2+3    </li>
<li>变量的命名规范：<ul>
<li>PEP8规范</li>
<li>等于号的左右两边是要有空格的</li>
<li><strong>变量名一定要有意义</strong>  name = “szk”</li>
<li>变量的几种风格  ： 大驼峰，小驼峰，下划线</li>
<li>变量命名规范：不能使用关键字命名，不能以数字开头</li>
</ul>
</li>
</ul>
</li>
<li><p>字符串的用法</p>
<ul>
<li>split(‘:’) :   name = “szk_age”  name.split(‘_’)   非常重要的一个字符串用法</li>
<li>字符串的格式化： <ul>
<li>%  例子： “曾老师是一个 %s” % （‘大萨达撒‘）</li>
<li>format 例子： “今天天气不错， 看电影 {}”.format(‘xxxxx’)</li>
<li>format 例子： “曾老师性别{sex}, 年龄 {age}”.format(sex=’男’, age=73)</li>
</ul>
</li>
<li>索引：任何语言中的索引，都是从0开始的  name = ‘szk’</li>
<li>切片：就是从一整个元素中切出想要的元素 name = ‘51aiops’ , 可以根据索引来进行切割 <ul>
<li>name[2:6]  索引的原则：前包后不包 </li>
</ul>
</li>
</ul>
</li>
<li><p>流程控制</p>
<ul>
<li>顺序<ul>
<li>代码从上到下依次执行</li>
</ul>
</li>
<li>分支<ul>
<li>if elif else</li>
<li>elif 可以写多个，而if和else只能写一次</li>
<li><strong>如果有多个分支条件的话，当命中一个条件之后，就会退出整个分支语句</strong></li>
</ul>
</li>
<li>循环<ul>
<li>while  条件: 项目中，用的比较少，算法的时候比较多<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;else包含的代码会再while循环结束后，没有被break打断的情况下，else代码会运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Tag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> Tag:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> Tag:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">while</span> Tag:</span><br><span class="line">            ...</span><br><span class="line">            Tag = <span class="literal">False</span></span><br><span class="line">用于退出循环，但是还会执行tag后续代码</span><br></pre></td></tr></table></figure></li>
<li>for  项目中用的比较多<br>range在py2中是列表，py3中是个迭代器，更省资源<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>循环嵌套：外层循环一次，内层循环需要完整的循环完毕</span><br><span class="line"><span class="keyword">for</span> i range(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">&#x27;外层循环‘)</span></span><br><span class="line"><span class="string">    for j in range(5):</span></span><br><span class="line"><span class="string">        print(&#x27;</span>内层循环<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li>input</li>
<li>条件语句和运算符</li>
<li>赋值运算符 ： <ul>
<li>a = 10   a = a - 1 a += 1   a += 1 ===&gt; a = a - 1</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a><div id="title">今日内容</div></h4><h5 id="1-python基础数据类型之列表和元组"><a href="#1-python基础数据类型之列表和元组" class="headerlink" title="1. python基础数据类型之列表和元组"></a>1. python基础数据类型之列表和元组</h5><ul>
<li><p>列表   其他语言叫数组</p>
<ul>
<li><p>定义：用来存储比较复杂的数据 </p>
</li>
<li><p>用法：name_list = [‘老陈’, ‘老赵’,  ‘文亮’] </p>
</li>
<li><p>定义2： name_list = list() </p>
</li>
<li><p>增删改查  常用的方法： remove， pop， append，for循环 改索引</p>
<p>pop, remove，和del的区别：</p>
</li>
<li><p>pop弹出，弹出之后的元素是可以赋值给其他变量用的</p>
</li>
<li><p>remove和del, 直接删除元素</p>
</li>
<li><p>remove就是通过值删除这个元素</p>
</li>
<li><p>del 通过索引来删除值</p>
<p>pop 是弹出，后面可以引用，remove，del好像是直接删除    </p>
</li>
</ul>
</li>
<li><p>列表的切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;陈羽凡&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>, <span class="string">&#x27;xxxx&#x27;</span>, <span class="string">&#x27;波多老师&#x27;</span>]</span><br><span class="line">                <span class="comment"># 0      1       2        3       4</span></span><br><span class="line">                <span class="comment"># -5    -4       -3      -2       -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 通过索引下标来获取子列表</span></span><br><span class="line"><span class="comment">### 符合前包后不包的原则</span></span><br><span class="line">users = user_list[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">print(users)</span><br><span class="line">users = user_list[:]  <span class="comment">### 表示的是 从头切到尾</span></span><br><span class="line">users = user_list[<span class="number">2</span>:] <span class="comment">### 表示的是 从2 开始切到结尾</span></span><br><span class="line">users = user_list[:<span class="number">4</span>] <span class="comment">## 从头开始切</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表的循环</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### for循环打印</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&#x27;尼古拉斯赵四&#x27;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> user_list:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(user_list):</span><br><span class="line">    print(i, v)</span><br></pre></td></tr></table></figure>
<p><strong>只需要元素，则使用第一种循环， 若需要索引下标，则使用第二种循环</strong></p>
<ul>
<li>列表和字符串的互相转换<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 1.字符串转列表</span></span><br><span class="line">name = <span class="string">&quot;hello_world&quot;</span></span><br><span class="line">names = name.split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(names)<span class="comment">#### [&#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 2. 列表转字符串</span></span><br><span class="line">names_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&#x27;尼古拉斯赵四&#x27;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### 将上述元素通过下划线拼接成字符串</span></span><br><span class="line">res = <span class="string">&#x27;_&#x27;</span>.join(names_list)</span><br><span class="line">print(res, type(res))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>列表的增删改查，下去复习列表的基本操作的时候，遵循这个增删改查的原则</strong></p>
<h5 id="2-python的基础数据类型之字典和集合"><a href="#2-python的基础数据类型之字典和集合" class="headerlink" title="2. python的基础数据类型之字典和集合"></a>2. python的基础数据类型之字典和集合</h5><p><strong>字典和列表一样的重要</strong></p>
<p>python里叫字典，而其他语言java： 哈希table   hashtable</p>
<p>定义方式：</p>
<p>最长用的两种</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">第一种：</span><br><span class="line"><span class="comment"># info = &#123;</span></span><br><span class="line"><span class="comment">#     &quot;name&quot;: &#x27;szk&#x27;,</span></span><br><span class="line"><span class="comment">#     &quot;age&quot; : 18,</span></span><br><span class="line"><span class="comment">#     &quot;height&quot;: 180</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">user_info = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;陈顺阳&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">30</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;杜峰&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">32</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;pounds&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">32</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>字典的增删改查（crud）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">info = &#123;<span class="string">&quot;age&quot;</span>:<span class="number">12</span>, <span class="string">&quot;status&quot;</span>:<span class="literal">True</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;szk&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;xx@live.com&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 1.获取字典的键</span></span><br><span class="line"><span class="comment"># keys = info.keys()</span></span><br><span class="line"><span class="comment"># for k in keys:</span></span><br><span class="line"><span class="comment">#     print(k)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ### 2. 获取字典的所有值</span></span><br><span class="line"><span class="comment"># values = info.values()</span></span><br><span class="line"><span class="comment"># for v in values:</span></span><br><span class="line"><span class="comment">#     print(v)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3.要获取字典的值又要获取字典的key, 非常重要的方法</span></span><br><span class="line"><span class="comment"># for k, v in info.items():</span></span><br><span class="line"><span class="comment">#     print(k, v)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 根据键来获取值  重要</span></span><br><span class="line"><span class="comment"># print(info[&#x27;height&#x27;])</span></span><br><span class="line">data = info.get(<span class="string">&quot;height&quot;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment"># 根据name为键去info字典中获取对应的值，如果不存在则返回None，存在则返回值。</span></span><br><span class="line">print(data) <span class="comment"># 输出：None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 4.更新键值对</span></span><br><span class="line"><span class="comment"># info2 = &#123;&quot;age&quot;:12, &quot;status&quot;:True&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># info2.update(age=14, name=&#x27;szk&#x27;) </span></span><br><span class="line"><span class="comment"># info.update(dic)</span></span><br><span class="line"><span class="comment">### 如果key存在的话，就会更新原有的值，若不存在，将这个name值加入info2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 5.增加</span></span><br><span class="line"><span class="comment"># info2[&#x27;name&#x27;] = &#x27;szk&#x27; ###向字典中添加一个元素</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(info2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 6.删除</span></span><br><span class="line">info2 = &#123;<span class="string">&quot;age&quot;</span>:<span class="number">12</span>, <span class="string">&quot;status&quot;</span>:<span class="literal">True</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;szk&quot;</span>&#125;</span><br><span class="line"><span class="comment"># data = info2.pop(&quot;age&quot;) ### 根据键来删除元素,返回值</span></span><br><span class="line"><span class="comment"># data = info2.popitem:随机删除，返回元祖（key，value）</span></span><br><span class="line"><span class="keyword">del</span> info2[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">print(info2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 7.get</span></span><br><span class="line">d.get():根据key取值，容错性好</span><br><span class="line"><span class="comment">### 8.setdefault</span></span><br><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>&#125;</span><br><span class="line">d.setdefault(<span class="string">&#x27;k1&#x27;</span>,<span class="number">222</span>)</span><br><span class="line"><span class="comment"># 8.1 如果key存在则不添加，返回字典中key 的值</span></span><br><span class="line"><span class="comment"># 8.2 如果key没有则添加，返回字典中key对应的值</span></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">info.setdefault(<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>集合的特性<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 2.交集</span></span><br><span class="line">s1 = &#123;<span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&quot;刘科⻓&quot;</span>, <span class="string">&quot;冯乡⻓&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s3 = s1 &amp; s2                 <span class="comment"># 方式一：取两个集合的交集</span></span><br><span class="line">s4 = s1.intersection(s2) <span class="comment"># 方</span></span><br><span class="line"></span><br><span class="line">print(s3, s4)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 3.并集</span></span><br><span class="line">s1 = &#123;<span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&quot;刘科⻓&quot;</span>, <span class="string">&quot;冯乡⻓&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s3 = s1 | s2               <span class="comment"># 方式一：取两个集合的并集</span></span><br><span class="line">s4 = s1.union(s2)</span><br><span class="line"></span><br><span class="line">print(s3, s4)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4.差集</span></span><br><span class="line">s1 = &#123;<span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&quot;刘科⻓&quot;</span>, <span class="string">&quot;冯乡⻓&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s3 = s1 - s2                       <span class="comment"># 方式一：差集，s1中有且s2中没有的值</span></span><br><span class="line">s4 = s1.difference(s2)         <span class="comment"># 方式二：差集，s1中有且s2中没有的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>列表和集合的转换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">99</span>,<span class="number">22</span>]</span><br><span class="line">s1 = set(v1)</span><br><span class="line">l1 = list(s1)</span><br><span class="line">print(l1)</span><br></pre></td></tr></table></figure>

<h5 id="3-元祖"><a href="#3-元祖" class="headerlink" title="3.元祖"></a>3.元祖</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 作用：按照索引/位置存放多个值，只用于读不用于改</span></span><br><span class="line"><span class="comment">#2. 定义：()内用逗号分隔开多个任意类型的元素</span></span><br></pre></td></tr></table></figure>
<p>不可变列表<br>x = (10,)   # 要习惯加,</p>
<ul>
<li>类型转换<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(tuple(&#39;hello&#39;))</span><br><span class="line">print(tuple([1,2,3])</span><br><span class="line">print(tuple(&#123;&#39;a1&#39;:111,&#39;a2&#39;:333&#125;) &#x3D; (&#39;a1&#39;, &#39;a2&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="3-python对文件的操作"><a href="#3-python对文件的操作" class="headerlink" title="3. python对文件的操作"></a>3. python对文件的操作</h5><blockquote>
<p>主要学习就是文件打开的几种模式，项目中涉及到就是文件上传和下载</p>
</blockquote>
<p>主要的文件打开方式：</p>
<p>模式： w, r, r+<br>方法： open, close, read, write<br>上下文管理器：推崇的方式with</p>
<ul>
<li><p>with方法读写文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;a.txt&#39;,&#39;r&#39;) as read_f,open(&#39;b.txt&#39;,&#39;w&#39;) as write_f:</span><br><span class="line">    data&#x3D;read_f.read()</span><br><span class="line">    write_f.write(data)</span><br><span class="line">文件以什么方式存的，就要以什么方式打开。没有指定，就以操作系统为准</span><br><span class="line">f&#x3D;open(&#39;a.txt&#39;,&#39;r&#39;,encoding&#x3D;&#39;utf-8&#39;)</span><br></pre></td></tr></table></figure></li>
<li><p>循环读取每一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;b.txt&#39;, mode&#x3D;&#39;rt&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        print(line)</span><br><span class="line">for循环遍历，实际上是返回一个迭代器，并不断调用其next()方法的过程。next()返回什么，取决于迭代器的具体实现，对于str类型来说，就返回下一个字符串；对于file类型来说，就返回下一行。</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开文件模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. 打开文件的模式有(默认为文本模式)：</span><br><span class="line">r ，只读模式【默认模式，文件必须存在，不存在则抛出异常】</span><br><span class="line">w，只写模式【不可读；不存在则创建；存在则清空内容】</span><br><span class="line">a， 之追加写模式【不可读；不存在则创建；存在则只追加内容】</span><br><span class="line"></span><br><span class="line">#2. 对于非文本文件，我们只能使用b模式，&quot;b&quot;表示以字节的方式操作（而所有文件也都是以字节的形式存储的，使用这种模式无需考虑文本文件的字符编码、图片文件的jgp格式、视频文件的avi格式）</span><br><span class="line">rb </span><br><span class="line">wb</span><br><span class="line">ab</span><br><span class="line">注：以b方式打开时，读取到的内容是字节类型，写入时也需要提供字节类型，不能指定编码</span><br><span class="line"></span><br><span class="line">#3. 了解部分</span><br><span class="line">&quot;+&quot; 表示可以同时读写某个文件</span><br><span class="line">r+， 读写【可读，可写】</span><br><span class="line">w+，写读【可读，可写】</span><br><span class="line">a+， 写读【可读，可写】</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x， 只写模式【不可读；不存在则创建，存在则报错】</span><br><span class="line">x+ ，写读【可读，可写】</span><br><span class="line">xb</span><br></pre></td></tr></table></figure></li>
<li><p>操作文件的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#掌握</span><br><span class="line">f.read() #读取所有内容,光标移动到文件末尾</span><br><span class="line">f.readline() #读取一行内容,光标移动到第二行首部</span><br><span class="line">f.readlines() #读取每一行内容,存放于列表中</span><br><span class="line"></span><br><span class="line">f.write(&#39;1111\n222\n&#39;) #针对文本模式的写,需要自己写换行符</span><br><span class="line">f.write(&#39;1111\n222\n&#39;.encode(&#39;utf-8&#39;)) #针对b模式的写,需要自己写换行符</span><br><span class="line">f.writelines([&#39;333\n&#39;,&#39;444\n&#39;]) #文件模式</span><br><span class="line">f.writelines([bytes(&#39;333\n&#39;,encoding&#x3D;&#39;utf-8&#39;),&#39;444\n&#39;.encode(&#39;utf-8&#39;)]) #b模式</span><br><span class="line"></span><br><span class="line">#了解</span><br><span class="line">f.readable() #文件是否可读</span><br><span class="line">f.writable() #文件是否可读</span><br><span class="line">f.closed #文件是否关闭</span><br><span class="line">f.encoding #如果文件打开模式为b,则没有该属性</span><br><span class="line">f.flush() #立刻将文件内容从内存刷到硬盘</span><br><span class="line">f.name</span><br></pre></td></tr></table></figure>
<h5 id="3-1文件指针"><a href="#3-1文件指针" class="headerlink" title="3.1文件指针"></a>3.1文件指针</h5><blockquote>
<p>控制文件内指针移动的单位：只有t模式下的read(n)代表字符个数，除此之外全是字节个数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件内容：hello哈哈哈</span><br><span class="line"># with open(&#39;a.txt&#39;, mode&#x3D;&#39;rt&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">#     res &#x3D; f.read(6)</span><br><span class="line">#     print(res)</span><br><span class="line">#</span><br><span class="line"># with open(&#39;a.txt&#39;, mode&#x3D;&#39;rb&#39;) as f:</span><br><span class="line">#     res &#x3D; f.read(8)</span><br><span class="line">#     print(res.decode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>seek控制光标三种移动方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主动控制文件指针的移动</span><br><span class="line">0：t:参照文件开头移动n个字符  b:参照文件开头移动n个字节</span><br><span class="line">f.seek(3,0)</span><br><span class="line"></span><br><span class="line">1：参照当前位置移动n个字节</span><br><span class="line">f.seek(3,1)</span><br><span class="line"></span><br><span class="line">2：参照末尾位置移动n个字节</span><br><span class="line">f.seek(3,1)</span><br><span class="line">文件末尾</span><br><span class="line">a，f.seek(0,2)</span><br><span class="line"></span><br><span class="line"># ps: 只有0模式可以在t下使用，1和2只能在b</span><br></pre></td></tr></table></figure></li>
<li><p>移动到文件末尾的两种方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.a+</span><br><span class="line">2.f.seek(0,2)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>基于seek实现’tail -f’功能<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">with open(&#39;access.log&#39;, mode&#x3D;&#39;rb&#39;) as f:</span><br><span class="line">    f.seek(0,2)</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        line &#x3D; f.readline()</span><br><span class="line">        if len(line) &#x3D;&#x3D; 0:</span><br><span class="line">            time.sleep(0.3)</span><br><span class="line">        else:</span><br><span class="line">            print(&#39;x&#39;)</span><br><span class="line">            print(line.decode(&#39;utf-8&#39;),end&#x3D;&#39;&#39;)</span><br></pre></td></tr></table></figure>
<h5 id="3-2文件修改的两种方式"><a href="#3-2文件修改的两种方式" class="headerlink" title="3.2文件修改的两种方式"></a>3.2文件修改的两种方式</h5></li>
<li>方式一：将硬盘存放的该文件的内容全部加载到内存，在内存中是可以修改的，修改完毕后，再由内存覆盖到硬盘（word，vim，nodpad++等编辑器）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;b.txt&#39;, mode&#x3D;&#39;rt&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    data &#x3D; f.read()</span><br><span class="line">    res &#x3D; data.replace(&#39;egon&#39;, &#39;EGON&#39;)</span><br><span class="line">with open(&#39;b.txt&#39;, mode&#x3D;&#39;wt&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    f.write(res)</span><br></pre></td></tr></table></figure></li>
<li>方式二：将硬盘存放的该文件的内容一行一行地读入内存，修改完毕就写入新文件，最后用新文件覆盖源文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.以读的方式打开源文件，以写的方式打开一个临时文件</span><br><span class="line">2.从源文件中读出一行内容到内存中，修改完毕后再写入临时文件，循环往复直到读完源文件</span><br><span class="line">3.删除源文件，将临时文件改名为源文件名</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">with open(&#39;b.txt&#39;, mode&#x3D;&#39;rt&#39;, encoding&#x3D;&#39;utf-8&#39;) as src_f,\</span><br><span class="line">    open(&#39;.b.txt.swp&#39;,mode&#x3D;&#39;a+t&#39;) as dst_f:</span><br><span class="line">    for line in src_f:</span><br><span class="line">        dst_f.write(line.replace(&#39;EGON&#39;, &#39;egon&#39;))</span><br><span class="line"></span><br><span class="line">os.remove(&#39;b.txt&#39;)</span><br><span class="line">os.rename(&#39;.b.txt.swp&#39;, &#39;b.txt&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="4-python的函数-基础入门"><a href="#4-python的函数-基础入门" class="headerlink" title="4. python的函数 基础入门"></a>4. python的函数 基础入门</h5><blockquote>
<p>重点：函数的参数</p>
</blockquote>
<p>函数的定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shell:</span><br><span class="line">    func test()&#123;</span><br><span class="line">        函数体</span><br><span class="line">    &#125;</span><br><span class="line">    test() <span class="comment">### 函数的调用</span></span><br><span class="line">python:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">        函数体</span><br><span class="line">    test() <span class="comment">### 函数调用</span></span><br></pre></td></tr></table></figure>

<p>函数的返回值<br>重点：<strong>return的作用:结束一个函数的执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.return的作用:结束一个函数的执行</span><br><span class="line"></span><br><span class="line">2.首先返回值可以是任意的数据类型。</span><br><span class="line"></span><br><span class="line">3.函数可以有返回值：如果有返回值，必须要用变量接收才有效果</span><br><span class="line"></span><br><span class="line">   也可以没有返回值：</span><br><span class="line"></span><br><span class="line">　 没有返回值的时候分三种情况：</span><br><span class="line"></span><br><span class="line">　　　　1.当不写return的时候，函数的返回值为None</span><br><span class="line"></span><br><span class="line">　　　　2.当只写一个return的时候，函数的返回值为None</span><br><span class="line"></span><br><span class="line">　　　　3.return None的时候，函数的返回值为None（几乎不用）</span><br><span class="line"></span><br><span class="line">4.return返回一个值（一个变量）</span><br><span class="line"></span><br><span class="line">5.return返回多个值（多个变量）：多个值之间用逗号隔开，以元组的形式返回。</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　　　　　 接收：可以用一个变量接收，也可以用多个变量接收，返回几个就用几个变量去接收</span><br></pre></td></tr></table></figure>

<p>示例：函数有一个或多个返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def  func():</span><br><span class="line">        a&#x3D;111</span><br><span class="line">        b&#x3D;[1,2,3]</span><br><span class="line">        c&#x3D;&#123;&#39;a&#39;:15,&#39;b&#39;:6&#125;</span><br><span class="line">        # return a#返回一个值</span><br><span class="line">        return a,b,c#返回多个值，变量之间按逗号隔开，以元组的形式返回</span><br><span class="line">print(func())</span><br></pre></td></tr></table></figure>

<p>示例：函数没有返回值的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">func</span>():</span></span><br><span class="line">    a=<span class="number">111</span></span><br><span class="line">    b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">ret=func()</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>只写一个<span class="keyword">return</span>时返回<span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">func</span>():</span></span><br><span class="line">    a=<span class="number">111</span></span><br><span class="line">    b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">ret=func()</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="keyword">return</span> <span class="literal">None</span>的时候返回<span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">func</span>():</span></span><br><span class="line">    a=<span class="number">111</span></span><br><span class="line">    b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">None</span></span><br><span class="line">ret=func()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<p>示例：定义一个列表，返回列表的最后一个值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">方法一</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    list=[<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;egon&#x27;</span>,<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">    <span class="keyword">return</span> list[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">print(func())</span><br><span class="line"></span><br><span class="line">方法二</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    list=[<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;egon&#x27;</span>,<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line">m,n,k,g=func()<span class="comment">#</span></span><br><span class="line">print(g)</span><br></pre></td></tr></table></figure>


<h5 id="4-函数的参数"><a href="#4-函数的参数" class="headerlink" title="4.函数的参数"></a>4.函数的参数</h5><ul>
<li>函数参数两大类<ul>
<li>形参：在函数定义阶段括号定义的变量名，称之为形参</li>
<li>实参：在函数调用阶段括号内传入的值，称之为实参<br>形参与实参的关系：在调用函数时，实参的值会绑定给形参名，然后可以在函数内使用，调用完毕后，解除绑定</li>
</ul>
</li>
<li>参数的分类<ul>
<li>位置参数<ul>
<li>位置形参</li>
<li>默认形参</li>
<li>位置实参</li>
</ul>
</li>
<li>关键字参数<ul>
<li>关键字实参</li>
</ul>
</li>
<li>可变长参数<ul>
<li>‘*’ 与 ** 在形参中的应用</li>
<li>‘*’ 与 ** 在实参中的应用</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>概念 - 形参</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">位置形参：在函数定义阶段按照从左至右的顺序依次定义的形参，称之为位置形参</span><br><span class="line">特点:    必须被传值，多一个不行少一个也不行</span><br><span class="line"></span><br><span class="line">默认形参：在函数定义阶段就已经为某个形参赋值了，称之为默认形参</span><br><span class="line">特点：   在函数定义阶段就已经赋值了，意味着在调用阶段可以为其赋值</span><br><span class="line"></span><br><span class="line">需要注意的问题：</span><br><span class="line">1.默认形参的值只在函数定义阶段被赋值一次</span><br><span class="line">2.默认形参的值同城应该是不可变类型</span><br></pre></td></tr></table></figure>
<blockquote>
<p>概念 - 实参</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">位置实参：在函数调用阶段按照从左至右的顺序依次传入的值，称之为位置实参</span><br><span class="line">特点：按照顺序与形参一一对应</span><br><span class="line">关键字实参：在函实参数调用阶段按照key&#x3D;value 的格式传入的值，称之为关键字实参</span><br><span class="line">特点：可以打乱顺序，但是仍然能够为指定的形参赋值</span><br><span class="line"></span><br><span class="line">ps：可以混用位置实参与关键字实参，但是</span><br><span class="line">     1.位置实参必须在关键字前</span><br><span class="line">     2.不能为同一个形参重复赋值</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>概念 - 动态参数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按位置传值多余的参数都由**args**统一接收，保存成一个**元组**的形式</span><br><span class="line">按关键字传值接受多个关键字参数，由kwargs接收，保存成一个字典的形式</span><br></pre></td></tr></table></figure>
<ul>
<li><p>1.默认参数用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">用法：为什么要用默认参数？将变化比较小的值设置成默认参数（比如一个班的男生多，女生就几个，就可以设置个默认值参数）</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stu_info</span>(<span class="params">name,sex = <span class="string">&quot;male&quot;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;打印学生信息函数，由于班中大部分学生都是男生，</span></span><br><span class="line"><span class="string">        所以设置默认参数sex的默认值为&#x27;male&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(name,sex)</span><br><span class="line">stu_info(<span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line">stu_info(<span class="string">&#x27;海燕&#x27;</span>,<span class="string">&#x27;female&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.动态参数</p>
</li>
<li><p>* 与 ** 在形参实参中的应用<br>形参带*<br>args形参应用：按位置传值多余的参数都由<strong>args</strong>统一接收，保存成一个<strong>元组</strong>的形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a,b,*args</span>):</span></span><br><span class="line">    sum=a+b</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">           sum+=i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">print(fun(<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>))<span class="comment">#输出1+5+6+4的和</span></span><br></pre></td></tr></table></figure>
<p>形参带**<br>kwargs形参应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a,b,**kwargs</span>):</span></span><br><span class="line">    print(a,b,kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照关键字传参数</span></span><br><span class="line">fun(a = <span class="number">10</span>,b = <span class="number">20</span>,cccc= <span class="number">30</span>,dddd = <span class="number">50</span>)<span class="comment">#输出10 20 &#123;&#x27;cccc&#x27;: 30, &#x27;dddd&#x27;: 50&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b,*args,defult=<span class="number">6</span>,**kwargs</span>):</span></span><br><span class="line">    <span class="comment">#位置参数，*args, 默认参数，**kwargs</span></span><br><span class="line">    <span class="comment"># print(a,b,args,defult,kwargs)</span></span><br><span class="line">    <span class="keyword">return</span> a,b,args,defult,kwargs</span><br><span class="line"></span><br><span class="line"><span class="comment">#传参数的时候：必须先按照位置传参数，再按照关键字传参数</span></span><br><span class="line">print(f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,ccc=<span class="number">10</span>,der=<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>‘* 与 ** 在实参中的应用<br>实参带*，*后跟的必须是一个可以被循环遍历的类型，*会将实参打散成位置实参</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func(x,y,z):</span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line">func(*[11,22,33])</span><br><span class="line">func(*&quot;hello&quot;) # func(&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;)</span><br></pre></td></tr></table></figure>
<p>实参带**，** 后跟的必须是一个字典，**会将实参打散成关键字实参</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index(x,y,z):</span><br><span class="line">    print(x,y,z)</span><br><span class="line"></span><br><span class="line">def wrapper(*args, **kwargs):</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    index(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"># wrapper(1,2,3,4,5,6,7,8,a&#x3D;1,b&#x3D;2,c&#x3D;3)</span><br><span class="line"># wrapper(1,2,3)</span><br><span class="line">wrapper(1,z&#x3D;3,y&#x3D;2)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>参数组合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一种：</span><br><span class="line">位置参数， 关键字参数， 默认参数</span><br><span class="line">test(a, b, c=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line">动态接收位置参数， 动态接收关键字参数配合起来使用</span><br><span class="line">test(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    print(kwargs)</span><br><span class="line">func(**dic)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结:位置参数 &gt; args(动态位置参数) &gt; 默认值参数 &gt; *kwargs(动态默认参数)，这四种参数可以任意的使用</p>
</blockquote>
<p>如果想接收所有的参数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    print(args,kwargs)</span><br><span class="line">func(<span class="number">1</span>,<span class="number">23</span>,<span class="number">5</span>,a=<span class="number">1</span>,b=<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<p>动态参数还可以这样传参:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>]</span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line">    print(args)</span><br><span class="line">func(lst[<span class="number">0</span>],lst[<span class="number">1</span>],lst[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line">    print(args)</span><br><span class="line">func(*lst)  </span><br><span class="line"><span class="comment"># 在实参的位置上用*将lst(可迭代对象)按照顺序打散</span></span><br><span class="line"><span class="comment"># 在形参的位置上用*把收到的参数组合成一个元祖</span></span><br></pre></td></tr></table></figure>
<p>字典也可以进行打散,不过需要**</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    print(kwargs)</span><br><span class="line">func(**dic)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day10</title>
    <url>/2020/10/31/py-day10/</url>
    <content><![CDATA[<p>Django 分页<br>django的模型字段介绍<br>cookie-session<br>Auth模块</p>
<a id="more"></a>


<h3 id="0-django的admin"><a href="#0-django的admin" class="headerlink" title="0. django的admin"></a>0. django的admin</h3><p>就是django内置了了⼀一套后台管理理系统，因为⾃自带的东⻄西，扩展性不不是很好。临时拿来⽤用可以，但是如果 让⽤用户使⽤用，就不不太推荐<br>需要注册模型类 admin.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Register your models here.</span><br><span class="line">from app01 import models</span><br><span class="line">### 注册 admin.site.register(models.Book)</span><br></pre></td></tr></table></figure>

<h3 id="cookie-session"><a href="#cookie-session" class="headerlink" title="cookie session"></a>cookie session</h3><p>session和token都是用来保持会话，功能相同</p>
<p>一、session机制，原理<br>　　 <img src="/2020/10/31/py-day10/cookie-session.png" class title="objsort"><br>session是服务端存储的一个对象，主要用来存储所有访问过该服务端的客户端的用户信息（也可以存储其他信息），从而实现保持用户会话状态。但是服务器重启时，内存会被销毁，存储的用户信息也就消失了。<br>　　　　不同的用户访问服务端的时候会在session对象中存储键值对，“键”用来存储开启这个用户信息的“钥匙”，在登录成功后，“钥匙”通过cookie返回给客户端，客户端存储为sessionId记录在cookie中。当客户端再次访问时，会默认携带cookie中的sessionId来实现会话机制。</p>
<ul>
<li><p>工作原理：</p>
<ul>
<li><p>a. 浏览器第一次请求获取登录页面 login。</p>
</li>
<li><p>b. 浏览器输入账号密码第二次请求，若输入正确，服务器响应浏览器一个 index 页面和一个键为 sessionid，值为随机字符串的 cookie，即 set_cookie (“sessionid”,随机字符串)。</p>
</li>
<li><p>c. 服务器内部在 django.session 表中记录一条数据。</p>
<p>  django.session 表中有三个字段。</p>
<p>  session_key：存的是随机字符串，即响应给浏览器的 cookie 的 sessionid 键对应的值。<br>  session_data：存的是用户的信息，即多个 request.session[“key”]=value，且是密文。<br>  expire_date：存的是该条记录的过期时间（默认14天）</p>
</li>
<li><p>d. 浏览器第三次请求其他资源时，携带 cookie :{sessionid:随机字符串}，服务器从 django.session 表中根据该随机字符串取出该用户的数据，供其使用（即保存状态）。</p>
</li>
</ul>
</li>
</ul>
<p><strong>注意</strong>: django.session 表中保存的是浏览器的信息，而不是每一个用户的信息。 因此， 同一浏览器多个用户请求只保存一条记录（后面覆盖前面）,多个浏览器请求才保存多条记录。</p>
<p>cookie 弥补了 http 无状态的不足，让服务器知道来的人是”谁”，但是 cookie 以文本的形式保存在浏览器端，安全性较差，且最大只支持 4096 字节，所以只通过 cookie 识别不同的用户，然后，在对应的 session 里保存私密的信息以及超过 4096 字节的文本。</p>
<p>session是基于cookie的。<br>cookie的数据4k左右<br>cookie存储数据的格式：字符串key=value<br>cookie存储有效期：可以自行通过expires进行具体的日期设置，如果没设置，默认是关闭浏览器时失效。<br>cookie有效范围：当前域名下有效。所以session这种会话存储方式方式只适用于客户端代码和服务端代码运行在同一台服务器上（前后端项目协议、域名、端口号都一致，即在一个项目下）<br>session持久化<br>　　　　用于解决重启服务器后session就消失的问题。在数据库中存储session，而不是存储在内存中。通过包：express-mysql-session</p>
<p>其它<br>　　　　当客户端存储的cookie失效后，服务端的session不会立即销毁，会有一个延时，服务端会定期清理无效session，不会造成无效数据占用存储空间的问题。</p>
<p>二、token机制，原理<br>　　<img src="/2020/10/31/py-day10/session-cookie2.png" class title="objsort"></p>
<p>适用于项目级的前后端分离（前后端代码运行在不同的服务器下）<br>　　　　请求登录时，token和sessionId原理相同，是对key和key对应的用户信息进行加密后的加密字符，登录成功后，会在响应主体中将{token：’字符串’}返回给客户端。客户端通过cookie、sessionStorage、localStorage都可以进行存储。再次请求时不会默认携带，需要在请求拦截器位置给请求头中添加认证字段Authorization携带token信息，服务器端就可以通过token信息查找用户登录状态。</p>
<p><strong>四. 总结</strong></p>
<p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>
<p>2、cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。</p>
<p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。</p>
<p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>
<p>5、可以考虑将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。</p>
<p>五.应用场景</p>
<p>登录网站，今输入用户名密码登录了，第二天再打开很多情况下就直接打开了。这个时候用到的一个机制就是cookie。<br>session一个场景是购物车，添加了商品之后客户端处可以知道添加了哪些商品，而服务器端如何判别呢，所以也需要存储一些信息就用到了session<br>服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。<br>在刚才的购物场景中，当用户选购了第一项商品，服务器在向用户发送网页的同时，还发送了一段Cookie，记录着那项商品的信息。当用户访问另一个页面，浏览器会把Cookie发送给服务器，于是服务器知道他之前选购了什么。用户继续选购饮料，服务器就在原来那段Cookie里追加新的商品信息。结帐时，服务器读取发送来的Cookie就行了。</p>
<ul>
<li>django的使⽤<ul>
<li>Django cookie 的使用:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set_cookie() : 服务端给前端设置cooKies键值对 r</span><br><span class="line">equest.COOKIES获取</span><br><span class="line">delete_cookie(): 清楚浏览器器信息</span><br></pre></td></tr></table></figure>
示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def login(request):</span><br><span class="line"></span><br><span class="line">if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">    return render(request,&quot;login.html&quot;)</span><br><span class="line">username &#x3D; request.POST.get(&#39;username&#39;)</span><br><span class="line">pwd &#x3D; request.POST.get(&#39;pwd&#39;)</span><br><span class="line"></span><br><span class="line">if username &#x3D;&#x3D; &quot;yan&quot; and pwd &#x3D;&#x3D; &quot;123456&quot;:</span><br><span class="line">    rep &#x3D; redirect(&quot;&#x2F;index&#x2F;&quot;)</span><br><span class="line">    #rep.set_cookie(&quot;islogin&quot;, &quot;assdasdasd&quot;)</span><br><span class="line">    rep.set_signed_cookie(&quot;islogin&quot;, &#39;asdasd&#39;, salt&#x3D;&quot;asdasd&quot;)</span><br><span class="line">    return rep</span><br><span class="line">else:</span><br><span class="line">    return redirect(&quot;&#x2F;login&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line">def order(request):</span><br><span class="line">cookie_info &#x3D; request.COOKIES.get(&quot;islogin&quot;)</span><br><span class="line">print(cookie_info)</span><br><span class="line">if cookie_info:</span><br><span class="line">    return HttpResponse(&#39;this is a order.html&#39;)</span><br><span class="line">else:</span><br><span class="line">    return redirect(&quot;&#x2F;login&#x2F;&quot;)</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<pre><code>- django的session使⽤:
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;session 设置：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request.session[&amp;quot;key&amp;quot;] &amp;#x3D; value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
执行步骤：
a. 生成随机字符串
b. 把随机字符串和设置的键值对保存到 django_session 表的 session_key 和 session_data 里
c. 设置 cookie：set_cookie(“sessionid”,随机字符串) 响应给浏览器

session 获取：
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;request.session.get(&amp;#39;key&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
执行步骤：
a. 从 cookie 中获取 sessionid 键的值，即随机字符串。
b. 根据随机字符串从 django_session 表过滤出记录。
c. 取出 session_data 字段的数据。

session 删除，删除整条记录（包括 session_key、session_data、expire_date 三个字段）：
`request.session.flush()`
删除 session_data 里的其中一组键值对：
`del request.session[&quot;key&quot;]`

执行步骤：
    a. 从 cookie 中获取 sessionid 键的值，即随机字符串
    b. 根据随机字符串从 django_session 表过滤出记录
    c. 删除过滤出来的记录</code></pre>
<p>设置session：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.session[&#39;is_login&#39;] &#x3D; True</span><br><span class="line">        request.session[&#39;user1&#39;] &#x3D; username</span><br><span class="line">        return redirect(&quot;&#x2F;index&#x2F;&quot;)</span><br></pre></td></tr></table></figure>
<p>验证session：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cookie_info = request.session.get(<span class="string">&quot;is_login&quot;</span>)  <span class="comment">### 相当于从session数据表中获取对应的data值，进行解密</span></span><br><span class="line">   print(cookie_info)</span><br><span class="line">   <span class="keyword">if</span> cookie_info:</span><br><span class="line">       <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;this is a order.html&#x27;</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>删除sessionid</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.flush()  <span class="comment"># 删除一条记录(session_key , session_data, expire_date) 三个字段</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;退出成功&quot;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line">    username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    pwd = request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&quot;yan&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">        <span class="comment">### cookie做法</span></span><br><span class="line">        <span class="comment"># rep = redirect(&quot;/index/&quot;)</span></span><br><span class="line">        <span class="comment"># rep.set_cookie(&quot;islogin&quot;, &quot;assdasdasd&quot;)</span></span><br><span class="line">        <span class="comment"># rep.set_signed_cookie(&quot;islogin&quot;, &#x27;asdasd&#x27;, salt=&quot;asdasd&quot;)</span></span><br><span class="line">        <span class="comment"># return rep</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### session做法</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        两步操作：</span></span><br><span class="line"><span class="string">        1. 将数据保存在session数据库中，相当于登记在访客登记表上</span></span><br><span class="line"><span class="string">        2. set_cookie(&quot;session_id&quot;, 随机字符串)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        request.session[<span class="string">&#x27;is_login&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        request.session[<span class="string">&#x27;user1&#x27;</span>] = username</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/index/&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;this is a index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">request</span>):</span></span><br><span class="line">    request.session.flush()  <span class="comment"># 删除一条记录(session_key , session_data, expire_date) 三个字段</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;退出成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>(<span class="params">request</span>):</span></span><br><span class="line">    cookie_info = request.session.get(<span class="string">&quot;is_login&quot;</span>)  <span class="comment">### 相当于从session数据表中获取对应的data值，进行解密</span></span><br><span class="line">    print(cookie_info)</span><br><span class="line">    <span class="keyword">if</span> cookie_info:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;this is a order.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展:分布式session存储</li>
</ul>
<h3 id="二-django的模型字段介绍"><a href="#二-django的模型字段介绍" class="headerlink" title="二. django的模型字段介绍"></a>二. django的模型字段介绍</h3><p>⽐比较常⻅见的模型字段:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;1&gt; CharField</span><br><span class="line">#字符串串字段, ⽤用于较短的字符串串.</span><br><span class="line">#CharField 要求必须有⼀一个参数 maxlength, ⽤用于从数据库层和Django校验层限制该字段所 允许的最⼤大字符数</span><br><span class="line"></span><br><span class="line">&lt;2&gt; IntegerField #⽤用于保存⼀一个整数.</span><br><span class="line"></span><br><span class="line">&lt;3&gt; FloatField</span><br><span class="line"># ⼀一个浮点数. 必须 提供两个参数:</span><br><span class="line">#</span><br><span class="line"># 参数 描述</span><br><span class="line"># max_digits 总位数(不不包括⼩小数点和符号)</span><br><span class="line"># decimal_places ⼩小数位数</span><br><span class="line"># 举例例来说, 要保存最⼤大值为 999 (⼩小数点后保存2位),你要这样定义字段: #</span><br><span class="line"># models.FloatField(..., max_digits&#x3D;5, decimal_places&#x3D;2)</span><br><span class="line"></span><br><span class="line">&lt;5&gt; TextField</span><br><span class="line"># ⼀一个容量量很⼤大的⽂文本字段.</span><br><span class="line"># admin ⽤用⼀一个 &lt;textarea&gt; (⽂文本区域)表示该字段数据.(⼀一个多⾏行行编辑框).</span><br><span class="line"></span><br><span class="line">&lt;5&gt; TextField</span><br><span class="line"># ⼀一个容量量很⼤大的⽂文本字段.</span><br><span class="line"># admin ⽤用⼀一个 &lt;textarea&gt; (⽂文本区域)表示该字段数据.(⼀一个多⾏行行编辑框).</span><br><span class="line"></span><br><span class="line">&lt;7&gt; DateField</span><br><span class="line"># ⼀一个⽇日期字段. 共有下列列额外的可选参数:</span><br><span class="line"># Argument</span><br><span class="line"># auto_now &quot;last-modified&quot; 时间戳. # auto_now_add</span><br><span class="line">于表示对象创建时间.</span><br><span class="line">描述 当对象被保存时,⾃自动将该字段的值设置为当前时间.通常⽤用于表示</span><br><span class="line">当对象⾸首次被创建时,⾃自动将该字段的值设置为当前时间.通常⽤用</span><br><span class="line"></span><br><span class="line">&lt;8&gt; DateTimeField</span><br><span class="line"># ⼀一个⽇日期时间字段. 类似 DateField ⽀支持同样的附加选项.</span><br></pre></td></tr></table></figure>

<p>常⻅见的参数:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、null&#x3D;True 数据库中字段是否可以为空</span><br><span class="line">4、auto_now 和 auto_now_add</span><br><span class="line">  auto_now ⾃自动创建---⽆无论添加或修改，都是当前操作的时间   auto_now_add ⾃自动创建---永远是创建时的时间</span><br><span class="line">5、choices</span><br><span class="line">GENDER_CHOICE &#x3D; (</span><br><span class="line">(u&#39;M&#39;, u&#39;Male&#39;),</span><br><span class="line">(u&#39;F&#39;, u&#39;Female&#39;), )</span><br><span class="line">gender &#x3D; models.CharField(max_length&#x3D;2,choices &#x3D; GENDER_CHOICE)   这⾥里里我们⽤用在内存创建⼀一个关联,来取代再创建⼀一个简单的表来关联 6、max_length</span><br><span class="line">7、default  默认值</span><br><span class="line">9、unique&#x3D;True  不不允许重复 例例如⽤用户名注册时候是不不允许重复的,在username字段⾥里里设置, 不不让重复</span><br><span class="line">10、db_index &#x3D; True  数据库索引</span><br></pre></td></tr></table></figure>

<h3 id="Django-分页"><a href="#Django-分页" class="headerlink" title="Django 分页"></a>Django 分页</h3><ul>
<li><p>导入分页模块<br><code>from django.core.paginator import Paginator</code></p>
</li>
<li><p>查询所有数据列表queryset对象<br><code>book_list = BorrotBook.objects.all()</code></p>
</li>
<li><p>实例化对象<br><code>paginator = Paginator(book_list, 10)</code></p>
</li>
<li><p>Paginator类对象的属性<br>序号    属性名    说明<br>1    num_pages    返回分页之后的总页数<br>2    page_range    返回分页后的页码列表</p>
</li>
</ul>
<p>Paginator类对象的方法</p>
<p>序号    方法名    说明<br>1    page(self, number)    返回第number页的page类实例对象</p>
<p>Page实例对象的属性<br>序号    属性名    说明<br>1    number    返回当前页的页码<br>2    object_list    返回当前页的数据查询集<br>3    paginator    返回对应的Paginator类对象</p>
<p>page实例对象的方法</p>
<p>序号    方法名    说明<br>1    has_previous    判断当前页是否有前一页<br>2    has_next    判断当前页是否有下一页<br>3    previous_page_number    返回前一页的页码<br>4    next_page_number    返回下一页的页码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Views.py</span><br><span class="line">bookinfo = models.Book.objects.all() <span class="comment">## [&lt;Book: Book object (1)&gt;, &lt;Book: Book object (2)&gt;, &lt;Book: Book object (3)&gt;]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line">    paginator = Paginator(bookinfo, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    print(paginator)</span><br><span class="line">    pindex = request.GET.get(<span class="string">&#x27;pindex&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    pindex = int(pindex)</span><br><span class="line">    page = paginator.page(pindex)  <span class="comment"># 传递当前页的实例对象到前端</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 3. 展示从数据库中获取的内容，美化展示</span></span><br><span class="line">    <span class="comment"># books = models.Book.objects.create(title=&quot;如来神掌&quot;,price=200,publish=&quot;功夫出版社&quot;,pub_date=&quot;2010-10-10&quot;)</span></span><br><span class="line">    print(pindex , page)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;booklist.html&quot;</span>, &#123; <span class="string">&quot;page&quot;</span>: page, <span class="string">&quot;pindex&quot;</span>: pindex&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% for obj in page %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.publish &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.pub_date &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>删除 | 更新&#123;&#123; obj.id &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">--底部分页按钮显示--</span>&gt;</span>#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">&quot;Page navigation&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">        &#123;#            # 判断当前页是否有上一页#&#125;</span><br><span class="line">        &#123;% if page.has_previous %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/booklist/?pindex=&#123;&#123;page.previous_page_number&#125;&#125;&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Previous&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;#    # 循环遍历页码列表，并展示到底部#&#125;</span><br><span class="line">        &#123;% for num in page.paginator.page_range%&#125;</span><br><span class="line">            &#123;%if pindex == num %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> &gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;%else%&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/booklist/?pindex=&#123;&#123;num&#125;&#125;&quot;</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;%endif%&#125;</span><br><span class="line">         &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;#            # 判断当前页是否有下一页#&#125;</span><br><span class="line">         &#123;% if page.has_next %&#125;</span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/booklist/?pindex=&#123;&#123;page.next_page_number&#125;&#125;&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Next&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="auth模块"><a href="#auth模块" class="headerlink" title="auth模块"></a>auth模块</h3><p>Django 用户认证（Auth）组件一般用在用户的登录注册上，用于判断当前的用户是否合法，并跳转到登陆成功或失败页面。</p>
<p>Django 用户认证（Auth）组件需要导入 auth 模块:<br>导入模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 认证模块</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应数据库</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, AnonymousUser</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br></pre></td></tr></table></figure>



<p>使⽤用auth.login() 登录成功的时候，<br><code>request.user的值: zekai &lt;class &#39;django.utils.functional.SimpleLazyObject&#39;&gt;</code><br>如果未登录，则<br><code>request.user的值:AnonymousUser &lt;class &#39;django.utils.functional.SimpleLazyObject&#39;&gt;</code></p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, AnonymousUser</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def login(request):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     if request.method == &#x27;GET&#x27;:</span></span><br><span class="line"><span class="comment">#         return render(request, &quot;login.html&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     username = request.POST.get(&#x27;username&#x27;)</span></span><br><span class="line"><span class="comment">#     pwd = request.POST.get(&#x27;pwd&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     if username == &#x27;zekai&#x27; and pwd == &#x27;123qwe&#x27;:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         ### cookie的做法</span></span><br><span class="line"><span class="comment">#         # rep = redirect(&quot;/index/&quot;)</span></span><br><span class="line"><span class="comment">#         # rep.set_cookie(&quot;is_login&quot;, &quot;dsbahdbshabdhsja&quot;)</span></span><br><span class="line"><span class="comment">#         # rep.set_signed_cookie(&quot;is_login&quot;, &quot;dsbahdbshabdhsja&quot;, salt=&quot;test123&quot;)</span></span><br><span class="line"><span class="comment">#         # return rep</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         ### session的做法</span></span><br><span class="line"><span class="comment">#         &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#         两步操作:</span></span><br><span class="line"><span class="comment">#         1.将数据保存在session数据库中，相当于登记在访客登记表上</span></span><br><span class="line"><span class="comment">#         2.set_cookie(&quot;sessionid&quot;, 随机字符串)</span></span><br><span class="line"><span class="comment">#         &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#         request.session[&#x27;is_login&#x27;] = True</span></span><br><span class="line"><span class="comment">#         request.session[&#x27;user1&#x27;] = username</span></span><br><span class="line"><span class="comment">#         return redirect(&quot;/index/&quot;)</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         return redirect(&#x27;/login/&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    username = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    user_obj = auth.authenticate(username=username, password=password)</span><br><span class="line"></span><br><span class="line">    print(user_obj.__dict__)</span><br><span class="line">    <span class="comment"># print(user_obj.username)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_obj:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.body)</span><br><span class="line">        <span class="comment">### 待解决</span></span><br><span class="line">        path = request.POST.get(<span class="string">&quot;url&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;/index/&quot;</span></span><br><span class="line"></span><br><span class="line">        print(path)</span><br><span class="line">        auth.login(request, user_obj)  <span class="comment">### 此方法相当于 request.session[&#x27;is_login&#x27;] = True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redirect(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment">## OA  ladap</span></span><br><span class="line">    <span class="comment"># User.objects.create_superuser(username=&#x27;zekai&#x27;, email=&quot;zekai@163.com&quot;, password=&quot;123qwe&quot;)</span></span><br><span class="line">    <span class="comment"># User.objects.create_user(username=&quot;test&quot;, password=&#x27;test&#x27;)</span></span><br><span class="line">    <span class="comment"># User.objects.create(username=&quot;test2&quot;, password=&#x27;qweasd&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;this is index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;test1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### 使用cookie和session方式</span></span><br><span class="line">    <span class="comment"># cookie_info = request.session.get(&quot;is_login&quot;)  ### 相当于从session数据表中获取对应的data值</span></span><br><span class="line">    <span class="comment"># if cookie_info:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># return HttpResponse(&#x27;this is order.html&#x27;)</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     return redirect(&quot;/login/&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 使用auth模块的方式</span></span><br><span class="line">    print(request.user, type(request.user)) <span class="comment">## zekai &lt;class &#x27;django.utils.functional.SimpleLazyObject&#x27;&gt;</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(request.user, AnonymousUser):</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;this is order.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### session的方式</span></span><br><span class="line">    <span class="comment"># request.session.flush() # 删除一条记录包括(session_key session_data expire_date)三个字段</span></span><br><span class="line">    <span class="comment"># return redirect(&quot;/login/&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### auth模块的方式</span></span><br><span class="line">    ppp = auth.logout(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-drf</title>
    <url>/2020/12/06/py-drf/</url>
    <content><![CDATA[<p>DRF-day01</p>
<a id="more"></a>

<h2 id="DRF入门规范"><a href="#DRF入门规范" class="headerlink" title="DRF入门规范"></a>DRF入门规范</h2><h3 id="0-RESTful-API规范"><a href="#0-RESTful-API规范" class="headerlink" title="0. RESTful API规范"></a>0. RESTful API规范</h3><p>10条<br>最终要2条<br>4.1 数据的安全保障<br>url链接一般都采用https协议进行传输</p>
<p>注：采用https协议，可以提高数据交互过程中的安全性</p>
<p>4.2 接口特征表现<br>用api关键字标识接口url：</p>
<p><a href="https://api.baidu.com/">https://api.baidu.com</a><br><a href="https://www.baidu.com/api">https://www.baidu.com/api</a><br>注：看到api字眼，就代表该请求url链接是完成前后台数据交互的</p>
<p>4.3 多数据版本共存<br>在url链接中标识数据版本</p>
<p><a href="https://api.baidu.com/v1">https://api.baidu.com/v1</a><br><a href="https://api.baidu.com/v2">https://api.baidu.com/v2</a><br>注：url链接中的v1、v2就是不同数据版本的体现（只有在一种数据资源有多版本情况下）</p>
<p>4.4 数据即是资源，均使用名词（可复数）<br>接口一般都是完成前后台数据的交互，交互的数据我们称之为资源</p>
<p><a href="https://api.baidu.com/users">https://api.baidu.com/users</a><br><a href="https://api.baidu.com/books">https://api.baidu.com/books</a><br><a href="https://api.baidu.com/book">https://api.baidu.com/book</a><br>注：一般提倡用资源的复数形式，在url链接中奖励不要出现操作资源的动词，错误示范：<a href="https://api.baidu.com/delete-user">https://api.baidu.com/delete-user</a></p>
<p>特殊的接口可以出现动词，因为这些接口一般没有一个明确的资源，或是动词就是接口的核心含义</p>
<p><a href="https://api.baidu.com/place/search">https://api.baidu.com/place/search</a><br><a href="https://api.baidu.com/login">https://api.baidu.com/login</a><br>4.5 资源操作由请求方式决定（method）<br>操作资源一般都会涉及到增删改查，我们提供请求方式来标识增删改查动作<br><a href="https://api.baidu.com/books">https://api.baidu.com/books</a> - get请求：获取所有书<br><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - get请求：获取主键为1的书<br><a href="https://api.baidu.com/books">https://api.baidu.com/books</a> - post请求：新增一本书书<br><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - put请求：整体修改主键为1的书<br><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - patch请求：局部修改主键为1的书<br><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - delete请求：删除主键为1的书<br>4.6 过滤，通过在url上传参的形式传递搜索条件<br><a href="https://api.example.com/v1/zoos?limit=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E6%95%B0%E9%87%8F">https://api.example.com/v1/zoos?limit=10：指定返回记录的数量</a><br><a href="https://api.example.com/v1/zoos?offset=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E5%BC%80%E5%A7%8B%E4%BD%8D%E7%BD%AE">https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置</a><br><a href="https://api.example.com/v1/zoos?page=2&amp;per_page=100%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AC%AC%E5%87%A0%E9%A1%B5%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%AF%8F%E9%A1%B5%E7%9A%84%E8%AE%B0%E5%BD%95%E6%95%B0">https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数</a><br><a href="https://api.example.com/v1/zoos?sortby=name&amp;order=asc%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%8C%89%E7%85%A7%E5%93%AA%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E9%A1%BA%E5%BA%8F">https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序</a><br><a href="https://api.example.com/v1/zoos?animal_type_id=1%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AD%9B%E9%80%89%E6%9D%A1%E4%BB%B6">https://api.example.com/v1/zoos?animal_type_id=1：指定筛选条件</a><br>4.7 响应状态码<br>4.7.1 正常响应<br>响应状态码2xx<br>200：常规请求<br>201：创建成功<br>4.7.2 重定向响应<br>响应状态码3xx<br>301：永久重定向<br>302：暂时重定向<br>4.7.3 客户端异常<br>响应状态码4xx<br>403：请求无权限<br>404：请求路径不存在<br>405：请求方法不存在<br>4.7.4 服务器异常<br>响应状态码5xx<br>500：服务器异常<br>4.8 错误处理，应返回错误信息，error当做key</p>
<p>{<br>    error: “无权限操作”<br>}<br>4.9 返回结果，针对不同操作，服务器向用户返回的结果应该符合以下规范</p>
<p>GET /collection：返回资源对象的列表（数组）<br>GET /collection/resource：返回单个资源对象<br>POST /collection：返回新生成的资源对象<br>PUT /collection/resource：返回完整的资源对象<br>PATCH /collection/resource：返回完整的资源对象<br>DELETE /collection/resource：返回一个空文档<br>4.10 需要url请求的资源需要访问资源的请求链接</p>
<blockquote>
<p>Hypermedia API，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么<br>{<br>      “status”: 0,<br>      “msg”: “ok”,<br>      “results”:[<br>        {<br>            “name”:”肯德基(罗餐厅)”,<br>            “img”: “<a href="https://image.baidu.com/kfc/001.png&quot;">https://image.baidu.com/kfc/001.png&quot;</a><br>        }<br>          …<br>        ]<br>}<br>比较好的接口返回</p>
</blockquote>
<blockquote>
<p>响应数据要有状态码、状态信息以及数据本身<br>{<br>      “status”: 0,<br>      “msg”: “ok”,<br>      “results”:[<br>        {<br>            “name”:”肯德基(罗餐厅)”,<br>            “location”:{<br>                “lat”:31.415354,<br>                “lng”:121.357339<br>            },<br>            “address”:”月罗路2380号”,<br>            “province”:”上海市”,<br>            “city”:”上海市”,<br>            “area”:”宝山区”,<br>            “street_id”:”339ed41ae1d6dc320a5cb37c”,<br>            “telephone”:”(021)56761006”,<br>            “detail”:1,<br>            “uid”:”339ed41ae1d6dc320a5cb37c”<br>        }<br>          …<br>        ]<br>}</p>
</blockquote>
<h3 id="1-drf的安装和使用"><a href="#1-drf的安装和使用" class="headerlink" title="1. drf的安装和使用"></a>1. drf的安装和使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkvirtualenv drfdemo -p python3</span></span><br><span class="line"><span class="comment"># pip install django</span></span><br><span class="line"></span><br><span class="line">pip install djangorestframework</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<p>创建django项目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/Desktop</span><br><span class="line">django-admin startproject drfdemo</span><br></pre></td></tr></table></figure>
<p>添加rest_framework应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在settings.py的INSTALLED_APPS中添加’rest_framework’。</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>接下来就可以使用DRF提供的功能进行api接口开发了。在项目中如果使用rest_framework框架实现API接口，主要有以下三个步骤：</p>
<ul>
<li>将请求的数据（如JSON格式）转换为模型类对象</li>
<li>操作数据库</li>
<li>将模型类对象转换为响应的数据（如JSON格式）</li>
</ul>
<p>快速体验</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># model.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    author = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建ser.py序列化类</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="comment">## 表示序列化Book表，表里的所有字段都序列化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Book</span><br><span class="line"><span class="keyword">from</span> .ser <span class="keyword">import</span> BookModelSerializer</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    queryset = Book.objects.all()</span><br><span class="line">    serializer_class = BookModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="comment"># 路由列表</span></span><br><span class="line">urlpatterns = []</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()  <span class="comment"># 可以处理视图的路由器</span></span><br><span class="line">router.register(<span class="string">&#x27;books&#x27;</span>, views.BooksViewSet)  <span class="comment"># 向路由器中注册视图集</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 将路由器中的所以路由信息追到到django的路由列表中</span></span><br></pre></td></tr></table></figure>

<h3 id="2-cbv源码"><a href="#2-cbv源码" class="headerlink" title="2. cbv源码"></a>2. cbv源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ModelViewSet继承View(Django原生view)</span></span><br><span class="line"><span class="comment"># APIView继承View</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先读View的源码</span></span><br><span class="line">path(<span class="string">&#x27;books1/&#x27;</span>, views.Books.as_view()), <span class="comment">### 在这个地方写个函数内存地址;也就是说views.Books.as_view()执行完，是个函数内存地址，as_view是一个类方法，类直接来调用，会把类自动传入</span></span><br><span class="line">放了一个view的内存地址(view--&gt;as_view的内层函数)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求来了，如果路径匹配，会执行函数内存地址(request)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="comment">#request是档次请求的request,cls就是Books(类的绑定方法)</span></span><br><span class="line">    self = cls(**initkwargs)<span class="comment">#实例化得到一个对象，Books对象</span></span><br><span class="line">    self.setup(request, *args, **kwargs)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">&#x27;request&#x27;</span>):</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(</span><br><span class="line">            <span class="string">&quot;%s instance has no &#x27;request&#x27; attribute. Did you override &quot;</span></span><br><span class="line">            <span class="string">&quot;setup() and forget to call super()?&quot;</span> % cls.__name__</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">if</span> hasattr(self, <span class="string">&#x27;get&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(self, <span class="string">&#x27;head&#x27;</span>):</span><br><span class="line">        self.head = self.get</span><br><span class="line">    self.request = request</span><br><span class="line">    self.args = args</span><br><span class="line">    self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="comment"># request是当前请求的request, self是book对象</span></span><br><span class="line">    <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">        <span class="comment">#handler是通过反射拿到Books类的get方法的内存地址</span></span><br><span class="line">        handler = getattr(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        handler = self.http_method_not_allowed</span><br><span class="line">    <span class="keyword">return</span> handler(request, *args, **kwargs) <span class="comment">#执行get(request)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-apiview源码"><a href="#3-apiview源码" class="headerlink" title="3. apiview源码"></a>3. apiview源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;booksapiview/&#x27;</span>, views.BookAPIView.as_view()) <span class="comment"># 这个地方也应该是个函数内存地址</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="comment">#APIView的as_view方法(类的绑定方法)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">as_view</span>(<span class="params">cls, **initkwargs</span>):</span></span><br><span class="line">    view = super().as_view(**initkwargs) <span class="comment"># 调用父类(View)的as_view(**initkwargs)</span></span><br><span class="line">    view.cls = cls</span><br><span class="line">    view.initkwargs = initkwargs</span><br><span class="line">    <span class="comment"># 以后所有的请求,都没有csrf认证了，只要继承了APIView,就没有csrf认证</span></span><br><span class="line">    <span class="keyword">return</span> csrf_exempt(view)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请求--&gt;路由匹配---&gt; view(request) --&gt; 调用了self.dispatch,会执行apiview的dispatch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#APIView的dispatch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    self.args = args</span><br><span class="line">    self.kwargs = kwargs</span><br><span class="line">    <span class="comment"># 重写了request对象，以后再用的request对象,就是新的request对象</span></span><br><span class="line">    request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">    self.request = request</span><br><span class="line">    self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 三大认证模块</span></span><br><span class="line">        self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(),</span><br><span class="line">                                self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="comment"># 响应模块</span></span><br><span class="line">        response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="comment"># 异常模块</span></span><br><span class="line">        response = self.handle_exception(exc)</span><br><span class="line">    <span class="comment"># 渲染模块</span></span><br><span class="line">    self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> self.response</span><br><span class="line"><span class="comment"># APIView的initial方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span>(<span class="params">self, request, *args, **kwargs</span>)</span></span><br><span class="line"><span class="function">        # 认证组件：校验用户 - 游客，合法用户，非法用户</span></span><br><span class="line"><span class="function">        # 游客：代表校验通过，直接进入下一步校验</span></span><br><span class="line">        # 合法用户：代表校验通过，将用户存储在request.user中,再进入下一步校验(权限校验)</span><br><span class="line">        <span class="comment"># 非法用户：代表校验失败，抛出异常，返回403权限异常结果</span></span><br><span class="line">        self.perform_authentication(request)</span><br><span class="line">        <span class="comment"># 权限组件:校验用户权限 - 必须登录、所有用户、登录读写游客只读，自定义用户角色</span></span><br><span class="line">        <span class="comment">#认证通过：可以进入下一步校验(频率认证)</span></span><br><span class="line">        <span class="comment">#认证失败：抛出异常，返回403权限异常结果</span></span><br><span class="line">        self.check_permissions(request)</span><br><span class="line">        <span class="comment">#频率组件：限制视图接口被访问的频率次数 - 限制的条件(IP、id、唯一键)、频率周期时间(s、m、h)、频率；v的次数(3/s)</span></span><br><span class="line">        <span class="comment"># 没有达到限次：正常访问的接口</span></span><br><span class="line">        <span class="comment"># 达到限次：限制时间内不能访问，限制时间内达到后，可以重新访问</span></span><br><span class="line">        self.check_throttles(request)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="comment"># 只要继承了APIView,视图中的request对象，都是新的，也就是上面那个request对象</span></span><br><span class="line"><span class="comment"># 老的request在新的request._request</span></span><br><span class="line"><span class="comment"># 使用request对象就像使用之前的request对象一模一样（因为重写了__getattr__方法）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, attr</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> getattr(self._request, attr) <span class="comment">#通过反射，取原生的request对象，取出属性或方法</span></span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">return</span> self.__getattribute__(attr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># request.data 感觉是个数据属性，其实是个方法，@property，修饰了</span></span><br><span class="line">  它是一个字典，post请求不管使用什么编码，传过来的数据，都在request.data</span><br><span class="line"><span class="comment"># get请求传过来的数据</span></span><br><span class="line">  request.GET</span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_params</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    More semantically correct name for request.GET.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> self._request.GET</span><br><span class="line"><span class="comment">#视图类中</span></span><br><span class="line">print(request.query_params) <span class="comment">#get请求，地址中的参数</span></span><br><span class="line"><span class="comment">#原来在</span></span><br><span class="line">print(request.GET)</span><br></pre></td></tr></table></figure>

<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="一切皆对象"><a href="#一切皆对象" class="headerlink" title="一切皆对象"></a>一切皆对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line">foo.name = <span class="string">&#x27;lqz&#x27;</span> <span class="comment">#由于一切皆对象,函数也是个对象，对象放值</span></span><br><span class="line"></span><br><span class="line">print(foo(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(foo.name)</span><br></pre></td></tr></table></figure>
<h4 id="局部禁用csrf"><a href="#局部禁用csrf" class="headerlink" title="局部禁用csrf"></a>局部禁用csrf</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在视图函数上家装饰器@csrf_exempt</span></span><br><span class="line"><span class="comment"># csrf_exempt(view) 和在视图函数上家装饰器是一模一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url.py中看到这种写法，也是可以的</span></span><br><span class="line">path(<span class="string">&#x27;test/&#x27;</span>, csrf_exempt(view.test))</span><br></pre></td></tr></table></figure>

<p>请求-&gt;匹配路由-&gt;执行as_view里面的view函数-&gt;执行了self.dispatch-&gt;但是执行dispatch是执行APIView的dispatch–&gt;dispatch把请求方法转成小写,通过反射,在对象中去找,是否有get方法,有就加括号执行,并且把request传进去；dispatch的第三行重新包装了request对象-&gt;request对象又有好多东西,data,query_params,files–&gt;接着又执行了self.initial-&gt;三个函数（权限，认证，频率）-&gt;执行完回到之前;get请求执行get函数，post请求执行post函数。–&gt;拿到response对象–&gt;有异常处理:用处，程序出错之后，捕获到之后，可以通过一个配置指定返回异常结果，如errmessage:服务器内部错误;因为前后端分离，就是要返回json格式–有一个总的异常补货，一旦捕获到之后，不管什么错误，都是返回json格式。—&gt;渲染reponse，包装，浏览器访问就是页面和postman访问就是另外格式—&gt;总结：整个请求过程就是通过APIView控制的</p>
<h3 id="3-APIView源码分析（drf提供的，扩展了View的功能）"><a href="#3-APIView源码分析（drf提供的，扩展了View的功能）" class="headerlink" title="3.APIView源码分析（drf提供的，扩展了View的功能）"></a>3.APIView源码分析（drf提供的，扩展了View的功能）</h3><ul>
<li>视图类，继承APIView(读APIView的源码)</li>
<li>在类里写get,post方法就可以了,只要get请求来,就有走get方法</li>
<li>路由：views.Books.as_view()—这个函数执行完一定是一个内存地址–&gt;view(闭包函数)内存函数的地址,处理了csrf,所有请求,都没有csrf校验了</li>
<li>请求来了,路由匹配上,—&gt;view(request)—&gt;self.dispatch(request,*args,**kwargs),现在这个dispatch不是View中的dispatch,而是APIView中的dispatch</li>
</ul>
<h2 id="序列化器-Serializer"><a href="#序列化器-Serializer" class="headerlink" title="序列化器-Serializer"></a>序列化器-Serializer</h2><h3 id="1-作用："><a href="#1-作用：" class="headerlink" title="1.作用："></a>1.作用：</h3><ol>
<li>序列化,序列化器会把模型对象转换成字典,经过response以后变成json字符串</li>
<li>反序列化,把客户端发送过来的数据,经过request以后变成字典,序列化器可以把字典转成模型</li>
<li>反序列化,完成数据校验功能</li>
</ol>
<h3 id="2-简单使用"><a href="#2-简单使用" class="headerlink" title="2.简单使用"></a>2.简单使用</h3><ol>
<li>写一个序列化的类，继承Serializer</li>
<li>在类中写要序列化的字段,想要序列化哪个字段,就在类中写哪个字段</li>
<li>在视图类中使用,导入–&gt;实例化得到序列化类的对象–&gt;把要序列化的对象传入</li>
<li>序列化的对象.data 是一个字典</li>
<li>如果不使用rest_framework 提供的Response,那么就使用JsonResponse  </li>
</ol>
<h3 id="3-序列化类的字段类型"><a href="#3-序列化类的字段类型" class="headerlink" title="3.序列化类的字段类型"></a>3.序列化类的字段类型</h3><blockquote>
<p>有很多，不需要都记住<br>只需要记住：CharField，IntegerField，DateField…</p>
</blockquote>
<h3 id="4-序列化字段选项"><a href="#4-序列化字段选项" class="headerlink" title="4.序列化字段选项"></a>4.序列化字段选项</h3><h3 id="5-序列化组件修改数据"><a href="#5-序列化组件修改数据" class="headerlink" title="5.序列化组件修改数据"></a>5.序列化组件修改数据</h3><ol>
<li>写一个序列化的类，继承Serializer</li>
<li>在类中写要反序列化的字段,想要反序列化哪个字段,就在类中写哪个字段,字段的属性(max_length,…..)</li>
<li>在视图类中使用,导入-&gt;实例化得到序列化类的对象-&gt;把要修改的对象传入,修改的数据传入 book_ser = BookSerializer(instance=book, data=request.data) instance要修改的对象，data是修改的数据</li>
<li>得到对象之后，进行数据校验if book_ser.is_valid()</li>
<li>如果校验通过，就保存(序列化对象.save(),而不是book.save()) book_ser.save()</li>
<li>如果不通过，逻辑自己写</li>
<li>如果字段的校验规则不够，可以写钩子函数(局部和全局)<br>局部钩子<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_price</span>(<span class="params">self, data</span>):</span> <span class="comment"># validate_字段名 接收一个参数:传过来的price</span></span><br><span class="line">    <span class="comment"># 如果价格小于10，校验不通过</span></span><br><span class="line">    print(type(data))</span><br><span class="line">    print(data)</span><br><span class="line">    <span class="keyword">if</span> float(data)&gt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#校验失败，抛异常</span></span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;价格太低&#x27;</span>)</span><br></pre></td></tr></table></figure>
全局钩子<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, validate_data</span>):</span> <span class="comment"># 全局钩子</span></span><br><span class="line">    print(validate_data)</span><br><span class="line">    author = validate_data.get(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">    publish = validate_data.get(<span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> author == publish:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;作者名字和出版社一样&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> validate_data</span><br></pre></td></tr></table></figure></li>
<li>可以使用字段的author=serializers.CharField(validators=[check_author]),来校验<br>写一个函数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def check_author(data):</span><br><span class="line">    if data.startwith(&#39;sb&#39;):</span><br><span class="line">        raise ValidationError(&#39;sb&#39;)</span><br><span class="line">    else:</span><br><span class="line">        return data</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="6-read-only和write-only"><a href="#6-read-only和write-only" class="headerlink" title="6.read_only和write_only"></a>6.read_only和write_only</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read_only 表明该字段仅用于序列化输出，默认<span class="literal">False</span>，如果设置成<span class="literal">True</span>，postman中可以看到该字段，不需要传该字段</span><br><span class="line">write_only 表明该字段仅用于反序列化输出，默认<span class="literal">False</span>，如果设置成<span class="literal">True</span>，postman中看不到该字段，修改时需要传该字段</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下的了解</span></span><br><span class="line">required    表明该字段在反序列化时必须输入，默认<span class="literal">True</span></span><br><span class="line">default    反序列化时使用的默认值</span><br><span class="line">allow_null    表明该字段是否允许传入<span class="literal">None</span>，默认<span class="literal">False</span></span><br><span class="line">validators    该字段使用的验证器</span><br><span class="line">error_messages    包含错误编号与错误信息的字典</span><br><span class="line">label    用于HTML展示API页面时，显示的字段名称</span><br><span class="line">help_text    用于HTML展示API页面时，显示的字段帮助提示信息</span><br></pre></td></tr></table></figure>

<h3 id="7-查询所有"><a href="#7-查询所有" class="headerlink" title="7.查询所有"></a>7.查询所有</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        response_msg = &#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;成功&#x27;</span>&#125;</span><br><span class="line">        books = Book.objects.all()</span><br><span class="line">        book_ser = BookSerializer(books, many=<span class="literal">True</span>) <span class="comment"># 序列化多条，如果序列化一条，则不需要写</span></span><br><span class="line">        response_msg[<span class="string">&#x27;data&#x27;</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">return</span> Response(response_msg)</span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BooksView.as_view()),</span><br></pre></td></tr></table></figure>

<h3 id="8-新增数据"><a href="#8-新增数据" class="headerlink" title="8.新增数据"></a>8.新增数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        response_msg = &#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;成功&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 修改才有instance, 新增没有instance, 只有data</span></span><br><span class="line">        <span class="comment"># book_ser = BookSerializer(request.data)  # 这个按位置传request.data会给instance,就报错了</span></span><br><span class="line">        book_ser = BookSerializer(data=request.data)</span><br><span class="line">        <span class="comment"># 校验字段</span></span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():  <span class="comment"># 返回True表示验证通过</span></span><br><span class="line">            book_ser.save()</span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response_msg[<span class="string">&#x27;status&#x27;</span>] = <span class="number">102</span></span><br><span class="line">            response_msg[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;数据校验失败&#x27;</span></span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>] = book_ser.errors</span><br><span class="line">        <span class="keyword">return</span> Response(response_msg)</span><br><span class="line">ser.py 序列化类重新create方法</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        instance = Book.objects.create(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">urls.py</span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BooksView.as_view()),</span><br></pre></td></tr></table></figure>


<h3 id="9-删除一个数据"><a href="#9-删除一个数据" class="headerlink" title="9.删除一个数据"></a>9.删除一个数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        <span class="comment"># 找到对象</span></span><br><span class="line">        ret = Book.objects.filter(id=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;删除成功&#x27;</span>&#125;)</span><br><span class="line">urls.py</span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BooksView.as_view()),</span><br></pre></td></tr></table></figure>

<h3 id="10-模型类序列化器"><a href="#10-模型类序列化器" class="headerlink" title="10.模型类序列化器"></a>10.模型类序列化器</h3><ul>
<li>基于模型类自动生成一系列字段</li>
<li>基于模型类自动为Serializer生成validators，比如unique_together</li>
<li>包含默认的create()和update()的实现<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book  <span class="comment"># 对应上model.py中的模型</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        <span class="comment"># fields = (&#x27;name&#x27;,&#x27;price&#x27;) # 只序列化指定的字段</span></span><br><span class="line">        <span class="comment"># exclude = (&#x27;name&#x27;,) #跟fields不能都写，写谁，就表示排除谁</span></span><br><span class="line">        <span class="comment"># read_only_fields = (&#x27;id&#x27;, )    #</span></span><br><span class="line">        <span class="comment"># write_only_fields = (&#x27;price&#x27;)  # 弃用了，extra_kwargs</span></span><br><span class="line">        extra_kwargs = &#123; <span class="comment"># 类似于这种形式  name = serializers.CharField(max_length=16,min_length=4)</span></span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># 其他使用一模一样</span></span><br><span class="line"><span class="comment"># 不需要重写create 和update了</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="11-源码分析"><a href="#11-源码分析" class="headerlink" title="11.源码分析"></a>11.源码分析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 序列化多条，需要传many&#x3D;True</span><br><span class="line">book_ser &#x3D; BookModelSerializer(books, many&#x3D;True)</span><br><span class="line">book_one_ser &#x3D; BookModelSerializer(books)</span><br><span class="line"></span><br><span class="line">print(type(book_ser))</span><br><span class="line">&lt;class &#39;rest_framework.serializers.ListSerializer&#39;&gt;</span><br><span class="line">print(type(book_one_ser))</span><br><span class="line">&lt;class &#39;app01.ser.BookModelSerializer&#39;&gt;</span><br><span class="line"># 对象的生成--&gt;先调用类的__new__方法，生成空对象</span><br><span class="line"># 对象&#x3D;类名(name&#x3D;lqz)，触发类的__init__()</span><br><span class="line"># 类的__new__方法控制对象的生成</span><br><span class="line"></span><br><span class="line">def __new__(cls, *args, **kwargs):</span><br><span class="line">    if kwargs.pop(&#39;many&#39;, False):</span><br><span class="line">        return cls.many_init(*args, **kwargs)</span><br><span class="line">    # 没有传many&#x3D;True,走下面，正常的对象实例化</span><br><span class="line">    return super().__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="12-Serializer高级用法"><a href="#12-Serializer高级用法" class="headerlink" title="12.Serializer高级用法"></a>12.Serializer高级用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source的使用</span></span><br><span class="line"> <span class="number">1.</span> 可以改字段名字 xxx = serializers.CharField(source=<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"> <span class="number">2.</span> 可以跨表 publish = serializers.CharField(source=<span class="string">&#x27;publish.email&#x27;</span>)</span><br><span class="line"> <span class="number">3.</span> 可以执行方法 pub_date = serializers.CharField(source=<span class="string">&#x27;test&#x27;</span>) test是Book表模型中的方法</span><br><span class="line"><span class="comment"># SerializerMethodField</span></span><br><span class="line">    authors = serializers.SerializerMethodField() <span class="comment"># 它需要有个配套方法，方法名叫get_字段名，返回值就是要显示的东西</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authors</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="comment"># book对象</span></span><br><span class="line">        authors = instance.authors.all()</span><br><span class="line">        ll = []</span><br><span class="line">        <span class="keyword">for</span> author <span class="keyword">in</span> authors:</span><br><span class="line">            ll.append(&#123;<span class="string">&#x27;name&#x27;</span>:author.name, <span class="string">&#x27;age&#x27;</span>:author.age&#125;)</span><br><span class="line">        <span class="keyword">return</span> ll</span><br></pre></td></tr></table></figure>

<h2 id><a href="#" class="headerlink" title></a></h2><ol>
<li>补充(自己封装response对象)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myresponse</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.status = <span class="number">100</span></span><br><span class="line">        self.msg = <span class="string">&#x27;成功&#x27;</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dict</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__dict__</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    res = Myresponse()</span><br><span class="line">    res.status = <span class="number">101</span></span><br><span class="line">    res.msg = <span class="string">&#x27;失败&#x27;</span></span><br><span class="line">    res.data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lqz&#x27;</span>&#125;</span><br><span class="line">    print(res.get_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        response = Myresponse()</span><br><span class="line">        books = Book.objects.all()</span><br><span class="line">        book_ser = BookSerializer(books, many=<span class="literal">True</span>) <span class="comment"># 序列化多条，如果序列化一条，则不需要写</span></span><br><span class="line">        response.data = book_ser.data</span><br><span class="line">        <span class="keyword">return</span> Response(response.get_dict)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>你在实际开发中遇到的问题<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write_only_fields 不能使用了；使用extra_kwargs = &#123;&#125;解决</span><br><span class="line"></span><br><span class="line">extra_kwargs = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-skill</title>
    <url>/2020/11/06/py-skill/</url>
    <content><![CDATA[<p>需要记住</p>
<a id="more"></a>

<ol start="0">
<li>字符串前加r的意思<br>r/R 表示非转义的原始字符串,比如在字符串中如果出现\n是换行,但是如果在字符串的前面添加r则表示\和n两个字符,一般常见于正则表达式中。</li>
</ol>
<ol>
<li>Python __dict__与dir()区别</li>
</ol>
<p>__dict__与dir()的区别：</p>
<p>1.dir()是一个函数，返回的是list；<br>2.__dict__是一个字典，键为属性名，值为属性值；<br>3.dir()用来寻找一个对象的所有属性，包括__dict__中的属性，__dict__是dir()的子集；</p>
<ol start="2">
<li>字符串和字节相互转换<br>通过decode encode 方式太麻烦，不好理解</li>
</ol>
<p>字符串转换成字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bytes(tmp_二进制, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>字节转换成字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str(tmp, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>class 中什么时候用classmethod</li>
</ol>
<ul>
<li>想通过类的方法得到对象，会用到classmethod</li>
</ul>
<ol start="4">
<li>Django 模板语法 如何处理xss攻击的</li>
</ol>
<ul>
<li>safe<br>Django的模板中会对HTML标签和JS等语法标签进行自动转义，原因显而易见，这样是为了安全。但是有的时候我们可能不希望这些HTML元素被转义，比如我们做一个内容管理系统，后台添加的文章中是经过修饰的，这些修饰可能是通过一个类似于FCKeditor编辑加注了HTML修饰符的文本，如果自动转义的话显示的就是保护HTML标签的源文件。为了在Django中关闭HTML的自动转义有两种方式，如果是一个单独的变量我们可以通过过滤器“|safe”的方式告诉Django这段代码是安全的不必转义。比如：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">value=<span class="string">&quot;&lt;a href=&quot;</span><span class="string">&quot;&gt;点击&lt;/a&gt;&quot;</span></span><br><span class="line">&#123;&#123; value|safe&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; label &#125;&#125;&lt;/p&gt;  &lt;!--为了安全系统会把标签变成字符串--&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; label|safe &#125;&#125;&lt;/p&gt;    &lt;!--加上safe，确定你的数据是安全的才能被当成是标签--&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>底层实现原理：mark_safe 通过html特殊字符的替换</p>
<ol start="5">
<li>csrf跨站请求伪造<br>什么是csrf：<br>其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用POST方式提交参数的页面</li>
</ol>
<p>原理：<br>当用post提交数据的时候，django会去检查是否有一个csrf的随机字符串，如果没有就会报错，这也是之前我们一直将其注释的原因，错误如下：403</p>
<ul>
<li>通过form提交<br>在form表单里面需要添加<code>&#123;%csrf_token%&#125;</code>，<br>这样当你查看页面源码的时候,可以看到form中有一个input是隐藏的<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;scrf_token&lt;/h3&gt;&lt;form action=&quot;/tag/&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;haiyan&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<img src="https://images2015.cnblogs.com/blog/997599/201701/997599-20170113091806338-1978303584.png">


<p>总结原理：当用户访问login页面的时候，会生成一个csrf的随机字符串，，并且cookie中也存放了这个随机字符串，当用户再次提交数据的时候会带着这个随机字符串提交，如果没有这个随机字符串则无法提交成功</p>
<ul>
<li>通过ajax提交</li>
</ul>
<p><a href="https://www.cnblogs.com/jinxf/p/9186923.html">https://www.cnblogs.com/jinxf/p/9186923.html</a></p>
<ol start="6">
<li>orm 相关问题</li>
</ol>
<p>values和values_list 在annotate（分组查询）  前后的区别<br><a href="https://www.runoob.com/django/django-orm-3.html">https://www.runoob.com/django/django-orm-3.html</a></p>
<ol start="7">
<li>Ajax<br>AJAX（Asynchronous Javascript And XML）翻译成中文就是“异步Javascript和XML”。即使用Javascript语言与服务器进行异步交互，传输的数据为XML（当然，传输的数据不只是XML,现在更多使用json数据）。</li>
</ol>
<ul>
<li>同步交互：客户端发出一个请求后，需要等待服务器响应结束后，才能发出第二个请求；</li>
<li>异步交互：客户端发出一个请求后，无需等待服务器响应结束，就可以发出第二个请求。</li>
</ul>
<p><strong>AJAX除了异步的特点外，还有一个就是：浏览器页面局部刷新；（这一特点给用户的感受是在不知不觉中完成请求和响应过程）</strong><br>局部刷新：Ajax 发请求，把数据拿过来，再勇敢Dom渲染局部</p>
<p><code>$.ajax 是Jquery封装的，会根据不同参数和配置的type组装不同的http请求</code></p>
<ol start="8">
<li>forms组件</li>
</ol>
<ul>
<li>使用它的字段检验功能<ul>
<li><ol>
<li>写一个类(UserForm)，继承Form</li>
</ol>
</li>
<li><ol start="2">
<li>在类中写字段，pwd=forms.CharField(max_length=32,min_length=4)</li>
</ol>
</li>
<li><ol start="3">
<li>在视图函数中使用: form=UserForm(检验的字典)</li>
</ol>
</li>
<li><ol start="4">
<li>form.is_valid()里面做校验；通过，存起来；不通过，forms.errors会有错误信息</li>
</ol>
</li>
</ul>
</li>
<li>默认的校验规则还不够，需要自己写钩子函数<ul>
<li>局部钩子：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_</span>字段名():</span></span><br><span class="line">    val=self.cleaned_data.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    通过<span class="keyword">return</span></span><br><span class="line">    不通过抛出</span><br></pre></td></tr></table></figure></li>
<li>全局钩子：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span></span><br><span class="line">    pwd=self.cleaned_data.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    r_pwd=self.cleaned_data.get(<span class="string">&#x27;r_pwd&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pwd <span class="keyword">and</span> r_pwd:</span><br><span class="line">        <span class="keyword">if</span> pwd==r_pwd:</span><br><span class="line">            <span class="keyword">return</span> self.cleaned_data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;两次密码不一致&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<ol start="9">
<li><p>捕捉错误模块<br>import traceback<br>return response.ServerErrorResponse(content=traceback.format_exc())</p>
</li>
<li><p>QuerySet转成字典<br>引入模块 from django.forms import model_to_dict</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> model_to_dict</span><br><span class="line"></span><br><span class="line">ret = models.Publish.objects.all()</span><br><span class="line">res = [model_to_dict(obj) <span class="keyword">for</span> obj <span class="keyword">in</span> ret]</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
</li>
<li><p>request.POST 和 request.body 获取数据</p>
</li>
</ol>
<p>前端发送数据格式为 json，是在body里的，且header是application/json,数据在request.body<br>发送数据是form 表单的，request.POST</p>
<ol start="12">
<li>Cors跨域问题</li>
</ol>
<ol start="12">
<li>JWT<br>面试问题：JWT底层实现原理<img src="/2020/11/06/py-skill/jwt%E4%BB%8B%E7%BB%8D.png" class title="objsort">
<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></li>
</ol>
<ul>
<li><p>传统token方式</p>
<blockquote>
<p>用户登录成功后，服务端生成一个随机token给用户，并且在服务端(数据库或缓存)中保存一份token，以后用户再来访问时需携带token，服务端接收到token之后，去数据库或缓存中进行校验token的是否超时、是否合法。</p>
</blockquote>
</li>
<li><p>为什么使用JWT<br>传统方式需要考虑session共享问题,存储中间件压力也很大;<br>使用JWT把后端的压力分摊给前端;<br>和session方式不一样的地方:服务端不再保存session的信息了,而是前端将信息保存在客户端,保存在cookie里面，仅仅是保存。下一次再去请求的时候,从cookie里面把信息拿出来,放到请求的header里面,然后发给服务端,后端进行验证的时候只是从header头里面把token拿出来,进行解密,拿到用户信息以及一些权限,再进行展示处理或者操作。</p>
</li>
</ul>
<ul>
<li><p>jwt方式</p>
<blockquote>
<p>用户登录成功后，服务端通过jwt生成一个随机token给用户（服务端无需保留token），以后用户再来访问时需携带token，服务端接收到token之后，通过jwt对token进行校验是否超时、是否合法。</p>
</blockquote>
</li>
<li><p>三部分</p>
<ul>
<li>Header（头部）<blockquote>
<p>是一个 JSON 对象,主要放JWT元信息;Base64URL进行加密；</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">&quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>Payload（负载）<blockquote>
<p>也是一个 JSON 对象，主要放实际的数据，用来存放实际需要传递的数据。Base64URL进行加密；如name或者工号</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">&quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">&quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>Signature（签名）<blockquote>
<p>Signature 部分是对前两部分的签名，防止数据篡改。并且通过secret加密。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">base64UrlEncode(payload),</span><br><span class="line">secret)</span><br></pre></td></tr></table></figure>
<p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>JWT 的使用方式<br>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>
</li>
</ul>
<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>
<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>
<p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p>
<p>前端登录—&gt; 后端验证，返回JWT—&gt;前端把jwt写入cookie（键为token）—&gt;登录验证成功—&gt;跳转前要经过路由守卫,请求前端的Getuserinfo，检验用户是否有权限跳转目标页面；(获取token，如没有，跳转登录页面，如果有token，有权限，然后请求getUserInfo—&gt;getuserinfo作用：查看用户是访问权限，是否有权限访问home页面；访问的时候要求带着token—&gt; 前端的getuserinfo，axios请求到后端的getuserinfo，后端从header头中拿出来进行jwt解密token，验证是否为合法用户(middleware进行进行验证:如果没有token或者为undefined，request.user设置为匿名用户;如果有token，jwt进行解密，可以获取name和id，name和id就是用户登录的时候自定义的数据jwt_data)；解密之后赋值给request.user; —&gt; 后端接口getuserinfo，判断request.user数据是否有值,返回. –&gt;前端判断权限信息</p>
<p>后端接口逻辑:根据业务拿到id或者名字，到DB查询该用户是否有权限，有的话，返回True，没有的话，返回false。一般后端接口data是一些权限的信息</p>
<p>中间件解密，login的时候加密</p>
<ol start="14">
<li>动静态页面区别<br>动态页面：数据每次请求可能不一样，数据是从数据库拿出来渲染的，数据改了，页面就变了。<br>静态页面：数据是固定的，写死的，就是静态页面</li>
</ol>
<p>访问速度：静态&gt;动态</p>
<p>页面静态化：并发量比较高的首页（电商），后台数据如果发生变化，重新生成静态页面</p>
<ol start="15">
<li>web开发模式<blockquote>
<p>前后端混合开发:（前后端不分离）请求动态页面–&gt;查询数据库–&gt;渲染模板–&gt;返回HTML内容(JS在客户端浏览器上执行，所以Ajax是从浏览器里发出去的)</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>前后端分离: 返给前端数据,JS处理数据,JS拿到数据进行DOM渲染</p>
</blockquote>
<ul>
<li>过程:浏览器请求静态页面(不是Django转发的);看到页面后,里面写了一些JS的代码,可以向后端发起请求;返回Json/XML格式的数据,前端就可以渲染页面了.</li>
</ul>
<ol start="16">
<li><p>api接口<br>通过网络,规定了前后台信息交互规则的url连接,也就是前后台交互的媒介。</p>
</li>
<li><p>RESTful API规范</p>
</li>
</ol>
<ol start="18">
<li>生产消费模型</li>
</ol>
<ul>
<li>redis</li>
<li>kafka</li>
<li>rabbitmq</li>
<li>rocketmq<br>消息队列存在哪些问题</li>
<li>如何保证redis/kafka的高可用性</li>
<li>生产的速度&gt;消费的速度 ？ 消息堆积的情况？ 增加消费者</li>
<li>如果保证消息的顺序的可靠性</li>
<li>如何保证生产者消费消息的时候，不重复消费(幂等性)</li>
<li>待补充<br>消息队列的作用：</li>
<li>程序的解耦</li>
<li>削峰</li>
</ul>
<ol start="19">
<li>函数对象（经常用）<br>利用该特性，优雅的取代多分支的if<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    print(<span class="string">&quot;注册&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span>():</span></span><br><span class="line">    print(<span class="string">&quot;转账&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>():</span></span><br><span class="line">    print(<span class="string">&quot;提现&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    func_dic = &#123;</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:[<span class="string">&quot;登录&quot;</span>,register],</span><br><span class="line">        <span class="string">&quot;2&quot;</span>:[<span class="string">&quot;注册&quot;</span>,login],</span><br><span class="line">        <span class="string">&quot;3&quot;</span>:[<span class="string">&quot;转账&quot;</span>,transfer],</span><br><span class="line">        <span class="string">&quot;4&quot;</span>:[<span class="string">&quot;提现&quot;</span>,withdraw],</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> func_dic:</span><br><span class="line">            print(k, func_dic[k][<span class="number">0</span>])</span><br><span class="line">        print(<span class="string">&quot;0 退出&quot;</span>)</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">&quot;请输入您的命令编号: &quot;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> func_dic:</span><br><span class="line">            func_dic[choice][<span class="number">1</span>]()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;请输入正确编号&quot;</span>)</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="20">
<li>for循环原理<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> 迭代器对象.__iter__():</span><br><span class="line">    可以不加区分的调用可迭代对象或者迭代器对象</span><br><span class="line"><span class="keyword">for</span>循环工作原理：</span><br><span class="line">可以称之为迭代器循环</span><br><span class="line"><span class="number">1.</span> d.__iter__()得到一个迭代器对象</span><br><span class="line"><span class="number">2.</span> 迭代器对象.__next__()拿到一个返回值,然后将返回值赋值给k</span><br><span class="line"><span class="number">3.</span> 循环往复步骤<span class="number">2</span>,直到抛出Stopiteration异常<span class="keyword">for</span>循环会捕捉异常然后结束循环</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="21">
<li>变量问题</li>
</ol>
<ul>
<li>os.environ 系统环境变量(所有文件都能看的到) key:value必须为字符串<pre><code>       os.environ[&#39;aaaaaa&#39;] = &#39;111111&#39;</code></pre>
</li>
<li>sys.path   模块的搜索路径</li>
<li>os.path    主要是用于对系统路径文件的操作</li>
<li>PATH       命令执行路径</li>
</ul>
<ol start="22">
<li>路径append<h4 id="项目里面需要注意："><a href="#项目里面需要注意：" class="headerlink" title="项目里面需要注意："></a>项目里面需要注意：</h4></li>
<li>项目内文件相互引用，选择在环境变量里append在启动文件所在的项目根目录。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">print(__file__)) #当前文件的绝对路径</span><br><span class="line">BASE_DIR &#x3D; os.path.dirname(os.path.dirname(__file__))</span><br><span class="line">print(BASE_DIR)</span><br><span class="line">sys.path.append(BASE_DIR)</span><br><span class="line"></span><br><span class="line">LOG_PATH &#x3D; os.path.join(BASE_DIR,&#39;log&#39;,&#39;access.log&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pathlib import Path</span><br><span class="line">res &#x3D; Path(__file__).parent.parent</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="23">
<li><p>原始办法序列化和反序列化<br>str 序列化，eval反序列化<br>eval其实就是执行字符串语句，里面是个字典，那就运行一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;aaa&#x27;</span>:<span class="number">111</span>, <span class="string">&#x27;bbb&#x27;</span>:<span class="number">222</span>&#125;</span><br><span class="line"></span><br><span class="line">print(a,type(a))</span><br><span class="line"></span><br><span class="line">str_a = str(a)</span><br><span class="line"></span><br><span class="line">print(str_a, type(str_a))</span><br><span class="line"></span><br><span class="line">dict_a = eval(str_a)</span><br><span class="line">print(dict_a,type(dict_a))</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志生产配置</p>
</li>
</ol>
<ul>
<li>生产配置<br>1、日志配置字典<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">logging配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录三种日志输出格式</span></span><br><span class="line">standard_format = <span class="string">&#x27;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&#x27;</span> \</span><br><span class="line">                  <span class="string">&#x27;[%(levelname)s][%(message)s]&#x27;</span> <span class="comment"># 其中name为getlogger指定的名字</span></span><br><span class="line">simple_format = <span class="string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&#x27;</span></span><br><span class="line">test_format = <span class="string">&#x27;%(asctime)s] %(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录三种日志输出格式 结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *******************注意1: log文件的目录</span></span><br><span class="line">BASE_PATH = os.path.dirname(os.path.dirname(__file__))</span><br><span class="line">logfile_dir = os.path.join(BASE_PATH, <span class="string">&#x27;log&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># *******************注意2: log文件名</span></span><br><span class="line">logfile_name = <span class="string">&#x27;atm.log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不存在定义的日志目录就创建一个</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(logfile_dir):</span><br><span class="line">    os.mkdir(logfile_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># log文件的全路径</span></span><br><span class="line">logfile_path = os.path.join(logfile_dir, logfile_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、日志配置字典</span></span><br><span class="line">LOGGING_DIC = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;standard&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: standard_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: simple_format</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 打印到终端的日志</span></span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,  <span class="comment"># 打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 打印到文件的日志,收集info及以上的日志</span></span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件,日志轮转</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: logfile_path,</span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,  <span class="comment"># 日志文件编码，不用担心中文乱码</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># logging.getLogger(__name__)拿到的logger配置</span></span><br><span class="line">        <span class="string">&#x27;&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, ],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>, <span class="comment"># 向上(更高level的logger)传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>2、使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># !!!强调!!!</span></span><br><span class="line"><span class="comment"># 1、logging是一个包，需要使用其下的config、getLogger，可以如下导入</span></span><br><span class="line"><span class="comment"># from logging import config</span></span><br><span class="line"><span class="comment"># from logging import getLogger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、也可以使用如下导入</span></span><br><span class="line"><span class="keyword">import</span> logging.config <span class="comment"># 这样连同logging.getLogger都一起导入了,然后使用前缀logging.config.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、加载配置</span></span><br><span class="line">logging.config.dictConfig(settings.LOGGING_DIC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、输出日志</span></span><br><span class="line">logger1=logging.getLogger(<span class="string">&#x27;用户交易&#x27;</span>)</span><br><span class="line">logger1.info(<span class="string">&#x27;egon儿子alex转账3亿冥币&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># logger2=logging.getLogger(&#x27;专门的采集&#x27;) # 名字传入的必须是&#x27;专门的采集&#x27;，与LOGGING_DIC中的配置唯一对应</span></span><br><span class="line"><span class="comment"># logger2.debug(&#x27;专门采集的日志&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">====================================================================</span><br><span class="line">common.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加日志功能：日志功能在接口层使用</span></span><br><span class="line"><span class="comment"># 获取日志对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_logger</span>(<span class="params">log_type</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param log_type: 比如是user日志，bank日志，购物商城日志</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1. 加载日志配置信息</span></span><br><span class="line">    logging.config.dictConfig(</span><br><span class="line">        settings.LOGGING_DIC</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 获取日志对象</span></span><br><span class="line">    logger = logging.getLogger(log_type)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line">接口层配置==============================================</span><br><span class="line">user_logger = common.get_logger(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">程序位置放置user_logger.info(msg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># formatters 多个日志格式，想用哪一个，直接去取</span><br><span class="line"># handlers 是日志的接收者，不同的handler控制日志输出到不同的位置.console，log</span><br><span class="line"># loggers  日志生产者，产生的日志将会传递给handler然后控制输出</span><br><span class="line"></span><br><span class="line"># 注意：loggers(第一层日志级别关限制)---&gt;handlers(第二层日志级别关卡限制)；loggers 和 handler 通常设置成一样就可以了。</span><br><span class="line"># 如果需要配置多个应用打到一个日志，为了避免重复配置，可配置空key</span><br></pre></td></tr></table></figure>

<ol start="25">
<li>hashlib模块<br>hashlib 加密的必须是bytes类型</li>
</ol>
<ul>
<li><p>字符串加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m.update(<span class="string">&#x27;world&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">res = m.hexdigest()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">m1 = hashlib.md5(<span class="string">&#x27;he&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;llo&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;wor&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;ld&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">res = m1.hexdigest()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件校验（seek随机位置，读取2000个字符）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m2 = hashlib.md5()</span><br><span class="line">f = open(<span class="string">&#x27;a2.log&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f.seek(<span class="number">5</span>)</span><br><span class="line">f.read(<span class="number">20</span>)</span><br><span class="line">m2.update(f.read(<span class="number">20</span>))</span><br><span class="line">res4 = m2.hexdigest()</span><br><span class="line">print(res4)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="26">
<li>Python - r’’, b’’, u’’, f’’ 的含义</li>
</ol>
<ul>
<li>字符串前加 f（重点！敲黑板！）<br>作用：相当于 format() 函数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;帅哥&quot;</span></span><br><span class="line">age = <span class="number">12</span></span><br><span class="line">print(<span class="string">f&quot;my name is <span class="subst">&#123;name&#125;</span>,age is <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>执行结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">my name is 帅哥,age is 12</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串前加 r<br>r””  的作用是：去除转义字符<br>场景：想复制某个文件夹的目录，假设是 F:\Python_Easy\n4\test.py<br>当你不用 r”” ，你有三种写法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;F:\Python_Easy\n4\test.py &quot;</span>)</span><br><span class="line">print(<span class="string">&quot;F:\\Python_Easy\\n4\\test.py &quot;</span>)</span><br><span class="line">print(<span class="string">&quot;F:/Python_Easy/n4/test.py &quot;</span>)</span><br></pre></td></tr></table></figure>
<p>而通常如果直接复制目录路径的话，你就粘贴出来的字符串就是第一行代码所示，所有 \ 会<br>当成转义符；而为了消除转义作用，需要手动再加一个 \ ，否则你也得手动改成第三行代码一样<br><strong>执行结果</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">F:\Python_Easy</span><br><span class="line"><span class="number">4</span>    est.py </span><br><span class="line">F:\Python_Easy\n4\test.py </span><br><span class="line">F:/Python_Easy/n4/test.py </span><br></pre></td></tr></table></figure>
<p>而 r”” 的出现就是为了避免这种情况，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(r&quot;F:\Python_Easy\n4\test.py &quot;)</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong><br>F:\Python_Easy\n4\test.py </p>
<ul>
<li>字符串前加 b<br>b” “的作用是：后面字符串是bytes 类型<br>话不多说，直接上代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;中文&quot;</span>.encode(encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">print(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode())</span><br><span class="line">print(<span class="string">r&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>执行结果</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br><span class="line">中文</span><br><span class="line">\xe4\xb8\xad\xe6\x96\x87</span><br></pre></td></tr></table></figure>
<p>可以看到，当你不加 b”” 时，他也就是个普通的字符串而已，不会识别为字节类型</p>
<p>bytes应用场景：像图片、音视频等文件的读写就是用bytes数据<br>顺便可以看看字符串和bytes之间的转换是怎么样的：<a href="https://www.cnblogs.com/poloyy/p/12341746.html">https://www.cnblogs.com/poloyy/p/12341746.html</a></p>
<ul>
<li><p>字符串前加 u<br>作用：后面字符串以 Unicode 格式 进行编码<br>实际场景：一般用在中文字符串前面，防止因为源码储存格式问题，导致再次使用时出现乱码。<br>建议所有编码方式采用utf8</p>
</li>
<li><p>每次打印换行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">recv_size = <span class="number">0</span></span><br><span class="line">total_size = <span class="number">33333</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    recv_size += <span class="number">1024</span></span><br><span class="line">    percent = recv_size / total_size</span><br><span class="line">    <span class="keyword">if</span> percent &gt; <span class="number">1</span>:</span><br><span class="line">        percent = <span class="number">1</span></span><br><span class="line">    res = int(<span class="number">50</span> * percent) * <span class="string">&#x27;#&#x27;</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;\r[%-50s] %d%%&#x27;</span> % (res,int(percent*<span class="number">100</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;\r[%-50s] %d%%&#x27;</span> % (res,int(percent*<span class="number">100</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="27">
<li>可变不可变，有序无序<br>不可变数据类型： 是指变量的值发生改变时，其对应的内存地址<strong>发生改变</strong>。<br>数字、字符串、元祖、布尔</li>
</ol>
<p>可变数据类型：是指变量的值发生改变时，其对应的内存地址<strong>不发生改变</strong>。<br>字典、集合、列表</p>
<p>整型（不可变）<br>列表（有序可变）<br>字符串（有序不可变）<br>元组（有序不可变）<br>字典（无序可变）<br>集合（无序可变）</p>
<ol start="28">
<li>需要掌握的<strong>内置方法</strong></li>
<li>isinstance（做类型判断，不推荐用type）<br>判断一个对象是不是累的实例</li>
<li>issubclass<br>判断类是否属于xx子类</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="comment">#判断Foo 是不是 obj 的实例</span></span><br><span class="line"><span class="comment"># print(isinstance(obj,Foo))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(isinstance([],list))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(type(obj) is Foo)</span></span><br><span class="line"><span class="comment"># print(type([1,2]) is list) </span></span><br><span class="line"></span><br><span class="line">print(issubclass(Foo,object))</span><br></pre></td></tr></table></figure>


<ol start="29">
<li>各种数据类型删除操作</li>
</ol>
<ul>
<li><p>列表<br>pop 弹出 ,根据索引删除<br>del 直接删除  根据索引删除<br>remove 直接删除 根据值删除</p>
</li>
<li><p>字典<br>data = info2.pop(“age”) ### 根据键来删除元素,返回值<br>data = info2.popitem:随机删除，返回元祖（key，value）<br>del info2[‘age’]</p>
</li>
</ul>
<ol start="30">
<li>网络相关问题<br>网络号: （ip与掩码位运算）标明是否在同一个局域网<br>ARP协议: 二层交换机工作所在层级，IP –&gt; MAC 地址的映射关系<br>三层为路由协议（公网）<br>网卡（工作在2层）<br>帧：头16字节(源地址mac + 目标地址mac) + 数据部分 1500MTU 一次最多接受1500字节</li>
</ol>
<ul>
<li>子网划分</li>
</ul>
<ol>
<li>192.168.1.2/24 网络位 192.168.1  主机位 .2<br>子网划分，借用主机位，比如划分2个子网<br>2 的 n次方  借用主机位，给后面的主机划分几个子网<br>可用主机地址 2的 y次方 -2   y是为0的主机位个数</li>
</ol>
<ol start="31">
<li>继承经常用的方法</li>
</ol>
<p><strong>不知道父类里面写了啥，就用super调用一下，剩下该写什么写什么</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">      <span class="comment"># 重写了别人的方法，父类的init永远不能找到。但是又不知道别人的方法里写了啥，你就调用父类的方法</span></span><br><span class="line"></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is running&#x27;</span> % self.name)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">&#x27;egon dsb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = MyThread(<span class="string">&#x27;egon&#x27;</span>)   <span class="comment"># 会用</span></span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">&#x27;主&#x27;</span>)</span><br></pre></td></tr></table></figure>



<ol start="32">
<li>Python内存管理机制</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">内存管理 - （垃圾回收机制）</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 引用计数 </span><br><span class="line">    当一个在内存里的值身上有引用的时候(变量名有指向的时候), 引用计数+<span class="number">1</span>，绑定变量名销毁了，引用计数<span class="number">-1</span></span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> 标记清除</span><br><span class="line">    当程序在运行的时候，发现程序占用内存比较大的时候（<span class="number">80</span>%），自动停止当前整个程序运行，然后自动扫描一遍当前程序的所有变量名的引用计数，把引用计数为<span class="number">0</span>的打标记，最后一次性把所有标记为<span class="number">0</span>的数据清除掉，从而一次性释放大量内存。</span><br><span class="line">  </span><br><span class="line"><span class="number">3.</span> 分代回收</span><br><span class="line">   有一些变量名的引用计数存活率很长（分为青春代，老年代），越往下GC巡逻时间越长；因为垃圾回收机制也是功能，需要消耗资源，分代回收，减少垃圾回收机制消耗的内存。当某个变量每一次扫描引用计数都不为<span class="number">0</span>，那么就会被打上“常用”标签，GC机制就会减少扫描这个变量的次数，以此提高程序运行效率</span><br></pre></td></tr></table></figure>



<ol start="33">
<li>锁的理解</li>
</ol>
<p>在一个python的进程内，不仅有test.py的主线程或者由该主线程开启的其他线程，还有解释器开启的垃圾回收等解释器级别的线程，总之，所有线程都运行在这一个进程内，毫无疑问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1 所有数据都是共享的，这其中，代码作为一种数据也是被所有线程共享的（test.py的所有代码以及Cpython解释器的所有代码）</span><br><span class="line">例如：test.py定义一个函数work（代码内容如下图），在进程内所有线程都能访问到work的代码，于是我们可以开启三个线程然后target都指向该代码，能访问到意味着就是可以执行。</span><br><span class="line"></span><br><span class="line">#2 所有线程的任务，都需要将任务的代码当做参数传给解释器的代码去执行，即所有的线程要想运行自己的任务，首先需要解决的是能够访问到解释器的代码。</span><br></pre></td></tr></table></figure>



<p>垃圾回收线程也会运行，也会进行数据扫描，所有需要GIL锁保证数据安全。GIL锁理解对线程的锁，互斥锁理解为进程级别的锁</p>
<p>同一进程下面开启多线程，因为有GIL 解释器锁存在，并行变成了串行；多进程的为了保证数据安全采用互斥锁。进程锁线程锁可以用队列，数据库解决。</p>
<ol start="34">
<li>有了GIL锁，为什么还需要线程锁</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 本身GIL和线程锁，都是线程级别的锁，GIL是内置的，解释器里的</span><br><span class="line">- 线程锁：开发者定义的</span><br><span class="line">线程执行太快了，同一时刻 读到的值是相同的，操作数据完成后，释放GIL锁，线程2进行修改数据，但是读到的值是未修改之前的。</span><br><span class="line">为了保证数据安全，需要线程锁。</span><br></pre></td></tr></table></figure>

<ol start="35">
<li>多线程多进程</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">其他语言都是开多线程利用多核心CPU。</span><br><span class="line"></span><br><span class="line">每个进程有各自独立的GIL，互不干扰，这样就可以真正意义上的并行执行，所以在python中，多进程的执行效率优于多线程(仅仅针对多核CPU而言)。</span><br><span class="line"></span><br><span class="line">所以我们能够得出结论：多核下，想做并行提升效率，比较通用的方法是使用多进程，能够有效提高执行效率</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们有四个任务需要处理，处理方式肯定是要玩出并发的效果，解决方案可以是：</span><br><span class="line">方案一：开启四个进程</span><br><span class="line">方案二：一个进程下，开启四个线程</span><br><span class="line"><span class="comment">#多核情况下，分析结果：</span></span><br><span class="line">　　如果四个任务是计算密集型，多核意味着并行计算，在python中一个进程中同一时刻只有一个线程执行用不上多核，方案一胜</span><br><span class="line">　　如果四个任务是I/O密集型，再多的核也解决不了I/O问题，方案二胜</span><br></pre></td></tr></table></figure>



<ol start="36">
<li><p>asyncio模块</p>
</li>
<li><p>异步框架没有用那么多的原因</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配套不成熟，之前的那些模块，都是同步模块。操作mysql，redis等等。</span><br><span class="line">前面是用了异步框架，再用了同步模块，还不如不用。</span><br><span class="line"></span><br><span class="line">django 3.0以上可以支持异步，但是它的ORM用的还是同步，等于没用。</span><br><span class="line"></span><br><span class="line">一旦用到异步，后面全要用到异步； 也可以用线程池解决。</span><br></pre></td></tr></table></figure>





<ol start="36">
<li>distinct 去重(<strong>不要忽视主键</strong>)</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Bootstrap-02</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Bootstrap-02/</url>
    <content><![CDATA[<p>Bootstrap布局</p>
<a id="more"></a>

<h2 id="1-概览"><a href="#1-概览" class="headerlink" title="1 概览"></a>1 概览</h2><h3 id="1-1-移动设备优先"><a href="#1-1-移动设备优先" class="headerlink" title="1.1 移动设备优先"></a>1.1 移动设备优先</h3><p>为了确保适当的绘制和触屏缩放，需要在 <code>&lt;head&gt;</code> 之中<strong>添加 viewport 元数据标签</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>在移动设备浏览器上，通过为视口（viewport）设置 meta 属性为 <code>user-scalable=no</code> 可以禁用其缩放（zooming）功能。这样禁用缩放功能后，用户只能滚动屏幕，就能让你的网站看上去更像原生应用的感觉。注意，这种方式我们并不推荐所有网站使用，还是要看你自己的情况而定！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-2-Normalize-css"><a href="#1-2-Normalize-css" class="headerlink" title="1.2 Normalize.css"></a>1.2 Normalize.css</h3><p>BootStrap内置了Normalize.css</p>
<h3 id="1-3-布局容器"><a href="#1-3-布局容器" class="headerlink" title="1.3 布局容器"></a>1.3 布局容器</h3><p>Bootstrap 需要为页面内容和栅格系统包裹一个 <code>.container</code> 容器。我们提供了两个作此用处的类。注意，由于 <code>padding</code> 等属性的原因，这两种 容器类不能互相嵌套。</p>
<p><code>.container</code> 类用于固定宽度并支持响应式布局的容器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><code>.container-fluid</code> 类用于 100% 宽度，占据全部视口（viewport）的容器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container-fluid&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-栅格系统"><a href="#2-栅格系统" class="headerlink" title="2 栅格系统"></a>2 栅格系统</h2><p>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列</p>
<h3 id="2-1-栅格系统简介"><a href="#2-1-栅格系统简介" class="headerlink" title="2.1 栅格系统简介"></a>2.1 栅格系统简介</h3><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。下面就介绍一下 Bootstrap 栅格系统的工作原理：</p>
<ul>
<li>“行（row）”必须包含在 <code>.container</code> （固定宽度）或 <code>.container-fluid</code> （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</li>
<li>通过“行（row）”在水平方向创建一组“列（column）”。</li>
<li>你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。</li>
<li>类似 <code>.row</code> 和 <code>.col-xs-4</code> 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</li>
<li>通过为“列（column）”设置 <code>padding</code> 属性，从而创建列与列之间的间隔（gutter）。通过为 <code>.row</code> 元素设置负值 <code>margin</code> 从而抵消掉为 <code>.container</code> 元素设置的 <code>padding</code>，也就间接为“行（row）”所包含的“列（column）”抵消掉了<code>padding</code>。</li>
<li>负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</li>
<li>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 <code>.col-xs-4</code> 来创建。</li>
<li>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</li>
<li>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-md-*</code>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-lg-*</code>不存在， 也影响大屏幕设备。</li>
</ul>
<h3 id="2-2-栅格参数"><a href="#2-2-栅格参数" class="headerlink" title="2.2 栅格参数"></a>2.2 栅格参数</h3><table>
<thead>
<tr>
<th></th>
<th>超小屏幕 手机 (&lt;768px)</th>
<th>小屏幕 平板 (≥768px)</th>
<th>中等屏幕 桌面显示器 (≥992px)</th>
<th>大屏幕 大桌面显示器 (≥1200px)</th>
</tr>
</thead>
<tbody><tr>
<td><code>.container</code> 最大宽度</td>
<td>None （自动）</td>
<td>750px</td>
<td>970px</td>
<td>1170px</td>
</tr>
<tr>
<td>类前缀</td>
<td><code>.col-xs-</code></td>
<td><code>.col-sm-</code></td>
<td><code>.col-md-</code></td>
<td><code>.col-lg-</code></td>
</tr>
<tr>
<td>最大列（column）宽</td>
<td>自动</td>
<td>~62px</td>
<td>~81px</td>
<td>~97px</td>
</tr>
</tbody></table>
<h3 id="2-3-栅格系统使用"><a href="#2-3-栅格系统使用" class="headerlink" title="2.3 栅格系统使用"></a>2.3 栅格系统使用</h3><p>使用单一的一组 <code>.col-md-*</code> 栅格类，就可以创建一个基本的栅格系统，在手机和平板设备上一开始是堆叠在一起的（超小屏幕到小屏幕这一范围），在桌面（中等）屏幕设备上变为水平排列。所有“列（column）必须放在 ” <code>.row</code> 内。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-1&quot;</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-8&quot;</span>&gt;</span>.col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-不同屏幕设置不同宽度"><a href="#2-4-不同屏幕设置不同宽度" class="headerlink" title="2.4 不同屏幕设置不同宽度"></a>2.4 不同屏幕设置不同宽度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-xs-12 col-sm-6 col-md-8&quot;&gt;.col-xs-12 .col-sm-6 .col-md-8&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-xs-6 col-md-4&quot;&gt;.col-xs-6 .col-md-4&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-xs-6 col-sm-4&quot;&gt;.col-xs-6 .col-sm-4&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-xs-6 col-sm-4&quot;&gt;.col-xs-6 .col-sm-4&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;!-- Optional: clear the XS cols if their content doesn&#39;t match in height --&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;clearfix visible-xs-block&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-xs-6 col-sm-4&quot;&gt;.col-xs-6 .col-sm-4&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-列偏移"><a href="#2-5-列偏移" class="headerlink" title="2.5 列偏移"></a>2.5 列偏移</h3><p>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 <code>*</code> 选择器为当前元素增加了左侧的边距（margin）。例如，<code>.col-md-offset-4</code> 类将 <code>.col-md-4</code> 元素向右侧偏移了4个列（column）的宽度。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-md-4&quot;&gt;.col-md-4&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-md-4 col-md-offset-4&quot;&gt;.col-md-4 .col-md-offset-4&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-md-3 col-md-offset-3&quot;&gt;.col-md-3 .col-md-offset-3&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-md-3 col-md-offset-3&quot;&gt;.col-md-3 .col-md-offset-3&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-md-6 col-md-offset-3&quot;&gt;.col-md-6 .col-md-offset-3&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-列位置移动"><a href="#2-6-列位置移动" class="headerlink" title="2.6 列位置移动"></a>2.6 列位置移动</h3><p>通过使用 <code>.col-md-push-*</code> 和 <code>.col-md-pull-*</code> 类就可以很容易的改变列（column）的顺序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-md-9 col-md-push-3&quot;&gt;.col-md-9 .col-md-push-3&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-md-3 col-md-pull-9&quot;&gt;.col-md-3 .col-md-pull-9&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-排版"><a href="#3-排版" class="headerlink" title="3 排版"></a>3 排版</h2><h3 id="3-1-标题"><a href="#3-1-标题" class="headerlink" title="3.1 标题"></a>3.1 标题</h3><p>HTML 中的所有标题标签，<code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code> 均可使用。另外，还提供了 <code>.h1</code> 到 <code>.h6</code> 类，为的是给内联（inline）属性的文本赋予标题的样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;h1. Bootstrap heading&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;h2. Bootstrap heading&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;h3. Bootstrap heading&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h4&gt;h4. Bootstrap heading&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;h5&gt;h5. Bootstrap heading&lt;&#x2F;h5&gt;</span><br><span class="line">&lt;h6&gt;h6. Bootstrap heading&lt;&#x2F;h6&gt;</span><br></pre></td></tr></table></figure>

<p>在标题内还可以包含 <code>&lt;small&gt;</code> 标签或赋予 <code>.small</code> 类的元素，可以用来标记副标题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;h1. Bootstrap heading &lt;small&gt;Secondary text&lt;&#x2F;small&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;h2. Bootstrap heading &lt;small&gt;Secondary text&lt;&#x2F;small&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;h3. Bootstrap heading &lt;small&gt;Secondary text&lt;&#x2F;small&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h4&gt;h4. Bootstrap heading &lt;small&gt;Secondary text&lt;&#x2F;small&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;h5&gt;h5. Bootstrap heading &lt;small&gt;Secondary text&lt;&#x2F;small&gt;&lt;&#x2F;h5&gt;</span><br><span class="line">&lt;h6&gt;h6. Bootstrap heading &lt;small&gt;Secondary text&lt;&#x2F;small&gt;&lt;&#x2F;h6&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-突出显示"><a href="#3-2-突出显示" class="headerlink" title="3.2 突出显示"></a>3.2 突出显示</h3><p>通过添加 <code>.lead</code> 类可以让段落突出显示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;lead&quot;&gt;...&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-对齐"><a href="#3-3-对齐" class="headerlink" title="3.3 对齐"></a>3.3 对齐</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;text-left&quot;&gt;Left aligned text.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-center&quot;&gt;Center aligned text.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-right&quot;&gt;Right aligned text.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-justify&quot;&gt;Justified text.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-nowrap&quot;&gt;No wrap text.&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-改变大小写"><a href="#3-4-改变大小写" class="headerlink" title="3.4 改变大小写"></a>3.4 改变大小写</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;text-lowercase&quot;&gt;Lowercased text.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-uppercase&quot;&gt;Uppercased text.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-capitalize&quot;&gt;Capitalized text.&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-引用"><a href="#3-5-引用" class="headerlink" title="3.5 引用"></a>3.5 引用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;blockquote&gt;</span><br><span class="line">  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;blockquote&gt;</span><br><span class="line">&lt;blockquote&gt;</span><br><span class="line">  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;footer&gt;Someone famous in &lt;cite title&#x3D;&quot;Source Title&quot;&gt;Source Title&lt;&#x2F;cite&gt;&lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;blockquote&gt;</span><br><span class="line">&lt;blockquote class&#x3D;&quot;blockquote-reverse&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;blockquote&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-6-列表"><a href="#3-6-列表" class="headerlink" title="3.6 列表"></a>3.6 列表</h3><p><strong>无样式列表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;list-unstyled&quot;&gt;</span><br><span class="line">  &lt;li&gt;...&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<p><strong>内联列表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;list-inline&quot;&gt;</span><br><span class="line">  &lt;li&gt;...&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<p><strong>水平排列的内联列表</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl class&#x3D;&quot;dl-horizontal&quot;&gt;</span><br><span class="line">  &lt;dt&gt;...&lt;&#x2F;dt&gt;</span><br><span class="line">  &lt;dd&gt;...&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4 代码"></a>4 代码</h2><h3 id="4-1-内联代码"><a href="#4-1-内联代码" class="headerlink" title="4.1 内联代码"></a>4.1 内联代码</h3><p>通过 <code>&lt;code&gt;</code> 标签包裹内联样式的代码片段。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For example, &lt;code&gt;&lt;section&gt;&lt;&#x2F;code&gt; should be wrapped as inline.</span><br></pre></td></tr></table></figure>

<h3 id="4-2-用户输入"><a href="#4-2-用户输入" class="headerlink" title="4.2 用户输入"></a>4.2 用户输入</h3><p>通过 <code>&lt;kbd&gt;</code> 标签标记用户通过键盘输入的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">To switch directories, type &lt;kbd&gt;cd&lt;&#x2F;kbd&gt; followed by the name of the directory.&lt;br&gt;</span><br><span class="line">To edit settings, press &lt;kbd&gt;&lt;kbd&gt;ctrl&lt;&#x2F;kbd&gt; + &lt;kbd&gt;,&lt;&#x2F;kbd&gt;&lt;&#x2F;kbd&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-代码块"><a href="#4-3-代码块" class="headerlink" title="4.3 代码块"></a>4.3 代码块</h3><p>多行代码可以使用 <code>&lt;pre&gt;</code> 标签。为了正确的展示代码，注意将尖括号做转义处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;&lt;p&gt;Sample text here...&lt;&#x2F;p&gt;&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure>

<p>还可以使用 <code>.pre-scrollable</code> 类，其作用是设置 max-height 为 350px ，并在垂直方向展示滚动条。</p>
<h3 id="4-3-变量"><a href="#4-3-变量" class="headerlink" title="4.3 变量"></a>4.3 变量</h3><p>通过 <code>&lt;var&gt;</code> 标签标记变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;var&gt;y&lt;&#x2F;var&gt; &#x3D; &lt;var&gt;m&lt;&#x2F;var&gt;&lt;var&gt;x&lt;&#x2F;var&gt; + &lt;var&gt;b&lt;&#x2F;var&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-程序输出"><a href="#4-4-程序输出" class="headerlink" title="4.4 程序输出"></a>4.4 程序输出</h3><p>通过 <code>&lt;samp&gt;</code> 标签来标记程序输出的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;samp&gt;This text is meant to be treated as sample output from a computer program.&lt;&#x2F;samp&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-表格"><a href="#5-表格" class="headerlink" title="5 表格"></a>5 表格</h2><h3 id="5-1-基本"><a href="#5-1-基本" class="headerlink" title="5.1 基本"></a>5.1 基本</h3><p>为任意 <code>&lt;table&gt;</code> 标签添加 <code>.table</code> 类可以为其赋予基本的样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table class&#x3D;&quot;table&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-条纹状表格"><a href="#5-2-条纹状表格" class="headerlink" title="5.2 条纹状表格"></a>5.2 条纹状表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table class&#x3D;&quot;table table-striped&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-带边框的表格"><a href="#5-3-带边框的表格" class="headerlink" title="5.3 带边框的表格"></a>5.3 带边框的表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table class&#x3D;&quot;table table-bordered&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-鼠标悬停"><a href="#5-4-鼠标悬停" class="headerlink" title="5.4 鼠标悬停"></a>5.4 鼠标悬停</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table class&#x3D;&quot;table table-hover&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-紧缩表格"><a href="#5-5-紧缩表格" class="headerlink" title="5.5 紧缩表格"></a>5.5 紧缩表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table class&#x3D;&quot;table table-condensed&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-6-状态类"><a href="#5-6-状态类" class="headerlink" title="5.6 状态类"></a>5.6 状态类</h3><p>通过这些状态类可以为行或单元格设置颜色。</p>
<table>
<thead>
<tr>
<th>Class</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>.active</code></td>
<td>鼠标悬停在行或单元格上时所设置的颜色</td>
</tr>
<tr>
<td><code>.success</code></td>
<td>标识成功或积极的动作</td>
</tr>
<tr>
<td><code>.info</code></td>
<td>标识普通的提示信息或动作</td>
</tr>
<tr>
<td><code>.warning</code></td>
<td>标识警告或需要用户注意</td>
</tr>
<tr>
<td><code>.danger</code></td>
<td>标识危险或潜在的带来负面影响的动作</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-md-8 col-md-offset-2&quot;&gt;</span><br><span class="line">        &lt;table class&#x3D;&quot;table table-hover table-striped table-bordered&quot;&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">                    &lt;th&gt;年龄&lt;&#x2F;th&gt;</span><br><span class="line">                    &lt;th&gt;address&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;&#x2F;thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">                &lt;tr class&#x3D;&quot;success&quot;&gt;</span><br></pre></td></tr></table></figure>



<h3 id="5-7-响应式表格"><a href="#5-7-响应式表格" class="headerlink" title="5.7 响应式表格"></a>5.7 响应式表格</h3><p>将任何 <code>.table</code> 元素包裹在 <code>.table-responsive</code> 元素内，即可创建响应式表格，其会在小屏幕设备上（小于768px）水平滚动。当屏幕大于 768px 宽度时，水平滚动条消失。</p>
<h2 id="6-表单"><a href="#6-表单" class="headerlink" title="6 表单"></a>6 表单</h2><h3 id="6-1-基本实例"><a href="#6-1-基本实例" class="headerlink" title="6.1 基本实例"></a>6.1 基本实例</h3><p>单独的表单控件会被自动赋予一些全局样式。所有设置了 <code>.form-control</code> 类的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 <code>width: 100%;</code>。 将 <code>label</code> 元素和前面提到的控件包裹在 <code>.form-group</code> 中可以获得最好的排列。</p>
<ul>
<li>记住: 针对表单标签，  加样式就用class: form-control</li>
<li>特例：CheckBox 和 radio 一般不会加form-control，直接使用原生的即可</li>
<li>针对报错信息，可以加has-error(input的父标签加) <code>&lt;p class=&quot;has-error&quot;&gt;username: &lt;input type=&quot;text&quot; class=&quot;form-control&quot;&gt;&lt;/p&gt;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Email&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>File input<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;help-block&quot;</span>&gt;</span>Example block-level help text here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> Check me out</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-2-内联表单"><a href="#6-2-内联表单" class="headerlink" title="6.2 内联表单"></a>6.2 内联表单</h3><p>为 <code>&lt;form&gt;</code> 元素添加 <code>.form-inline</code> 类可使其内容左对齐并且表现为 <code>inline-block</code> 级别的控件。<strong>只适用于视口（viewport）至少在 768px 宽度时（视口宽度再小的话就会使表单折叠）</strong></p>
<h3 id="6-3-水平排列的表单"><a href="#6-3-水平排列的表单" class="headerlink" title="6.3 水平排列的表单"></a>6.3 水平排列的表单</h3><p>通过为表单添加 <code>.form-horizontal</code> 类，并联合使用 Bootstrap 预置的栅格类，可以将 <code>label</code> 标签和控件组水平并排布局。这样做将改变 <code>.form-group</code> 的行为，使其表现为栅格系统中的行（row），因此就无需再额外添加 <code>.row</code> 了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form class&#x3D;&quot;form-horizontal&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;inputEmail3&quot; class&#x3D;&quot;col-sm-2 control-label&quot;&gt;Email&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;email&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;inputEmail3&quot; placeholder&#x3D;&quot;Email&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;inputPassword3&quot; class&#x3D;&quot;col-sm-2 control-label&quot;&gt;Password&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;password&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;inputPassword3&quot; placeholder&#x3D;&quot;Password&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-offset-2 col-sm-10&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">          &lt;input type&#x3D;&quot;checkbox&quot;&gt; Remember me</span><br><span class="line">        &lt;&#x2F;label&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-offset-2 col-sm-10&quot;&gt;</span><br><span class="line">      &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-default&quot;&gt;Sign in&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-4-表单控件"><a href="#6-4-表单控件" class="headerlink" title="6.4 表单控件"></a>6.4 表单控件</h3><h4 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h4><p>包括大部分表单控件、文本输入域控件，还支持所有 HTML5 类型的输入控件： <code>text</code>、<code>password</code>、<code>datetime</code>、<code>datetime-local</code>、<code>date</code>、<code>month</code>、<code>time</code>、<code>week</code>、<code>number</code>、<code>email</code>、<code>url</code>、<code>search</code>、<code>tel</code> 和 <code>color</code>。</p>
<p>只有正确设置了 <code>type</code> 属性的输入控件才能被赋予正确的样式。</p>
<h4 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h4><p>支持多行文本的表单控件。可根据需要改变 <code>rows</code> 属性。</p>
<h4 id="多选和单选框"><a href="#多选和单选框" class="headerlink" title="多选和单选框"></a>多选和单选框</h4><p><strong>默认样式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;&quot;&gt;</span><br><span class="line">    Option one is this and that&amp;mdash;be sure to include why it&#39;s great</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;checkbox disabled&quot;&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;&quot; disabled&gt;</span><br><span class="line">    Option two is disabled</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;radio&quot;&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;optionsRadios&quot; id&#x3D;&quot;optionsRadios1&quot; value&#x3D;&quot;option1&quot; checked&gt;</span><br><span class="line">    Option one is this and that&amp;mdash;be sure to include why it&#39;s great</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;radio&quot;&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;optionsRadios&quot; id&#x3D;&quot;optionsRadios2&quot; value&#x3D;&quot;option2&quot;&gt;</span><br><span class="line">    Option two can be something else and selecting it will deselect option one</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;radio disabled&quot;&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;optionsRadios&quot; id&#x3D;&quot;optionsRadios3&quot; value&#x3D;&quot;option3&quot; disabled&gt;</span><br><span class="line">    Option three is disabled</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>内联单选和多选框</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;label class&#x3D;&quot;checkbox-inline&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;inlineCheckbox1&quot; value&#x3D;&quot;option1&quot;&gt; 1</span><br><span class="line">&lt;&#x2F;label&gt;</span><br><span class="line">&lt;label class&#x3D;&quot;checkbox-inline&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;inlineCheckbox2&quot; value&#x3D;&quot;option2&quot;&gt; 2</span><br><span class="line">&lt;&#x2F;label&gt;</span><br><span class="line">&lt;label class&#x3D;&quot;checkbox-inline&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;inlineCheckbox3&quot; value&#x3D;&quot;option3&quot;&gt; 3</span><br><span class="line">&lt;&#x2F;label&gt;</span><br><span class="line"></span><br><span class="line">&lt;label class&#x3D;&quot;radio-inline&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;inlineRadioOptions&quot; id&#x3D;&quot;inlineRadio1&quot; value&#x3D;&quot;option1&quot;&gt; 1</span><br><span class="line">&lt;&#x2F;label&gt;</span><br><span class="line">&lt;label class&#x3D;&quot;radio-inline&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;inlineRadioOptions&quot; id&#x3D;&quot;inlineRadio2&quot; value&#x3D;&quot;option2&quot;&gt; 2</span><br><span class="line">&lt;&#x2F;label&gt;</span><br><span class="line">&lt;label class&#x3D;&quot;radio-inline&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;inlineRadioOptions&quot; id&#x3D;&quot;inlineRadio3&quot; value&#x3D;&quot;option3&quot;&gt; 3</span><br><span class="line">&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure>

<p><strong>不带文本的Checkbox 和 radio</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;blankCheckbox&quot; value&#x3D;&quot;option1&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;radio&quot;&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;blankRadio&quot; id&#x3D;&quot;blankRadio1&quot; value&#x3D;&quot;option1&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select class&#x3D;&quot;form-control&quot;&gt;</span><br><span class="line">  &lt;option&gt;1&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;option&gt;2&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;option&gt;3&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;option&gt;4&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;option&gt;5&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<h4 id="静态内容"><a href="#静态内容" class="headerlink" title="静态内容"></a>静态内容</h4><p>如果需要在表单中将一行纯文本和 <code>label</code> 元素放置于同一行，为 <code>&lt;p&gt;</code> 元素添加 <code>.form-control-static</code> 类即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form class&#x3D;&quot;form-horizontal&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label class&#x3D;&quot;col-sm-2 control-label&quot;&gt;Email&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">      &lt;p class&#x3D;&quot;form-control-static&quot;&gt;email@example.com&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;inputPassword&quot; class&#x3D;&quot;col-sm-2 control-label&quot;&gt;Password&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;password&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;inputPassword&quot; placeholder&#x3D;&quot;Password&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="帮助文字"><a href="#帮助文字" class="headerlink" title="帮助文字"></a>帮助文字</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;label class&#x3D;&quot;sr-only&quot; for&#x3D;&quot;inputHelpBlock&quot;&gt;Input with help text&lt;&#x2F;label&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;inputHelpBlock&quot; class&#x3D;&quot;form-control&quot; aria-describedby&#x3D;&quot;helpBlock&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;span id&#x3D;&quot;helpBlock&quot; class&#x3D;&quot;help-block&quot;&gt;A block of help text that breaks onto a new line and may extend beyond one line.&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<h4 id="校验状态"><a href="#校验状态" class="headerlink" title="校验状态"></a>校验状态</h4><p>Bootstrap 对表单控件的校验状态，如 error、warning 和 success 状态，都定义了样式。使用时，添加 <code>.has-warning</code>、<code>.has-error</code>或 <code>.has-success</code> 类到这些控件的父元素即可。任何包含在此元素之内的 <code>.control-label</code>、<code>.form-control</code> 和 <code>.help-block</code> 元素都将接受这些校验状态的样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;form-group has-success&quot;&gt;</span><br><span class="line">  &lt;label class&#x3D;&quot;control-label&quot; for&#x3D;&quot;inputSuccess1&quot;&gt;Input with success&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;inputSuccess1&quot; aria-describedby&#x3D;&quot;helpBlock2&quot;&gt;</span><br><span class="line">  &lt;span id&#x3D;&quot;helpBlock2&quot; class&#x3D;&quot;help-block&quot;&gt;A block of help text that breaks onto a new line and may extend beyond one line.&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;form-group has-warning&quot;&gt;</span><br><span class="line">  &lt;label class&#x3D;&quot;control-label&quot; for&#x3D;&quot;inputWarning1&quot;&gt;Input with warning&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;inputWarning1&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;form-group has-error&quot;&gt;</span><br><span class="line">  &lt;label class&#x3D;&quot;control-label&quot; for&#x3D;&quot;inputError1&quot;&gt;Input with error&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;inputError1&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;has-success&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;checkboxSuccess&quot; value&#x3D;&quot;option1&quot;&gt;</span><br><span class="line">      Checkbox with success</span><br><span class="line">    &lt;&#x2F;label&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;has-warning&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;checkboxWarning&quot; value&#x3D;&quot;option1&quot;&gt;</span><br><span class="line">      Checkbox with warning</span><br><span class="line">    &lt;&#x2F;label&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;has-error&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">    &lt;label&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;checkboxError&quot; value&#x3D;&quot;option1&quot;&gt;</span><br><span class="line">      Checkbox with error</span><br><span class="line">    &lt;&#x2F;label&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="添加额外的图标"><a href="#添加额外的图标" class="headerlink" title="添加额外的图标"></a>添加额外的图标</h4><p>你还可以针对校验状态为输入框添加额外的图标。只需设置相应的 <code>.has-feedback</code> 类并添加正确的图标即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;form-group has-success has-feedback&quot;&gt;</span><br><span class="line">  &lt;label class&#x3D;&quot;control-label&quot; for&#x3D;&quot;inputSuccess2&quot;&gt;Input with success&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;inputSuccess2&quot; aria-describedby&#x3D;&quot;inputSuccess2Status&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;glyphicon glyphicon-ok form-control-feedback&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;span id&#x3D;&quot;inputSuccess2Status&quot; class&#x3D;&quot;sr-only&quot;&gt;(success)&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h4 id="控件尺寸"><a href="#控件尺寸" class="headerlink" title="控件尺寸"></a>控件尺寸</h4><p>通过 <code>.input-lg</code> 类似的类可以为控件设置高度，通过 <code>.col-lg-*</code> 类似的类可以为控件设置宽度。</p>
<p><strong>高度尺寸</strong></p>
<p>创建大一些或小一些的表单控件以匹配按钮尺寸</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input class&#x3D;&quot;form-control input-lg&quot; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;.input-lg&quot;&gt;</span><br><span class="line">&lt;input class&#x3D;&quot;form-control&quot; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Default input&quot;&gt;</span><br><span class="line">&lt;input class&#x3D;&quot;form-control input-sm&quot; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;.input-sm&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;select class&#x3D;&quot;form-control input-lg&quot;&gt;...&lt;&#x2F;select&gt;</span><br><span class="line">&lt;select class&#x3D;&quot;form-control&quot;&gt;...&lt;&#x2F;select&gt;</span><br><span class="line">&lt;select class&#x3D;&quot;form-control input-sm&quot;&gt;...&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p><strong>水平排列的表单组的尺寸</strong></p>
<p>通过添加 <code>.form-group-lg</code> 或 <code>.form-group-sm</code> 类，为 <code>.form-horizontal</code> 包裹的 <code>label</code> 元素和表单控件快速设置尺寸。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form class&#x3D;&quot;form-horizontal&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;form-group form-group-lg&quot;&gt;</span><br><span class="line">    &lt;label class&#x3D;&quot;col-sm-2 control-label&quot; for&#x3D;&quot;formGroupInputLarge&quot;&gt;Large label&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">      &lt;input class&#x3D;&quot;form-control&quot; type&#x3D;&quot;text&quot; id&#x3D;&quot;formGroupInputLarge&quot; placeholder&#x3D;&quot;Large input&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;form-group form-group-sm&quot;&gt;</span><br><span class="line">    &lt;label class&#x3D;&quot;col-sm-2 control-label&quot; for&#x3D;&quot;formGroupInputSmall&quot;&gt;Small label&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">      &lt;input class&#x3D;&quot;form-control&quot; type&#x3D;&quot;text&quot; id&#x3D;&quot;formGroupInputSmall&quot; placeholder&#x3D;&quot;Small input&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-按钮"><a href="#7-按钮" class="headerlink" title="7 按钮"></a>7 按钮</h2><h3 id="7-1-可作为按钮使用的标签或元素"><a href="#7-1-可作为按钮使用的标签或元素" class="headerlink" title="7.1 可作为按钮使用的标签或元素"></a>7.1 可作为按钮使用的标签或元素</h3><p>为 <code>&lt;a&gt;</code>、<code>&lt;button&gt;</code> 或 <code>&lt;input&gt;</code> 元素添加按钮类（button class）即可使用 Bootstrap 提供的样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;btn btn-default&quot; href&#x3D;&quot;#&quot; role&#x3D;&quot;button&quot;&gt;Link&lt;&#x2F;a&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;btn btn-default&quot; type&#x3D;&quot;submit&quot;&gt;Button&lt;&#x2F;button&gt;</span><br><span class="line">&lt;input class&#x3D;&quot;btn btn-default&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;Input&quot;&gt;</span><br><span class="line">&lt;input class&#x3D;&quot;btn btn-default&quot; type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-预定义样式"><a href="#7-2-预定义样式" class="headerlink" title="7.2 预定义样式"></a>7.2 预定义样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Standard button --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot;&gt;（默认样式）Default&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot;&gt;（首选项）Primary&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Indicates a successful or positive action --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-success&quot;&gt;（成功）Success&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Contextual button for informational alert messages --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-info&quot;&gt;（一般信息）Info&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Indicates caution should be taken with this action --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-warning&quot;&gt;（警告）Warning&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Indicates a dangerous or potentially negative action --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-danger&quot;&gt;（危险）Danger&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-link&quot;&gt;（链接）Link&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-尺寸"><a href="#7-3-尺寸" class="headerlink" title="7.3 尺寸"></a>7.3 尺寸</h3><p>需要让按钮具有不同尺寸吗？使用 <code>.btn-lg</code>、<code>.btn-sm</code> 或 <code>.btn-xs</code> 就可以获得不同尺寸的按钮。</p>
<p>通过给按钮添加 <code>.btn-block</code> 类可以将其拉伸至父元素100%的宽度，而且按钮也变为了块级（block）元素。</p>
<h3 id="7-4-激活状态"><a href="#7-4-激活状态" class="headerlink" title="7.4 激活状态"></a>7.4 激活状态</h3><p>添加 <code>.active</code> 类</p>
<h3 id="7-5-禁用状态"><a href="#7-5-禁用状态" class="headerlink" title="7.5 禁用状态"></a>7.5 禁用状态</h3><p>为 <code>&lt;button&gt;</code> 元素添加 <code>disabled</code> 属性，使其表现出禁用状态。</p>
<p>为基于 <code>&lt;a&gt;</code> 元素创建的按钮添加 <code>.disabled</code> 类。</p>
<h2 id="8-图片"><a href="#8-图片" class="headerlink" title="8 图片"></a>8 图片</h2><h3 id="8-1-响应式图片"><a href="#8-1-响应式图片" class="headerlink" title="8.1 响应式图片"></a>8.1 响应式图片</h3><p>在 Bootstrap 版本 3 中，通过为图片添加 <code>.img-responsive</code> 类可以让图片支持响应式布局。其实质是为图片设置了 <code>max-width: 100%;</code>、 <code>height: auto;</code> 和 <code>display: block;</code> 属性，从而让图片在其父元素中更好的缩放。</p>
<p>如果需要让使用了 <code>.img-responsive</code> 类的图片水平居中，请使用 <code>.center-block</code> 类，不要用 <code>.text-center</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;...&quot; class&#x3D;&quot;img-responsive&quot; alt&#x3D;&quot;Responsive image&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-2-图片形状"><a href="#8-2-图片形状" class="headerlink" title="8.2 图片形状"></a>8.2 图片形状</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot; class&#x3D;&quot;img-rounded&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot; class&#x3D;&quot;img-circle&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot; class&#x3D;&quot;img-thumbnail&quot;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="9-辅助类"><a href="#9-辅助类" class="headerlink" title="9 辅助类"></a>9 辅助类</h2><h3 id="9-1-文本颜色"><a href="#9-1-文本颜色" class="headerlink" title="9.1 文本颜色"></a>9.1 文本颜色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;text-muted&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-primary&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-success&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-info&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-warning&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;text-danger&quot;&gt;...&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-背景色"><a href="#9-2-背景色" class="headerlink" title="9.2 背景色"></a>9.2 背景色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;bg-primary&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;bg-success&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;bg-info&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;bg-warning&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;bg-danger&quot;&gt;...&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-3-三角符号"><a href="#9-3-三角符号" class="headerlink" title="9.3 三角符号"></a>9.3 三角符号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-4-浮动"><a href="#9-4-浮动" class="headerlink" title="9.4 浮动"></a>9.4 浮动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;pull-left&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;pull-right&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-5-让内容块居中"><a href="#9-5-让内容块居中" class="headerlink" title="9.5 让内容块居中"></a>9.5 让内容块居中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;center-block&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-6-清除浮动"><a href="#9-6-清除浮动" class="headerlink" title="9.6 清除浮动"></a>9.6 清除浮动</h3><p><strong>通过为父元素</strong>添加 <code>.clearfix</code> 类可以很容易地清除浮动（<code>float</code>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Usage as a class --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;clearfix&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-7-显示或隐藏内容"><a href="#9-7-显示或隐藏内容" class="headerlink" title="9.7 显示或隐藏内容"></a>9.7 显示或隐藏内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;show&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;hidden&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-10-图片替换"><a href="#9-10-图片替换" class="headerlink" title="9.10 图片替换"></a>9.10 图片替换</h3><p>使用 <code>.text-hide</code> 类或对应的 mixin 可以用来将元素的文本内容替换为一张背景图。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 class&#x3D;&quot;text-hide&quot;&gt;Custom heading&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>

<h2 id="10-响应式工具"><a href="#10-响应式工具" class="headerlink" title="10 响应式工具"></a>10 响应式工具</h2><h3 id="10-1-不同视口下隐藏显示"><a href="#10-1-不同视口下隐藏显示" class="headerlink" title="10.1 不同视口下隐藏显示"></a>10.1 不同视口下隐藏显示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.visible-xs-*    </span><br><span class="line">.visible-sm-*    </span><br><span class="line">.visible-md-*    </span><br><span class="line">.visible-lg-*    </span><br><span class="line">.hidden-xs    </span><br><span class="line">.hidden-sm    </span><br><span class="line">.hidden-md    </span><br><span class="line">.hidden-lg</span><br><span class="line">.visible-*-block    </span><br><span class="line">.visible-*-inline    </span><br><span class="line">.visible-*-inline-block</span><br></pre></td></tr></table></figure>

<h3 id="10-2-打印类"><a href="#10-2-打印类" class="headerlink" title="10.2 打印类"></a>10.2 打印类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.visible-print-block</span><br><span class="line">.visible-print-inline</span><br><span class="line">.visible-print-inline-block</span><br><span class="line"></span><br><span class="line">.hidden-print 打印机下隐藏</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-JS-02</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-JS-02/</url>
    <content><![CDATA[<p>JavaScript 变量/基本数据类型/流程控制</p>
<a id="more"></a>

<h2 id="1、变量的定义"><a href="#1、变量的定义" class="headerlink" title="1、变量的定义"></a>1、变量的定义</h2><p>JS中定义变量，不同于Python，我们需要像Python定义函数那样，也需要用特定的关键词来定义变量：</p>
<p>ES5语法，我们采用var关键词定义变量，并且没有常量的概念</p>
<p>ES6语法，我们采用let关键词定义变量，用const关键词定义常量</p>
<p>注：我们不需要像Python那样切换解释器版本来区别到底该书写什么版本语法的代码，在一个JS文件中我们可以同时书写两种语法的JS代码，浏览器都可以自动帮我们解析并运行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5定义变量：var是关键词、num是变量名、=为赋值符、10为变量值、;为JS语言语句的结束标识符</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6定义变量</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"># var与let的区别</span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">  print(n)</span><br><span class="line">print(n)  </span><br><span class="line"># var 5        let  10</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">var在for循环里面定义也会影响到全局</span></span><br><span class="line"><span class="string">let在局部定义只会在局部生效</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、变量的命名规范"><a href="#2、变量的命名规范" class="headerlink" title="2、变量的命名规范"></a>2、变量的命名规范</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">1. 由字母，数字，_，$组成，不能以数字开头（可以包含中文字符）</span><br><span class="line">2. 区分大小写</span><br><span class="line">3. 不能出现关键字及保留字</span><br><span class="line">4. 推荐使用下划线 </span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>abstract</td>
<td>arguments</td>
<td>boolean</td>
<td>break</td>
<td>byte</td>
</tr>
<tr>
<td>case</td>
<td>catch</td>
<td>char</td>
<td>class*</td>
<td>const</td>
</tr>
<tr>
<td>continue</td>
<td>debugger</td>
<td>default</td>
<td>delete</td>
<td>do</td>
</tr>
<tr>
<td>double</td>
<td>else</td>
<td>enum*</td>
<td>eval</td>
<td>export*</td>
</tr>
<tr>
<td>extends*</td>
<td>false</td>
<td>final</td>
<td>finally</td>
<td>float</td>
</tr>
<tr>
<td>for</td>
<td>function</td>
<td>goto</td>
<td>if</td>
<td>implements</td>
</tr>
<tr>
<td>import*</td>
<td>in</td>
<td>instanceof</td>
<td>int</td>
<td>interface</td>
</tr>
<tr>
<td>let</td>
<td>long</td>
<td>native</td>
<td>new</td>
<td>null</td>
</tr>
<tr>
<td>package</td>
<td>private</td>
<td>protected</td>
<td>public</td>
<td>return</td>
</tr>
<tr>
<td>short</td>
<td>static</td>
<td>super*</td>
<td>switch</td>
<td>synchronized</td>
</tr>
<tr>
<td>this</td>
<td>throw</td>
<td>throws</td>
<td>transient</td>
<td>true</td>
</tr>
<tr>
<td>try</td>
<td>typeof</td>
<td>var</td>
<td>void</td>
<td>volatile</td>
</tr>
<tr>
<td>while</td>
<td>with</td>
<td>yield</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="3、基本数据类型"><a href="#3、基本数据类型" class="headerlink" title="3、基本数据类型"></a>3、基本数据类型</h2><p>JS语言中基本数据类型分值类型与引用类型两部分。</p>
<h3 id="3-1-值类型"><a href="#3-1-值类型" class="headerlink" title="3-1 值类型"></a>3-1 值类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数字类型：number</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(num), num);  <span class="comment">// 结果：number  10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;123&quot;</span>)  <span class="comment">// 返回123</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;ABC&quot;</span>)  <span class="comment">// 返回NaN,NaN属性是代表非数字值的特殊值。该属性用于指示某个值不是数字。</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;123.456&quot;</span>)  <span class="comment">// 返回123.456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊的NaN:数值类型，表示的意思是&quot;不是一个数字&quot; NOT A NUMBER</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串类型：string</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">&quot;双引号可以表示字符串&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&#x27;单引号可以表示字符串&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(s1), s1);  <span class="comment">// 结果：string  双引号可以表示字符串</span></span><br><span class="line"><span class="comment">// 模版字符串,可以字符串拼接</span></span><br><span class="line"><span class="comment">// 模版字符串除了可以定义多行文本之外还可以实现格式化字符串操作</span></span><br><span class="line"><span class="comment">// 书写$&#123;&#125; 会自动去前面找大括号里面的变量名对应的值 如果没有定义直接报错</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Waylon&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">var</span> ss = <span class="string">`</span></span><br><span class="line"><span class="string">My name is <span class="subst">$&#123;name&#125;</span> and my age is <span class="subst">$&#123;age&#125;</span></span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">ss</span><br><span class="line"><span class="string">&quot;My name is Waylon and my age is 18&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串拼接</span></span><br><span class="line"><span class="comment">// 在python中不推荐你使用+做拼接 join</span></span><br><span class="line"><span class="comment">// 在js中推荐你直接使用+做拼接</span></span><br><span class="line">name + age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">常用方法：</span><br><span class="line">方法    说明</span><br><span class="line">.length    返回长度</span><br><span class="line">.trim()    移除空白</span><br><span class="line">.trimLeft()    移除左边的空白</span><br><span class="line">.trimRight()    移除右边的空白</span><br><span class="line">.charAt(n)    返回第n个字符</span><br><span class="line">.concat(value, ...)    拼接</span><br><span class="line">.indexOf(substring, start)    子序列位置</span><br><span class="line">.substring(<span class="keyword">from</span>, to)    根据索引获取子序列   <span class="comment">//不识别-1，尽量不用了</span></span><br><span class="line">.slice(start, end)    切片</span><br><span class="line">.toLowerCase()    小写</span><br><span class="line">.toUpperCase()    大写</span><br><span class="line">.split(delimiter, limit)    分割</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔类型：boolean</span></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(b1), b1);  <span class="comment">// 结果：boolean true</span></span><br><span class="line"># 布尔值的false有哪些</span><br><span class="line">  空字符串、<span class="number">0</span>、<span class="literal">null</span>、<span class="literal">undefined</span>、<span class="literal">NaN</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 未定义类型：undefined</span></span><br><span class="line">  # undefined 和 null</span><br><span class="line"><span class="keyword">var</span> u1;</span><br><span class="line"><span class="keyword">var</span> u2 = <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(u1), u1);  <span class="comment">// 结果：undefined  undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">    表示值为空 一般都是指定或者清空一个变量时使用</span></span><br><span class="line"><span class="comment">        name = &#x27;jason&#x27;</span></span><br><span class="line"><span class="comment">        name = null</span></span><br><span class="line"><span class="comment">undefined</span></span><br><span class="line"><span class="comment">    表示声明了一个变量 但是没有做初始化操作(没有给值)</span></span><br><span class="line"><span class="comment">    函数没有指定返回值的时候 返回的也是undefined</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210502232049344.png" alt="image-20210502232049344"></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210502231957799.png" alt="image-20210502231957799"></p>
<h3 id="3-2-引用类型"><a href="#3-2-引用类型" class="headerlink" title="3-2 引用类型"></a>3-2 引用类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 函数类型：function</span><br><span class="line">function fn1() &#123;&#125;</span><br><span class="line">var fn2 &#x3D; function() &#123;&#125;;</span><br><span class="line">console.log(typeof(fn1), fn1);  &#x2F;&#x2F; 结果：function  ƒ fn1() &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对象类型：object</span><br><span class="line">var obj1 &#x3D; &#123;&#125;</span><br><span class="line">console.log(typeof(obj1), obj1);  &#x2F;&#x2F; 结果：function  &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Array对象类型：</span><br><span class="line">var arr1 &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">console.log(typeof(arr1), arr1);  &#x2F;&#x2F; 结果：object  (5) [1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>

<h3 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象(Object)"></a>对象(Object)</h3><p>JavaScript 中的所有事物都是对象：字符串、数值、数组、函数…此外，JavaScript 允许自定义对象。</p>
<p>JavaScript 提供多个内建对象，比如 String、Date、Array 等等。</p>
<p>对象只是带有属性和方法的特殊数据类型。</p>
<p><strong>数组</strong></p>
<p>数组对象的作用是：使用单独的变量名来存储一系列的值。类似于Python中的列表。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">123</span>, <span class="string">&quot;ABC&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">1</span>]);  <span class="comment">// 输出&quot;ABC&quot;</span></span><br><span class="line"><span class="comment">// 不支持负数取值</span></span><br></pre></td></tr></table></figure>



<p>常用方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.length</td>
<td>数组的大小</td>
</tr>
<tr>
<td>.push(ele)</td>
<td>尾部追加元素</td>
</tr>
<tr>
<td>.pop()</td>
<td>获取尾部的元素</td>
</tr>
<tr>
<td>.unshift(ele)</td>
<td>头部插入元素</td>
</tr>
<tr>
<td>.shift()</td>
<td>头部移除元素</td>
</tr>
<tr>
<td>.slice(start, end)</td>
<td>切片</td>
</tr>
<tr>
<td>.reverse()</td>
<td>反转</td>
</tr>
<tr>
<td>.join(seq)</td>
<td>将数组元素连接成字符串</td>
</tr>
<tr>
<td>.concat(val, …)</td>
<td>连接数组</td>
</tr>
<tr>
<td>.sort()</td>
<td>排序</td>
</tr>
<tr>
<td>.forEach()</td>
<td>将数组的每个元素传递给回调函数</td>
</tr>
<tr>
<td>.splice()</td>
<td>删除元素，并向数组添加新元素。</td>
</tr>
<tr>
<td>.map()</td>
<td>返回一个数组元素调用函数处理后的值的新数组</td>
</tr>
</tbody></table>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p><strong>语法：</strong></p>
<p>forEach(function(currentValue, index, arr), thisValue)**<br>**</p>
<p><strong>参数：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><em>function(currentValue, index, arr)</em></td>
<td>必需。 数组中每个元素需要调用的函数。 函数参数:参数描述<em>currentValue</em>必需。当前元素<em>index</em>可选。当前元素的索引值。<em>arr</em>可选。当前元素所属的数组对象。</td>
</tr>
<tr>
<td><em>thisValue</em></td>
<td>可选。传递给函数的值一般用 “this” 值。 如果这个参数为空， “undefined” 会传递给 “this” 值</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210502233730713.png" alt="image-20210502233730713"></p>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p><strong>语法：</strong></p>
<p>splice(index,howmany,item1,…..,itemX)</p>
<p><strong>参数：</strong> </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><em>index</em></td>
<td>必需。规定从何处添加/删除元素。 该参数是开始插入和（或）删除的数组元素的下标，必须是数字。</td>
</tr>
<tr>
<td><em>howmany</em></td>
<td>必需。规定应该删除多少元素。必须是数字，但可以是 “0”。 如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。</td>
</tr>
<tr>
<td><em>item1</em>, …, <em>itemX</em></td>
<td>可选。要添加到数组的新元素</td>
</tr>
</tbody></table>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p><strong>语法：</strong></p>
<p>map(function(currentValue,index,arr), thisValue)</p>
<p><strong>参数：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><em>function(currentValue, index,arr)</em></td>
<td>必须。函数，数组中的每个元素都会执行这个函数 函数参数: 参数描述<em>currentValue</em>必须。当前元素的值<em>index</em>可选。当期元素的索引值<em>arr</em>可选。当期元素属于的数组对象</td>
</tr>
<tr>
<td><em>thisValue</em></td>
<td>可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。 如果省略了 thisValue ，”this” 的值为 “undefined”</td>
</tr>
</tbody></table>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210502233809470.png" alt="image-20210502233809470"></p>
<p>注意：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关于sort()需要注意：</span><br><span class="line"></span><br><span class="line">如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是按照字符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。</span><br><span class="line"></span><br><span class="line">如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：</span><br><span class="line"></span><br><span class="line">若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。</span><br><span class="line">若 a 等于 b，则返回 0。</span><br><span class="line">若 a 大于 b，则返回一个大于 0 的值。</span><br><span class="line"></span><br><span class="line">function sortNumber(a,b)&#123;</span><br><span class="line">    return a - b</span><br><span class="line">&#125;</span><br><span class="line">var arr1 &#x3D; [11, 100, 22, 55, 33, 44]</span><br><span class="line">arr1.sort(sortNumber)</span><br></pre></td></tr></table></figure>

<p>可以使用以下方式遍历数组中的元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; [10, 20, 30, 40];</span><br><span class="line">for (var i&#x3D;0;i&lt;a.length;i++) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><em>补充：\</em></strong></p>
<p><em>ES6新引入了一种新的原始数据类型（Symbol），表示独一无二的值。它是JavaScript语言的第7种数据类型。</em></p>
<h3 id="类型查询"><a href="#类型查询" class="headerlink" title="类型查询"></a>类型查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof &quot;abc&quot;  &#x2F;&#x2F; &quot;string&quot;</span><br><span class="line">typeof null  &#x2F;&#x2F; &quot;object&quot;</span><br><span class="line">typeof true  &#x2F;&#x2F; &quot;boolean&quot;</span><br><span class="line">typeof 123 &#x2F;&#x2F; &quot;number&quot;</span><br></pre></td></tr></table></figure>

<p>typeof是一个一元运算符（就像++，–，！，- 等一元运算符），不是一个函数，也不是一个语句。</p>
<p>对变量或值调用 typeof 运算符将返回下列值之一：</p>
<ul>
<li>undefined - 如果变量是 Undefined 类型的</li>
<li>boolean - 如果变量是 Boolean 类型的</li>
<li>number - 如果变量是 Number 类型的</li>
<li>string - 如果变量是 String 类型的</li>
<li>object - 如果变量是一种引用类型或 Null 类型的</li>
</ul>
<h2 id="4、运算符"><a href="#4、运算符" class="headerlink" title="4、运算符"></a>4、运算符</h2><h3 id="4-1-算数运算符"><a href="#4-1-算数运算符" class="headerlink" title="4-1 算数运算符"></a>4-1 算数运算符</h3><p>前提：n = 5</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>例子</th>
<th>x结果</th>
<th>n结果</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法</td>
<td>x=n+2</td>
<td>7</td>
<td>5</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
<td>x=n-2</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
<td>x=n*2</td>
<td>10</td>
<td>5</td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
<td>x=n/2</td>
<td>2.5</td>
<td>5</td>
</tr>
<tr>
<td>%</td>
<td>取模(余数)</td>
<td>x=n/2</td>
<td>1</td>
<td>5</td>
</tr>
<tr>
<td>++</td>
<td>自增</td>
<td>x=++n</td>
<td>6</td>
<td>6</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x=n++</td>
<td>5</td>
<td>6</td>
</tr>
<tr>
<td>–</td>
<td>自减</td>
<td>x=–n</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td></td>
<td></td>
<td>x=n–</td>
<td>5</td>
<td>4</td>
</tr>
</tbody></table>
<p>加号在前: 先加后赋值 </p>
<p>加号在后: 先赋值后加</p>
<h3 id="4-2-赋值运算符"><a href="#4-2-赋值运算符" class="headerlink" title="4-2 赋值运算符"></a>4-2 赋值运算符</h3><p>前提：x=5，y=5</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>例子</th>
<th>等同于</th>
<th>运算结果</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>x=y</td>
<td></td>
<td>5</td>
</tr>
<tr>
<td>+=</td>
<td>x+=y</td>
<td>x=x+y</td>
<td>10</td>
</tr>
<tr>
<td>-=</td>
<td>x-=y</td>
<td>x=x-y</td>
<td>0</td>
</tr>
<tr>
<td>*=</td>
<td>x*=y</td>
<td>x=x*y</td>
<td>25</td>
</tr>
<tr>
<td>/=</td>
<td>x/=y</td>
<td>x=x/y</td>
<td>1</td>
</tr>
<tr>
<td>%=</td>
<td>x%=y</td>
<td>x=x%y</td>
<td>0</td>
</tr>
</tbody></table>
<h3 id="4-3-比较运算符"><a href="#4-3-比较运算符" class="headerlink" title="4-3 比较运算符"></a>4-3 比较运算符</h3><p>前提：x=5</p>
<p>== 弱等于  内部自动转换成相同的数据类型比较了</p>
<p>=== 强等于 内部不做类型转换</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>比较</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于</td>
<td>x==”5”</td>
<td>true</td>
</tr>
<tr>
<td>===</td>
<td>绝对等于</td>
<td>x===”5”</td>
<td>false</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>x!=”5”</td>
<td>fales</td>
</tr>
<tr>
<td>!==</td>
<td>不绝对等于</td>
<td>x!==”5”</td>
<td>true</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>x&gt;5</td>
<td>false</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>x&lt;5</td>
<td>false</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>x&gt;=5</td>
<td>true</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>x&lt;=5</td>
<td>true</td>
</tr>
</tbody></table>
<h3 id="4-4-逻辑运算符"><a href="#4-4-逻辑运算符" class="headerlink" title="4-4 逻辑运算符"></a>4-4 逻辑运算符</h3><p>前提：n=5</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>例子</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>x=n&gt;10&amp;&amp;++n</td>
<td>x=false,n=5（短路）</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>x=n&lt;10||n–</td>
<td>x=true,n=5（短路）</td>
</tr>
<tr>
<td>!</td>
<td>非</td>
<td>x=!n</td>
<td>x=false,x=5</td>
</tr>
</tbody></table>
<h3 id="4-5-三目运算符"><a href="#4-5-三目运算符" class="headerlink" title="4-5 三目运算符"></a>4-5 三目运算符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 结果 &#x3D; 条件表达式 ? 结果1 : 结果2;</span><br><span class="line">&#x2F;&#x2F; 语法规则：条件表达式成立，将结果1赋值给结果，反正赋值结果2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 案例：</span><br><span class="line">var weather &#x3D; prompt(&quot;天气(晴|雨)&quot;);  &#x2F;&#x2F; 文本输入弹出框</span><br><span class="line">var res &#x3D; tq &#x3D;&#x3D; &#39;晴&#39; ? &quot;今天天气挺好&quot; : &quot;请假回家收衣服&quot;;</span><br><span class="line">console.log(res);  &#x2F;&#x2F; 今天天气挺好</span><br></pre></td></tr></table></figure>

<h2 id="5-流程控制"><a href="#5-流程控制" class="headerlink" title="5 流程控制"></a>5 流程控制</h2><h3 id="5-1-if判断"><a href="#5-1-if判断" class="headerlink" title="5-1 if判断"></a>5-1 if判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var age &#x3D; 28;</span><br><span class="line"># if(条件)&#123;条件成立之后指向的代码块&#125;</span><br><span class="line">if (age&gt;18)&#123;</span><br><span class="line">  console.log(&#39;来啊 来啊&#39;)</span><br><span class="line">&#125;</span><br><span class="line"># if-else</span><br><span class="line">if (age&gt;18)&#123;</span><br><span class="line">  console.log(&#39;来啊 来啊&#39;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  console.log(&#39;没钱 滚蛋&#39;)</span><br><span class="line">&#125;</span><br><span class="line"># if-else if else</span><br><span class="line">if (age&lt;18)&#123;</span><br><span class="line">  console.log(&quot;培养一下&quot;)</span><br><span class="line">&#125;else if(age&lt;24)&#123;</span><br><span class="line">  console.log(&#39;小姐姐你好 我是你的粉丝&#39;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  console.log(&#39;你是个好人&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">在js中代码是没有缩进的 只不过我们处于python书写习惯人为的加上了而已</span><br><span class="line">()条件</span><br><span class="line">&#123;&#125;代码块</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-switch"><a href="#5-2-switch" class="headerlink" title="5-2 switch"></a>5-2 switch</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># switch语法</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">提前列举好可能出现的条件和解决方式</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(num)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;喝酒&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;  <span class="comment">// 不加break 匹配到一个之后 就一直往下执行</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;唱歌&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;洗脚&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;按摩&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;营养快线&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;老板慢走 欢迎下次光临&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;条件都没有匹配上 默认走的流程&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-for-循环"><a href="#5-3-for-循环" class="headerlink" title="5-3 for 循环"></a>5-3 for 循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># for循环</span><br><span class="line"># 打印0-9数字</span><br><span class="line">for(let i&#x3D;0;i&lt;10;i++)&#123;</span><br><span class="line">  console.log(i)</span><br><span class="line">&#125;</span><br><span class="line"># 题目1  循环打印出数组里面的每一个元素</span><br><span class="line">var l1 &#x3D; [111,222,333,444,555,666]</span><br><span class="line">for(let i&#x3D;0;i&lt;l1.length;i++)&#123;</span><br><span class="line">  console.log(l1[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-while循环"><a href="#5-4-while循环" class="headerlink" title="5-4 while循环"></a>5-4 while循环</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># while循环</span><br><span class="line">var i &#x3D; 0</span><br><span class="line">while(i&lt;100)&#123;</span><br><span class="line">  console.log(i)</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-三元运算符"><a href="#5-5-三元运算符" class="headerlink" title="5-5 三元运算符"></a>5-5 三元运算符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 三元运算符</span><br><span class="line"># python中三元运算符 res &#x3D; 1 if 1&gt;2 else 3</span><br><span class="line"># JS中三元运算  res &#x3D; 1&gt;2?1:3 </span><br><span class="line">条件成立取问好后面的1 不成立取冒号后面的3</span><br><span class="line">var res &#x3D; 2&gt;5?8:10 # 10</span><br><span class="line">var res &#x3D; 2&gt;5?8:(8&gt;5?666:444)  # 666</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">三元运算符不要写的过于复杂 </span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>



<h2 id="6-内置对象和方法"><a href="#6-内置对象和方法" class="headerlink" title="6 内置对象和方法"></a>6 内置对象和方法</h2><p>JavaScript中的所有事物都是对象：字符串、数字、数组、日期，等等。在JavaScript中，对象是拥有属性和方法的数据。</p>
<p>我们在学习基本数据类型的时候已经带大家了解了，JavaScript中的Number对象、String对象、Array对象等。</p>
<p>注意var s1 = “abc”和var s2 = new String(“abc”)的区别：typeof s1 –&gt; string而 typeof s2 –&gt; Object</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/867021-20180311224027096-1902975546.png" alt="img"></p>
<h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><p>JavaScript的对象（Object）本质上是键值对的集合（Hash结构），但是只能用字符串作为键。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">&quot;age&quot;</span>]);</span><br></pre></td></tr></table></figure>

<p>遍历对象中的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; &#123;&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 18&#125;;</span><br><span class="line">for (var i in a)&#123;</span><br><span class="line">  console.log(i, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://stackoverflow.com/questions/684672/how-do-i-loop-through-or-enumerate-a-javascript-object">事情并没有那么简单…</a></p>
<p><strong>创建对象：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var person&#x3D;new Object();  &#x2F;&#x2F; 创建一个person对象</span><br><span class="line">person.name&#x3D;&quot;Alex&quot;;  &#x2F;&#x2F; person对象的name属性</span><br><span class="line">person.age&#x3D;18;  &#x2F;&#x2F; person对象的age属性</span><br></pre></td></tr></table></figure>

<p><em>注意：</em></p>
<p><em>ES6中提供了Map数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当做键。</em></p>
<p><em>也就是说，Object结构提供了“字符串–值”的对应，Map结构提供了“值–值”的对应，是一种更完善的Hash结构实现。</em></p>
<p>map</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">p</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">m.set(o, <span class="string">&quot;content&quot;</span>&#125;</span><br><span class="line">m.get(o)  <span class="comment">// &quot;content&quot;</span></span><br><span class="line"></span><br><span class="line">m.has(o)  <span class="comment">// true</span></span><br><span class="line">m.delete(o)  <span class="comment">// true</span></span><br><span class="line">m.has(o) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">map</span><br></pre></td></tr></table></figure>

<p> <strong>扩展：</strong>JavaScript面向对象之继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span> (<span class="params">loc</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.loc = loc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类方法</span></span><br><span class="line">Car.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.loc ++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">var</span> Van = <span class="function"><span class="keyword">function</span> (<span class="params">loc</span>) </span>&#123;</span><br><span class="line">  Car.call(<span class="built_in">this</span>, loc);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承父类的方法</span></span><br><span class="line">Van.prototype = <span class="built_in">Object</span>.create(Car.prototype);</span><br><span class="line"><span class="comment">// 修复 constructor</span></span><br><span class="line">Van.prototype.constructor = Van;</span><br><span class="line"><span class="comment">// 扩展方法</span></span><br><span class="line">Van.prototype.grab = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">JavaScript面向对象之继承</span><br></pre></td></tr></table></figure>

<h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p><strong>创建Date对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1：不指定参数</span></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d1.toLocaleString());</span><br><span class="line"><span class="comment">//方法2：参数为日期字符串</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2004/3/20 11:12&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d2.toLocaleString());</span><br><span class="line"><span class="keyword">var</span> d3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;04/03/20 11:12&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d3.toLocaleString());</span><br><span class="line"><span class="comment">//方法3：参数为毫秒数</span></span><br><span class="line"><span class="keyword">var</span> d3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">5000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d3.toLocaleString());</span><br><span class="line"><span class="built_in">console</span>.log(d3.toUTCString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法4：参数为年月日小时分钟秒毫秒</span></span><br><span class="line"><span class="keyword">var</span> d4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2004</span>,<span class="number">2</span>,<span class="number">20</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">300</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d4.toLocaleString());  <span class="comment">//毫秒并不直接显示</span></span><br></pre></td></tr></table></figure>

<p><strong>Date对象的方法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="comment">//getDate()                 获取日</span></span><br><span class="line"><span class="comment">//getDay ()                 获取星期</span></span><br><span class="line"><span class="comment">//getMonth ()               获取月（0-11）</span></span><br><span class="line"><span class="comment">//getFullYear ()            获取完整年份</span></span><br><span class="line"><span class="comment">//getYear ()                获取年</span></span><br><span class="line"><span class="comment">//getHours ()               获取小时</span></span><br><span class="line"><span class="comment">//getMinutes ()             获取分钟</span></span><br><span class="line"><span class="comment">//getSeconds ()             获取秒</span></span><br><span class="line"><span class="comment">//getMilliseconds ()        获取毫秒</span></span><br><span class="line"><span class="comment">//getTime ()                返回累计毫秒数(从1970/1/1午夜)</span></span><br></pre></td></tr></table></figure>

<p><strong>练习：</strong></p>
<p>编写代码，将当前日期按“2017-12-27 11:11 星期三”格式输出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WEEKMAP = &#123;  </span><br><span class="line">  <span class="number">0</span>:<span class="string">&quot;星期天&quot;</span>,</span><br><span class="line">  <span class="number">1</span>:<span class="string">&quot;星期一&quot;</span>,</span><br><span class="line">  <span class="number">2</span>:<span class="string">&quot;星期二&quot;</span>,</span><br><span class="line">  <span class="number">3</span>:<span class="string">&quot;星期三&quot;</span>,</span><br><span class="line">  <span class="number">4</span>:<span class="string">&quot;星期四&quot;</span>,</span><br><span class="line">  <span class="number">5</span>:<span class="string">&quot;星期五&quot;</span>,</span><br><span class="line">  <span class="number">6</span>:<span class="string">&quot;星期六&quot;</span></span><br><span class="line">&#125;;  <span class="comment">//定义一个数字与星期的对应关系对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> year = d1.getFullYear();</span><br><span class="line">    <span class="keyword">var</span> month = d1.getMonth() + <span class="number">1</span>;  <span class="comment">//注意月份是从0~11</span></span><br><span class="line">    <span class="keyword">var</span> day = d1.getDate();</span><br><span class="line">    <span class="keyword">var</span> hour = d1.getHours();</span><br><span class="line">    <span class="keyword">var</span> minute = d1.getMinutes() &lt; <span class="number">10</span>?<span class="string">&quot;0&quot;</span>+d1.getMinutes():d1.getMinutes();  <span class="comment">//三元运算</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> week = WEEKMAP[d1.getDay()];  <span class="comment">//星期是从0~6</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> strTime = <span class="string">`</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;hour&#125;</span>:<span class="subst">$&#123;minute&#125;</span> <span class="subst">$&#123;week&#125;</span></span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(strTime)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">showTime();</span><br><span class="line"></span><br><span class="line">参考示例</span><br></pre></td></tr></table></figure>

<p>详细Date对象方法：<a href="http://www.w3school.com.cn/jsref/jsref_obj_date.asp">点我</a></p>
<h3 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;Alex&quot;, &quot;age&quot;: 18&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="comment">// JSON字符串转换成对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(str1); </span><br><span class="line"><span class="comment">// 对象转换成JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(obj1);</span><br></pre></td></tr></table></figure>

<h3 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义正则表达式两种方式</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;^[a-zA-Z][a-zA-Z0-9]&#123;5,11&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9]&#123;5,9&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则校验数据</span></span><br><span class="line">reg1.test(<span class="string">&#x27;jason666&#x27;</span>)</span><br><span class="line">reg2.test(<span class="string">&#x27;jason666&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*第一个注意事项，正则表达式中不能有空格*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局匹配</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;egondsb dsb dsb&#x27;</span>;</span><br><span class="line">s1.match(<span class="regexp">/s/</span>)</span><br><span class="line">s1.match(<span class="regexp">/s/g</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 槽点1</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9]&#123;5,9&#125;$/g</span></span><br><span class="line">reg2.test(<span class="string">&#x27;egondsb&#x27;</span>);</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">reg2.test(<span class="string">&#x27;egondsb&#x27;</span>);</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">reg2.lastIndex;</span><br><span class="line"><span class="comment">/*第二个注意事项，全局匹配时有一个lastIndex属性*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验时不传参数,默认传的是undefined参数</span></span><br><span class="line"><span class="comment">// 槽点2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9]&#123;5,9&#125;$/</span></span><br><span class="line">reg2.test();</span><br><span class="line">reg2.test(<span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/undefined/</span>;</span><br><span class="line">reg3.test();</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">注意上述问题</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abs(x)      返回数的绝对值。</span><br><span class="line">exp(x)      返回 e 的指数。</span><br><span class="line">floor(x)    对数进行下舍入。</span><br><span class="line">log(x)      返回数的自然对数（底为e）。</span><br><span class="line">max(x,y)    返回 x 和 y 中的最高值。</span><br><span class="line">min(x,y)    返回 x 和 y 中的最低值。</span><br><span class="line">pow(x,y)    返回 x 的 y 次幂。</span><br><span class="line">random()    返回 <span class="number">0</span> ~ <span class="number">1</span> 之间的随机数。</span><br><span class="line">round(x)    把数四舍五入为最接近的整数。</span><br><span class="line">sin(x)      返回数的正弦。</span><br><span class="line">sqrt(x)     返回数的平方根。</span><br><span class="line">tan(x)      返回角的正切。</span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Vue-02</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Vue-02/</url>
    <content><![CDATA[<p>Vue基础</p>
<a id="more"></a>

<h1 id="Vue介绍"><a href="#Vue介绍" class="headerlink" title="Vue介绍"></a>Vue介绍</h1><h2 id="一-模板语法"><a href="#一-模板语法" class="headerlink" title="一 模板语法"></a>一 模板语法</h2><h3 id="1-插值语法"><a href="#1-插值语法" class="headerlink" title="1.插值语法"></a>1.插值语法</h3><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;插值&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;字符串：&#123;&#123;name&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;数值：&#123;&#123;age&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;数组：&#123;&#123;list1&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;对象：&#123;&#123;obj1&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;字符串：&#123;&#123;link1&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;运算：&#123;&#123;10+20+30+40&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;三目运算符：&#123;&#123;10&gt;20?&#39;是&#39;:&#39;否&#39;&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;, &#x2F;&#x2F; 在box这个div中可以写 vue的语法</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: &#39;Darker&#39;, &#x2F;&#x2F; 字符串</span><br><span class="line">            age: 18, &#x2F;&#x2F; 数值</span><br><span class="line">            list1: [1,2,3,4],   &#x2F;&#x2F; 数组</span><br><span class="line">            obj1: &#123;name: &#39;Darker&#39;, age: 19&#125;, &#x2F;&#x2F; 对象</span><br><span class="line">            link1: &#39;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下 你就知道&lt;&#x2F;a&gt;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvqy6y2bj30w609h75c.jpg" alt="img"></p>
<h2 id="二-指令"><a href="#二-指令" class="headerlink" title="二 指令"></a>二 指令</h2><h3 id="1-文本指令"><a href="#1-文本指令" class="headerlink" title="1.文本指令"></a>1.文本指令</h3><table>
<thead>
<tr>
<th>指令</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>v-html</td>
<td>让HTML渲染成页面</td>
</tr>
<tr>
<td>v-text</td>
<td>标签内容显示js变量对应的值</td>
</tr>
<tr>
<td>v-show</td>
<td>放1个布尔值：为真 标签就显示；为假 标签就不显示</td>
</tr>
<tr>
<td>v-if</td>
<td>放1个布尔值：为真 标签就显示；为假 标签就不显示</td>
</tr>
</tbody></table>
<blockquote>
<p>v-show与 v-if的区别：</p>
<p>v-show：标签还在，只是不显示了（display: none）<br>v-if：直接操作DOM，删除/插入 标签</p>
</blockquote>
<h4 id="v-html：让HTML渲染成页面"><a href="#v-html：让HTML渲染成页面" class="headerlink" title="v-html：让HTML渲染成页面"></a>v-html：让HTML渲染成页面</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;v-html&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-html&#x3D;&quot;link1&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;, &#x2F;&#x2F; 在box这个div中可以写 vue的语法</span><br><span class="line">        data: &#123;</span><br><span class="line">            link1: &#39;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下 你就知道&lt;&#x2F;a&gt;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>、</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvsnh11lj30b802qq2t.jpg" alt="img"></p>
<h4 id="v-text：标签内容显示js变量对应的值"><a href="#v-text：标签内容显示js变量对应的值" class="headerlink" title="v-text：标签内容显示js变量对应的值"></a>v-text：标签内容显示js变量对应的值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;v-text&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-text&#x3D;&quot;link1&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;, &#x2F;&#x2F; 在box这个div中可以写 vue的语法</span><br><span class="line">        data: &#123;</span><br><span class="line">            link1: &#39;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下 你就知道&lt;&#x2F;a&gt;&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvt217rjj30rd01tglq.jpg" alt="img"></p>
<h4 id="v-show：显示-隐藏内容"><a href="#v-show：显示-隐藏内容" class="headerlink" title="v-show：显示/隐藏内容"></a>v-show：显示/隐藏内容</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;v-show&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;h3&gt;案例：控件通过按钮来控制显示和小事&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick()&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;div v-show&#x3D;&quot;isShow&quot;&gt;isShow&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isShow: true,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick()&#123;</span><br><span class="line">              this.isShow &#x3D; !this.isShow    &#x2F;&#x2F; this指的是当前的vue对象</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvtglr2ng30sy0kyn0l.gif" alt="img"></p>
<h4 id="v-if：显示-删除内容"><a href="#v-if：显示-删除内容" class="headerlink" title="v-if：显示/删除内容"></a>v-if：显示/删除内容</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;v-if&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;h3&gt;案例：控件通过按钮来控制显示和消失&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick()&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;isCreated&quot;&gt;isCreated&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isCreated:true</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick()&#123;</span><br><span class="line">              this.isCreated &#x3D; !this.isCreated    &#x2F;&#x2F; this指的是当前的vue对象</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvtwu8u4g30sy0ky0vu.gif" alt="img"></p>
<h3 id="2-事件指令"><a href="#2-事件指令" class="headerlink" title="2.事件指令"></a>2.事件指令</h3><table>
<thead>
<tr>
<th>指令</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>v-on</td>
<td>触发事件（不推荐）</td>
</tr>
<tr>
<td>@</td>
<td>触发事件（<strong>推荐</strong>）</td>
</tr>
<tr>
<td>@[event]</td>
<td>触发event事件（可以是其他任意<a href="https://www.jquery123.com/category/events/">事件</a>）</td>
</tr>
</tbody></table>
<h4 id="v-on-click-可以缩写成-click"><a href="#v-on-click-可以缩写成-click" class="headerlink" title="v-on:click 可以缩写成@click"></a>v-on:click 可以缩写成@click</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;事件指令&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;handleClick1&quot;&gt;点我1&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;!-- 下面这个用的多 --&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick2&quot;&gt;点我2&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;!-- 如果不传参数，是没有区别的 --&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick3()&quot;&gt;点我3-1(带括号)&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;!-- 如果要传参数 --&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick3(1,22,333)&quot;&gt;点我3-2(带括号+参数)&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;!-- 传入事件 --&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick4($event)&quot;&gt;点我4(带事件参数)&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick1() &#123;</span><br><span class="line">                console.log(&#39;点我1&#39;)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleClick2() &#123;</span><br><span class="line">                console.log(&#39;点我2&#39;)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleClick3(a,b,c) &#123;</span><br><span class="line">                console.log(a,b,c)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleClick4(event) &#123;</span><br><span class="line">                console.log(event)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvuoolf9g30tm0qqn6k.gif" alt="img"></p>
<h3 id="3-属性指令"><a href="#3-属性指令" class="headerlink" title="3.属性指令"></a>3.属性指令</h3><table>
<thead>
<tr>
<th>指令</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>v-bind</td>
<td>直接写js的变量或语法（不推荐）</td>
</tr>
<tr>
<td>:</td>
<td>直接写js的变量或语法（推荐）</td>
</tr>
</tbody></table>
<h4 id="v-bind-class-’js变量’可以缩写成：-class-’js变量’"><a href="#v-bind-class-’js变量’可以缩写成：-class-’js变量’" class="headerlink" title="v-bind:class=’js变量’可以缩写成：:class=’js变量’"></a>v-bind:class=’js变量’可以缩写成：:class=’js变量’</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;属性指令&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .red &#123;</span><br><span class="line">            color: rgba(255, 104, 104, 0.7);</span><br><span class="line">        &#125;</span><br><span class="line">        .purple &#123;</span><br><span class="line">            color: rgba(104, 104, 255, 0.7);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;img v-bind:src&#x3D;&quot;url&quot; alt&#x3D;&quot;&quot; height&#x3D;&quot;100&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick&quot;&gt;点我变色&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;isActive?&#39;red&#39;:&#39;purple&#39;&quot;&gt;</span><br><span class="line">        &lt;h1&gt;我是一个div&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            url: &#39;https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;u&#x3D;205441424,1768829584&amp;fm&#x3D;26&amp;gp&#x3D;0.jpg&#39;,</span><br><span class="line">            change: &#39;red&#39;,</span><br><span class="line">            isActive: true</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                this.isActive &#x3D; !this.isActive</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvvdx8ayg30fy0b4acu.gif" alt="img"></p>
<h2 id="三-Style-和-Class"><a href="#三-Style-和-Class" class="headerlink" title="三 Style 和 Class"></a>三 Style 和 Class</h2><h3 id="数据的绑定"><a href="#数据的绑定" class="headerlink" title="数据的绑定"></a>数据的绑定</h3><blockquote>
<p><strong>语法</strong></p>
<p>:属性名=js变量/js语法</p>
<ul>
<li>:class=’js变量、字符串、js数组’</li>
</ul>
<p>class：三目运算符、数组、对象{red: true}</p>
<ul>
<li>:style=’js变量、字符串、js数组’</li>
</ul>
<p>style：三目运算符、数组[{backgreound: ‘red’},]、对象{background: ‘red’}</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Style 和 Class&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .red &#123;</span><br><span class="line">            color: rgba(255, 104, 104, 0.7);</span><br><span class="line">        &#125;</span><br><span class="line">        .font-20 &#123;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .be-bold &#123;</span><br><span class="line">            font-weight: bold;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;p&gt;我是一个普通的p标签&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;class_obj&quot;&gt;</span><br><span class="line">        &lt;p&gt;我是一个不普通的p标签1&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick&quot;&gt;点击放大字体&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;div :style&#x3D;&quot;style_obj&quot;&gt;</span><br><span class="line">        &lt;p&gt;我是一个不普通的p标签2&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            &#x2F;&#x2F; class_obj: &#39;red&#39;,    &#x2F;&#x2F; 放1个是字符串</span><br><span class="line">            class_obj: [&#39;red&#39;, &#39;font-20&#39;, &#39;be-bold&#39;],    &#x2F;&#x2F; 放2个是数组</span><br><span class="line">            &#x2F;&#x2F; class_obj: &#123; red:true, be-bold:false&#125;,    &#x2F;&#x2F; 也可以放对象</span><br><span class="line">            &#x2F;&#x2F; 数组.push()   从尾部添加1个元素</span><br><span class="line">            &#x2F;&#x2F; 数组.pop()    删除最后1个元素 并返回</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 对象的写法</span><br><span class="line">            style_obj: &#123;</span><br><span class="line">                color: &#39;red&#39;,</span><br><span class="line">                fontSize: &#39;20px&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; style_obj: [&#123;background:&#39;red&#39;&#125;, &#123;fontSize:&#39;20px&#39;&#125;]</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick()&#123;</span><br><span class="line">                this.style_obj[&#39;fontSize&#39;]&#x3D;&#39;30px&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="下方试验的命令"><a href="#下方试验的命令" class="headerlink" title="下方试验的命令"></a>下方试验的命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.class_obj.pop()</span><br><span class="line">vm.class_obj.pop()</span><br><span class="line">vm.class_obj.pop()</span><br><span class="line">vm.class_obj.push(&#39;be-bold&#39;)</span><br><span class="line">vm.class_obj.push(&#39;red&#39;)</span><br><span class="line">vm.class_obj.push(&#39;font-20&#39;)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvy66iwbg30ra0vk45y-20210502151420962.gif" alt="img"></p>
<h2 id="四-条件渲染"><a href="#四-条件渲染" class="headerlink" title="四 条件渲染"></a>四 条件渲染</h2><table>
<thead>
<tr>
<th>指令</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>v-if</td>
<td>相当于： if</td>
</tr>
<tr>
<td>v-else</td>
<td>相当于：else</td>
</tr>
<tr>
<td>v-else-if</td>
<td>相当于：else if</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;if、else if、else&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;h3&gt;案例：if、else if、else&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;h2 v-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;1&#39;&quot;&gt;A&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h2 v-else-if&#x3D;&quot;type&#x3D;&#x3D;&#x3D;&#39;2&#39;&quot;&gt;B&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h2 v-else&gt;C&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            type: &#39;1&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvyoakbng30sk0nsab7-20210502151433810.gif" alt="img"></p>
<h2 id="五-列表渲染"><a href="#五-列表渲染" class="headerlink" title="五 列表渲染"></a>五 列表渲染</h2><h3 id="1-v-if-v-for-v-else控制购物车商品的显示"><a href="#1-v-if-v-for-v-else控制购物车商品的显示" class="headerlink" title="1. v-if+v-for+v-else控制购物车商品的显示"></a>1. v-if+v-for+v-else控制购物车商品的显示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;v-if + v-for + v-else控制购物车商品的显示&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        table, td &#123;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;h2&gt;我的购物车&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;show&quot;&gt;刷新购物车&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;table v-if&#x3D;&quot;!shopping_car.length&#x3D;&#x3D;0&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;商品名称&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;价格&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr v-for&#x3D;&quot;item in shopping_car&quot;&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.price&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;table v-else&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;商品名称&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;价格&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;暂无信息&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;暂无信息&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isActive: false,</span><br><span class="line">            shopping_car: []</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            show() &#123;</span><br><span class="line">                this.shopping_car &#x3D; [</span><br><span class="line">                    &#123;name: &#39;Threadripper 3990X&#39;, price: &#39;29999元&#39;&#125;,</span><br><span class="line">                    &#123;name: &#39;NVIDIA RTX 8000&#39;, price: &#39;59999元&#39;&#125;,</span><br><span class="line">                    &#123;name: &#39;ROG ZENITH II EXTREME&#39;, price: &#39;9999元&#39;&#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvzcr9peg30ra0igmyc.gif" alt="img"></p>
<h3 id="2-v-for遍历数组-列表-、对象-字典-、数字"><a href="#2-v-for遍历数组-列表-、对象-字典-、数字" class="headerlink" title="2. v-for遍历数组(列表)、对象(字典)、数字"></a>2. v-for遍历数组(列表)、对象(字典)、数字</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;v-for遍历数组(列表)、对象(字典)&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        table, td &#123;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;h2&gt;数组（列表）for循环遍历&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(value,index) in list_test&quot;&gt;&#123;&#123;index&#125;&#125; —— &#123;&#123;value&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;对象（字典）for循环遍历&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(value,key) in dic_test&quot;&gt;&#123;&#123;key&#125;&#125; —— &#123;&#123;value&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;数组（列表）套对象（字典）for循环遍历&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;年龄&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;国籍&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr v-for&#x3D;&quot;info in summary_test&quot;&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;info.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;info.age&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;info.gender&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;info.country&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            list_test: [&#39;First&#39;, &#39;second&#39;, &#39;Third&#39;, &#39;Forth&#39;, &#39;Fifth&#39;],</span><br><span class="line">            dic_test:&#123;name: &#39;Darker&#39;, age: 18, gender: &#39;male&#39;&#125;,</span><br><span class="line">            summary_test: [</span><br><span class="line">                    &#123;name: &#39;Alan&#39;, age: 23, gender: &#39;male&#39;, country: &#39;America&#39;&#125;,</span><br><span class="line">                    &#123;name: &#39;Ben&#39;, age: 15, gender: &#39;male&#39;, country: &#39;Australia&#39;&#125;,</span><br><span class="line">                    &#123;name: &#39;Cindy&#39;, age: 12, gender: &#39;female&#39;, country: &#39;Japan&#39;&#125;,</span><br><span class="line">                    &#123;name: &#39;Darker&#39;, age: 18, gender: &#39;male&#39;, country: &#39;China&#39;&#125;,</span><br><span class="line">                    &#123;name: &#39;Elisa&#39;, age: 26, gender: &#39;female&#39;, country: &#39;Mexico&#39;&#125;,</span><br><span class="line">                ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsvzvbc40j30lf0nz0uq.jpg" alt="img"></p>
<blockquote>
<p><strong>注意！</strong>在<code>Vue</code>中：</p>
<ul>
<li><strong>数组</strong>的<code>index</code>和<code>value</code>是<strong>反的</strong></li>
<li><strong>对象</strong>的<code>key</code>和<code>value</code>也是<strong>反的</strong></li>
</ul>
</blockquote>
<h3 id="3-key值-的解释"><a href="#3-key值-的解释" class="headerlink" title="3. key值 的解释"></a>3. key值 的解释</h3><p>vue中使用的是虚拟DOM，会和原生的DOM进行比较，然后进行数据的更新，<strong>提高数据的刷新速度</strong>（虚拟DOM用了diff算法）</p>
<ul>
<li>在<code>v-for</code>循环<code>数组、对象</code>时，建议在<code>控件/组件/标签</code>写1个<code>key属性</code>，属性值唯一</li>
<li>页面更新之后，会加速DOM的替换（渲染）</li>
<li><code>:key=&quot;变量&quot;</code></li>
</ul>
<h3 id="4-数组更新与检测"><a href="#4-数组更新与检测" class="headerlink" title="4. 数组更新与检测"></a>4. 数组更新与检测</h3><h5 id="可以检测到变动的数组操作："><a href="#可以检测到变动的数组操作：" class="headerlink" title="可以检测到变动的数组操作："></a>可以检测到变动的数组操作：</h5><blockquote>
<p>push：最后位置添加<br>pop：最后位置删除<br>shift：第一个位置删除<br>unshift：第一个位置添加<br>splice：切片<br>sort：排序<br>reverse：反转</p>
</blockquote>
<h5 id="检测不到变动的数组操作："><a href="#检测不到变动的数组操作：" class="headerlink" title="检测不到变动的数组操作："></a>检测不到变动的数组操作：</h5><blockquote>
<p>filter()：过滤<br>concat()：追加另一个数组<br>slice()：<br>map()：</p>
<p>原因：</p>
<p>作者重写了相关方法（只重写了一部分方法，但是还有另一部分没有重写）</p>
</blockquote>
<h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 方法1：通过 索引值 更新数组（数据会更新，但是页面不会发生改变）</span><br><span class="line">vm.arrayList[0]</span><br><span class="line">&quot;Alan&quot;</span><br><span class="line">vm.arrayList[0]&#x3D;&#39;Darker&#39;</span><br><span class="line">&quot;Darker&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法2：通过 Vue.set(对象, index&#x2F;key, value) 更新数组（数据会更新，页面也会发生改变）</span><br><span class="line">Vue.set(vm.arrayList, 0, &#39;Darker&#39;)</span><br></pre></td></tr></table></figure>

<h2 id="六-事件处理"><a href="#六-事件处理" class="headerlink" title="六 事件处理"></a>六 事件处理</h2><table>
<thead>
<tr>
<th>事件</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>input</td>
<td>当输入框进行输入的时候 触发的事件</td>
</tr>
<tr>
<td>change</td>
<td>当元素的值发生改变时 触发的事件</td>
</tr>
<tr>
<td>blur</td>
<td>当输入框失去焦点的时候 触发的事件</td>
</tr>
</tbody></table>
<blockquote>
<p>change 和 blur 最本质的区别：</p>
<p>如果输入框为空，失去焦点后，change不会触发，但是blur会触发</p>
</blockquote>
<h3 id="1-过滤案例"><a href="#1-过滤案例" class="headerlink" title="1.过滤案例"></a>1.过滤案例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;过滤案例&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;myText&quot; @input&#x3D;&quot;handleInput&quot; placeholder&#x3D;&quot;请输入要筛选的内容：&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;!-- &lt;p&gt;&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;myText&quot; @change&#x3D;&quot;handleInput&quot; placeholder&#x3D;&quot;请输入要筛选的内容：&quot;&gt;&lt;&#x2F;p&gt; --&gt;</span><br><span class="line">&lt;!-- &lt;p&gt;&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;myText&quot; @blur&#x3D;&quot;handleInput&quot; placeholder&#x3D;&quot;请输入要筛选的内容：&quot;&gt;&lt;&#x2F;p&gt; --&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;data in newList&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            myText: &#39;&#39;,</span><br><span class="line">            dataList: [&#39;a&#39;, &#39;at&#39;, &#39;atom&#39;, &#39;be&#39;, &#39;beyond&#39;, &#39;cs&#39;, &#39;csrf&#39;],</span><br><span class="line">            newList: [&#39;a&#39;, &#39;at&#39;, &#39;atom&#39;, &#39;be&#39;, &#39;beyond&#39;, &#39;cs&#39;, &#39;csrf&#39;],</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleInput() &#123;</span><br><span class="line">                this.newList &#x3D; this.dataList.filter(item &#x3D;&gt; &#123;</span><br><span class="line">                    &#x2F;&#x2F; item.indexOf(this.myText)：输入框中输入的字符串在筛选元素中的索引</span><br><span class="line">                    return item.indexOf(this.myText) &gt; -1   &#x2F;&#x2F; 返回索引大于1的元素：&gt;-1 就表示包含在其中</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsw37uasgg30py0bumzc.gif" alt="img"></p>
<h3 id="2-事件修饰符"><a href="#2-事件修饰符" class="headerlink" title="2.事件修饰符"></a>2.事件修饰符</h3><table>
<thead>
<tr>
<th>事件修饰符</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>.stop</td>
<td>只处理自己的事件，父控件冒泡的事件不处理（阻止事件冒泡）</td>
</tr>
<tr>
<td>.self</td>
<td>只处理自己的事件，子控件冒泡的事件不处理</td>
</tr>
<tr>
<td>.prevent</td>
<td>阻止a链接的跳转</td>
</tr>
<tr>
<td>.once</td>
<td>事件只会触发一次（适用于抽奖页面）</td>
</tr>
</tbody></table>
<p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生</p>
<p>用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong><br>而 <code>v-on:click.self.prevent</code> 只会阻止<strong>对元素自身的点击</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;事件修饰符&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">&lt;!--    &lt;ul @click&#x3D;&quot;handleUl&quot;&gt;--&gt;</span><br><span class="line">    &lt;ul @click.self&#x3D;&quot;handleUl&quot;&gt;</span><br><span class="line">&lt;!--        &lt;li v-for&#x3D;&quot;data in dataList&quot; @click&#x3D;&quot;handleLi&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;li&gt;--&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;data in dataList&quot; @click.stop&#x3D;&quot;handleLi&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;不拦截&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot; @click&#x3D;&quot;handleLink($event)&quot;&gt;点击拦截&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot; @click.prevent&#x3D;&quot;handleLink&quot;&gt;点击拦截&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;button @click.once&#x3D;&quot;test&quot;&gt;只执行一次&lt;&#x2F;button&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            dataList: [&#39;1&#39;,&#39;22&#39;,&#39;333&#39;,&#39;4444&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleUl(ev)&#123;</span><br><span class="line">                console.log(&#39;ul被点击了&#39;)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleLi()&#123;</span><br><span class="line">                console.log(&#39;li被点击了&#39;)</span><br><span class="line">                ev.stopPropagation()    &#x2F;&#x2F; 点击事件停止 冒泡（向父组件传递时间）</span><br><span class="line">            &#125;,</span><br><span class="line">            handleLink(ev)&#123;</span><br><span class="line">                ev.preventDefault()</span><br><span class="line">            &#125;,</span><br><span class="line">            test()&#123;</span><br><span class="line">                alert(&#39;只触发1次&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>事件冒泡</strong></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsw7aubxwg30t80kqmys.gif" alt="事件冒泡"></p>
<p><strong>阻止事件冒泡</strong></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsw7w77ueg30t80kq767-20210502151510592.gif" alt="阻止事件冒泡"></p>
<p><strong>阻止链接跳转+只执行1次</strong></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsw8miomug31mo0emwts-20210502151516581.gif" alt="阻止链接跳转+只执行1次"></p>
<h3 id="3-按键修饰符"><a href="#3-按键修饰符" class="headerlink" title="3.按键修饰符"></a>3.按键修饰符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;按键修饰符&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;myInput&quot; @keyup&#x3D;&quot;handleKey&quot;&gt;--&gt;</span><br><span class="line">    &lt;!--    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;myInput&quot; @keyup.13&#x3D;&quot;handleKey&quot;&gt;--&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; @keyup&#x3D;&quot;handleKey1&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; @keyup.enter&#x3D;&quot;handleKey2&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            dataList: [&#39;1&#39;, &#39;22&#39;, &#39;333&#39;, &#39;4444&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleKey1(ev) &#123;</span><br><span class="line">                console.log(&#39;按下了&#39; + ev)</span><br><span class="line">                &#x2F;&#x2F; if (ev.keyCode&#x3D;&#x3D;13)&#123;</span><br><span class="line">                &#x2F;&#x2F;     console.log(&#39;回车键被按下了&#39;)</span><br><span class="line">                &#x2F;&#x2F; &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            handleKey2(ev) &#123;</span><br><span class="line">                console.log(&#39;按下了回车键&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsw8x68jdg316y0h8myx-20210502151524146.gif" alt="img"></p>
<h2 id="七-数据双向绑定"><a href="#七-数据双向绑定" class="headerlink" title="七 数据双向绑定"></a>七 数据双向绑定</h2><h3 id="v-model的使用"><a href="#v-model的使用" class="headerlink" title="v-model的使用"></a>v-model的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;myText&quot; placeholder&#x3D;&quot;请输入内容&quot;&gt;</span><br><span class="line">    您输入的内容是：&#123;&#123;myText&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            myText: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsw98h61tg316y02owfw.gif" alt="img"></p>
<h2 id="八-表单控制"><a href="#八-表单控制" class="headerlink" title="八 表单控制"></a>八 表单控制</h2><h3 id="1-checkbox选中"><a href="#1-checkbox选中" class="headerlink" title="1.checkbox选中"></a>1.checkbox选中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;checkbox&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入用户名：&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;请输入密码：&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;radio&quot;&gt;记住用户名</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            myText: &#39;&#39;,</span><br><span class="line">            textBig: &#39;&#39;,</span><br><span class="line">            radio: false,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsw9lxewhg316y0h8tae.gif" alt="img"></p>
<h3 id="2-单选"><a href="#2-单选" class="headerlink" title="2.单选"></a>2.单选</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;单选&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;radio&quot; value&#x3D;&quot;男&quot;&gt;男</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;radio&quot; value&#x3D;&quot;女&quot;&gt;女</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; v-model&#x3D;&quot;radio&quot; value&#x3D;&quot;保密&quot;&gt;保密</span><br><span class="line">    &lt;br&gt;&lt;br&gt;您选择的性别：&#123;&#123;radio&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            radio: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpsw9wr585g30nu05ymy7.gif" alt="img"></p>
<h3 id="3-多选"><a href="#3-多选" class="headerlink" title="3.多选"></a>3.多选</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;多选&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;many&quot; value&#x3D;&quot;篮球&quot;&gt;篮球</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;many&quot; value&#x3D;&quot;足球&quot;&gt;足球</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;many&quot; value&#x3D;&quot;棒球&quot;&gt;棒球</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;many&quot; value&#x3D;&quot;桌球&quot;&gt;桌球</span><br><span class="line">    &lt;br&gt;&lt;br&gt;您喜欢的球类：&#123;&#123;many&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            many: [],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpswa73mmmg30nu05y0up.gif" alt="img"></p>
<h3 id="4-购物车案例-结算"><a href="#4-购物车案例-结算" class="headerlink" title="4.购物车案例 - 结算"></a>4.购物车案例 - 结算</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;购物车结算&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        table, td &#123;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;商品名称&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;价格&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;数量&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;选择&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr v-for&#x3D;&quot;item in dataList&quot;&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.price&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.number&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type&#x3D;&quot;checkbox&quot; :value&#x3D;&quot;item&quot; v-model&#x3D;&quot;checkGroup&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;br&gt;已选商品：&#123;&#123;checkGroup&#125;&#125;</span><br><span class="line">    &lt;br&gt;总价：&#123;&#123;getPrice()&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            dataList: [</span><br><span class="line">                &#123;name: &#39;今瓶没&#39;, price: 99, number: 2&#125;,</span><br><span class="line">                &#123;name: &#39;西柚记&#39;, price: 59, number: 1&#125;,</span><br><span class="line">                &#123;name: &#39;水壶转&#39;, price: 89, number: 5&#125;,</span><br><span class="line">            ],</span><br><span class="line">            checkGroup: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getPrice() &#123;</span><br><span class="line">                let sum_price &#x3D; 0</span><br><span class="line">                for (i in this.checkGroup) &#123;    &#x2F;&#x2F; 这里的 i 是索引</span><br><span class="line">                    sum_price +&#x3D; this.checkGroup[i][&#39;number&#39;] * this.checkGroup[i][&#39;price&#39;]</span><br><span class="line">                &#125;</span><br><span class="line">                return sum_price</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpswal7drig31xy0bo77q.gif" alt="img"></p>
<h3 id="5-购物车案例-全选-全不选"><a href="#5-购物车案例-全选-全不选" class="headerlink" title="5.购物车案例 - 全选/全不选"></a>5.购物车案例 - 全选/全不选</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;全选&#x2F;全不选&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        table, td &#123;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;商品名称&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;价格&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;数量&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;全选&#x2F;全不选&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;allChecked&quot; @change&#x3D;&quot;checkAll&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr v-for&#x3D;&quot;item in dataList&quot;&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.price&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;item.number&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type&#x3D;&quot;checkbox&quot; :value&#x3D;&quot;item&quot; v-model&#x3D;&quot;checkGroup&quot; @change&#x3D;&quot;checkOne&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;br&gt;已选商品：&#123;&#123;checkGroup&#125;&#125;</span><br><span class="line">    &lt;br&gt;总价：&#123;&#123;getPrice()&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            dataList: [</span><br><span class="line">                &#123;name: &#39;今瓶没&#39;, price: 99, number: 2&#125;,</span><br><span class="line">                &#123;name: &#39;西柚记&#39;, price: 59, number: 1&#125;,</span><br><span class="line">                &#123;name: &#39;水壶转&#39;, price: 89, number: 5&#125;,</span><br><span class="line">            ],</span><br><span class="line">            checkGroup: [],</span><br><span class="line">            allChecked: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getPrice() &#123;</span><br><span class="line">                let sum_price &#x3D; 0</span><br><span class="line">                for (i in this.checkGroup) &#123;    &#x2F;&#x2F; 这里的 i 是索引</span><br><span class="line">                    sum_price +&#x3D; this.checkGroup[i][&#39;number&#39;] * this.checkGroup[i][&#39;price&#39;]</span><br><span class="line">                &#125;</span><br><span class="line">                return sum_price</span><br><span class="line">            &#125;,</span><br><span class="line">            checkAll() &#123;</span><br><span class="line">                if (this.checkGroup.length &gt; 0) &#123;</span><br><span class="line">                    this.checkGroup &#x3D; []</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    this.checkGroup &#x3D; this.dataList</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            checkOne() &#123;</span><br><span class="line">                &#x2F;&#x2F; if (this.checkGroup.length &#x3D;&#x3D;&#x3D; this.dataList.length) &#123;</span><br><span class="line">                &#x2F;&#x2F;     this.allChecked &#x3D; true</span><br><span class="line">                &#x2F;&#x2F; &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F;     this.allChecked &#x3D; false</span><br><span class="line">                &#x2F;&#x2F; &#125;</span><br><span class="line">                this.allChecked &#x3D; this.checkGroup.length &#x3D;&#x3D;&#x3D; this.dataList.length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpswayafpkg31xy0bo0wx.gif" alt="img"></p>
<h3 id="6-购物车案例-数量加减"><a href="#6-购物车案例-数量加减" class="headerlink" title="6.购物车案例 - 数量加减"></a>6.购物车案例 - 数量加减</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;控制加减&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;twitter-bootstrap&#x2F;4.5.3&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box&quot; class&#x3D;&quot;col-md-4 offset-md-1 text-center mt-5 &quot;&gt;</span><br><span class="line">        &lt;table class&#x3D;&quot;table table-bordered&quot;&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th scope&#x3D;&quot;col&quot;&gt;商品名称&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th scope&#x3D;&quot;col&quot;&gt;单价&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th scope&#x3D;&quot;col&quot;&gt;数量&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th scope&#x3D;&quot;col&quot;&gt;全选&#x2F;全不选 &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;allChecked&quot; @change&#x3D;&quot;checkAll&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;&#x2F;thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">            &lt;tr v-for&#x3D;&quot;item in dataList&quot;&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.price&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;</span><br><span class="line">                    &lt;button class&#x3D;&quot;btn link btn-sm&quot; @click&#x3D;&quot;reduceNum(item)&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">                    &#123;&#123;item.number&#125;&#125;</span><br><span class="line">                    &lt;button class&#x3D;&quot;btn link btn-sm&quot; @click&#x3D;&quot;item.number++&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type&#x3D;&quot;checkbox&quot; :value&#x3D;&quot;item&quot; v-model&#x3D;&quot;checkGroup&quot; @change&#x3D;&quot;checkOne&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr class&#x3D;&quot;text-left&quot;&gt;</span><br><span class="line">                &lt;td colspan&#x3D;&quot;4&quot;&gt;总价：&#123;&#123;getPrice()&#125;&#125;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;&#x2F;tbody&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            dataList: [</span><br><span class="line">                &#123;name: &#39;今瓶没&#39;, price: 99, number: 1&#125;,</span><br><span class="line">                &#123;name: &#39;西柚记&#39;, price: 59, number: 1&#125;,</span><br><span class="line">                &#123;name: &#39;水壶转&#39;, price: 89, number: 1&#125;,</span><br><span class="line">            ],</span><br><span class="line">            checkGroup: [],</span><br><span class="line">            allChecked: false,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getPrice() &#123;</span><br><span class="line">                let sum_price &#x3D; 0</span><br><span class="line">                for (i in this.checkGroup) &#123;</span><br><span class="line">                    sum_price +&#x3D; this.checkGroup[i][&#39;number&#39;] * this.checkGroup[i][&#39;price&#39;]</span><br><span class="line">                &#125;</span><br><span class="line">                return sum_price</span><br><span class="line">            &#125;,</span><br><span class="line">            checkAll() &#123;</span><br><span class="line">                if (this.checkGroup.length &gt; 0) &#123;</span><br><span class="line">                    this.checkGroup &#x3D; []</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    this.checkGroup &#x3D; this.dataList</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            checkOne() &#123;</span><br><span class="line">                &#x2F;&#x2F; if (this.checkGroup.length &#x3D;&#x3D;&#x3D; this.dataList.length) &#123;</span><br><span class="line">                &#x2F;&#x2F;     this.allChecked &#x3D; true</span><br><span class="line">                &#x2F;&#x2F; &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F;     this.allChecked &#x3D; false</span><br><span class="line">                &#x2F;&#x2F; &#125;</span><br><span class="line">                this.allChecked &#x3D; this.checkGroup.length &#x3D;&#x3D;&#x3D; this.dataList.length;</span><br><span class="line">            &#125;,</span><br><span class="line">            reduceNum(item) &#123;</span><br><span class="line">                if (item.number &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">                    item.number &#x3D; 1</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    item.number--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/008i3skNgy1gpswbabzdtg30zc0g278i.gif" alt="img"></p>
<h2 id="九-v-model进阶"><a href="#九-v-model进阶" class="headerlink" title="九 v-model进阶"></a>九 v-model进阶</h2><h3 id="v-model-之-lazy、number、trim"><a href="#v-model-之-lazy、number、trim" class="headerlink" title="v-model 之 lazy、number、trim"></a>v-model 之 lazy、number、trim</h3><blockquote>
<p><strong>lazy</strong>：等待input框的数据绑定时区焦点之后再变化<br><strong>number：</strong>数字开头，只保留数字，后面的字母不保留；字母开头，都保留<br><strong>trim：</strong>去除首位的空格</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;v-model 之 lazy、number、trim&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.12&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;myText1&quot; placeholder&#x3D;&quot;normal&quot;&gt; &#123;&#123;myText1&#125;&#125;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;myText2&quot; placeholder&#x3D;&quot;lazy&quot;&gt; &#123;&#123;myText2&#125;&#125;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model.number&#x3D;&quot;myText3&quot; placeholder&#x3D;&quot;number&quot;&gt; &#123;&#123;myText3&#125;&#125;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model.trim&#x3D;&quot;myText4&quot; placeholder&#x3D;&quot;trim&quot;&gt; &#123;&#123;myText4&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            myText1: &#39;&#39;,</span><br><span class="line">            myText2: &#39;&#39;,</span><br><span class="line">            myText3: &#39;&#39;,</span><br><span class="line">            myText4: &#39;&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Vue-04</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Vue-04/</url>
    <content><![CDATA[<p>Vue组件</p>
<a id="more"></a>

<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="1-fetch和axios"><a href="#1-fetch和axios" class="headerlink" title="1 fetch和axios"></a>1 fetch和axios</h2><p>axios与fetch实现数据请求</p>
<p>(1)fetch（不是所有浏览器都支持，谷歌浏览器支持）<br>XMLHttpRequest 是一个设计粗糙的 API，配置和调用方式非常混乱，而且基于事件的异步模型写起来不友好。 兼容性不好<br>polyfill: <a href="https://github.com/camsong/fetch-ie8">https://github.com/camsong/fetch-ie8</a></p>
<h3 id="1-1-fetche使用"><a href="#1-1-fetche使用" class="headerlink" title="1.1 fetche使用"></a>1.1 fetche使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;fetch&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick()&quot;&gt;获取影片信息&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;data in datalist&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123;data.name&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">            &lt;img :src&#x3D;&quot;data.poster&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &quot;#box&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            datalist: []</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                &#x2F;&#x2F;https:&#x2F;&#x2F;m.maizuo.com&#x2F;v5&#x2F;?co&#x3D;mzmovie#&#x2F;films&#x2F;nowPlaying</span><br><span class="line">                fetch(&quot;.&#x2F;json&#x2F;test.json&quot;).then(res &#x3D;&gt; res.json()).then(res &#x3D;&gt; &#123;</span><br><span class="line">                    console.log(res.data.films)</span><br><span class="line">                    this.datalist &#x3D; res.data.films</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">     &#x2F;&#x2F; post-1</span><br><span class="line">      fetch(&quot;**&quot;,&#123;</span><br><span class="line">          method:&#39;post&#39;,</span><br><span class="line">          headers: &#123;</span><br><span class="line">             &quot;Content‐Type&quot;: &quot;application&#x2F;x‐www‐form‐urlencoded&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">         body: &quot;name&#x3D;kerwin&amp;age&#x3D;100&quot;,</span><br><span class="line">         credentials:&quot;include&quot;</span><br><span class="line">     &#125;).then(res&#x3D;&gt;res.json()).then(res&#x3D;&gt;&#123;console.log(res)&#125;);</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; post-2</span><br><span class="line">      fetch(&quot;**&quot;,&#123;</span><br><span class="line">          method:&#39;post&#39;,</span><br><span class="line">          headers: &#123;</span><br><span class="line">             &quot;Content‐Type&quot;: &quot;application&#x2F;json&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">         body: JSON.stringify(&#123;</span><br><span class="line">             myname:&quot;kerwin&quot;,</span><br><span class="line">             myage:100</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125;).then(res&#x3D;&gt;res.json()).then(res&#x3D;&gt;&#123;console.log(res)&#125;);</span><br><span class="line">    *&#x2F;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-axios的使用"><a href="#1-2-axios的使用" class="headerlink" title="1.2 axios的使用"></a>1.2 axios的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;axios&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;axios&#x2F;dist&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">       &lt;button @click&#x3D;&quot;handleClick()&quot;&gt;正在热映&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for&#x3D;&quot;data in datalist&quot;&gt;</span><br><span class="line">                &lt;h3&gt;&#123;&#123;data.name&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">                &lt;img :src&#x3D;&quot;data.poster&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">       </span><br><span class="line">      new Vue(&#123;</span><br><span class="line">          el:&quot;#box&quot;,</span><br><span class="line">          data:&#123;</span><br><span class="line">              datalist:[]</span><br><span class="line">          &#125;,</span><br><span class="line">          methods:&#123;</span><br><span class="line">            handleClick()&#123;</span><br><span class="line">                axios.get(&quot;.&#x2F;json&#x2F;test.json&quot;).then(res&#x3D;&gt;&#123;</span><br><span class="line">                    console.log(res.data.data.films) &#x2F;&#x2F; axios 自动包装data属性 res.data</span><br><span class="line">                    this.datalist &#x3D; res.data.data.films</span><br><span class="line">                &#125;).catch(err&#x3D;&gt;&#123;</span><br><span class="line">                    console.log(err);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-计算属性"><a href="#2-计算属性" class="headerlink" title="2 计算属性"></a>2 计算属性</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">复杂逻辑,模板难以维护</span><br><span class="line">(1) 基础例子</span><br><span class="line">(2) 计算缓存 VS methods-计算属性是基于它们的依赖进行缓存的。-计算属性只有在它的相关依赖发生改变时才会重新求值</span><br><span class="line">(3) 计算属性 VS watch</span><br><span class="line">    - v-model3</span><br></pre></td></tr></table></figure>

<h3 id="2-1-通过计算属性实现名字首字母大写"><a href="#2-1-通过计算属性实现名字首字母大写" class="headerlink" title="2.1 通过计算属性实现名字首字母大写"></a>2.1 通过计算属性实现名字首字母大写</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--大段的代码写在这里不好，使用计算属性--&gt;</span><br><span class="line">    &#123;&#123;mytext.substring(0,1).toUpperCase()+mytext.substring(1)&#125;&#125;</span><br><span class="line">    &lt;p&gt;计算属性：&#123;&#123;getname&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;!--普通方法要加括号--&gt;</span><br><span class="line">    &lt;p&gt;普通方法：&#123;&#123;getNameMethod()&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;!--区别是在同一个页面中使用多次计算属性，不会多次执行--&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            mytext:&#39;lqz&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            getname()&#123;&#x2F;&#x2F;依赖的状态改变了，会重新计算</span><br><span class="line">                console.log(&#39;计算属性&#39;)</span><br><span class="line">                return this.mytext.substring(0,1).toUpperCase()+this.mytext.substring(1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getNameMethod()&#123;</span><br><span class="line">                console.log(&#39;普通方法&#39;)</span><br><span class="line">                return this.mytext.substring(0,1).toUpperCase()+this.mytext.substring(1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-通过计算属性重写过滤案例"><a href="#2-2-通过计算属性重写过滤案例" class="headerlink" title="2.2 通过计算属性重写过滤案例"></a>2.2 通过计算属性重写过滤案例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;mytext&quot; @input&#x3D;&quot;handleChange&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;data in newlist&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            mytext: &#39;&#39;,</span><br><span class="line">            datalist: [&#39;aaa&#39;, &#39;abc&#39;, &#39;abcde&#39;, &#39;abcdef&#39;, &#39;bbb&#39;, &#39;bac&#39;],</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            newlist() &#123;</span><br><span class="line">                var newlist &#x3D; this.datalist.filter(item &#x3D;&gt; &#123;</span><br><span class="line">                    return item.indexOf(this.mytext) &gt; -1</span><br><span class="line">                &#125;)</span><br><span class="line">                return newlist</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3-Mixins"><a href="#3-Mixins" class="headerlink" title="3 Mixins"></a>3 Mixins</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</span><br></pre></td></tr></table></figure>

<h2 id="4-虚拟dom与diff算法-key的作用"><a href="#4-虚拟dom与diff算法-key的作用" class="headerlink" title="4 虚拟dom与diff算法 key的作用"></a>4 虚拟dom与diff算法 key的作用</h2><h3 id="4-1-Vue2-0-v-for-中-key-有什么用呢？"><a href="#4-1-Vue2-0-v-for-中-key-有什么用呢？" class="headerlink" title="4.1 Vue2.0 v-for 中 :key 有什么用呢？"></a>4.1 Vue2.0 v-for 中 :key 有什么用呢？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其实呢不只是vue，react中在执行列表渲染时也会要求给每个组件添加key这个属性。</span><br><span class="line">key简单点来说就是唯一标识，就像ID一样唯一性</span><br><span class="line">要知道，vue和react都实现了一套虚拟DOM，使我们可以不直接操作DOM元素，只操作数据便可以重新渲染页面。而隐藏在背后的原理便是其高效的Diff算法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">只做同层级的对比</span><br><span class="line">按照key值比较，出现新的key就插入</span><br><span class="line">通组件对比</span><br></pre></td></tr></table></figure>

<h3 id="4-2-虚拟DOM的diff算法"><a href="#4-2-虚拟DOM的diff算法" class="headerlink" title="4.2 虚拟DOM的diff算法"></a>4.2 虚拟DOM的diff算法</h3><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/9f55d5bd86a909d78e78ee23552ab3f5.png" alt="img"></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/0081Kckwgy1glnryd0lt1j30ra0ee0wm.jpg" alt="image-20201214225437290"></p>
<h3 id="4-3-具体实现"><a href="#4-3-具体实现" class="headerlink" title="4.3 具体实现"></a>4.3 具体实现</h3><h4 id="4-3-1-把树按照层级分解"><a href="#4-3-1-把树按照层级分解" class="headerlink" title="4.3.1 把树按照层级分解"></a>4.3.1 把树按照层级分解</h4><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/0081Kckwgy1glns1f3fovj30us0bywjb.jpg" alt="image-20201214225736585"></p>
<h4 id="4-3-2-同key值比较"><a href="#4-3-2-同key值比较" class="headerlink" title="4.3.2 同key值比较"></a>4.3.2 同key值比较</h4><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/0081Kckwgy1glns2bulkmj30vk07876m.jpg" alt="image-20201214225827633"></p>
<h4 id="4-3-3-通组件对比"><a href="#4-3-3-通组件对比" class="headerlink" title="4.3.3 通组件对比"></a>4.3.3 通组件对比</h4><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/0081Kckwgy1glns3ru3prj30uu07qaci.jpg" alt="image-20201214225913886"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;isShow&quot;&gt;111&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;p v-else&gt;222&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;!--    </span><br><span class="line">    &#123;tag:div,value:111&#125;</span><br><span class="line">    &#123;tag:p,value:222&#125;</span><br><span class="line">    直接不比较，直接删除div，新增p</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div v-if&#x3D;&quot;isShow&quot;&gt;111&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div v-else&gt;222&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!--    </span><br><span class="line">    &#123;tag:div,value:111&#125;</span><br><span class="line">    &#123;tag:div,value:222&#125;</span><br><span class="line">    比较都是div，只替换文本内容</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://segmentfault.com/a/1190000020170310">https://segmentfault.com/a/1190000020170310</a></p>
<h2 id="5-组件化开发基础"><a href="#5-组件化开发基础" class="headerlink" title="5 组件化开发基础"></a>5 组件化开发基础</h2><h3 id="5-1-组件是什么？有什么用"><a href="#5-1-组件是什么？有什么用" class="headerlink" title="5.1 组件是什么？有什么用"></a>5.1 组件是什么？有什么用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">扩展 HTML 元素，封装可重用的代码，目的是复用</span><br><span class="line">    -例如：有一个轮播，可以在很多页面中使用，一个轮播有js，css，html</span><br><span class="line">    -组件把js，css，html放到一起，有逻辑，有样式，有html</span><br></pre></td></tr></table></figure>

<h2 id="6-组件注册方式"><a href="#6-组件注册方式" class="headerlink" title="6 组件注册方式"></a>6 组件注册方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 全局组件</span><br><span class="line">    Vue.component</span><br><span class="line">2 局部组件</span><br></pre></td></tr></table></figure>

<h3 id="6-1-定义全局组件，绑定事件，编写样式"><a href="#6-1-定义全局组件，绑定事件，编写样式" class="headerlink" title="6.1 定义全局组件，绑定事件，编写样式"></a>6.1 定义全局组件，绑定事件，编写样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">&lt;navbar&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;没有代码提示，语法检查，目前这么用</span><br><span class="line">    &#x2F;&#x2F;后面会使用webpack打包，直接定义成 xx.vue文件，通过webpack打包</span><br><span class="line">    Vue.component(&#39;navbar&#39;,&#123;</span><br><span class="line">        template:&#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button @click&#x3D;&quot;handleClick&quot;&gt;返回&lt;&#x2F;button&gt;</span><br><span class="line">            我是NavBar</span><br><span class="line">            &lt;button style&#x3D;&quot;background: red&quot;&gt;主页&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleClick()&#123;</span><br><span class="line">                console.log(&#39;nav nav&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-定义局部组件"><a href="#6-2-定义局部组件" class="headerlink" title="6.2 定义局部组件"></a>6.2 定义局部组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;navbar&#39;, &#123;</span><br><span class="line">    template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button @click&#x3D;&quot;handleClick&quot;&gt;返回&lt;&#x2F;button&gt;</span><br><span class="line">            我是NavBar</span><br><span class="line">            &lt;button style&#x3D;&quot;background: red&quot;&gt;主页&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;child&gt;&lt;&#x2F;child&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#96;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleClick() &#123;</span><br><span class="line">            console.log(&#39;nav nav&#39;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">            child: &#123;</span><br><span class="line">                template: &#96;&lt;button&gt;儿子&lt;&#x2F;button&gt;&#96;,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="7-组件编写方式与Vue实例的区别"><a href="#7-组件编写方式与Vue实例的区别" class="headerlink" title="7 组件编写方式与Vue实例的区别"></a>7 组件编写方式与Vue实例的区别</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 自定义组件需要有一个root element，一般包裹在一个div中</span><br><span class="line">2 父子组件的data是无法共享</span><br><span class="line">3 组件可以有data，methods,computed....,但是data 必须是一个函数</span><br><span class="line">Vue.component(&#39;navbar&#39;, &#123;</span><br><span class="line">    template: &#96;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button @click&#x3D;&quot;handleClick&quot;&gt;返回&lt;&#x2F;button&gt;</span><br><span class="line">            我是NavBar&#123;&#123;aa&#125;&#125;</span><br><span class="line">            &lt;button style&#x3D;&quot;background: red&quot;&gt;主页&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;child&gt;&lt;&#x2F;child&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#96;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handleClick() &#123;</span><br><span class="line">            console.log(&#39;nav nav&#39;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">            child: &#123;</span><br><span class="line">                template: &#96;&lt;button&gt;儿子&lt;&#x2F;button&gt;&#96;,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            aa:&#39;lqz&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="8-组件通信"><a href="#8-组件通信" class="headerlink" title="8 组件通信"></a>8 组件通信</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 父子组件传值 (props down, events up)</span><br><span class="line">2 父传子之属性验证props:&#123;name:Number&#125;Number,String,Boolean,Array,Object,Function,null(不限制类型)</span><br><span class="line">3 事件机制a.使用 $on(eventName) 监听事件b.使用 $emit(eventName) 触发事件</span><br><span class="line">4 Ref&lt;input ref&#x3D;&quot;mytext&quot;&#x2F;&gt;  this.$refs.mytext</span><br><span class="line">5 事件总线var bus &#x3D; new Vue();* mounted生命周期中进行监听</span><br></pre></td></tr></table></figure>

<h3 id="8-1-父子通信之父传子"><a href="#8-1-父子通信之父传子" class="headerlink" title="8.1 父子通信之父传子"></a>8.1 父子通信之父传子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--保证属性名和props中的属性名和变量名一致即可--&gt;</span><br><span class="line">    &lt;navbar myname&#x3D;&quot;lqz&quot;&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line">    &lt;navbar myname&#x3D;&quot;egon&quot;&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line">    &lt;!--注意数据绑定--&gt;</span><br><span class="line">    &lt;navbar :myname&#x3D;&quot;egon&quot;&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line">    &lt;!--可以传多个,但是注意，传入的isshow是字符串，可以使用数据绑定变成布尔--&gt;</span><br><span class="line">    &lt;navbar :myname&#x3D;&quot;egon&quot; isshow&#x3D;&quot;false&quot;&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line">    &lt;navbar :myname&#x3D;&quot;egon&quot; :isshow&#x3D;&quot;false&quot;&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;没有代码提示，语法检查，目前这么用</span><br><span class="line">    &#x2F;&#x2F;后面会使用webpack打包，直接定义成 xx.vue文件，通过webpack打包</span><br><span class="line">    Vue.component(&#39;navbar&#39;, &#123;</span><br><span class="line">        template: &#96;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button&gt;返回&lt;&#x2F;button&gt;</span><br><span class="line">                父组件传递的内容是:&#123;&#123;myname&#125;&#125;</span><br><span class="line">                &lt;button&gt;主页&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;br&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;,</span><br><span class="line">        props:[&#39;myname&#39;]</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="属性验证"><a href="#属性验证" class="headerlink" title="属性验证"></a>属性验证</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;navbar myname&#x3D;&quot;egon&quot; :isshow&#x3D;&quot;false&quot;&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line">    &lt;!--报错--&gt;</span><br><span class="line">    &lt;navbar myname&#x3D;&quot;egon&quot; isshow&#x3D;&quot;false&quot;&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#39;navbar&#39;, &#123;</span><br><span class="line">        template: &#96;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button&gt;返回&lt;&#x2F;button&gt;</span><br><span class="line">                父组件传递的内容是:&#123;&#123;myname&#125;&#125;</span><br><span class="line">                传入的布尔是&#123;&#123;isshow&#125;&#125;</span><br><span class="line">                &lt;button&gt;主页&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;br&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;,</span><br><span class="line">        &#x2F;&#x2F; props:[&#39;myname&#39;],</span><br><span class="line">        props:&#123;</span><br><span class="line">            myname:String,</span><br><span class="line">            isshow:Boolean,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-2-父子通信之子传父-通过事件"><a href="#8-2-父子通信之子传父-通过事件" class="headerlink" title="8.2 父子通信之子传父(通过事件)"></a>8.2 父子通信之子传父(通过事件)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    子组件中监听自定义事件，随便起名</span><br><span class="line">&lt;!--    &lt;navbar @myevent&#x3D;&quot;handleClick&quot;&gt;&lt;&#x2F;navbar&gt;--&gt;</span><br><span class="line">    &lt;navbar @myevent&#x3D;&quot;handleClick($event)&quot;&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#39;navbar&#39;, &#123;</span><br><span class="line">        template: &#96;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button&gt;返回&lt;&#x2F;button&gt;</span><br><span class="line">                组件</span><br><span class="line">                &lt;button @click&#x3D;&quot;handleEvent&quot;&gt;点击按钮把子组件数据传递到父组件&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;br&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#39;lqz&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleEvent()&#123;</span><br><span class="line">                &#x2F;&#x2F; this.$emit(&#39;myevent&#39;) &#x2F;&#x2F;myevent:子组件中监听自定义事件</span><br><span class="line">                this.$emit(&#39;myevent&#39;,100) &#x2F;&#x2F;100表示传递的参数</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleClick(ev)&#123;</span><br><span class="line">                console.log(&#39;点击子组件，我会执行&#39;)</span><br><span class="line">                console.log(ev)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-3-通过子传父控制字组件显示隐藏"><a href="#8-3-通过子传父控制字组件显示隐藏" class="headerlink" title="8.3 通过子传父控制字组件显示隐藏"></a>8.3 通过子传父控制字组件显示隐藏</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    普通方式</span><br><span class="line">    &lt;button @click&#x3D;&quot;isShow&#x3D;!isShow&quot;&gt;点击隐藏显示&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;navbar v-show&#x3D;&quot;isShow&quot;&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    字传父方式</span><br><span class="line">    &lt;mybutton @myevent&#x3D;&quot;handleShow&quot;&gt;&lt;&#x2F;mybutton&gt;</span><br><span class="line">    &lt;navbar v-show&#x3D;&quot;isShow&quot;&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#39;mybutton&#39;, &#123;</span><br><span class="line">        template: &#96;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;button @click&#x3D;&quot;handleClick&quot;&gt;点我隐藏显示&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                this.$emit(&#39;myevent&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.component(&#39;navbar&#39;, &#123;</span><br><span class="line">        template: &#96;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;111&lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li&gt;222&lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li&gt;333&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;&#x2F;ul&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name: &#39;lqz&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleEvent() &#123;</span><br><span class="line">                &#x2F;&#x2F; this.$emit(&#39;myevent&#39;) &#x2F;&#x2F;myevent:子组件中监听自定义事件</span><br><span class="line">                this.$emit(&#39;myevent&#39;, 100) &#x2F;&#x2F;100表示传递的参数</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isShow: true</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleShow() &#123;</span><br><span class="line">                this.isShow&#x3D;!this.isShow</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-4-ref属性"><a href="#8-4-ref属性" class="headerlink" title="8.4 ref属性"></a>8.4 ref属性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ref放在标签上，拿到的是原生节点</span><br><span class="line">ref放在组件上，拿到的是组件对象,</span><br><span class="line">    通过这种方式实现子传父（this.$refs.mychild.text）</span><br><span class="line">  通过这种方式实现父传子（调用子组件方法传参数）</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">&lt;!--    通过ref，获取input的值--&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;mytext&quot;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handleClick&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;child ref&#x3D;&quot;mychild&quot;&gt;&lt;&#x2F;child&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#39;child&#39;,&#123;</span><br><span class="line">        template:&#96;&lt;div&gt;child&lt;&#x2F;div&gt;&#96;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                text:&#39;子组件数据&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            add()&#123;</span><br><span class="line">               console.log(&#39;子组件的add方法&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                console.log(this)</span><br><span class="line">                &#x2F;&#x2F;this.$refs.mytext 获取到input控件，取出value值</span><br><span class="line">                console.log(this.$refs.mytext.value)</span><br><span class="line">                console.log(this.$refs.mychild.text)</span><br><span class="line">                &#x2F;&#x2F; this.$refs.mychild.add()</span><br><span class="line">                this.$refs.mychild.add(&#39;传递参数&#39;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-5-事件总线-不同层级的不通组件通信"><a href="#8-5-事件总线-不同层级的不通组件通信" class="headerlink" title="8.5 事件总线(不同层级的不通组件通信)"></a>8.5 事件总线(不同层级的不通组件通信)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;child1&gt;&lt;&#x2F;child1&gt;</span><br><span class="line">    &lt;child2&gt;&lt;&#x2F;child2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var bus&#x3D;new Vue() &#x2F;&#x2F;new一个vue的实例，就是中央事件总线</span><br><span class="line">    Vue.component(&#39;child1&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&quot;mytext&quot;&gt;</span><br><span class="line">            &lt;button @click&#x3D;&quot;handleClick&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;&#96;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleClick()&#123;</span><br><span class="line">                bus.$emit(&#39;suibian&#39;,this.$refs.mytext.value) &#x2F;&#x2F;发布消息，名字跟订阅消息名一致</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.component(&#39;child2&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">                    &lt;div&gt;收到的消息 &#123;&#123;msg&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;&#96;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return &#123;msg:&#39;&#39;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            &#x2F;&#x2F;生命周期，当前组件dom创建完后悔执行</span><br><span class="line">            console.log(&#39;当前组件dom创建完后悔执行&#39;)</span><br><span class="line">            &#x2F;&#x2F;订阅消息</span><br><span class="line">            bus.$on(&#39;suibian&#39;,(item)&#x3D;&gt;&#123;</span><br><span class="line">                console.log(&#39;收到了&#39;,item)</span><br><span class="line">                this.msg&#x3D;item</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                console.log(this)</span><br><span class="line">                &#x2F;&#x2F;this.$refs.mytext 获取到input控件，取出value值</span><br><span class="line">                console.log(this.$refs.mytext.value)</span><br><span class="line">                console.log(this.$refs.mychild.text)</span><br><span class="line">                &#x2F;&#x2F; this.$refs.mychild.add()</span><br><span class="line">                this.$refs.mychild.add(&#39;传递参数&#39;)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="9-动态组件"><a href="#9-动态组件" class="headerlink" title="9 动态组件"></a>9 动态组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;component&gt; 元素，动态地绑定多个组件到它的 is 属性</span><br><span class="line">2 &lt;keep-alive&gt; 保留状态，避免重新渲染</span><br></pre></td></tr></table></figure>

<h3 id="9-1-基本使用"><a href="#9-1-基本使用" class="headerlink" title="9.1 基本使用"></a>9.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a @click&#x3D;&quot;who&#x3D;&#39;child1&#39;&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a @click&#x3D;&quot;who&#x3D;&#39;child2&#39;&quot;&gt;商品&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a @click&#x3D;&quot;who&#x3D;&#39;child3&#39;&quot;&gt;购物车&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line"> &lt;component :is&#x3D;&quot;who&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var bus &#x3D; new Vue() &#x2F;&#x2F;new一个vue的实例，就是中央事件总线</span><br><span class="line">    Vue.component(&#39;child1&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">          首页</span><br><span class="line">        &lt;&#x2F;div&gt;&#96;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.component(&#39;child2&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">                   商品</span><br><span class="line">                    &lt;&#x2F;div&gt;&#96;,</span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.component(&#39;child3&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">                   购物车</span><br><span class="line">                    &lt;&#x2F;div&gt;&#96;,</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            who:&#39;child1&#39;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-keep-alive使用"><a href="#9-2-keep-alive使用" class="headerlink" title="9.2 keep-alive使用"></a>9.2 keep-alive使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a @click&#x3D;&quot;who&#x3D;&#39;child1&#39;&quot;&gt;首页&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a @click&#x3D;&quot;who&#x3D;&#39;child2&#39;&quot;&gt;商品&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a @click&#x3D;&quot;who&#x3D;&#39;child3&#39;&quot;&gt;购物车&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">         &lt;component :is&#x3D;&quot;who&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line">    &lt;&#x2F;keep-alive&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var bus &#x3D; new Vue() &#x2F;&#x2F;new一个vue的实例，就是中央事件总线</span><br><span class="line">    Vue.component(&#39;child1&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">          首页</span><br><span class="line">        &lt;&#x2F;div&gt;&#96;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.component(&#39;child2&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">                   商品</span><br><span class="line">                   &lt;input type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;&#96;,</span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.component(&#39;child3&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">                   购物车</span><br><span class="line">                    &lt;&#x2F;div&gt;&#96;,</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            who:&#39;child1&#39;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Vue-05</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Vue-05/</url>
    <content><![CDATA[<p>Vue进阶</p>
<a id="more"></a>

<h2 id="1-slot插槽-内容分发"><a href="#1-slot插槽-内容分发" class="headerlink" title="1 slot插槽 (内容分发)"></a>1 slot插槽 (内容分发)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. 单个slot </span><br><span class="line">b. 具名slot</span><br><span class="line">    *混合父组件的内容与子组件自己的模板--&gt;内容分发</span><br><span class="line">    *父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</span><br></pre></td></tr></table></figure>

<h3 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;!-- 不使用插槽写的aaa不会显示,使用就会显示--&gt;</span><br><span class="line">    &lt;child1&gt;aaa&lt;&#x2F;child1&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var bus &#x3D; new Vue() &#x2F;&#x2F;new一个vue的实例，就是中央事件总线</span><br><span class="line">    Vue.component(&#39;child1&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">          首页</span><br><span class="line">          &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;&#96;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-插槽应用场景1"><a href="#1-2-插槽应用场景1" class="headerlink" title="1.2 插槽应用场景1"></a>1.2 插槽应用场景1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">&lt;!--    写了一个轮播组件，用户想轮播什么就放什么--&gt;</span><br><span class="line">    &lt;swiper&gt;</span><br><span class="line">        &lt;p v-for&#x3D;&quot;data in 4&quot;&gt;&#123;&#123;data&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;swiper&gt;</span><br><span class="line"></span><br><span class="line">       &lt;swiper&gt;</span><br><span class="line">           &lt;img :src&#x3D;&quot;data&quot; v-for&#x3D;&quot;data in 5&quot;&gt;</span><br><span class="line">    &lt;&#x2F;swiper&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var bus &#x3D; new Vue() &#x2F;&#x2F;new一个vue的实例，就是中央事件总线</span><br><span class="line">    Vue.component(&#39;swiper&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">          &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;&#96;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-插槽应用场景2"><a href="#1-3-插槽应用场景2" class="headerlink" title="1.3 插槽应用场景2"></a>1.3 插槽应用场景2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--通过插槽实现在一个组件中控制另一个组件的显示隐藏--&gt;</span><br><span class="line">    &lt;navbar&gt; &lt;button @click&#x3D;&quot;isShow&#x3D;!isShow&quot;&gt;点我显示隐藏&lt;&#x2F;button&gt;&lt;&#x2F;navbar&gt;</span><br><span class="line"></span><br><span class="line">    &lt;swiper v-if&#x3D;&quot;isShow&quot;&gt;&lt;&#x2F;swiper&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#39;navbar&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">          navbar</span><br><span class="line">          &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;&#96;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.component(&#39;swiper&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">          &lt;p&gt;111&lt;&#x2F;p&gt;</span><br><span class="line">          &lt;p&gt;222&lt;&#x2F;p&gt;</span><br><span class="line">          &lt;p&gt;333&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;&#96;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            isShow:true</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-具名插槽"><a href="#1-4-具名插槽" class="headerlink" title="1.4 具名插槽"></a>1.4 具名插槽</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">&lt;!--    具名插槽，把p标签给a插槽，div标签给b插槽--&gt;</span><br><span class="line">    &lt;navbar&gt;</span><br><span class="line">        &lt;p slot&#x3D;&quot;a&quot;&gt;pppp&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;div slot&#x3D;&quot;b&quot;&gt;bbbb&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;navbar&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#39;navbar&#39;, &#123;</span><br><span class="line">        template: &#96;&lt;div&gt;</span><br><span class="line">        &lt;slot name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">          navbar</span><br><span class="line">          &lt;slot name&#x3D;&quot;b&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;&#96;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-transition过渡"><a href="#2-transition过渡" class="headerlink" title="2 transition过渡"></a>2 transition过渡</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。</span><br><span class="line">(1)单元素&#x2F;组件过渡  * css过渡  * css动画  * 结合animate.css动画库</span><br><span class="line">(2) 多个元素过渡(设置key) </span><br><span class="line">     *当有相同标签名的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。  </span><br><span class="line">      mode:in-out ; out-in</span><br><span class="line">(3)多个组件过渡</span><br><span class="line">(4)列表过渡(设置key) </span><br><span class="line">     *&lt;transition-group&gt;不同于 transition， 它会以一个真实元素呈现：默认为一个 &lt;span&gt;。你也可以通过tag 特性更换为其他元素。  </span><br><span class="line">     * 提供唯一的 key 属性值</span><br></pre></td></tr></table></figure>

<h2 id="3-生命周期"><a href="#3-生命周期" class="headerlink" title="3 生命周期"></a>3 生命周期</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i. 生命周期各个阶段https:&#x2F;&#x2F;cn.vuejs.org&#x2F;v2&#x2F;guide&#x2F;instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA</span><br><span class="line">ii. 生命周期钩子函数的触发条件与作用</span><br></pre></td></tr></table></figure>

<h2 id="4-swiper学习"><a href="#4-swiper学习" class="headerlink" title="4 swiper学习"></a>4 swiper学习</h2><p> <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.min.css&quot;&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!--    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.css&quot;&gt;  --&gt;</span><br><span class="line">    &lt;!--&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.js&quot;&gt; &lt;&#x2F;script&gt;  --&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .swiper-container &#123;</span><br><span class="line">            width: 80%;</span><br><span class="line">            height: 600px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;swiper-slide&quot; v-for&#x3D;&quot;data in datalist&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &#123;&#123;data&#125;&#125;</span><br><span class="line">                &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1608145297276&amp;di&#x3D;dd396caeaa0bb6a2a50609a109cd3120&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2Fattachments.gfan.com%2Fforum%2Fattachments2%2Fday_110915%2F1109151356c0717d7e6a91e985.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-button-prev&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-button-next&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-scrollbar&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            datalist: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                this.datalist &#x3D; [&#39;111&#39;, &#39;222&#39;, &#39;333&#39;]</span><br><span class="line">            &#125;, 2000)</span><br><span class="line">            &#x2F;&#x2F;轮播图初始化不是放在这，因为数据变化和dom更新是异步的</span><br><span class="line">            &#x2F;&#x2F;需要放在updated中</span><br><span class="line">        &#125;,</span><br><span class="line">        updated() &#123;</span><br><span class="line">            var mySwiper &#x3D; new Swiper(&#39;.swiper-container&#39;, &#123;</span><br><span class="line">                &#x2F;&#x2F; direction: &#39;vertical&#39;, &#x2F;&#x2F; 垂直切换选项</span><br><span class="line">                loop: true, &#x2F;&#x2F; 循环模式选项</span><br><span class="line">                &#x2F;&#x2F; 如果需要分页器</span><br><span class="line">                pagination: &#123;</span><br><span class="line">                    el: &#39;.swiper-pagination&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#x2F;&#x2F; 如果需要前进后退按钮</span><br><span class="line">                navigation: &#123;</span><br><span class="line">                    nextEl: &#39;.swiper-button-next&#39;,</span><br><span class="line">                    prevEl: &#39;.swiper-button-prev&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 如果需要滚动条</span><br><span class="line">                scrollbar: &#123;</span><br><span class="line">                    el: &#39;.swiper-scrollbar&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-自定义组件的封装"><a href="#5-自定义组件的封装" class="headerlink" title="5 自定义组件的封装"></a>5 自定义组件的封装</h2><p> 自定义封装swiper组件（基于swiper）<br>​ 注意： 防止swipe初始化过早</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.min.css&quot;&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!--    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.css&quot;&gt;  --&gt;</span><br><span class="line">    &lt;!--&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.js&quot;&gt; &lt;&#x2F;script&gt;  --&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .swiper-container &#123;</span><br><span class="line">            width: 80%;</span><br><span class="line">            height: 600px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">&lt;!--    diff算法检测到key变化了，会把swipper删掉，重新创建，触发组件的mounted执行，完成swipper实例化，不在updated中初始化--&gt;</span><br><span class="line">&lt;!--    子组件的mounted在根组件的mounted之前执行，所有组件挂载完成后，根组件才挂载--&gt;</span><br><span class="line">    &lt;swipper :key&#x3D;&quot;datalist.length&quot;&gt;</span><br><span class="line">&lt;!--    &lt;swipper&gt;--&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-slide&quot; v-for&#x3D;&quot;data in datalist&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;timgsa.baidu.com&#x2F;timg?image&amp;quality&#x3D;80&amp;size&#x3D;b9999_10000&amp;sec&#x3D;1608145297276&amp;di&#x3D;dd396caeaa0bb6a2a50609a109cd3120&amp;imgtype&#x3D;0&amp;src&#x3D;http%3A%2F%2Fattachments.gfan.com%2Fforum%2Fattachments2%2Fday_110915%2F1109151356c0717d7e6a91e985.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;swipper&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    Vue.component(&#39;swipper&#39;,&#123;</span><br><span class="line">        template:&#96;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">          &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-button-prev&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-button-next&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-scrollbar&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">        &#96;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            console.log(&#39;子组件mounted&#39;)</span><br><span class="line">            var mySwiper &#x3D; new Swiper(&#39;.swiper-container&#39;, &#123;</span><br><span class="line">                &#x2F;&#x2F; direction: &#39;vertical&#39;, &#x2F;&#x2F; 垂直切换选项</span><br><span class="line">                loop: true, &#x2F;&#x2F; 循环模式选项</span><br><span class="line">                &#x2F;&#x2F; 如果需要分页器</span><br><span class="line">                pagination: &#123;</span><br><span class="line">                    el: &#39;.swiper-pagination&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#x2F;&#x2F; 如果需要前进后退按钮</span><br><span class="line">                navigation: &#123;</span><br><span class="line">                    nextEl: &#39;.swiper-button-next&#39;,</span><br><span class="line">                    prevEl: &#39;.swiper-button-prev&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 如果需要滚动条</span><br><span class="line">                scrollbar: &#123;</span><br><span class="line">                    el: &#39;.swiper-scrollbar&#39;,</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; updated()&#123;&#x2F;&#x2F;如果跟组件中有数据变化，就会导致swipper组件触发update(vm.name&#x3D;&#39;ss&#39;测试一下),导致多次执行，影响效率，所以使用key+mounted方式</span><br><span class="line">        &#x2F;&#x2F;     console.log(&#39;子组件update&#39;)</span><br><span class="line">        &#x2F;&#x2F;     var mySwiper &#x3D; new Swiper(&#39;.swiper-container&#39;, &#123;</span><br><span class="line">        &#x2F;&#x2F;         &#x2F;&#x2F; direction: &#39;vertical&#39;, &#x2F;&#x2F; 垂直切换选项</span><br><span class="line">        &#x2F;&#x2F;         loop: true, &#x2F;&#x2F; 循环模式选项</span><br><span class="line">        &#x2F;&#x2F;         &#x2F;&#x2F; 如果需要分页器</span><br><span class="line">        &#x2F;&#x2F;         pagination: &#123;</span><br><span class="line">        &#x2F;&#x2F;             el: &#39;.swiper-pagination&#39;,</span><br><span class="line">        &#x2F;&#x2F;         &#125;,</span><br><span class="line">        &#x2F;&#x2F;         &#x2F;&#x2F; 如果需要前进后退按钮</span><br><span class="line">        &#x2F;&#x2F;         navigation: &#123;</span><br><span class="line">        &#x2F;&#x2F;             nextEl: &#39;.swiper-button-next&#39;,</span><br><span class="line">        &#x2F;&#x2F;             prevEl: &#39;.swiper-button-prev&#39;,</span><br><span class="line">        &#x2F;&#x2F;         &#125;,</span><br><span class="line">        &#x2F;&#x2F;</span><br><span class="line">        &#x2F;&#x2F;         &#x2F;&#x2F; 如果需要滚动条</span><br><span class="line">        &#x2F;&#x2F;         scrollbar: &#123;</span><br><span class="line">        &#x2F;&#x2F;             el: &#39;.swiper-scrollbar&#39;,</span><br><span class="line">        &#x2F;&#x2F;         &#125;,</span><br><span class="line">        &#x2F;&#x2F;</span><br><span class="line">        &#x2F;&#x2F;     &#125;)</span><br><span class="line">        &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name:&#39;lqz&#39;,</span><br><span class="line">            datalist: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                this.datalist &#x3D; [&#39;111&#39;, &#39;222&#39;, &#39;333&#39;]</span><br><span class="line">            &#125;, 2000)</span><br><span class="line">            &#x2F;&#x2F;轮播图初始化不是放在这，因为数据变化和dom更新是异步的</span><br><span class="line">            &#x2F;&#x2F;需要放在updated中</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="6-自定义指令"><a href="#6-自定义指令" class="headerlink" title="6 自定义指令"></a>6 自定义指令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)自定义指令介绍 directives</span><br><span class="line">(2)钩子函数* 参数 el,binding,vnode(vnode.context)* bind,inserted,update,componentUpdated,unbind</span><br><span class="line">(3)函数简写</span><br><span class="line">(4)自定义指令-轮播</span><br><span class="line">    *inserted 插入最后一个元素时调用(vnode.context.datalist.length-1)</span><br><span class="line">    *this.$nextTick()</span><br></pre></td></tr></table></figure>

<h3 id="6-1-基本使用"><a href="#6-1-基本使用" class="headerlink" title="6.1 基本使用"></a>6.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;div v-mystyle&gt;divdiv我是div&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;自定义指令，以后用的时候必须 v-指令名，即v-mystyle</span><br><span class="line">Vue.directive(&#39;mystyle&#39;,&#123;</span><br><span class="line">    &#x2F;&#x2F;当被改指令修饰的标签插入到dom中会执行</span><br><span class="line">    inserted()&#123;</span><br><span class="line">        console.log(&#39;我执行了&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-让所有使用自定义指令的标签背景都变红色"><a href="#6-2-让所有使用自定义指令的标签背景都变红色" class="headerlink" title="6.2 让所有使用自定义指令的标签背景都变红色"></a>6.2 让所有使用自定义指令的标签背景都变红色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;div v-mystyle&gt;divdiv我是div&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;p v-mystyle&gt;我是p，用了自定义指令，会变红&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;自定义指令，以后用的时候必须 v-指令名，即v-mystyle</span><br><span class="line">Vue.directive(&#39;mystyle&#39;,&#123;</span><br><span class="line">    &#x2F;&#x2F;当被改指令修饰的标签插入到dom中会执行</span><br><span class="line">    inserted(el)&#123;</span><br><span class="line">        &#x2F;&#x2F;el就是被修饰标签的dom</span><br><span class="line">        console.log(el)</span><br><span class="line">        &#x2F;&#x2F;所以我们直接操作dom</span><br><span class="line">        el.style.background&#x3D;&#39;red&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-用户指定自定义指令的背景色-修改变量，背景变化"><a href="#6-3-用户指定自定义指令的背景色-修改变量，背景变化" class="headerlink" title="6.3 用户指定自定义指令的背景色,修改变量，背景变化"></a>6.3 用户指定自定义指令的背景色,修改变量，背景变化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--放js的变量，所以用&#39;red&#39;--&gt;</span><br><span class="line">    &lt;div v-mystyle&#x3D;&quot;&#39;red&#39;&quot;&gt;divdiv我是div&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;p v-mystyle&#x3D;&quot;mycolor&quot;&gt;我是p，用了自定义指令，会变红&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;自定义指令，以后用的时候必须 v-指令名，即v-mystyle</span><br><span class="line">Vue.directive(&#39;mystyle&#39;,&#123;</span><br><span class="line">    &#x2F;&#x2F;当被改指令修饰的标签插入到dom中会执行</span><br><span class="line">    inserted(el,input)&#123; &#x2F;&#x2F;该方法，如果更新变量mycolor，并不会变化，所以需要重写update方法  vm.mycolor&#x3D;&#39;yellow&#39;</span><br><span class="line">        &#x2F;&#x2F;el就是被修饰标签的dom</span><br><span class="line">        console.log(el)</span><br><span class="line">        console.log(input) &#x2F;&#x2F;input的value属性是传入的变量</span><br><span class="line">        &#x2F;&#x2F;所以我们直接操作dom</span><br><span class="line">        &#x2F;&#x2F; el.style.background&#x3D;&#39;red&#39;</span><br><span class="line">        el.style.background&#x3D;input.value</span><br><span class="line">    &#125;,</span><br><span class="line">    update(el,input)&#123;</span><br><span class="line">        el.style.background&#x3D;input.value</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            mycolor:&#39;green&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-4-通过指令控制swipper初始化"><a href="#6-4-通过指令控制swipper初始化" class="headerlink" title="6.4 通过指令控制swipper初始化"></a>6.4 通过指令控制swipper初始化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.min.css&quot;&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!--    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.css&quot;&gt;  --&gt;</span><br><span class="line">    &lt;!--&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;swiper&#x2F;swiper-bundle.js&quot;&gt; &lt;&#x2F;script&gt;  --&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .swiper-container &#123;</span><br><span class="line">            width: 80%;</span><br><span class="line">            height: 600px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;swiper-container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">            &lt;!--v-comp把当前索引值和数组总长度传入，如果索引等于数组总长度减一说明都加载完了，完成swipper初始化--&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;swiper-slide&quot; v-for&#x3D;&quot;(data,i) in datalist&quot; v-comp&#x3D;&quot;&#123;index:i,length:datalist.length&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &#123;&#123;data&#125;&#125;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-pagination&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-button-prev&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-button-next&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;swiper-scrollbar&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.directive(&#39;comp&#39;, &#123;</span><br><span class="line">        inserted(el, input) &#123;</span><br><span class="line">            console.log(input.value)</span><br><span class="line">            &#x2F;&#x2F;只要校验到传入的是最后一个插入了，就初始化swipper</span><br><span class="line">            if (input.value.index &#x3D;&#x3D;&#x3D; input.value.length - 1) &#123;</span><br><span class="line">                var mySwiper &#x3D; new Swiper(&#39;.swiper-container&#39;, &#123;</span><br><span class="line">                    &#x2F;&#x2F; direction: &#39;vertical&#39;, &#x2F;&#x2F; 垂直切换选项</span><br><span class="line">                    loop: true, &#x2F;&#x2F; 循环模式选项</span><br><span class="line">                    &#x2F;&#x2F; 如果需要分页器</span><br><span class="line">                    pagination: &#123;</span><br><span class="line">                        el: &#39;.swiper-pagination&#39;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#x2F;&#x2F; 如果需要前进后退按钮</span><br><span class="line">                    navigation: &#123;</span><br><span class="line">                        nextEl: &#39;.swiper-button-next&#39;,</span><br><span class="line">                        prevEl: &#39;.swiper-button-prev&#39;,</span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F; 如果需要滚动条</span><br><span class="line">                    scrollbar: &#123;</span><br><span class="line">                        el: &#39;.swiper-scrollbar&#39;,</span><br><span class="line">                    &#125;,</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            datalist: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                this.datalist &#x3D; [&#39;111&#39;, &#39;222&#39;, &#39;333&#39;]</span><br><span class="line">            &#125;, 2000)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-过滤器"><a href="#7-过滤器" class="headerlink" title="7 过滤器"></a>7 过滤器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cn.vuejs.org&#x2F;v2&#x2F;guide&#x2F;filters.html</span><br><span class="line">ele图片转换，猫眼电影图片转换</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;axios&#x2F;dist&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--猫眼数据：https:&#x2F;&#x2F;m.maoyan.com&#x2F;#movie--&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;data in datalist&quot;&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123;data.nm&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">&lt;!--            &lt;img :src&#x3D;&quot;data.img&quot; alt&#x3D;&quot;&quot;&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;img :src&#x3D;&quot;changePath(data.img)&quot; alt&#x3D;&quot;&quot;&gt;--&gt;</span><br><span class="line">&lt;!--            过滤器--&gt;</span><br><span class="line">            &lt;img :src&#x3D;&quot;data.img | myChange&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F;定义过滤器</span><br><span class="line">    Vue.filter(&#39;myChange&#39;,function (url) &#123;</span><br><span class="line">        return url.replace(&#39;w.h&#39;,&#39;128.180&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#box&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            datalist: [],</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            changePath(url)&#123;</span><br><span class="line">                return url.replace(&#39;w.h&#39;,&#39;128.180&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            &#x2F;&#x2F;http:&#x2F;&#x2F;p0.meituan.net&#x2F;w.h&#x2F;movie&#x2F;b16c1c0d5ac9e743c6ffbbf7eba900522725807.jpg</span><br><span class="line">            &#x2F;&#x2F;http:&#x2F;&#x2F;p0.meituan.net&#x2F;128.180&#x2F;movie&#x2F;b16c1c0d5ac9e743c6ffbbf7eba900522725807.jpg</span><br><span class="line">            axios.get(&quot;.&#x2F;json&#x2F;test.json&quot;).then(res &#x3D;&gt; &#123;</span><br><span class="line">                console.log(res.data.coming) &#x2F;&#x2F; axios 自动包装data属性 res.data</span><br><span class="line">                this.datalist &#x3D; res.data.coming</span><br><span class="line">            &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">                console.log(err);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Django进阶-模板-03</title>
    <url>/2021/05/09/Django%E8%BF%9B%E9%98%B6-%E6%A8%A1%E6%9D%BF-03/</url>
    <content><![CDATA[<p>Django 模板</p>
<a id="more"></a>

<h1 id="Django之模板层"><a href="#Django之模板层" class="headerlink" title="Django之模板层"></a>Django之模板层</h1><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222640765-369316586..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222640765-369316586..png" alt="1554199389194"></a></p>
<h2 id="一-模板简介"><a href="#一-模板简介" class="headerlink" title="一 模板简介"></a>一 模板简介</h2><p>在刚刚介绍完的视图层中我们提到，浏览器发送的请求信息会转发给视图函数进行处理，而视图函数在经过一系列处理后必须要有返回信息给浏览器。如果我们要返回html标签、css等数据给浏览器进行渲染，我们可以在视图函数中这么做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copydef current_datetime(request):</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    html = <span class="string">&quot;&lt;html&gt;&lt;body&gt;It is now %s.&lt;/body&gt;&lt;/html&gt;&quot;</span> % now</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure>

<p>上例所示，我们直接将HTML代码放到视图函数里，然后进行返回，这可以使我们很直观地看清楚浏览器从发送请求到看到前端界面内容的这个过程中视图函数的基本工作原理，但是这种将前端代码与后端代码耦合到了一起开发方式，会存在以下问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy1、程序的可维护性与可扩展性问题</span><br><span class="line">前端界面一旦需要重新设计、修改，则必须对后端的Python代码进行相应的修改。 然而前端界面的修改往往比后端 Python 代码的修改要频繁得多，因此如果可以在不进行 Python 代码修改的情况下变更前端界面的设计，那将会方便得多。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、开发效率问题</span><br><span class="line">Python 代码编写和 HTML 设计是两项不同的工作，大多数专业的网站开发环境都将它们分配给不同的人员（甚至不同部门）来完成。 专门的程序员去编写 Python代码、专门的设计人员去制作模板，这两项工作同时进行，效率才是最高的。</span><br></pre></td></tr></table></figure>

<p>基于上述原因，将前端页面和Python的代码分离是一种不错的开发模式。 为此 Django专门提供了模板系统 (Template System，即模板层)来实现这种模式，这就是本章要具体讨论的问题。</p>
<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222641249-610103613.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222641249-610103613.gif" alt="img"></a></p>
<p><strong>django的模板=HTML代码+模板语法</strong></p>
<p>存放于templates目录下的html文件称之为模板文件，如果我们想要返回的html页面中的数据是动态的，那么必须在html页面中嵌入变量，这便用到了django的模板语法，具体来说，django的模板语法有以下重点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy一、变量：&#123;&#123; 变量名 &#125;&#125;</span><br><span class="line">    <span class="number">1.1</span> 深度查询：句点符的应用</span><br><span class="line">    <span class="number">1.2</span> 过滤器</span><br><span class="line">二、标签：&#123;% 标签名 %&#125;</span><br><span class="line">三、自定义标签和过滤器</span><br><span class="line">四、模板的导入和继承</span><br></pre></td></tr></table></figure>

<p>下面就让我们来一一介绍它们</p>
<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222641437-124544576..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222641437-124544576..png" alt="1554199441038"></a></p>
<h2 id="二-模板语法之变量"><a href="#二-模板语法之变量" class="headerlink" title="二 模板语法之变量"></a>二 模板语法之变量</h2><h4 id="2-1-变量的基本使用"><a href="#2-1-变量的基本使用" class="headerlink" title="2.1 变量的基本使用"></a>2.1 变量的基本使用</h4><p>如果html代码中的数据不是固定死的，而是动态变化的，则必须在html中嵌入变量，为此，模板语法提供了变量的概念，允许我们在html代码中嵌入变量，我们只需要在视图函数中用render方法为html文件中指定的变量赋值即可，具体用法如下</p>
<p>test.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; dic &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; obj &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; li &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们需要在视图函数中为模板test.html的变量名msg、li、dic、obj、obj_li赋值,views.py内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 传给模板的变量值可以是任意python类型，如下</span></span><br><span class="line">    msg=<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">    dic=&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">object</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">            self.name=name</span><br><span class="line">            self.age=age</span><br><span class="line"></span><br><span class="line">    obj=Person(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">    li = [<span class="number">1</span>,<span class="string">&#x27;aaa&#x27;</span>,obj]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;test.html&#x27;</span>,&#123;<span class="string">&#x27;msg&#x27;</span>:msg,<span class="string">&#x27;dic&#x27;</span>:dic,<span class="string">&#x27;obj&#x27;</span>:obj,<span class="string">&#x27;li&#x27;</span>:li&#125;)</span><br><span class="line">    <span class="comment"># 注意：</span></span><br><span class="line">    <span class="comment"># 1、render函数的第三个参数包含了要传给模板的变量值，是一个字典类型，该字典中的key必须与模板文件中的变量名相对应，render函数会去templates目录下找到模板文件，然后根据字典中的key对应到模板文件中的变量名进行赋值操作，最后将赋值后的模板文件内容返回给浏览器</span></span><br><span class="line">    <span class="comment"># 2、可以将render函数的第三个参数简写为locals(),如下</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;test.html&#x27;</span>,locals()) <span class="comment">#locals()会将函数test内定义的名字与值转换为字典中的k与v</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-深度查询之句点符的使用"><a href="#2-2-深度查询之句点符的使用" class="headerlink" title="2.2 深度查询之句点符的使用"></a>2.2 深度查询之句点符的使用</h4><p>当视图函数传给模板的值中包含多个元素时，若想取出其中的单个元素，就必须使用句点符了。</p>
<p>句点符既可以引用容器类型的元素，也可以引用对象的方法，如下</p>
<p>test.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--调用字符串对象的upper方法，注意不要加括号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg.upper &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--取字典中k1对应的值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; dic.k1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--取对象的name属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--取列表的第2个元素,然后变成大写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; li.1.upper &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--取列表的第3个元素，并取该元素的age属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; li.2.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222641662-187439274..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222641662-187439274..png" alt="1554199486512"></a></p>
<h4 id="2-3-过滤器"><a href="#2-3-过滤器" class="headerlink" title="2.3 过滤器"></a>2.3 过滤器</h4><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222642064-1621101549.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222642064-1621101549.gif" alt="img"></a></p>
<p>过滤器类似于python的内置函数，用来把视图传入的变量值加以修饰后再显示，具体语法如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy&#123;&#123; 变量名|过滤器名:传给过滤器的参数 &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>常用内置过滤器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment">#1、default</span></span><br><span class="line"><span class="comment">#作用：如果一个变量值是False或者为空，使用default后指定的默认值，否则，使用变量本身的值，如果value=’‘则输出“nothing”</span></span><br><span class="line">&#123;&#123; value|default:<span class="string">&quot;nothing&quot;</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、length</span></span><br><span class="line"><span class="comment">#作用：返回值的长度。它对字符串、列表、字典等容器类型都起作用，如果value是 [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]，那么输出是4</span></span><br><span class="line">&#123;&#123; value|length &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、filesizeformat</span></span><br><span class="line"><span class="comment">#作用：将值的格式化为一个&quot;人类可读的&quot;文件尺寸(如13KB、4.1 MB、102bytes等等），如果 value 是 12312312321，输出将会是 11.5 GB</span></span><br><span class="line">&#123;&#123; value|filesizeformat &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、date</span></span><br><span class="line"><span class="comment">#作用：将日期按照指定的格式输出，如果value=datetime.datetime.now(),按照格式Y-m-d则输出2019-02-02</span></span><br><span class="line">&#123;&#123; value|date:<span class="string">&quot;Y-m-d&quot;</span> &#125;&#125;　　</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、slice</span></span><br><span class="line"><span class="comment">#作用：对输出的字符串进行切片操作，顾头不顾尾,如果value=“egon“，则输出&quot;eg&quot;</span></span><br><span class="line">&#123;&#123; value|slice:<span class="string">&quot;0:2&quot;</span> &#125;&#125;　</span><br><span class="line"></span><br><span class="line"><span class="comment">#6、truncatechars</span></span><br><span class="line"><span class="comment">#作用：如果字符串字符多于指定的字符数量，那么会被截断。截断的字符串将以可翻译的省略号序列（“...”）结尾，如果value=”hello world egon 嘎嘎“，则输出&quot;hello...&quot;,注意8个字符也包含末尾的3个点</span></span><br><span class="line">&#123;&#123; value|truncatechars:<span class="number">8</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#7、truncatewords</span></span><br><span class="line"><span class="comment">#作用：同truncatechars，但truncatewords是按照单词截断，注意末尾的3个点不算作单词，如果value=”hello world egon 嘎嘎“，则输出&quot;hello world ...&quot;</span></span><br><span class="line">&#123;&#123; value|truncatewords:<span class="number">2</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#8、safe</span></span><br><span class="line"><span class="comment">#作用：出于安全考虑，Django的模板会对HTML标签、JS等语法标签进行自动转义,例如value=&quot;&lt;script&gt;alert(123)&lt;/script&gt;&quot;，模板变量&#123;&#123; value &#125;&#125;会被渲染成&amp;lt;script&amp;gt;alert(123)&amp;lt;/script&amp;gt;交给浏览器后会被解析成普通字符”&lt;script&gt;alert(123)&lt;/script&gt;“，失去了js代码的语法意义，但如果我们就想让模板变量&#123;&#123; value &#125;&#125;被渲染的结果又语法意义，那么就用到了过滤器safe，比如value=&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;点我啊&lt;/a&gt;&#x27;，在被safe过滤器处理后就成为了真正的超链接，不加safe过滤器则会当做普通字符显示’&lt;a href=&quot;https://www.baidu.com&quot;&gt;点我啊&lt;/a&gt;‘</span></span><br><span class="line">&#123;&#123; value|safe &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>其他过滤器（了解）</p>
<table>
<thead>
<tr>
<th>过滤器</th>
<th>描述</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>upper</td>
<td>以大写方式输出</td>
<td><code>&#123;&#123; user.name | upper &#125;&#125;</code></td>
</tr>
<tr>
<td>add</td>
<td>给value加上一个数值</td>
<td><code>&#123;&#123; user.age | add:”5” &#125;&#125;</code></td>
</tr>
<tr>
<td>addslashes</td>
<td>单引号加上转义号</td>
<td></td>
</tr>
<tr>
<td>capfirst</td>
<td>第一个字母大写</td>
<td><code>&#123;&#123; ‘good’| capfirst &#125;&#125; 返回”Good”</code></td>
</tr>
<tr>
<td>center</td>
<td>输出指定长度的字符串，把变量居中</td>
<td><code>&#123;&#123; “abcd”| center:”50” &#125;&#125;</code></td>
</tr>
<tr>
<td>cut</td>
<td>删除指定字符串</td>
<td><code>&#123;&#123; “You are not a Englishman” | cut:”not” &#125;&#125;</code></td>
</tr>
<tr>
<td>date</td>
<td>格式化日期</td>
<td></td>
</tr>
<tr>
<td>default</td>
<td>如果值不存在，则使用默认值代替</td>
<td><code>&#123;&#123; value | default:”(N/A)” &#125;&#125;</code></td>
</tr>
<tr>
<td>default_if_none</td>
<td>如果值为None, 则使用默认值代替</td>
<td></td>
</tr>
<tr>
<td>dictsort</td>
<td>按某字段排序，变量必须是一个dictionary</td>
<td><code>&#123;% for moment in moments | dictsort:”id” %&#125;</code></td>
</tr>
<tr>
<td>dictsortreversed</td>
<td>按某字段倒序排序，变量必须是dictionary</td>
<td></td>
</tr>
<tr>
<td>divisibleby</td>
<td>判断是否可以被数字整除</td>
<td><code>&#123;&#123; 224 | divisibleby:2 &#125;&#125; 返回 True</code></td>
</tr>
<tr>
<td>escape</td>
<td>按HTML转义，比如将”&lt;”转换为”&amp;lt”</td>
<td></td>
</tr>
<tr>
<td>filesizeformat</td>
<td>增加数字的可读性，转换结果为13KB,89MB,3Bytes等</td>
<td><code>&#123;&#123; 1024 | filesizeformat &#125;&#125; 返回 1.0KB</code></td>
</tr>
<tr>
<td>first</td>
<td>返回列表的第1个元素，变量必须是一个列表</td>
<td></td>
</tr>
<tr>
<td>floatformat</td>
<td>转换为指定精度的小数，默认保留1位小数</td>
<td><code>&#123;&#123; 3.1415926 | floatformat:3 &#125;&#125; 返回 3.142 四舍五入</code></td>
</tr>
<tr>
<td>get_digit</td>
<td>从个位数开始截取指定位置的数字</td>
<td><code>&#123;&#123; 123456 | get_digit:’1’&#125;&#125;</code></td>
</tr>
<tr>
<td>join</td>
<td>用指定分隔符连接列表</td>
<td><code>&#123;&#123; [‘abc’,’45’] | join:’*’ &#125;&#125; 返回 abc*45</code></td>
</tr>
<tr>
<td>length</td>
<td>返回列表中元素的个数或字符串长度</td>
<td></td>
</tr>
<tr>
<td>length_is</td>
<td>检查列表，字符串长度是否符合指定的值</td>
<td><code>&#123;&#123; ‘hello’| length_is:’3’ &#125;&#125;</code></td>
</tr>
<tr>
<td>linebreaks</td>
<td>用或 标签包裹变量</td>
<td><code>&#123;&#123; “Hi\n\nDavid”|linebreaks &#125;&#125; 返回HiDavid</code></td>
</tr>
<tr>
<td>linebreaksbr</td>
<td>用 标签代替换行符</td>
<td></td>
</tr>
<tr>
<td>linenumbers</td>
<td>为变量中的每一行加上行号</td>
<td></td>
</tr>
<tr>
<td>ljust</td>
<td>输出指定长度的字符串，变量左对齐</td>
<td><code>&#123;&#123;‘ab’|ljust:5&#125;&#125;返回 ‘ab ’</code></td>
</tr>
<tr>
<td>lower</td>
<td>字符串变小写</td>
<td></td>
</tr>
<tr>
<td>make_list</td>
<td>将字符串转换为列表</td>
<td></td>
</tr>
<tr>
<td>pluralize</td>
<td>根据数字确定是否输出英文复数符号</td>
<td></td>
</tr>
<tr>
<td>random</td>
<td>返回列表的随机一项</td>
<td></td>
</tr>
<tr>
<td>removetags</td>
<td>删除字符串中指定的HTML标记</td>
<td><code>&#123;&#123;value | removetags: “h1 h2”&#125;&#125;</code></td>
</tr>
<tr>
<td>rjust</td>
<td>输出指定长度的字符串，变量右对齐</td>
<td></td>
</tr>
<tr>
<td>slice</td>
<td>切片操作， 返回列表</td>
<td><code>&#123;&#123;[3,9,1] | slice:’:2’&#125;&#125; 返回 [3,9]</code> <code>&#123;&#123; 'asdikfjhihgie' | slice:':5' &#125;&#125; 返回 ‘asdik’</code></td>
</tr>
<tr>
<td>slugify</td>
<td>在字符串中留下减号和下划线，其它符号删除，空格用减号替换</td>
<td><code>&#123;&#123; '5-2=3and5 2=3' | slugify &#125;&#125; 返回 5-23and5-23</code></td>
</tr>
<tr>
<td>stringformat</td>
<td>字符串格式化，语法同python</td>
<td></td>
</tr>
<tr>
<td>time</td>
<td>返回日期的时间部分</td>
<td></td>
</tr>
<tr>
<td>timesince</td>
<td>以“到现在为止过了多长时间”显示时间变量</td>
<td>结果可能为 45days, 3 hours</td>
</tr>
<tr>
<td>timeuntil</td>
<td>以“从现在开始到时间变量”还有多长时间显示时间变量</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>每个单词首字母大写</td>
<td></td>
</tr>
<tr>
<td>truncatewords</td>
<td>将字符串转换为省略表达方式</td>
<td><code>&#123;&#123; 'This is a pen' | truncatewords:2 &#125;&#125;返回``This is ...</code></td>
</tr>
<tr>
<td>truncatewords_html</td>
<td>同上，但保留其中的HTML标签</td>
<td><code>&#123;&#123; '<p>This is a pen</p>' | truncatewords:2 &#125;&#125;返回``&lt;p&gt;This is ...&lt;/p&gt;</code></td>
</tr>
<tr>
<td>urlencode</td>
<td>将字符串中的特殊字符转换为url兼容表达方式</td>
<td><code>&#123;&#123; ‘http://www.aaa.com/foo?a=b&b=c’ | urlencode&#125;&#125;</code></td>
</tr>
<tr>
<td>urlize</td>
<td>将变量字符串中的url由纯文本变为链接</td>
<td></td>
</tr>
<tr>
<td>wordcount</td>
<td>返回变量字符串中的单词数</td>
<td></td>
</tr>
<tr>
<td>yesno</td>
<td>将布尔变量转换为字符串yes, no 或maybe</td>
<td><code>&#123;&#123; True | yesno &#125;&#125;&#123;&#123; False | yesno &#125;&#125;&#123;&#123; None | yesno &#125;&#125; ``返回 ``yes``no ``maybe</code></td>
</tr>
</tbody></table>
<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222642387-355926049..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222642387-355926049..png" alt="1554199519214"></a></p>
<h2 id="三-模板语法之标签"><a href="#三-模板语法之标签" class="headerlink" title="三 模板语法之标签"></a>三 模板语法之标签</h2><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222642656-1421952922.gif"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222642656-1421952922.gif" alt="img"></a></p>
<p>标签是为了在模板中完成一些特殊功能,语法为<code>&#123;% 标签名 %&#125;</code>，一些标签还需要搭配结束标签 <code>&#123;% endtag %&#125;</code></p>
<h4 id="3-1-常用标签之for标签"><a href="#3-1-常用标签之for标签" class="headerlink" title="3.1 常用标签之for标签"></a>3.1 常用标签之for标签</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment">#1、遍历每一个元素：</span></span><br><span class="line">&#123;% <span class="keyword">for</span> person <span class="keyword">in</span> person_list %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; person.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、可以利用&#123;% for obj in list reversed %&#125;反向循环。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、遍历一个字典：</span></span><br><span class="line">&#123;% <span class="keyword">for</span> key,val <span class="keyword">in</span> dic.items %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; key &#125;&#125;:&#123;&#123; val &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、循环序号可以通过&#123;&#123; forloop &#125;&#125;显示　</span></span><br><span class="line">forloop.counter            当前循环的索引值（从<span class="number">1</span>开始）</span><br><span class="line">forloop.counter0           当前循环的索引值（从<span class="number">0</span>开始）</span><br><span class="line">forloop.revcounter         当前循环的倒序索引值（从<span class="number">1</span>开始）</span><br><span class="line">forloop.revcounter0        当前循环的倒序索引值（从<span class="number">0</span>开始）</span><br><span class="line">forloop.first              当前循环是第一次循环则返回<span class="literal">True</span>，否则返回<span class="literal">False</span></span><br><span class="line">forloop.last               当前循环是最后一次循环则返回<span class="literal">True</span>，否则返回<span class="literal">False</span></span><br><span class="line">forloop.parentloop         本层循环的外层循环</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、for标签可以带有一个可选的&#123;% empty %&#125; 从句，在变量person_list为空或者没有被找到时，则执行empty子句</span></span><br><span class="line">&#123;% <span class="keyword">for</span> person <span class="keyword">in</span> person_list %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; person.name &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&#123;% empty %&#125;</span><br><span class="line">    &lt;p&gt;sorry,no person here&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p>url.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^test/&#x27;</span>,views.test)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>view.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copydef test(request):</span><br><span class="line">    names=[<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;kevin&#x27;</span>]</span><br><span class="line">    dic=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    list1=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;test.html&#x27;</span>,locals())</span><br></pre></td></tr></table></figure>

<p>test.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% for name in names %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; forloop.counter0 &#125;&#125; &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">0 egon</span></span><br><span class="line"><span class="comment">1 kevin</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% for name in names reversed %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; forloop.revcounter0 &#125;&#125; &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">1 kevin</span></span><br><span class="line"><span class="comment">0 egon</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% for k,v in dic.items %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; forloop.counter &#125;&#125; &#123;&#123; k &#125;&#125; &#123;&#123; v &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">1 name egon</span></span><br><span class="line"><span class="comment">2 age 18</span></span><br><span class="line"><span class="comment">3 sex male</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">&#123;% for item in list1 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>sorry,no value here<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">sorry,no value here</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-常用标签之if标签"><a href="#3-2-常用标签之if标签" class="headerlink" title="3.2 常用标签之if标签"></a>3.2 常用标签之if标签</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment"># 1、注意：</span></span><br><span class="line">&#123;% <span class="keyword">if</span> 条件 %&#125;条件为真时<span class="keyword">if</span>的子句才会生效，条件也可以是一个变量，<span class="keyword">if</span>会对变量进行求值，在变量值为空、或者视图没有为其传值的情况下均为<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、具体语法</span></span><br><span class="line">&#123;% <span class="keyword">if</span> num &gt; <span class="number">100</span> <span class="keyword">or</span> num &lt; <span class="number">0</span> %&#125;</span><br><span class="line">    &lt;p&gt;无效&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">elif</span> num &gt; <span class="number">80</span> <span class="keyword">and</span> num &lt; <span class="number">100</span> %&#125;</span><br><span class="line">    &lt;p&gt;优秀&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;凑活吧&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、if语句支持 and 、or、==、&gt;、&lt;、!=、&lt;=、&gt;=、in、not in、is、is not判断。</span></span><br></pre></td></tr></table></figure>

<p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222642833-2013367995..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222642833-2013367995..png" alt="1554199669653"></a></p>
<h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><p>urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.urls <span class="keyword">import</span> path,register_converter,re_path</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 输入http://127.0.0.1:8008/或者http://127.0.0.1:8008/index/都会转发给视图函数index</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^$&#x27;</span>,views.index),</span><br><span class="line">    re_path(<span class="string">r&#x27;^index/$&#x27;</span>,views.index),</span><br><span class="line">    </span><br><span class="line">    re_path(<span class="string">r&#x27;^login/&#x27;</span>,views.login),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    name=request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    pwd=request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        current_user=name</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,locals())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg=<span class="string">&#x27;账号或密码错误&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>,locals())</span><br></pre></td></tr></table></figure>

<p>在templates目录下新建模板文件index.html与login.html</p>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">如果用户已经登录，则current_user变量有值，if判断结果为真，会打印变量current_user的值，为当前登录的用户名</span></span><br><span class="line"><span class="comment">如果用户没有登录，则current_user变量无值，if判断结果为假，会打印a标签要求用户先登录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&#123;% if current_user %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前登录用户为：&#123;&#123; current_user &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/login/&quot;</span>&gt;</span>请先登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--输错账号密码时的提示信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copypython manage.py runserver <span class="number">8008</span> <span class="comment">#在浏览器输入http://127.0.0.1:8008/,然后点击登录，输入账号密码进行验证......</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-常用标签之with标签"><a href="#3-3-常用标签之with标签" class="headerlink" title="3.3 常用标签之with标签"></a>3.3 常用标签之with标签</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment"># with标签用来为一个复杂的变量名起别名,如果变量的值来自于数据库，在起别名后只需要使用别名即可，无需每次都向数据库发送请求来重新获取变量的值</span></span><br><span class="line">&#123;% <span class="keyword">with</span> li<span class="number">.1</span>.upper <span class="keyword">as</span> v %&#125;</span><br><span class="line">    &#123;&#123; v &#125;&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-常用标签之csrf-token标签"><a href="#3-4-常用标签之csrf-token标签" class="headerlink" title="3.4 常用标签之csrf_token标签"></a>3.4 常用标签之csrf_token标签</h4><p>[<img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/1825659-20191011222643406-368405519.gif" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment"># 当用form表单提交POST请求时必须加上标签&#123;% csrf_token%&#125;，该标签用于防止跨站伪造请求</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;用户名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;密码：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="comment"># 具体工作原理为：</span></span><br><span class="line"><span class="comment"># 1、在GET请求到form表单时，标签&#123;% csrf_token%&#125;会被渲染成一个隐藏的input标签，该标签包含了由服务端生成的一串随机字符串,如&lt;input type=&quot;hidden&quot; name=&quot;csrfmiddlewaretoken&quot; value=&quot;dmje28mFo...OvnZ5&quot;&gt;</span></span><br><span class="line"><span class="comment"># 2、在使用form表单提交POST请求时，会提交上述随机字符串，服务端在接收到该POST请求时会对比该随机字符串，对比成功则处理该POST请求，否则拒绝，以此来确定客户端的身份</span></span><br></pre></td></tr></table></figure>

<p>[<img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/1825659-20191011222643654-1652402939..png" alt="1554199719796"></p>
<h2 id="四-自定义过滤器和标签"><a href="#四-自定义过滤器和标签" class="headerlink" title="四 自定义过滤器和标签"></a>四 自定义过滤器和标签</h2><p>当内置的过滤器或标签无法满足我们需求时，我们可以自定义，具体操作步骤如下</p>
<p>1、在settings中的INSTALLED_APPS添加当前app的名字，不然django无法找到自定义的过滤器或标签</p>
<p>settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment"># 在settings.py中找到该列表，然后加以配置</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01.apps.App01Config&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01&#x27;</span>, <span class="comment"># 添加当前app的名字</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>2、在文件夹app01中创建子文件夹templatetags(文件夹名只能是templatetags)</p>
<p>3、在templatetags新建任意.py文件，如my_tags.py，在该文件中自定义过滤器或标签，文件内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copyfrom django <span class="keyword">import</span> template</span><br><span class="line">register = template.Library() <span class="comment"># 注意变量名必须为register,不可改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1、自定义过滤器</span></span><br><span class="line"><span class="meta">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_multi_filter</span>(<span class="params">v1 ,v2</span>):</span> <span class="comment"># 自定义的过滤器只能定义最多两个参数，针对&#123;&#123; value1 | filter_multi:value2 &#125;&#125;，参数传递为v1=value1,v2=value2</span></span><br><span class="line">    <span class="keyword">return</span>  v1 * v2</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、自定义标签</span></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_multi_tag</span>(<span class="params">v1, v2</span>):</span> <span class="comment"># 自定义的标签可以定义多个参数</span></span><br><span class="line">    <span class="keyword">return</span> v1 * v2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、自定义标签扩展之mark_safe</span></span><br><span class="line"><span class="comment"># 注释：我们可以用内置的标签safe来让标签内容有语法意义，如果我们想让自定义标签处理的结果也有语法意义，则不能使用内置标签safe了，需要使用mark_safe，可以实现与内置标签safe同样的功能</span></span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"></span><br><span class="line"><span class="meta">@register.simple_tag</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_input_tag</span>(<span class="params">id, name</span>):</span></span><br><span class="line">    res = <span class="string">&quot;&lt;input type=&#x27;text&#x27; id=&#x27;%s&#x27; name=&#x27;%s&#x27; /&gt;&quot;</span> % (id, name)</span><br><span class="line">    <span class="keyword">return</span> mark_safe(res)</span><br></pre></td></tr></table></figure>

<p>4、自定义过滤器或标签必须重新启动django方可生效</p>
<p>5、自定义过滤器或标签的使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--必须先加载存有自定义过滤器和标签的文件--&gt;</span></span><br><span class="line">&#123;% load my_tags %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--salary的值为10，经过滤器my_multi_filter的处理结果为120--&gt;</span></span><br><span class="line">&#123;&#123; salary|my_multi_filter:12 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--结果为2--&gt;</span></span><br><span class="line">&#123;% my_multi_tag 1 2 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">结果为一个input标签，该表的属性id=&quot;inp1&quot; name=&quot;username&quot;</span></span><br><span class="line"><span class="comment">注意：input的属性值均为字符串类型，所以my_input_tag后的两个值均为字符串类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&#123;% my_input_tag &quot;inp1&quot; &quot;username&quot; %&#125; </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对比自定义标签与自定义过滤器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment">#1、自定义过滤器只能传两个参数，而自定义标签却可以传多个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、过滤器可以用于if判断，而标签不能</span></span><br><span class="line">&#123;% <span class="keyword">if</span> salary|my_multi_filter:<span class="number">12</span> &gt; <span class="number">200</span> %&#125;</span><br><span class="line">    &lt;p&gt;优秀&lt;/p&gt;</span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;垃圾&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>[<img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/1825659-20191011222644040-442921534..png" alt="1554199793392"></p>
<h2 id="五-模板的导入和继承"><a href="#五-模板的导入和继承" class="headerlink" title="五 模板的导入和继承"></a>五 模板的导入和继承</h2><p>在实际开发中，模板文件彼此之间可能会有大量冗余代码，为此django提供了专门的语法来解决这个问题,主要围绕三种标签的使用：include标签、extends标签、block标签，详解如下</p>
<h4 id="5-1、模板的导入之include标签"><a href="#5-1、模板的导入之include标签" class="headerlink" title="5.1、模板的导入之include标签"></a>5.1、模板的导入之include标签</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment">#作用：在一个模板文件中，引入/重用另外一个模板文件的内容，</span></span><br><span class="line">&#123;% include <span class="string">&#x27;模版名称&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<p>可以把广告栏写到专门的文件里advertise.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;adv&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>Panel title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            Panel content</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-danger&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>Panel title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            Panel content</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-warning&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>Panel title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            Panel content</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在base.html文件中用include标签引入advertise.html文件的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            background-color: black;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--在base.html引入advertise.html文件的内容--&gt;</span></span><br><span class="line">            &#123;% include &quot;advertise.html&quot; %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2、模板的继承-派生之extends标签、block标签"><a href="#5-2、模板的继承-派生之extends标签、block标签" class="headerlink" title="5.2、模板的继承\派生之extends标签、block标签"></a>5.2、模板的继承\派生之extends标签、block标签</h4><p>[<img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/1825659-20191011222644368-957691177.gif" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment">#作用：在一个模板文件中，引入/重用另外一个模板文件的内容</span></span><br><span class="line">&#123;% extends <span class="string">&quot;模版名称&quot;</span> %&#125;</span><br><span class="line"><span class="comment">#  也就是说include有的功能extends全都有，但是extends可以搭配一个block标签，用于在继承的基础上定制新的内容</span></span><br></pre></td></tr></table></figure>

<p>案例</p>
<p>Django模版引擎中最复杂且最强大的部分就是模版继承了。我们以先创建一个基本的“骨架”模版，它包含我们站点中的全部元素，并且可以定义多处blocks ，例如我们创建base.html内容如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        &#123;% block title %&#125;自定义title名&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#919191</span>;</span></span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">                &#123;% block sidebar %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item active&quot;</span>&gt;</span>服装城<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>美妆馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>超市<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>全球购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>闪购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>团购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">            &#123;% block content %&#125;</span><br><span class="line">                base.html页面内容</span><br><span class="line">            &#123;% endblock %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>模板base.html 定义了一个可以用于两列排版页面的简单HTML骨架。我们新建子模板index.html的主要工作就是继承base.html然后填充/覆盖其内部的blocks。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy&#123;% extends <span class="string">&quot;base.html&quot;</span> %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--用新内容完全覆盖了父模板内容--&gt;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">    index页面</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">    &lt;!--该变量会将父模板中sidebar中原来的内容继承过来，然后我们可以在此基础上新增，否则就是纯粹地覆盖--&gt;</span><br><span class="line">    &#123;&#123; block.super &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;!--在继承父模板内容的基础上新增的标签--&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;拍卖&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;list-group-item&quot;&gt;金融&lt;/a&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;!--用新内容完全覆盖了父模板内容--&gt;</span><br><span class="line">    &lt;p&gt;index页面内容&lt;/p&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<p>我们通过django访问index.html看到内容如下(block标签的内容都完成了替换或更新)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        index页面</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#919191</span>;</span></span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该变量会将父模板中sidebar中原来的内容继承过来，然后我们可以在此基础上新增，否则就是纯粹地覆盖--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item active&quot;</span>&gt;</span>服装城<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>美妆馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>超市<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>全球购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>闪购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>团购<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--在继承父模板内容的基础上新增的标签--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>拍卖<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>金融<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--用新内容完全覆盖了父模板内容--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>index页面内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结与注意</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Copy<span class="comment">#1、标签extends必须放在首行，base.html中block越多可定制性越强</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、include仅仅只是完全引用其他模板文件，而extends却可以搭配block在引用的基础上进行扩写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、变量&#123;&#123; block.super &#125;&#125; 可以重用父类的内容，然后在父类基础上增加新内容，而不是完全覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、为了提升可读性，我们可以给标签&#123;% endblock %&#125; 起一个名字 。例如：</span></span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">    ...</span><br><span class="line">    &#123;% endblock content %&#125;　　</span><br><span class="line"><span class="comment">#5、在一个模版中不能出现重名的block标签。</span></span><br></pre></td></tr></table></figure>

<p>[<img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/1825659-20191011222644614-1112203537..png" alt="1554199941524"></p>
<h2 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h2><p>我们在编写模板文件时，需要大量引用css、js、图片等静态文件，如果我们将这些文件在服务端存放的路径都固定写死那么将非常不利于后期的扩展，我们可以这么做</p>
<p>1、settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CopySTATIC_URL = <span class="string">&#x27;/static/&#x27;</span> <span class="comment"># 找到这一行，然后新增下述代码</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&#x27;statics&#x27;</span>),<span class="comment"># 获取静态文件在服务端的绝对路径</span></span><br><span class="line">]</span><br><span class="line"><span class="comment">#STATIC_URL = &#x27;/static/&#x27;就是为静态文件的绝对路径起了一个别名，以后我们只需要用路径/static/即可；相当于一个令牌，找静态文件以后会遍历STATICFILES_DIRS去找</span></span><br></pre></td></tr></table></figure>

<p>2、在项目根目录下新增文件夹statics，为了更便于管理，可以在statics下新建子文件夹css、js、img等</p>
<p>[<img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/1825659-20191011222645014-1230254081.gif" alt="statics目录结构"></p>
<p>3、新建模板文件index.html,在该文件中对静态文件的引用如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/css/my.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是红色的，点我就绿<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/img/rb.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>综上，在配置完settings.py后，所有的静态文件路径都可以采用别名/static/作为起始，这在一定程度上会有利于程序的扩展性，但如果我们在项目后期维护时，连/static/这个值也需要修改，那意味着所有模板文件中也都需要跟着改了，扩展性依然很差，为此，django在一个名为static.py的文件中定义了标签static、get_static_prefix，二者都可以解决该问题</p>
<p>静态文件动态解析</p>
<p>test.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：必须先加载文件static.py--&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="comment">&lt;!--注意：此处的static是一个定义在static.py中的一个标签，名字与文件名一样而已，不要搞混--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;css/my.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是红色的，点我就绿<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;img/rb.jpeg&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/jquery-3.3.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/my.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>标签static会接收传入的参数，然后这根据settings.py中变量STATIC_URL的值拼接出一个完整的路径，如果<code>STATIC_URL = &#39;/static/&#39;</code>，那么<code>href=&quot;&#123;% static 'css/my.css' %&#125;&quot;</code>会被渲染成<code>href=&quot;/static/css/my.css&quot;</code>，如果<code>STATIC_URL = &#39;/static123/&#39;</code>，那么<code>href=&quot;&#123;% static 'css/my.css' %&#125;&quot;</code>会被渲染成href=”/static123/css/my.css”。</p>
<p>标签get_static_prefix也可以完成同样的效果，只不过用法不同。我们不能为标签get_static_prefix传参，因为标签get_static_prefix代表的只是settings.py中STATIC_URL的值，所以我们需要做的是在get_static_prefix的基础上自行拼接路径，如下</p>
<p>test.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Copy<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意：同样需要先加载文件static.py--&gt;</span></span><br><span class="line">    &#123;% load static %&#125;</span><br><span class="line">    <span class="comment">&lt;!--使用标签get_static_prefix拼接路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% get_static_prefix %&#125;css/my.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>我是红色的，点我就绿<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% get_static_prefix %&#125;img/rb.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% get_static_prefix %&#125;js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% get_static_prefix %&#125;js/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果STATIC_URL = ‘/static/‘，那么<code>href=&quot;&#123;% get_static_prefix %&#125;css/my.css&quot;</code>会被渲染成href=”/static/css/my.css”，其它同理</p>
<p>[<img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/1825659-20191011222645341-941881794..png" alt="1554200021270"></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day03</title>
    <url>/2020/08/23/py-day03/</url>
    <content><![CDATA[<p>python基础<br>函数高级操作(名称空间·作用域·函数嵌套·生成器、迭代器、装饰器)</p>
<a id="more"></a>
<h4 id="内容复习"><a href="#内容复习" class="headerlink" title="内容复习 "></a><div id="title">内容复习 </div></h4><p>1.列表：</p>
<ul>
<li>定义：<ul>
<li>li = []</li>
<li>li = list()</li>
</ul>
</li>
<li>增<ul>
<li>append insert</li>
</ul>
</li>
<li>删<ul>
<li>pop  clear</li>
</ul>
</li>
<li>改<ul>
<li>li[3] = ‘newvalue’</li>
</ul>
</li>
<li>查<ul>
<li>for i in li:</li>
<li>for index, value in  enumate(li):</li>
</ul>
</li>
<li>索引<ul>
<li>不管是哪一门语言，只要提到索引，必然起始值从0开始</li>
<li>li[3]</li>
</ul>
</li>
<li>切片<ul>
<li>li = [1,2,3,4,5,6,7,8]</li>
<li>根据索引的下标来去切，并且遵循一个原则，前包后不包 li[2:5]</li>
</ul>
</li>
</ul>
<p>2.字典：</p>
<ul>
<li>定义：<ul>
<li>d = dict() ===&gt; d = dict(name=’szk’, age=13)</li>
<li>d = {}  ===&gt; d = {‘name’:’szk’, ‘age’:13}   推荐</li>
</ul>
</li>
<li>增 或 修改<ul>
<li>d[‘height’] = 178</li>
<li>d.update(height=180)  d.update(xxx=123)</li>
<li>删除<ul>
<li>del d[‘name’]</li>
</ul>
</li>
</ul>
</li>
<li>查：<ul>
<li>遍历所有的键   for k in d.keys()</li>
<li>遍历所有的值   for v in d.values()</li>
<li>遍历所有的键值 for k, v in d.items()  </li>
</ul>
</li>
</ul>
<p>项目中的数据结构：非常重要的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;szk&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">13</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;kkk&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">14</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>3.元组<br>定义：(1,2,)   tuple()<br>4.集合<br>定义：{}  set()  天生去重</p>
<h3 id="函数部分："><a href="#函数部分：" class="headerlink" title="函数部分："></a>函数部分：</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名():</span></span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">函数名()</span><br></pre></td></tr></table></figure>

<p>函数执行的原理：</p>
<blockquote>
<p>函数定义的时候，会开辟一个栈(先进后出)，然后将函数压入栈中，注意此时我们只能操作栈顶的元素。调用函数的时候 函数名() ,就会将函数出栈，执行</p>
</blockquote>
<h4 id="0-函数对象"><a href="#0-函数对象" class="headerlink" title="0.函数对象"></a>0.函数对象</h4><p>函数是第一类对象，即函数可以当作变量去用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1 可以被引用</span><br><span class="line">#2 可以当作参数传递</span><br><span class="line">#3 返回值可以是函数</span><br><span class="line">#3 可以当作容器类型的元素</span><br></pre></td></tr></table></figure>
<ul>
<li>利用该特性，优雅的取代多分支的if<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    print(<span class="string">&quot;注册&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span>():</span></span><br><span class="line">    print(<span class="string">&quot;转账&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>():</span></span><br><span class="line">    print(<span class="string">&quot;提现&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    func_dic = &#123;</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:[<span class="string">&quot;登录&quot;</span>,register],</span><br><span class="line">        <span class="string">&quot;2&quot;</span>:[<span class="string">&quot;注册&quot;</span>,login],</span><br><span class="line">        <span class="string">&quot;3&quot;</span>:[<span class="string">&quot;转账&quot;</span>,transfer],</span><br><span class="line">        <span class="string">&quot;4&quot;</span>:[<span class="string">&quot;提现&quot;</span>,withdraw],</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> func_dic:</span><br><span class="line">            print(k, func_dic[k][<span class="number">0</span>])</span><br><span class="line">        print(<span class="string">&quot;0 退出&quot;</span>)</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">&quot;请输入您的命令编号: &quot;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> func_dic:</span><br><span class="line">            func_dic[choice][<span class="number">1</span>]()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;请输入正确编号&quot;</span>)</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-函数嵌套"><a href="#1-函数嵌套" class="headerlink" title="1.函数嵌套"></a>1.函数嵌套</h4><ol>
<li>只要遇见了()就是函数的调用. 如果没有()就不是函数的调用</li>
<li>函数的执行顺序<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle</span>(<span class="params">radius,mode=<span class="number">0</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perimiter</span>(<span class="params">radius</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * pi * radius</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">radius</span>):</span></span><br><span class="line">        <span class="keyword">return</span> pi * (radius ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> perimiter(radius)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> area(radius)</span><br><span class="line"></span><br><span class="line">print(circle(<span class="number">5</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max2</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max4</span>(<span class="params">a,b,c,d</span>):</span></span><br><span class="line">    res1 = max2(a,b,)</span><br><span class="line">    res2 = max2(res1,c)</span><br><span class="line">    res3 = max2(res2,d)</span><br><span class="line">    <span class="keyword">return</span> res3</span><br><span class="line"></span><br><span class="line">res = max4(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
接下来再看一个例子:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span>   </span><br><span class="line">    print(<span class="number">222</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun3</span>():</span></span><br><span class="line">        print(<span class="number">666</span>)</span><br><span class="line">    print(<span class="number">444</span>)</span><br><span class="line">    fun3()</span><br><span class="line">    print(<span class="number">888</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="number">33</span>)</span><br><span class="line">fun2()</span><br><span class="line">print(<span class="number">555</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-名称空间"><a href="#2-名称空间" class="headerlink" title="2. 名称空间"></a>2. 名称空间</h4><blockquote>
<p>名称空间Namespaces：存放名字与其对应的内存地址的地方.是对栈多的一种划分，真正存在的是栈区，名称空间只是一种虚拟的划分。本身只有优先级之分，并无嵌套关系。</p>
</blockquote>
<ul>
<li>名称空间的加载顺序<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python test.py</span><br><span class="line">#1、python解释器先启动，因而首先加载的是：内置名称空间</span><br><span class="line">#2、执行test.py文件，然后以文件为基础，加载全局名称空间</span><br><span class="line">#3、在执行文件的过程中如果调用函数，则临时产生局部名称空间</span><br></pre></td></tr></table></figure></li>
<li>总结<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 名字访问的优先级</span><br><span class="line">     基于自己当前所在的位置向外一层一层查找，LEGB</span><br><span class="line">     局部名称空间---&gt;全局名称空间---&gt;内置名称空间</span><br><span class="line">    #需要注意的是：在全局无法查看局部的，在局部可以查看全局的</span><br><span class="line">    # max&#x3D;1</span><br><span class="line">    def f1():</span><br><span class="line">        # max&#x3D;2</span><br><span class="line">        def f2():</span><br><span class="line">            # max&#x3D;3</span><br><span class="line">            print(max)</span><br><span class="line">        f2()</span><br><span class="line">    f1()</span><br><span class="line">    print(max)</span><br><span class="line">2. 名称空间的&quot;嵌套&quot;关系是函数定义阶段、扫描语法时生成的，与调用位置无关</span><br><span class="line">案例1：</span><br><span class="line">x &#x3D; 222</span><br><span class="line">def f1():</span><br><span class="line">    print(x)</span><br><span class="line">    x &#x3D; 111</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3. 作用域"></a>3. 作用域</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、作用域即范围</span><br><span class="line">    - 全局范围（内置名称空间+全局名称空间属于该范围）：全局存活，全局有效</span><br><span class="line">    - 局部范围（局部名称空间属于该范围）：临时存活，局部有效</span><br><span class="line">#2、作用域关系是在函数定义阶段就已经固定的，与函数的调用位置无关，如下</span><br></pre></td></tr></table></figure>

<ul>
<li>gloabal<br>首先我们写这样一个代码, 首先在全局声明一个变量, 然后再局部调用这个变量, 并改变这 个变量的值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 100</span><br><span class="line">def func():   </span><br><span class="line">    global a    # 加了个global表示不再局部创建这个变量了. 而是直接使用全局的a   </span><br><span class="line">    a &#x3D; 28   </span><br><span class="line">print(a)</span><br><span class="line">func()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>变量污染，很少使用</strong></p>
<blockquote>
<p>global表示. 不再使用局部作用域中的内容了. 而改用全局作用域中的变量</p>
</blockquote>
<ul>
<li><p>nonlocal(了解): 修改函数外层函数包含的名字对应的值（不可变类型）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; 0</span><br><span class="line">def f1():</span><br><span class="line">    x &#x3D; 11</span><br><span class="line">    def f2():</span><br><span class="line">        global x</span><br><span class="line">        x &#x3D; 22</span><br><span class="line">    f2()</span><br><span class="line">    print(&#39;f1内的x&#39;,x)</span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">global ---&gt; nolocal</span><br></pre></td></tr></table></figure>
</li>
<li><p>重点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.查找原则- LEGB</span><br><span class="line">2.名称空间只有优先级之分，本身并无嵌套关系，画图只是方便理解</span><br><span class="line">3.名称空间的其那套关系决定了名字的查找顺序；而名称空间的嵌套关系是以函数定义阶段为准的，即函数的嵌套关系与名字的查找顺序是在定义阶段就已经确定好了的。</span><br><span class="line"></span><br><span class="line">x &#x3D; 111</span><br><span class="line">def f1():</span><br><span class="line">    print(x)</span><br><span class="line">    x &#x3D; 222</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-闭包函数"><a href="#4-闭包函数" class="headerlink" title="4. 闭包函数"></a>4. 闭包函数</h4><ul>
<li><p>闭包函数 = 名称空间与作用域 + 函数嵌套 + 函数对象</p>
<blockquote>
<p>核心点：名字的查找关系是以函数定义阶段为准</p>
</blockquote>
</li>
<li><p>什么是闭包函数:</p>
<blockquote>
<p>“闭”函数指的是该函数是内嵌函数<br>“包”函数指的是该函数包含对外层函数作用域名字的引用(不是对全局作用域)</p>
</blockquote>
</li>
<li><p>闭包函数：函数对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    x &#x3D; 33333333</span><br><span class="line">    def f2():</span><br><span class="line">        print(&#39;函数f2: &#39;,x)</span><br><span class="line">    return f2</span><br><span class="line">f &#x3D; f1()</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    x &#x3D; 555</span><br><span class="line">    f()</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>为什么要有闭包函数 -&gt; 闭包函数的应用</strong></p>
</li>
<li><p>为函数体传参的两种方式<br>方式一: 直接把函数体需要的参数定义成形参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    print(len(response.text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">get(<span class="string">&#x27;http://www.zhihu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>方式二: 闭包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        print(len(response.text))</span><br><span class="line">    <span class="keyword">return</span> get</span><br><span class="line"></span><br><span class="line">baidu = outter(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">baidu()</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="5-装饰器"><a href="#5-装饰器" class="headerlink" title="5.装饰器"></a>5.装饰器</h4><ol>
<li>装饰器（闭包函数的应用）</li>
</ol>
<ul>
<li><p>1、开放封闭原则<br>  软件一旦上之后就应该开放封闭原则<br>  具体是指对修改是封闭的，但对扩展是开放的</p>
</li>
<li><p>2、什么是装饰器<br>  装饰就是修饰，器指的就是工具<br>  装饰器本身可以是任意可调用的对象<br>  被装饰的对象也可以是任意可调用的对象</p>
<p>  装饰器—&gt;函数<br>  被装饰的对象=&gt;函数</p>
<p>  装饰器是用来为被装饰对象添加新功能的一种工具<br>  必须遵循：</p>
<pre><code>  1、不能修改被装饰对象的源代码
  2、不能修改被装饰对象的调用方式</code></pre>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;from home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># func=index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        start_time=time.time()</span><br><span class="line">        func()</span><br><span class="line">        end_time=time.time()</span><br><span class="line">        print(<span class="string">&#x27;run time is %s&#x27;</span> %(end_time - start_time))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index=outter(index)</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>装饰器修正+装饰器语法糖</p>
<blockquote>
<p>如果有返回值，则在内层函数定义res ，末尾return；<br>内层函数接收参数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span>(<span class="params">func</span>):</span> <span class="comment">#func用来接收被装饰的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span> <span class="comment">#这个功能是给原始的函数用的</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs) <span class="comment">#拿到返回值</span></span><br><span class="line">        stop_time=time.time()</span><br><span class="line">        print(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time - start_time))</span><br><span class="line">        <span class="comment"># return res</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer # index=timmer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome to index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer #home=timmer(home)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome %s to home page&#x27;</span> %name)</span><br></pre></td></tr></table></figure>
</li>
<li><p>无参装饰器模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 总结无参装饰器模板</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 1. 调原函数</span></span><br><span class="line">        <span class="comment"># 2. 为其增加新功能</span></span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">wrapper内需要func ,往里一缩，加入outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><strong>@的作用</strong><blockquote>
<p>@名字  home = 名字(home)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def home():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li>
<li>+内置函数伪装<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(fuinc)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">     <span class="comment"># 手动将原函数的属性赋值给wrapper函数</span></span><br><span class="line">     <span class="comment"># 1. 函数wrapper.__name__ = 原函数.__name__</span></span><br><span class="line">     <span class="comment"># 2. 函数wrapper.__doc__ = 原函数.__doc__</span></span><br><span class="line">     <span class="comment">#  wrapper.__name__ = func.__name__</span></span><br><span class="line">     <span class="comment">#  wrapper.__doc__ = func.__doc__</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">wrapper内需要func ,往里一缩，加入outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="4">
<li>叠加装饰器<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco1</span>(<span class="params">func1</span>):</span>  <span class="comment"># func1 = wrapper2的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper1</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;=======&gt;wrapper1&#x27;</span>)</span><br><span class="line">        res1 = func1(*args,**kwargs)</span><br><span class="line">        print(<span class="string">&#x27;===&gt;end wrapper1&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res1</span><br><span class="line">    <span class="keyword">return</span> wrapper1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco2</span>(<span class="params">func2</span>):</span>  <span class="comment"># func2 = wrapper3的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper2</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;=======&gt;wrapper2&#x27;</span>)</span><br><span class="line">        res2 = func2(*args,**kwargs)</span><br><span class="line">        print(<span class="string">&#x27;===&gt;end wrapper2&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res2</span><br><span class="line">    <span class="keyword">return</span> wrapper2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco3</span>(<span class="params">func3</span>):</span>  <span class="comment"># func3 = 最原始的index的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper3</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;=======&gt;wrapper3&#x27;</span>)</span><br><span class="line">        res3 = func3(*args,**kwargs)</span><br><span class="line">        print(<span class="string">&#x27;===&gt;end wrapper3&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res3</span><br><span class="line">    <span class="keyword">return</span> wrapper3</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco1</span></span><br><span class="line"><span class="meta">@deco2</span></span><br><span class="line"><span class="meta">@deco3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;index %s %s&#x27;</span>%(a,b))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123123123123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(index(<span class="number">1111</span>,<span class="number">2222</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 叠加多个装饰器</p>
</blockquote>
</li>
</ol>
<p><strong>1.加载顺序(outter函数的调用顺序):自下而上</strong><br><strong>2.执行顺序(wrapper函数的执行顺序):自上而下</strong></p>
<ol start="5">
<li>有参装饰器<br>eg: 引入参数的例子<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">db_type</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            name = input(<span class="string">&#x27;pls input your username&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">            password = input(<span class="string">&#x27;pls input your username&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> db_type == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                print(<span class="string">&quot;基于文件的验证&quot;</span>)</span><br><span class="line">                <span class="comment"># 从文件中验证用户名和密码</span></span><br><span class="line">                <span class="keyword">if</span> name == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">                    res = func(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">&quot;用户认证失败....&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> db_type == <span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">                print(<span class="string">&quot;基于mysql的验证&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> db_type == <span class="string">&#x27;ldap&#x27;</span>:</span><br><span class="line">                print(<span class="string">&quot;基于ldap的验证&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;不支持该db_type&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(db_type=&#x27;file&#x27;)  # 基于数据库的验证 #deco  #index=deco(index) #index=wrapper #index(1,2) = wrapper(1,2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">page</span>):</span></span><br><span class="line">    print(<span class="string">&quot;welcome home page %s&quot;</span> % (page))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(db_type=&#x27;sql&#x27;)  # 账号密码来源是文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;home---&gt;%s&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(db_type=&#x27;ldap&#x27;)  # 账号密码来源是ldap</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span>(<span class="params">money</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;transfer---&gt;%s&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index(<span class="string">&#x27;egon&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_user = &#123;<span class="string">&#x27;login&#x27;</span>:<span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> current_user[<span class="string">&#x27;login&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        user = input(<span class="string">&#x27;username&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        passwd = input(<span class="string">&#x27;passwd&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span>  user == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> passwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            current_user[<span class="string">&#x27;login&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome to index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome %s to home page&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">home(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>引入参数<br>func 用来接收被装饰的函数<br>wrapper(*args,**kwargs): #这个功能是给原始的函数用的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_user=&#123;<span class="string">&#x27;login&#x27;</span>:<span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">engine</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">            <span class="keyword">if</span> current_user[<span class="string">&#x27;login&#x27;</span>]:</span><br><span class="line">                <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line"></span><br><span class="line">            user=input(<span class="string">&#x27;username&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">            pwd=input(<span class="string">&#x27;password&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> engine == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> user == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">                    current_user[<span class="string">&#x27;login&#x27;</span>]=<span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">                print(<span class="string">&#x27;基于mysql数据的认证&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">&#x27;ldap&#x27;</span>:</span><br><span class="line">                print(<span class="string">&#x27;基于ldap的认证方式&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(engine=&#x27;mysql&#x27;) # @outter # index=outter(index) #index=wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome to index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(engine=&#x27;ldap&#x27;) # @outter # home=outter(home) #home=wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome %s to home page&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">home(<span class="string">&#x27;egon&#x27;</span>)</span><br></pre></td></tr></table></figure>


<blockquote>
<p>装饰器原理：就是闭包函数的应用。 @auth(engine=’file’)，执行的过程为拿到outter内存地址+engine=’file’; @outter(func) 执行的过程为 把他正下方的函数名当做参数传入，得到的结果重新赋值给index index = @outter(index),index拿到的是outter的调用结果，index = wrapper; wrapper函数内打开就可以看到，要访问一个func，问上一层outter要，enggine没有，再上一层要，auth。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">engine</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>)</span></span><br><span class="line"><span class="function">            ....</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">wrapper</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结: wrapper(*args,**kwargs) 这个参数的功能是给原始函数用的；outter(func)，用来装被修饰的函数，auth(engine) 传给内层需要的函数。三层足够使用，最外层可以无限的延伸参数。</p>
</blockquote>
<ol start="6">
<li><strong>有参数装饰器模板</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 有参装饰器(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@有参装饰器(1,y=1,z=2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 被装饰对象():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>




</li>
</ol>
<h4 id="6-内置函数"><a href="#6-内置函数" class="headerlink" title="6. 内置函数"></a>6. 内置函数</h4><p>就是python给你提供的. 拿来直接用的函数, 比如print., input等等.</p>
<img src="/2020/08/23/py-day03/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.jpg" class title="内置函数">
<p><strong>迭代器相关</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">range()</span><br><span class="line">next()</span><br><span class="line">迭代器向下执⾏一次, 内部实际使用了next()方法返回迭代器的下一个项目</span><br></pre></td></tr></table></figure>
<p><strong>iter()</strong></p>
<blockquote>
<p>获取迭代器, 内部实际使用的是iter()方法来获取迭代器</p>
</blockquote>
<p><strong>eval()</strong></p>
<blockquote>
<p>字符串类型代码的执行<br>执行部分字符串类型的代码,并返回最终结果</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(eval(&quot;2+2&quot;))</span><br><span class="line"># 4</span><br><span class="line">n &#x3D; 8</span><br><span class="line">print(eval(&quot;2+n&quot;))</span><br><span class="line"># 10</span><br><span class="line">def func():</span><br><span class="line">    print(666)</span><br><span class="line">eval(&quot;func()&quot;)</span><br><span class="line"># 666</span><br></pre></td></tr></table></figure>
<p><strong>exec()</strong></p>
<blockquote>
<p>执行字符串类型的代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msg &#x3D; &#39;&#39;&#39;</span><br><span class="line">def func():</span><br><span class="line">    print(&#39;有计划没行动等于零&#39;)</span><br><span class="line">func()</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">exec(msg)</span><br></pre></td></tr></table></figure>
<p>以上这两个在公司开发中禁止使用,如果里边出现<strong>del</strong>就会出现很大的问题</p>
<p><strong>输入和输出相关</strong><br><strong>input()</strong></p>
<blockquote>
<p>获取用户输入的内容</p>
</blockquote>
<p><strong>print()</strong></p>
<blockquote>
<p>打印输出</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&#39;你好&#39;,&#39;我好&#39;)    </span><br><span class="line">print(&#39;你好&#39;,&#39;我好&#39;,sep&#x3D;&#39;|&#39;)</span><br><span class="line">结果:</span><br><span class="line">你好 我好</span><br><span class="line">你好|我好</span><br></pre></td></tr></table></figure>
<p><strong>sep</strong>是将多个元素进行修改 默认的是空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&#39;你好&#39;)</span><br><span class="line">print(&#39;我好&#39;)</span><br><span class="line">print(&#39;你好&#39;,end&#x3D;&#39;&#39;)</span><br><span class="line">print(&#39;我好&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>end</strong>默认是\n 这就是我们为什么使用print的时候会出现换行,end的值修改成了空字符串</p>
<p><strong>id()</strong></p>
<blockquote>
<p>获取到对象的内存地址</p>
</blockquote>
<p><strong>调用相关</strong></p>
<p><strong>callable()</strong></p>
<blockquote>
<p>用于检查一个对象是否是可调用的. 如果返回True, object有可能调用失败, 但如果返回False. 那调用绝对不会成功</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(callable(print))</span><br><span class="line">结果:</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p><strong>查看内置属性</strong><br><strong>dir()</strong></p>
<blockquote>
<p>查看对象的内置属性</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(dir(list))</span><br><span class="line">结果:</span><br><span class="line">[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;]</span><br></pre></td></tr></table></figure>

<p><strong>基础数据类型相关</strong><br>数字相关<br><strong>​- bool()</strong> 将给定的数据转换成bool值. 如果不给值. 返回False<br>​**- int()** 将给定的数据转换成int值. 如果不给值, 返回0<br><strong>​- ﬂoat()</strong> 将给定的数据转换成ﬂoat值. 也就是小数<br>​数学运算<br>​<strong>abs()</strong> 返回绝对值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:  print(abs(-1))</span><br><span class="line">2:  结果:</span><br><span class="line">3:  1</span><br></pre></td></tr></table></figure>

<p><strong>divmod()</strong> 返回商和余数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(divmod(15,2))</span><br><span class="line">结果:</span><br><span class="line">(7, 1)</span><br></pre></td></tr></table></figure>

<p><strong>​round()</strong> 四舍五入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(round(15.1111,2))  # 保留2位小数</span><br><span class="line">结果:</span><br><span class="line">15.11</span><br></pre></td></tr></table></figure>
<p>​<br><strong>pow(a, b)</strong> 求a的b次幂, 如果有三个参数. 则求完次幂后对第三个数取余</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(pow(15,2,3))</span><br><span class="line">结果:</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<p><strong>​sum()</strong> 求和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(sum([12,3,4]))  #sum里边的参数是一个可迭代对象</span><br><span class="line">结果:</span><br><span class="line">19</span><br></pre></td></tr></table></figure>

<p><strong>​​min()</strong> 求最小值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(min([12,3,4]))  # 寻找最小的数字</span><br><span class="line">结果:</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>​<strong>max()</strong> 求最大值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(max([12,3,4]))  # 寻找最大的数字</span><br><span class="line">结果:</span><br><span class="line">12</span><br><span class="line">max的工作原理就是迭代对象里的值，迭代的是什么返回什么，字典就是key；能改变的是别让迭代出来的值当比较依据.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max(iterable, key&#x3D;func)</span><br><span class="line"></span><br><span class="line">salaries &#x3D; &#123;&#39;aaa&#39;: 1000, &#39;bbb&#39;:1100, &#39;ccc&#39;:1200, &#39;dddd&#39;:13000&#125;</span><br><span class="line"></span><br><span class="line">def func(x):</span><br><span class="line">    return salaries[x]</span><br><span class="line"></span><br><span class="line">res &#x3D; max(salaries, key&#x3D;func)</span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>数据结构相关</strong><br>列表和元组:</p>
<ul>
<li>list() 将一个可迭代对象转换成列表</li>
<li>tuple() 将一个可迭代对象转换成元组</li>
<li>reversed() 将一个序列翻转, 返回翻转序列的迭代器</li>
</ul>
<p><strong>reversed</strong> 示例:<br><code>l = reversed(&#39;你好&#39;)  # l 获取到的是一个生成器 print(list(l))</code></p>
<p><strong>数据结构相关</strong><br>列表和元组:</p>
<ul>
<li>list() 将一个可迭代对象转换成列表</li>
<li>tuple() 将一个可迭代对象转换成元组</li>
<li>reversed() 将一个序列翻转, 返回翻转序列的迭代器</li>
</ul>
<p><strong>reversed</strong> 示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l &#x3D; reversed(&#39;你好&#39;)  # l 获取到的是一个生成器</span><br><span class="line">print(list(l))</span><br></pre></td></tr></table></figure>
<p><strong>bytes()</strong> 把字符串转换成bytes类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 :  s &#x3D; &#39;你好武大&#39;</span><br><span class="line">2 :  bs &#x3D; s.encode(&#39;utf-8&#39;)</span><br><span class="line">3 :  print(bs)</span><br><span class="line">4 :  结果:b&#39;\xe4\xbd\xa0\xe5\xa5\xbd\xe6\xad\xa6\xe5\xa4\xa7&#39;</span><br><span class="line">5 :  s1 &#x3D; bs.decode(&#39;utf-8&#39;)</span><br><span class="line">6 :  print(s1)</span><br><span class="line">7 :  结果: 你好武大</span><br><span class="line">8 :  s &#x3D; &#39;你好&#39;</span><br><span class="line">9 :  bs &#x3D; bytes(s,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">10:  print(bs)</span><br><span class="line">11:  # 将字符串转换成字节</span><br><span class="line">12:  bs1 &#x3D; str(bs,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">13:  print(bs1)</span><br><span class="line">14:  # 将字节转换成字符串</span><br></pre></td></tr></table></figure>

<p><strong>数据集合</strong></p>
<ul>
<li>dict() 创建一个字典</li>
<li>set() 创建一个集合</li>
<li>len() 返回一个对象的元素个数</li>
<li>enumerate() 获取枚举对象</li>
</ul>
<p><strong>enumerate()</strong> 举例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lst &#x3D; [&#39;zhangsan&#39;,&#39;lisi&#39;,&#39;wangwu&#39;]</span><br><span class="line">for i,k in enumerate(lst):</span><br><span class="line">    print(&#39;这是序号&#39;,i)</span><br><span class="line">    print(&#39;这是元素&#39;,k)</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">**zip()** 函数用于将可迭代的对象作为参数,将对象中对应的元素打包成一个个元祖,</span><br><span class="line">然后返回由这些元祖组成的内容,如果各个迭代器的元素个数不一致,则按照长度最短的返回</span><br></pre></td></tr></table></figure>
<p>lst1 = [1,2,3]<br>lst2 = [‘a’,’b’,’c’,’d’]<br>lst3 = (11,12,13,14,15)<br>for i in zip(lst1,lst2,lst3):<br>    print(i)<br>结果:<br>(1, ‘a’, 11)<br>(2, ‘b’, 12)<br>(3, ‘c’, 13)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**lambda**</span><br><span class="line">&gt; 匿名函数,一句话函数；用于临时调用一次的场景：更多的是将匿名函数与其他函数配合使用</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">def func(n):</span><br><span class="line">    return n**n</span><br><span class="line">print(func(4))</span><br><span class="line">f &#x3D; lambda x: x**x</span><br><span class="line">print(f(4))</span><br><span class="line">结果:</span><br><span class="line">256</span><br><span class="line">256</span><br><span class="line"></span><br><span class="line">salaries &#x3D; &#123;&#39;aaa&#39;: 1000, &#39;bbb&#39;:1100, &#39;ccc&#39;:1200, &#39;dddd&#39;:13000&#125;</span><br><span class="line"></span><br><span class="line">def func(x):</span><br><span class="line">    return salaries[x]</span><br><span class="line"></span><br><span class="line">res &#x3D; max(salaries, key&#x3D;lambda k:salaries[k])</span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>lambda</strong>表示的是匿名函数,不需要用<strong>def</strong>来声明,一句话就可以声明出一个函数<br>语法:<br>　　函数名 = <strong>lambda</strong> 参数:返回值<br>注意:<br>　　1. 函数的参数可以有多个,多个参数之间用逗号隔开<br>　　2. 匿名函数不管多复杂.只能写一行.且逻辑结束后直接返回数据<br>　　3. 返回值和正常的函数一样,可以是任意数据类型,返回值的时候只能返回一个不能返回多个匿名函数并不是说一定没有名字,这里前面的变量就是一个函数名,说他是匿名原因是我们通过name查看的时候是没有名字的.统一都叫做lambda.在调用的时候没有什么特别之处,像正常的函数调用既可</p>
<p><strong>sorted</strong><br>排序函数</p>
<blockquote>
<p>语法:sorted(iterable,key=None,reverse=False)</p>
</blockquote>
<p><strong>iterable</strong> : 可迭代对象<br><strong>key</strong>: 排序规则(排序函数),在<strong>sorted</strong>内部会将可迭代对象中的每一个元素传递给这个函数的参数.根据函数运算的结果进行排序<br><strong>reverse</strong> :是否是倒叙,True 倒叙 False 正序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lst &#x3D; [1,3,2,5,4]</span><br><span class="line">lst2 &#x3D; sorted(lst)</span><br><span class="line">print(lst)    #原列表不会改变</span><br><span class="line">print(lst2)   #返回的新列表是经过排序的</span><br><span class="line">lst3 &#x3D; sorted(lst,reverse&#x3D;True)</span><br><span class="line">print(lst3)   #倒叙</span><br><span class="line">结果:</span><br><span class="line">[1, 3, 2, 5, 4]</span><br><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">[5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure>
<p>字典使用<strong>sorted</strong>排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dic &#x3D; &#123;1:&#39;a&#39;,3:&#39;c&#39;,2:&#39;b&#39;&#125;</span><br><span class="line">print(sorted(dic))   # 字典排序返回的就是排序后的key</span><br><span class="line">结果:</span><br><span class="line">[1,2,3]</span><br><span class="line"></span><br><span class="line">salaries &#x3D; &#123;</span><br><span class="line">  &#39;szk&#39;:30000,</span><br><span class="line">  &#39;zhangsan&#39;:888888888,</span><br><span class="line">  &#39;nick&#39;:2000,</span><br><span class="line">  &#39;pounds&#39;:100</span><br><span class="line">&#125;</span><br><span class="line">sorted(salaries, key&#x3D;lambda name:salaries[name])</span><br></pre></td></tr></table></figure>


<h5 id="2-匿名函数-lambada-面试问的较多"><a href="#2-匿名函数-lambada-面试问的较多" class="headerlink" title="2.匿名函数 lambada  面试问的较多"></a>2.匿名函数 lambada  面试问的较多</h5><h5 id="3-map、reduce、filter"><a href="#3-map、reduce、filter" class="headerlink" title="3.map、reduce、filter"></a>3.map、reduce、filter</h5><p>函数map、reduce、filter都支持迭代器协议，用来处理可迭代对象，我们以一个可迭代对象array为例来介绍它们三个的用法</p>
<ul>
<li>map函数会根据提供的函数对指定序列做映射。<ul>
<li>map的作用是以参数序列中的每一个元素调用function函数，返回包含每次function函数返回值的list。</li>
</ul>
</li>
<li>filter函数会对指定序列执行过滤操作。<ul>
<li>filter函数会对序列参数sequence中的每个元素调用function函数，最后返回的结果包含调用结果为True的元素。返回值的类型和参数sequence的类型相同</li>
</ul>
</li>
<li>reduce函数，reduce函数会对参数序列中元素进行累积。<ul>
<li>function参数是一个有两个参数的函数，reduce依次从sequence中取一个元素，和上一次调用function的结果做参数再次调用function。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array&#x3D;[1,2,3,4,5]</span><br></pre></td></tr></table></figure>
要求一：对array的每个元素做平方处理，可以使用map函数<br>map函数可以接收两个参数，一个是函数，另外一个是可迭代对象，具体用法如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res&#x3D;map(lambda x:x**2,array)</span><br><span class="line">&gt;&gt;&gt; res</span><br><span class="line">&lt;map object at 0x1033f45f8&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
解析：map会依次迭代array，得到的值依次传给匿名函数（也可以是有名函数），而map函数得到的结果仍然是迭代器。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(res) #使用list可以依次迭代res，取得的值作为列表元素</span><br><span class="line">[1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure>
要求二：对array进行合并操作，比如求和运算，这就用到了reduce函数<br>reduce函数可以接收三个参数，一个是函数，第二个是可迭代对象，第三个是初始值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># reduce在python2中是内置函数，在python3中则被集成到模块functools中，需要导入才能使用</span><br><span class="line">&gt;&gt;&gt; from functools import reduce </span><br><span class="line">&gt;&gt;&gt; res&#x3D;reduce(lambda x,y:x+y,array)</span><br><span class="line">&gt;&gt;&gt; res</span><br><span class="line">15</span><br></pre></td></tr></table></figure>
解析：</li>
</ul>
</li>
</ul>
<p>1 没有初始值，reduce函数会先迭代一次array得到的值作为初始值，作为第一个值数传给x，然后继续迭代一次array得到的值作为第二个值传给y，运算的结果为3</p>
<p>2 将上一次reduce运算的结果作为第一个值传给x，然后迭代一次array得到的结果作为第二个值传给y，依次类推，知道迭代完array的所有元素，得到最终的结果15</p>
<p>也可以为reduce指定初始值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res&#x3D;reduce(lambda x,y:x+y,array,100) &gt;&gt;&gt; res</span><br><span class="line">115</span><br></pre></td></tr></table></figure>
<p>要求三：对array进行过滤操作，这就用到了filter函数，比如过滤出大于3的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res&#x3D;filter(lambda x:x&gt;3,array)</span><br></pre></td></tr></table></figure>
<p>解析：filter函数会依次迭代array，得到的值依次传给匿名函数，如果匿名函数的返回值为真，则过滤出该元素，而filter函数得到的结果仍然是迭代器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(res) </span><br><span class="line">[4, 5]</span><br></pre></td></tr></table></figure>
<p>提示：我们介绍map、filter、reduce只是为了带大家了解函数式编程的大致思想，在实际开发中，我们完全可以用列表生成式或者生成器表达式来实现三者的功能。</p>
<h4 id="7-迭代器-和-for循环机制-面试中的重点"><a href="#7-迭代器-和-for循环机制-面试中的重点" class="headerlink" title="7. 迭代器 和 for循环机制 面试中的重点"></a>7. 迭代器 和 for循环机制 面试中的重点</h4><ul>
<li><p>为什么要有迭代器</p>
<blockquote>
<p>要有一种不依赖于索引的取值方案</p>
</blockquote>
</li>
<li><p>可迭代对象</p>
<blockquote>
<p>列表,字符串,元祖,字典,集合,文件对象</p>
</blockquote>
</li>
<li><p>迭代器对象</p>
<blockquote>
<p>文件对象</p>
</blockquote>
</li>
</ul>
<p>可迭代对象</p>
<blockquote>
<p>“可以转成迭代器对象”;但凡有_iter__()方法都称之为可迭代对象</p>
</blockquote>
<p>调用可迭代对象._iter__():得到迭代器对象</p>
<p>迭代器对象</p>
<blockquote>
<p>既有包含<strong>iter</strong>() 同时包含<strong>next</strong>().</p>
</blockquote>
<p>  迭代器.<em>next__(): 得到迭代器的下一个值<br>  迭代器.<em>iter</em></em>(): 得到迭代器的本身,说白了调与没调一个样</p>
<ul>
<li><strong>for循环工作原理</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; &#123;&#39;a&#39;:1, &#39;b&#39;:2, &#39;c&#39;:3&#125;</span><br><span class="line">for x in 迭代器对象.__iter__():</span><br><span class="line">    可以不加区分的调用可迭代对象或者迭代器对象</span><br><span class="line">for循环工作原理：</span><br><span class="line">可以称之为迭代器循环</span><br><span class="line">1. 可迭代对象.__iter__()得到一个迭代器对象</span><br><span class="line">2. 迭代器对象.__next__()拿到一个返回值,然后将返回值赋值给k</span><br><span class="line">3. 循环往复步骤2,直到抛出Stopiteration异常for循环会捕捉异常然后结束循环</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 迭代器不能反复,只能向下执行,并且是一次性的.获取过了就不能在获取了。</p>
</blockquote>
</li>
</ul>
<p>总结:</p>
<ul>
<li><p>Iterator: 迭代器. 内部包含<strong>iter</strong>() 同时包含<strong>next</strong>().</p>
</li>
<li><p>迭代器的优点:</p>
</li>
</ul>
<ol start="0">
<li>提供一种新的，统一的取值方式（不依赖于索引的key）</li>
<li>节省内存.</li>
<li>惰性机制</li>
</ol>
<ul>
<li>迭代器的缺点:</li>
</ul>
<ol>
<li>不能反复, 只能向下执行.</li>
<li>取值不灵活</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">print(dir(a))  <span class="comment"># dir查看对象的方法和函数</span></span><br><span class="line"><span class="comment"># 在打印结果中寻找__iter__ 如果存在就表示当前的这个类型是个可迭代对象</span></span><br></pre></td></tr></table></figure>

<h4 id="4-生成器-面试中的重点"><a href="#4-生成器-面试中的重点" class="headerlink" title="4.生成器  面试中的重点"></a>4.生成器  面试中的重点</h4><ul>
<li><p>生成器定义<br>生成器的本质就是迭代器，因此我们可以使用迭代器中的__next__方法来获取元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">22</span>  <span class="comment">### 将return换成yield关键字即可</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="comment"># print(ret.__next__())</span></span><br><span class="line"><span class="comment"># print(ret)  ### &lt;generator object func at 0x103cc80b0&gt; 生成器的对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span>(<span class="params">start, stop, step</span>):</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = my_range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>x=yield g.send</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def dog(name):</span><br><span class="line">    print(&#39;倒戈%s准备吃东西了....&#39; %name)</span><br><span class="line">    while True:</span><br><span class="line">        # x 拿到的是yield返回值</span><br><span class="line">        x &#x3D; yield 默认是None</span><br><span class="line">        print(&#39;倒戈%s准备吃东西了..%s..&#39; %(name,x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g.send 意思就是yield接受到的值赋值给x</span><br><span class="line"></span><br><span class="line">g &#x3D; dog(&#39;alex&#39;)</span><br><span class="line">g.send(None) #   &#x3D;&#x3D; next(g)</span><br><span class="line">g.send(&#39;adasd&#39;)   </span><br><span class="line">g.close()  # 关闭之后无法传值</span><br><span class="line">g.send(&#39;13123&#39;)  # 报错</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>理解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span>(<span class="params">name</span>):</span></span><br><span class="line">    food_list = []</span><br><span class="line">    print(<span class="string">&#x27;倒戈%s准备吃东西了....&#x27;</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># x 拿到的是yield返回值</span></span><br><span class="line">        x = <span class="keyword">yield</span> food_list</span><br><span class="line">        print(<span class="string">&#x27;倒戈%s准备吃东西了..%s..&#x27;</span> %(name,x))</span><br><span class="line">        food_list.append(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = g.send(<span class="literal">None</span>) <span class="comment"># next(g)</span></span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">res = g.send(<span class="string">&#x27;宫保鸡鸡&#x27;</span>)</span><br><span class="line"><span class="comment">#&#x27;倒戈%s准备吃东西了..%s..&#x27; %(name,宫保鸡鸡)</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><p>return 和 yield 的区别</p>
<ul>
<li>有了yield关键字，我们就有了一种自定义迭代器的实现方式。yield可以用于返回值，但不同于return，函数一旦遇到return就结束了，而yield可以保存函数的运行状态挂起函数，用来返回多次值</li>
<li>yield是分段来执行一个函数,yield可以出现多次</li>
<li>return是直接停止这个函数,return可以出现多次但是只会执行到第一个就结束了</li>
</ul>
</li>
<li><p>生成器的好处</p>
<ul>
<li>节省内存<br>python中提供的生成器：</li>
</ul>
</li>
</ul>
<p>1.生成器函数(yield)    2.生成器表达式(res = (i for i in range(5)))</p>
<p>总结：生成器一定是迭代器，但是迭代器就不一定是生成器</p>
<h4 id="5-列表生成式和字典生成式-项目中的重点"><a href="#5-列表生成式和字典生成式-项目中的重点" class="headerlink" title="5.列表生成式和字典生成式 []  项目中的重点"></a>5.列表生成式和字典生成式 []  项目中的重点</h4><ol>
<li>列表推导式的常⽤写法:</li>
</ol>
<blockquote>
<p>[结果 for 变量 in 可迭代对象]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls &#x3D; [i for i in range(10)]</span><br><span class="line">print(ls)</span><br></pre></td></tr></table></figure>
<p>筛选模式</p>
<blockquote>
<p>[结果 for 变量 in 可迭代对象 if 条件]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lst &#x3D; [i for i in range(100) if i %2 &#x3D;&#x3D; 0]</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>字典生成式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内置方法初识</span></span><br><span class="line">l=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> enumerate(l):</span><br><span class="line">    print(i,v)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 构造字典</span></span><br><span class="line">keys=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">vals=[<span class="string">&#x27;szk&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>]</span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys):</span><br><span class="line">    <span class="comment"># print(i,k)</span></span><br><span class="line">    dic[k]=vals[i]</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典生成式</span></span><br><span class="line">dic=&#123;k:vals[i] <span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys)&#125;</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 也支持if判断</span></span><br><span class="line">dic=&#123;k:vals[i] <span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys) <span class="keyword">if</span> i &gt; <span class="number">0</span>&#125;</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure>
</li>
<li><p>集合生成式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">res &#x3D; &#123;i for i in range(5)&#125;</span><br><span class="line">print(res, type(res))</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成器表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">res &#x3D; (i for i in range(5))</span><br><span class="line">print(res, type(res))</span><br><span class="line"></span><br><span class="line">print(tuple(res))</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>案例，读文件省内存<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;a.txt&#x27;</span>, mode=<span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res = sum((len(line) <span class="keyword">for</span> line <span class="keyword">in</span> f ))</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>





</li>
</ul>
<ol start="4">
<li>三元表达式<blockquote>
<p>结果 = 条件成立 if 条件 else 条件不成立返回的值</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求两个数的较大值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max2</span>(<span class="params">x, y</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x &gt; y:</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 三元表达式实现的效果:条件成立的情况下返回一个值，不成立的情况下返回另外一个值</span></span><br><span class="line">name = input(<span class="string">&#x27;please input your name&gt;&gt;&gt;:&#x27;</span>).strip()</span><br><span class="line">res = <span class="string">&#x27;NB&#x27;</span> <span class="keyword">if</span> name = <span class="string">&#x27;szk&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;SB&#x27;</span>  <span class="comment"># 当name值为szk的时候才会是NB其他情况都是SB</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">语法结构</span></span><br><span class="line"><span class="string">结果 = 条件成立 if 条件 else 条件不成立返回的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">替换上面max2内的代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="5-递归函数-面试中常见问题"><a href="#5-递归函数-面试中常见问题" class="headerlink" title="5. 递归函数  面试中常见问题"></a>5. 递归函数  面试中常见问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.什么是函数递归调用？(也可以说成是函数的嵌套调用的一种形式)</span></span><br><span class="line"><span class="string">    在调用一个函数的过程中又直接或者间接的调用该函数本身，称之为函数的递归调用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 直接调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">  print(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">  foo()</span><br><span class="line">foo()</span><br><span class="line"><span class="string">&quot;&quot;&quot;画图诠释递归调用意味着反复的开辟内存空间最后导致内存溢出&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps:补充知识点 查看及修改最大递归深度的方法(不是绝对的精准)</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getrecursionlimit())  <span class="comment"># 查看最大递归深度 1000</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)  <span class="comment"># 修改最大递归深度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看具体的递归深度(直接调用自己)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">n</span>):</span></span><br><span class="line">  print(<span class="string">&#x27;from foo&#x27;</span>,n)</span><br><span class="line">  foo(n+<span class="number">1</span>)</span><br><span class="line">foo(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 间接调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">  print(<span class="string">&#x27;from bar&#x27;</span>)</span><br><span class="line">  func()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  print(<span class="string">&#x27;from func&#x27;</span>)</span><br><span class="line">  bar()</span><br><span class="line">bar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ps:无限的递归没有任何意义的</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>有意义的递归一定是伴随着n规模的减少而减少</p>
</blockquote>
<p>举个例子：累加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.从1到100，求个和？</span></span><br><span class="line"><span class="comment">## 常规的做法</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    sum += i</span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 递归的做法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">有意义的递归：</span></span><br><span class="line"><span class="string">    有最终的结束条件</span></span><br><span class="line"><span class="string">    n规模问题的解决得益于n-1问题的规模的解决</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">现在是求1到100的和？</span></span><br><span class="line"><span class="string">1到99的和，然后再加上 100， 即就能够知道1到100的和</span></span><br><span class="line"><span class="string">1到98的和，然后再加上 99，就能够知道1到99的和</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumrecv</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sumrecv(n<span class="number">-1</span>) + n </span><br></pre></td></tr></table></figure>

<p>2.求n!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jiecheng</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jiecheng(n<span class="number">-1</span>) * n</span><br><span class="line"></span><br><span class="line">res = jiecheng(<span class="number">5</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>递推</p>
<blockquote>
<p>满足某种结束条件，结束递归调用，然后一层一层返回</p>
</blockquote>
</li>
<li><p>回溯</p>
<blockquote>
<p>一层一层调用下去</p>
</blockquote>
</li>
</ul>
<p>3.二分法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">56</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_find</span>(<span class="params">find_num, l</span>):</span></span><br><span class="line">    print(l)</span><br><span class="line">    <span class="keyword">if</span> len(l) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&quot;找的值不存在&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_index = len(l) // <span class="number">2</span></span><br><span class="line">    mid_val = l[mid_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; mid_val:</span><br><span class="line">        l = l[mid_index+<span class="number">1</span>:]</span><br><span class="line">        binary_find(find_num, l)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; mid_val:</span><br><span class="line">        l = l[:mid_index]</span><br><span class="line">        binary_find(find_num, l)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;索引下标&quot;</span>, mid_index)</span><br><span class="line">        print(<span class="string">&#x27;find it&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">binary_find(<span class="number">82</span>, nums)</span><br></pre></td></tr></table></figure>

<h4 id="6-函数名的作用以及闭包函数-面试和项目中的重点"><a href="#6-函数名的作用以及闭包函数-面试和项目中的重点" class="headerlink" title="6.函数名的作用以及闭包函数   面试和项目中的重点"></a>6.函数名的作用以及闭包函数   面试和项目中的重点</h4><blockquote>
<p>闭包函数：函数嵌套+名称空间与作用域+函数对象</p>
</blockquote>
<ol>
<li>什么是闭包函数<ol>
<li>定义在函数内的函数</li>
<li>该函数体代码包含对该函数外层作用域中名字的引用<ul>
<li>强调：函数外层指的不是全局作用域</li>
</ul>
</li>
</ol>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>()</span></span><br><span class="line">    x = 1</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner <span class="comment">#利用函数对象的概念，将一个内部函数返回并在全剧终拿到并使用，从而打破了函数的层级限制</span></span><br><span class="line"></span><br><span class="line"> f = outter()  返回的是inner的内存地址</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">     x = <span class="number">11111</span></span><br><span class="line">     print(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">     f()   </span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数的作用域关系在定义阶段就已经固定了，与调用位置无关<br>f = outter() —&gt; 指向inner内存地址<br>闭: 函数一定来自于函数内部<br>包: 此函数外面还包裹了一层东西，无论在哪用inner，都是以外面包裹的这一层东西为准</p>
</blockquote>
<h4 id="7-装饰器-面试和项目中的重中之重"><a href="#7-装饰器-面试和项目中的重中之重" class="headerlink" title="7.**装饰器 面试和项目中的重中之重 **"></a>7.**装饰器 面试和项目中的重中之重 **</h4>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day07</title>
    <url>/2020/09/19/py-day07/</url>
    <content><![CDATA[<p>前端基础基础<br>CSS</p>
<a id="more"></a>

<h1 id="css基础布局"><a href="#css基础布局" class="headerlink" title="css基础布局"></a>css基础布局</h1><h2 id="1、布局相关的标签"><a href="#1、布局相关的标签" class="headerlink" title="1、布局相关的标签"></a>1、布局相关的标签</h2><ul>
<li><code>&lt;div&gt;&lt;/div&gt;</code> 定义文档中的分区或节</li>
<li><code>&lt;span&gt;&lt;/span&gt;</code> 这是一个行内元素，没有任何意义</li>
<li><code>&lt;header&gt;&lt;/header&gt;</code> <strong>HTML5新增</strong> 定义 section 或 page 的页眉</li>
<li><code>&lt;footer&gt;&lt;/footer&gt;</code> <strong>HTML5新增</strong> 定义 section 或 page 的页脚</li>
<li><code>&lt;main&gt;&lt;/main&gt;</code> <strong>HTML5新增</strong> 标签规定文档的主要内容。<code>&lt;main&gt;</code> 元素中的内容对于文档来说应当是唯一的。它不应包含在 文档中重复出现的内容，比如侧栏、导航栏、版权信息、站点标志或搜索表单。IE都不识别</li>
<li><code>&lt;nav&gt;&lt;/nav&gt;</code> <strong>HTML5新增</strong> 表示链接导航部分 如果文档中有“前后”按钮，则应该把它放到元素中</li>
<li><code>&lt;section&gt;&lt;/section&gt;</code> <strong>HTML5新增</strong> 定义文档中的节 通常不推荐那些没有标题的内容使用section</li>
<li><code>&lt;article&gt;&lt;/article&gt;</code> <strong>HTML5新增</strong> 定义文章 论坛帖子 报纸文章 博客条目 用户评论</li>
<li><code>&lt;aside&gt;&lt;/aside&gt;</code> <strong>HTML5新增</strong> 相关内容，相关辅助信息，如侧边栏</li>
</ul>
<h2 id="2、盒子模型"><a href="#2、盒子模型" class="headerlink" title="2、盒子模型"></a>2、盒子模型</h2><h3 id="2-1-什么是盒子模型"><a href="#2-1-什么是盒子模型" class="headerlink" title="2-1 什么是盒子模型"></a>2-1 什么是盒子模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">盒子模型</span></span><br><span class="line"><span class="string">    就以快递盒为例</span></span><br><span class="line"><span class="string">        快递盒与快递盒之间的距离(标签与标签之间的距离 margin外边距)</span></span><br><span class="line"><span class="string">        盒子的厚度(标签的边框 border)</span></span><br><span class="line"><span class="string">        盒子里面的物体到盒子的距离(内容到边框的距离  padding内边距)</span></span><br><span class="line"><span class="string">        物体的大小(内容 content)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    如果你想要调整标签与标签之间的距离 你就可以调整margin</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    浏览器会识别body标签默认自带8px的margin，一般情况下我们在写页面的时候，上来就会先将body的margin去除</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素</p>
<ul>
<li><strong>margin</strong>: 用于控制元素与元素之间的距离；<strong>两个元素的margin不叠加，取最大值</strong>；<strong>两个元素的margin不叠加，取最大值</strong>；<strong>两个元素的margin不叠加，取最大值</strong>;margin的最基本用途就是控制元素周围空间的间隔，从视觉角度上达到相互隔开的目的。</li>
<li><strong>padding</strong>: 用于控制内容与边框之间的距离；</li>
<li><strong>Border</strong>(边框): 围绕在内边距和内容外的边框。</li>
<li><strong>Content</strong>(内容): 盒子的内容，显示文本和图像。</li>
</ul>
<p>看图吧:</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210501010834066.png" alt="image-20210501010834066"></p>
<h3 id="2-2-margin外边距"><a href="#2-2-margin外边距" class="headerlink" title="2-2 margin外边距"></a>2-2 margin外边距</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.margin-test</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>:<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>:<span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推荐使用简写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.margin-test</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺序：上右下左</p>
<p>常见居中：<strong>只能水平居中，不能上下居中</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mycenter</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-padding内填充"><a href="#2-3-padding内填充" class="headerlink" title="2-3 padding内填充"></a>2-3 padding内填充</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.padding-test</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推荐使用简写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.padding-test</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺序：上右下左</p>
<p>补充padding的常用简写方式：</p>
<ul>
<li>提供一个，用于四边；</li>
<li>提供两个，第一个用于上－下，第二个用于左－右；</li>
<li>如果提供三个，第一个用于上，第二个用于左－右，第三个用于下；</li>
<li>提供四个参数值，将按上－右－下－左的顺序作用于四边；</li>
</ul>
<h3 id="2-4-案例"><a href="#2-4-案例" class="headerlink" title="2-4 案例"></a>2-4 案例</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;  <span class="comment">/*上下左右全是0</span></span><br><span class="line"><span class="comment">            /*margin: 10px 20px;  !* 第一个上下 第二个左右*!*/</span></span><br><span class="line">            <span class="comment">/*margin: 10px 20px 30px;  !*第一个上  第二个左右  第三个下*!*/</span></span><br><span class="line">            <span class="comment">/*margin: 10px 20px 30px 40px;  !*上 右 下 左*!*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*p &#123;*/</span></span><br><span class="line">        <span class="comment">/*    margin-left: 0;*/</span></span><br><span class="line">        <span class="comment">/*    margin-top: 0;*/</span></span><br><span class="line">        <span class="comment">/*    margin-right: 0;*/</span></span><br><span class="line">        <span class="comment">/*    margin-bottom: 0;*/</span></span><br><span class="line">        <span class="comment">/*&#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#d1</span> &#123;</span><br><span class="line">            <span class="attribute">margin-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#d2</span> &#123;</span><br><span class="line">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;  <span class="comment">/*不叠加 只取大的*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#dd</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto;  <span class="comment">/*只能做到标签的水平居中*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">3px</span> solid red;</span><br><span class="line">            <span class="comment">/*padding-left: 10px;*/</span></span><br><span class="line">            <span class="comment">/*padding-top: 20px;*/</span></span><br><span class="line">            <span class="comment">/*padding-right: 20px;*/</span></span><br><span class="line">            <span class="comment">/*padding-bottom: 50px;*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*padding: 10px;*/</span></span><br><span class="line">            <span class="comment">/*padding: 10px 20px;*/</span></span><br><span class="line">            <span class="comment">/*padding: 10px 20px 30px;*/</span></span><br><span class="line">            <span class="comment">/*padding: 10px 20px 30px 40px;*/</span>  <span class="comment">/*规律和margin一模一样*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;!--    &lt;p style=&quot;border: 1px solid red;&quot; id=&quot;d1&quot;&gt;ppp&lt;/p&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;p style=&quot;border: 1px solid orange;&quot; id=&quot;d2&quot;&gt;ppp&lt;/p&gt;--&gt;</span><br><span class="line">&lt;!--&lt;div style=&quot;border: 3px solid red;height: 400px;width: 400px&quot;&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;div id=&#x27;dd&#x27; style=&quot;border: 1px solid orange;height: 50px;width: 50px;background-color: blue;&quot;&gt;&lt;/div&gt;--&gt;</span><br><span class="line">&lt;!--&lt;/div&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;ppp&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="3、浮动（float）"><a href="#3、浮动（float）" class="headerlink" title="3、浮动（float）"></a>3、浮动（float）</h2><h3 id="3-1-什么是浮动"><a href="#3-1-什么是浮动" class="headerlink" title="3-1 什么是浮动"></a>3-1 什么是浮动</h3><p>在 CSS 中，任何元素都可以浮动。</p>
<p>浮动元素会生成一个块级框，而不论它本身是何种元素。</p>
<p>浮动的元素 没有块儿级一说 本身多大浮起来之后就只能占多大</p>
<p><strong>只要是涉及到页面的布局一般都是用浮动来提前规划好</strong></p>
<p>关于浮动的两个特点：</p>
<ul>
<li>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</li>
<li>由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</li>
</ul>
<h3 id="3-2-三种取值"><a href="#3-2-三种取值" class="headerlink" title="3-2 三种取值"></a>3-2 三种取值</h3><p>left：向左浮动</p>
<p>right：向右浮动</p>
<p>none：默认值，不浮动</p>
<h3 id="3-3-浮动案例一"><a href="#3-3-浮动案例一" class="headerlink" title="3-3 浮动案例一"></a>3-3 浮动案例一</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            background-color: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span>: <span class="selector-tag">left</span>;  <span class="comment">/*浮动  浮到空中往左飘*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            background-color: greenyellow;</span><br><span class="line"><span class="css">            <span class="selector-tag">float</span>: <span class="selector-tag">right</span>;   <span class="comment">/*浮动 浮到空中往右飘*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-浮动案例二"><a href="#3-4-浮动案例二" class="headerlink" title="3-4 浮动案例二"></a>3-4 浮动案例二</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            width: 20%;</span><br><span class="line">            height: 1000px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#4e4e4e</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line">            width: 80%;</span><br><span class="line">            height: 1000px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-clear"><a href="#4-clear" class="headerlink" title="4 clear"></a>4 clear</h2><p>clear属性规定元素的哪一侧不允许其他浮动元素。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>在左侧不允许浮动元素。</td>
</tr>
<tr>
<td>right</td>
<td>在右侧不允许浮动元素。</td>
</tr>
<tr>
<td>both</td>
<td>在左右两侧均不允许浮动元素。</td>
</tr>
<tr>
<td>none</td>
<td>默认值。允许浮动元素出现在两侧。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 clear 属性的值。</td>
</tr>
</tbody></table>
<p>注意：clear属性只会对<strong>自身</strong>起作用，而不会影响其他元素。</p>
<h3 id="4-1-清除浮动"><a href="#4-1-清除浮动" class="headerlink" title="4-1 清除浮动"></a>4-1 清除浮动</h3><p>清除浮动的副作用（父标签塌陷问题）</p>
<p>主要有三种方式：</p>
<ul>
<li>固定高度</li>
<li>伪元素清除法</li>
<li>overflow:hidden</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浮动带来的影响</span></span><br><span class="line">会造成父标签塌陷的问题</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">解决浮动带来的影响 推导步骤</span></span><br><span class="line"><span class="string">    1.自己加一个div设置高度</span></span><br><span class="line"><span class="string">    2.利用clear属性</span></span><br><span class="line"><span class="string">        #d4 &#123;</span></span><br><span class="line"><span class="string">            clear: left;  /*该标签的左边(地面和空中)不能有浮动的元素*/</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">  3.通用的解决浮动带来的影响方法</span></span><br><span class="line"><span class="string">      在写html页面之前 先提前写好处理浮动带来的影响的 css代码</span></span><br><span class="line"><span class="string">      .clearfix:after &#123;</span></span><br><span class="line"><span class="string">            content: &#x27;&#x27;;</span></span><br><span class="line"><span class="string">            display: block;</span></span><br><span class="line"><span class="string">            clear:both;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    之后只要标签出现了塌陷的问题就给该塌陷的标签加一个clearfix属性即可</span></span><br><span class="line"><span class="string">    上述的解决方式是通用的 到哪都一样 并且名字就叫clearfix</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>伪元素清除法（使用较多）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.clearfix:after &#123; &#x2F;&#x2F; 带有clearfix属性的标签后面都带有这些属性</span><br><span class="line">  content: &quot;&quot;;</span><br><span class="line">  display: block;  &#x2F;&#x2F; 独占一行</span><br><span class="line">  clear: both;    &#x2F;&#x2F; 左右两侧都不能有浮动元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-代码演示"><a href="#4-2-代码演示" class="headerlink" title="4-2 代码演示"></a>4-2 代码演示</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            border: 3px solid black;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d3</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: greenyellow;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d4</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*height: 100px;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">clear</span>: <span class="selector-tag">left</span>;  <span class="comment">/*该标签的左边(地面和空中)不能有浮动的元素*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">            content: &#x27;&#x27;;</span><br><span class="line">            display: block;</span><br><span class="line"><span class="css">            <span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;div id=&quot;d4&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-溢出属性"><a href="#5-溢出属性" class="headerlink" title="5 溢出属性"></a>5 溢出属性</h2><h3 id="5-1-overflow取值"><a href="#5-1-overflow取值" class="headerlink" title="5-1 overflow取值"></a>5-1 overflow取值</h3><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>visible</td>
<td>默认值。内容不会被修剪，会呈现在元素框之外。</td>
</tr>
<tr>
<td>hidden</td>
<td>内容会被修剪，并且其余内容是不可见的。</td>
</tr>
<tr>
<td>scroll</td>
<td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td>auto</td>
<td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 overflow 属性的值。</td>
</tr>
</tbody></table>
<ul>
<li>overflow（水平和垂直均设置）</li>
<li>overflow-x（设置水平方向）</li>
<li>overflow-y（设置垂直方向）</li>
</ul>
<p>一个标签内文字太多，会导致文字溢出，可以选择以下参数控制溢出属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*overflow: visible;  !*默认就是可见 溢出还是展示*!*&#x2F;</span><br><span class="line">&#x2F;*overflow: hidden;  !*溢出部分直接隐藏*!*&#x2F;</span><br><span class="line">&#x2F;*overflow: scroll;  !*设置成上下滚动条的形式*!*&#x2F;</span><br><span class="line">&#x2F;*overflow: auto;*&#x2F;   自动，跟hidden差不多，了解即可</span><br></pre></td></tr></table></figure>

<h3 id="5-2-案例一"><a href="#5-2-案例一" class="headerlink" title="5-2 案例一"></a>5-2 案例一</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        p &#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 50px;</span><br><span class="line">            border: 3px solid red;</span><br><span class="line"><span class="css">            <span class="comment">/*overflow: visible;  !*默认就是可见 溢出还是展示*!*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*overflow: hidden;  !*溢出部分直接隐藏*!*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*overflow: scroll;  !*设置成上下滚动条的形式*!*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*overflow: auto;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!我还在起始点  刚刚换上2档 准备发车!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-案例二（实际应用场景）"><a href="#5-3-案例二（实际应用场景）" class="headerlink" title="5-3 案例二（实际应用场景）"></a>5-3 案例二（实际应用场景）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#4e4e4e</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            height: 120px;</span><br><span class="line">            width: 120px;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            border: 5px solid white;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span>&gt;<span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*max-width: 100%;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*width: 100%;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*占标签100%比例*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;111.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6、定位"><a href="#6、定位" class="headerlink" title="6、定位"></a>6、定位</h2><h3 id="6-1-定位分类"><a href="#6-1-定位分类" class="headerlink" title="6-1 定位分类"></a>6-1 定位分类</h3><ul>
<li><p>静态</p>
<p>所有的标签默认都是静态的static，无法改变位置</p>
</li>
<li><p>相对定位(了解)</p>
<p>相对于标签原来的位置做移动relative</p>
</li>
<li><p>绝对定位(常用)</p>
<p>相对于已经定位过的父标签做移动(如果没有父标签那么就以body为参照)</p>
<p>eg:小米网站购物车</p>
<p>当你不知道页面其他标签的位置和参数，只给了你一个父标签的参数，让你基于该标签左定位</p>
</li>
<li><p>固定定位(常用)</p>
<p>相对于浏览器窗口固定在某个位置</p>
<p>eg:右侧小广告</p>
</li>
</ul>
<h3 id="6-2-static"><a href="#6-2-static" class="headerlink" title="6-2 static"></a>6-2 static</h3><p>static 默认值，无定位，不能当作绝对定位的参照物，并且设置标签对象的left、top等值是不起作用的的。</p>
<h3 id="6-3-relative（相对定位）"><a href="#6-3-relative（相对定位）" class="headerlink" title="6-3 relative（相对定位）"></a>6-3 relative（相对定位）</h3><p>相对定位是相对于该元素在文档流中的原始位置，即以自己原始位置为参照物。有趣的是，即使设定了元素的相对定位以及偏移值，元素还占有着原来的位置，即占据文档流空间。对象遵循正常文档流，但将依据top，right，bottom，left等属性在正常文档流中偏移位置。而其层叠通过z-index属性定义。</p>
<p>通俗解释：标签由static 变为 relative 它的性质就从原来没有定位的标签变成了已经定位过的标签；即使没动，性质也变了。</p>
<p><strong>注意：position：relative的一个主要用法：方便绝对定位元素找到参照物。</strong></p>
<h3 id="6-4-absolute（绝对定位）"><a href="#6-4-absolute（绝对定位）" class="headerlink" title="6-4 absolute（绝对定位）"></a>6-4 absolute（绝对定位）</h3><p>定义：设置为绝对定位的元素框从文档流完全删除，并相对于最近的已定位祖先元素定位，如果元素没有已定位的祖先元素，那么它的位置相对于最初的包含块（即body元素）。元素原先在正常文档流中所占的空间会关闭，就好像该元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。</p>
<p>重点：如果父级设置了position属性，例如position:relative;，那么子元素就会以父级的左上角为原始点进行定位。这样能很好的解决自适应网站的标签偏离问题，即父级为自适应的，那我子元素就设置position:absolute;父元素设置position:relative;，然后Top、Right、Bottom、Left用百分比宽度表示。</p>
<p>另外，对象脱离正常文档流，使用top，right，bottom，left等属性进行绝对定位。而其层叠通过z-index属性定义。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.c1</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.c2</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ff6700</span>;</span></span><br><span class="line">            float: right;</span><br><span class="line">            margin-right: 400px;</span><br><span class="line">            position: relative;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.c3</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            background-color: green;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-5-fixed（固定）"><a href="#6-5-fixed（固定）" class="headerlink" title="6-5 fixed（固定）"></a>6-5 fixed（固定）</h3><p>fixed：对象脱离正常文档流，使用top，right，bottom，left等属性以窗口为参考点进行定位，当出现滚动条时，对象不会随着滚动。而其层叠通过z-index属性 定义。 注意点： 一个元素若设置了 position:absolute | fixed; 则该元素就不能设置float。这 是一个常识性的知识点，因为这是两个不同的流，一个是浮动流，另一个是“定位流”。但是 relative 却可以。因为它原本所占的空间仍然占据文档流。</p>
<p>在理论上，被设置为fixed的元素会被定位于浏览器窗口的一个指定坐标，不论窗口是否滚动，它都会固定在这个位置。</p>
<p>示例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-ua-compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>返回顶部示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.d1</span> &#123;</span></span><br><span class="line">      height: 1000px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#eeee</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.scrollTop</span> &#123;</span></span><br><span class="line">      background-color: darkgrey;</span><br><span class="line">      padding: 10px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      position: fixed;</span><br><span class="line">      right: 10px;</span><br><span class="line">      bottom: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scrollTop&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-6-相对定位，绝对定位，固定定位演示"><a href="#6-6-相对定位，绝对定位，固定定位演示" class="headerlink" title="6-6 相对定位，绝对定位，固定定位演示"></a>6-6 相对定位，绝对定位，固定定位演示</h3><p>**ps:**浏览器是优先展示文本内容的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">left</span>: 50<span class="selector-tag">px</span>; <span class="comment">/*从左往右   如果是负数 方向则相反*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span>: 50<span class="selector-tag">px</span>; <span class="comment">/*从上往下    如果是负数 方向则相反*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*position: static;  !*默认是static无法修改位置*!*/</span></span></span><br><span class="line">            position: relative;</span><br><span class="line">            /*相对定位</span><br><span class="line">            标签由static变为relative它的性质就从原来没有定位的标签变成了已经定位过的标签</span><br><span class="line">            虽然你哪怕没有动 但是你的性质也已经改变了</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            background-color: red;</span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>; <span class="comment">/*已经定位过了*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#d3</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 400px;</span><br><span class="line">            background-color: yellowgreen;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 200px;</span><br><span class="line">            top: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#d4</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>; <span class="comment">/*写了fixed之后 定位就是依据浏览器窗口*/</span></span></span><br><span class="line">            bottom: 10px;</span><br><span class="line">            right: 20px;</span><br><span class="line"></span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            background-color: white;</span><br><span class="line">            border: 3px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--relative相对定位一--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id=&quot;d1&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--绝对定位--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--固定定位fixed--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px;background-color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px;background-color: greenyellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px;background-color: blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d4&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-7-是否脱离文档流（原来位置是否还在）"><a href="#6-7-是否脱离文档流（原来位置是否还在）" class="headerlink" title="6-7 是否脱离文档流（原来位置是否还在）"></a>6-7 是否脱离文档流（原来位置是否还在）</h3><p>ps: 脱离文档流，原来位置没了；不脱离文档流，原来位置还在</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style=&quot;height: 100px;width: 200px;background-color: red;position: relative;left: 500px&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style=&quot;height: 100px;width: 200px;background-color: greenyellow&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;div style=&quot;height: 100px;width: 200px;background-color: red;&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style=&quot;height: 100px;width: 200px;background-color: greenyellow;position: absolute;left: 500px&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当没有父标签做到位 就参照与body--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div style=&quot;height: 100px;width: 200px;background-color: blue;&quot;&gt;&lt;/div&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 200px;background-color: red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 200px;background-color: greenyellow;position: fixed;bottom: 10px;right: 20px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;width: 200px;background-color: blue;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述例子可知：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">浮动</span></span><br><span class="line"><span class="string">相对定位</span></span><br><span class="line"><span class="string">绝对定位</span></span><br><span class="line"><span class="string">固定定位</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 不脱离文档流</span></span><br><span class="line">    <span class="number">1.</span>相对定位</span><br><span class="line"><span class="comment"># 脱离文档流</span></span><br><span class="line">    <span class="number">1.</span>浮动</span><br><span class="line">  <span class="number">2.</span>绝对定位</span><br><span class="line">  <span class="number">3.</span>固定定位</span><br></pre></td></tr></table></figure>

<h2 id="7-z-index"><a href="#7-z-index" class="headerlink" title="7 z-index"></a>7 z-index</h2><h3 id="7-1-介绍"><a href="#7-1-介绍" class="headerlink" title="7-1 介绍"></a>7-1 介绍</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#i2</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置对象的层叠顺序。</p>
<ol>
<li>z-index 值表示谁压着谁，数值大的压盖住数值小的，</li>
<li>只有定位了的元素，才能有z-index,也就是说，不管相对定位，绝对定位，固定定位，都可以使用z-index，而浮动元素不能使用z-index</li>
<li>z-index值没有单位，就是一个正整数，默认的z-index值为0如果大家都没有z-index值，或者z-index值一样，那么谁写在HTML后面，谁在上面压着别人，定位了元素，永远压住没有定位的元素。</li>
<li>从父现象：父亲怂了，儿子再牛逼也没用</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eg:百度登陆页面 其实是三层结构</span><br><span class="line">  <span class="number">1.</span>最底部是正常内容(z=<span class="number">0</span>)  最远的</span><br><span class="line">  <span class="number">2.</span>黑色的透明区(z=<span class="number">99</span>)          中间层</span><br><span class="line">  <span class="number">3.</span>白色的注册区域(z=<span class="number">100</span>)  离用户最近</span><br></pre></td></tr></table></figure>

<h3 id="7-2-模态框案例"><a href="#7-2-模态框案例" class="headerlink" title="7-2 模态框案例"></a>7-2 模态框案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.5</span>);</span></span><br><span class="line">            z-index: 99;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.modal</span> &#123;</span></span><br><span class="line">            background-color: white;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 400px;</span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 50%;</span><br><span class="line">            top: 50%;</span><br><span class="line">            z-index: 100;</span><br><span class="line">            margin-left: -200px;</span><br><span class="line">            margin-top: -100px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是最底层的页面内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>登陆页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我点我~<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="8-opacity"><a href="#8-opacity" class="headerlink" title="8 opacity"></a>8 opacity</h2><p>用来定义透明效果。取值范围是0~1，0是完全透明，1是完全不透明。</p>
<h3 id="8-1-案例"><a href="#8-1-案例" class="headerlink" title="8-1 案例"></a>8-1 案例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opacity:会透明度标签和文字</span><br><span class="line">rgba：只透明度标签</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.5</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#d2</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*background-color: rgb(0,0,0);*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.5</span>;</span></span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span>22asdasdasd2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="9-综合示例"><a href="#9-综合示例" class="headerlink" title="9 综合示例"></a>9 综合示例</h2><h3 id="9-1-顶部导航菜单"><a href="#9-1-顶部导航菜单" class="headerlink" title="9-1 顶部导航菜单"></a>9-1 顶部导航菜单</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-ua-compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>li标签的float示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*清除浏览器默认外边距和内填充*/</span></span></span><br><span class="line">    * &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">    a &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span>; <span class="comment">/*去除a标签默认的下划线*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">      background-color: black;</span><br><span class="line">      height: 40px;</span><br><span class="line">      width: 100%;</span><br><span class="line">      position: fixed;</span><br><span class="line">      top: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ul &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">list-style-type</span>: <span class="selector-tag">none</span>; <span class="comment">/*删除列表默认的圆点样式*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span>: 0; <span class="comment">/*删除列表默认的外边距*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span>: 0; <span class="comment">/*删除列表默认的内填充*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*li元素向左浮动*/</span></span></span><br><span class="line">    li &#123;</span><br><span class="line">      float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li &gt; a &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">display</span>: <span class="selector-tag">block</span>; <span class="comment">/*让链接显示为块级标签*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span>: 0 15<span class="selector-tag">px</span>; <span class="comment">/*设置左右各15像素的填充*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#b0b0b0</span>; <span class="comment">/*设置字体颜色*/</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">line-height</span>: 40<span class="selector-tag">px</span>; <span class="comment">/*设置行高*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*鼠标移上去颜色变白*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="comment">/*清除浮动 解决父级塌陷问题*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">      content: &quot;&quot;;</span><br><span class="line">      display: block;</span><br><span class="line">      clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 顶部导航栏 开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>玉米商城<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>MIUI<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>ioT<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>云服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>水滴<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>金融<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>优品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 顶部导航栏 结束 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-2-博客页面搭建"><a href="#9-2-博客页面搭建" class="headerlink" title="9-2 博客页面搭建"></a>9-2 博客页面搭建</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>博客园<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;blog.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-avatar&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;111.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-title&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>老司机的博客<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>该老司机车速太快，什么都没有留下!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-link&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>微信公众号<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-tag&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>#Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>#Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>#Golang<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>论开车的重要性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2020/5/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>jason老师从来不开车,非常正儿八经的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>论开车的重要性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2020/5/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>jason老师从来不开车,非常正儿八经的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>论开车的重要性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2020/5/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>jason老师从来不开车,非常正儿八经的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>论开车的重要性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2020/5/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>jason老师从来不开车,非常正儿八经的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>论开车的重要性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2020/5/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>jason老师从来不开车,非常正儿八经的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>论开车的重要性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2020/5/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>jason老师从来不开车,非常正儿八经的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>论开车的重要性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2020/5/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>jason老师从来不开车,非常正儿八经的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>论开车的重要性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2020/5/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>jason老师从来不开车,非常正儿八经的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>论开车的重要性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2020/5/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>jason老师从来不开车,非常正儿八经的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>论开车的重要性<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;date&quot;</span>&gt;</span>2020/5/14<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-body&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>jason老师从来不开车,非常正儿八经的!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#Python<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>#JavaScript<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*这是博客园首页的样式文件*/</span><br><span class="line"></span><br><span class="line">/*通用样式*/</span><br><span class="line">body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    background-color: #eeeeee;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    padding-left: 0;</span><br><span class="line">&#125;</span><br><span class="line">/*左侧样式*/</span><br><span class="line">.blog-left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    position: fixed;</span><br><span class="line">    background-color: #4e4e4e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-avatar &#123;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    border: 5px solid white;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.blog-avatar img &#123;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-title,.blog-info &#123;</span><br><span class="line">    color: darkgray;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-link,.blog-tag &#123;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-link a,.blog-tag a &#123;</span><br><span class="line">    color: darkgray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-link a:hover,.blog-tag a:hover &#123;</span><br><span class="line">    color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-link ul,.blog-tag ul &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin-top: 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*右侧样式*/</span><br><span class="line">.blog-right &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    width: 80%;</span><br><span class="line">    height: 1000px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.article &#123;</span><br><span class="line">    background-color: white;</span><br><span class="line">    margin: 20px 40px 10px 10px;</span><br><span class="line">    box-shadow: 5px 5px 5px rgba(0,0,0,0.5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">    font-size: 36px;</span><br><span class="line">&#125;</span><br><span class="line">.date &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    margin: 20px 20px;</span><br><span class="line">    font-weight: bolder;</span><br><span class="line">&#125;</span><br><span class="line">.article-title &#123;</span><br><span class="line">    border-left: 8px solid red;</span><br><span class="line">    text-indent: 16px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.article-body &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    text-indent: 30px;</span><br><span class="line">    /*border-bottom: 1px solid black;*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.article-bottom &#123;</span><br><span class="line">    padding-left: 30px;</span><br><span class="line">    padding-bottom: 10px;</span><br><span class="line">&#125;/*这是博客园首页的样式文件*/</span><br><span class="line"></span><br><span class="line">/*通用样式*/</span><br><span class="line">body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    background-color: #eeeeee;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    padding-left: 0;</span><br><span class="line">&#125;</span><br><span class="line">/*左侧样式*/</span><br><span class="line">.blog-left &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    position: fixed;</span><br><span class="line">    background-color: #4e4e4e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-avatar &#123;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    border: 5px solid white;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.blog-avatar img &#123;</span><br><span class="line">    max-width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-title,.blog-info &#123;</span><br><span class="line">    color: darkgray;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-link,.blog-tag &#123;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-link a,.blog-tag a &#123;</span><br><span class="line">    color: darkgray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-link a:hover,.blog-tag a:hover &#123;</span><br><span class="line">    color: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.blog-link ul,.blog-tag ul &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin-top: 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*右侧样式*/</span><br><span class="line">.blog-right &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    width: 80%;</span><br><span class="line">    height: 1000px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.article &#123;</span><br><span class="line">    background-color: white;</span><br><span class="line">    margin: 20px 40px 10px 10px;</span><br><span class="line">    box-shadow: 5px 5px 5px rgba(0,0,0,0.5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.title &#123;</span><br><span class="line">    font-size: 36px;</span><br><span class="line">&#125;</span><br><span class="line">.date &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    margin: 20px 20px;</span><br><span class="line">    font-weight: bolder;</span><br><span class="line">&#125;</span><br><span class="line">.article-title &#123;</span><br><span class="line">    border-left: 8px solid red;</span><br><span class="line">    text-indent: 16px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.article-body &#123;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    text-indent: 30px;</span><br><span class="line">    /*border-bottom: 1px solid black;*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.article-bottom &#123;</span><br><span class="line">    padding-left: 30px;</span><br><span class="line">    padding-bottom: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="一些常用的重置样式"><a href="#一些常用的重置样式" class="headerlink" title="一些常用的重置样式"></a>一些常用的重置样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">reset</span><span class="selector-class">.css</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">body</span>,<span class="selector-tag">p</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">ul</span>,<span class="selector-tag">ol</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">input</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>































]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Bootstrap-03</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Bootstrap-03/</url>
    <content><![CDATA[<p>Bootstrap组件</p>
<a id="more"></a>

<h2 id="1-Glyphicons-字体图标"><a href="#1-Glyphicons-字体图标" class="headerlink" title="1 Glyphicons 字体图标"></a>1 Glyphicons 字体图标</h2><p>图标类不能和其它组件直接联合使用。它们不能在同一个元素上与其他类共同存在。应该创建一个嵌套的 <code>&lt;span&gt;</code> 标签，并将图标类应用到这个 <code>&lt;span&gt;</code> 标签上。</p>
<p>图标类只能应用在不包含任何文本内容或子元素的元素上。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Left Align&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-align-left&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default btn-lg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-star&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> Star</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;alert alert-danger&quot;</span> <span class="attr">role</span>=<span class="string">&quot;alert&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-exclamation-sign&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Error:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  Enter a valid email address</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># 直接加span标签</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>登录页面 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"># 扩展：fontawsome</span><br><span class="line">       下载link 引用css</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="2-下拉菜单"><a href="#2-下拉菜单" class="headerlink" title="2 下拉菜单"></a>2 下拉菜单</h2><h3 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">  &lt;button class&#x3D;&quot;btn btn-default dropdown-toggle&quot; type&#x3D;&quot;button&quot; id&#x3D;&quot;dropdownMenu1&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    Dropdown</span><br><span class="line">    &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;dropdown-menu&quot; aria-labelledby&#x3D;&quot;dropdownMenu1&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Another action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Something else here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Separated link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>通过为下拉菜单的父元素设置 <code>.dropup</code> 类，可以让菜单向上弹出（默认是向下弹出的）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;dropup&quot;&gt; ... &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-对齐"><a href="#2-2-对齐" class="headerlink" title="2.2 对齐"></a>2.2 对齐</h3><p>默认情况下，下拉菜单自动沿着父元素的上沿和左侧被定位为 100% 宽度。 为 <code>.dropdown-menu</code> 添加 <code>.dropdown-menu-right</code> 类可以让菜单右对齐。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;dropdown-menu dropdown-menu-right&quot; aria-labelledby&#x3D;&quot;dLabel&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-标题"><a href="#2-3-标题" class="headerlink" title="2.3 标题"></a>2.3 标题</h3><p>在任何下拉菜单中均可通过添加标题来标明一组动作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;dropdown-menu&quot; aria-labelledby&#x3D;&quot;dropdownMenu3&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;li class&#x3D;&quot;dropdown-header&quot;&gt;Dropdown header&lt;&#x2F;li&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-分割线"><a href="#2-4-分割线" class="headerlink" title="2.4 分割线"></a>2.4 分割线</h3><p>为下拉菜单添加一条分割线，用于将多个链接分组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;dropdown-menu&quot; aria-labelledby&#x3D;&quot;dropdownMenuDivider&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-禁用的菜单项"><a href="#2-5-禁用的菜单项" class="headerlink" title="2.5 禁用的菜单项"></a>2.5 禁用的菜单项</h3><p>为下拉菜单中的 <code>&lt;li&gt;</code> 元素添加 <code>.disabled</code> 类，从而禁用相应的菜单项</p>
<h2 id="3-按钮组"><a href="#3-按钮组" class="headerlink" title="3 按钮组"></a>3 按钮组</h2><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;btn-group&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot;&gt;Left&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot;&gt;Middle&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot;&gt;Right&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-按钮工具栏"><a href="#3-2-按钮工具栏" class="headerlink" title="3.2 按钮工具栏"></a>3.2 按钮工具栏</h3><p>把多个按钮组 嵌套在一个工具栏里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;btn-toolbar&quot; role&#x3D;&quot;toolbar&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;btn-group&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;...&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;btn-group&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;...&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;btn-group&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;...&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-尺寸"><a href="#3-3-尺寸" class="headerlink" title="3.3 尺寸"></a>3.3 尺寸</h3><p>只要给 <code>.btn-group</code> 加上 <code>.btn-group-*</code> 类，就省去为按钮组中的每个按钮都赋予尺寸类了，如果包含了多个按钮组时也适用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;btn-group btn-group-lg&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;...&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-group&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;...&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-group btn-group-sm&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;...&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-group btn-group-xs&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;...&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-嵌套下拉菜单"><a href="#3-4-嵌套下拉菜单" class="headerlink" title="3.4 嵌套下拉菜单"></a>3.4 嵌套下拉菜单</h3><p>想要把下拉菜单混合到一系列按钮中，只须把 <code>.btn-group</code> 放入另一个 <code>.btn-group</code> 中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;btn-group&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot;&gt;1&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot;&gt;2&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class&#x3D;&quot;btn-group&quot; role&#x3D;&quot;group&quot;&gt;</span><br><span class="line">    &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default dropdown-toggle&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">      Dropdown</span><br><span class="line">      &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Dropdown link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Dropdown link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-垂直排列"><a href="#3-5-垂直排列" class="headerlink" title="3.5 垂直排列"></a>3.5 垂直排列</h3><p>让一组按钮垂直堆叠排列显示而不是水平排列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;btn-group-vertical&quot; role&#x3D;&quot;group&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-6-两端对齐排列的按钮组"><a href="#3-6-两端对齐排列的按钮组" class="headerlink" title="3.6 两端对齐排列的按钮组"></a>3.6 两端对齐排列的按钮组</h3><p>元素</p>
<p>只须将一系列 .btn 元素包裹到 .btn-group.btn-group-justified 中即可<div class="btn-group btn-group-justified" role="group" aria-label="...">   … </div> <button>元素<div class="btn-group btn-group-justified" role="group" aria-label="...">   <div class="btn-group" role="group">     <button type="button" class="btn btn-default">Left</button>   </div>   <div class="btn-group" role="group">     <button type="button" class="btn btn-default">Middle</button>   </div>   <div class="btn-group" role="group">     <button type="button" class="btn btn-default">Right</button>   </div> </div></button></p>
<h2 id="4-按钮式下拉菜单"><a href="#4-按钮式下拉菜单" class="headerlink" title="4 按钮式下拉菜单"></a>4 按钮式下拉菜单</h2><blockquote>
<p>前面的下拉菜单，重点介绍下拉菜单。 本部分介绍下拉菜单的按钮</p>
</blockquote>
<h3 id="4-1-单按钮下拉菜单"><a href="#4-1-单按钮下拉菜单" class="headerlink" title="4.1 单按钮下拉菜单"></a>4.1 单按钮下拉菜单</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Single button --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-group&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default dropdown-toggle&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    Action &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Another action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Something else here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Separated link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-分列式按钮下拉菜单"><a href="#4-2-分列式按钮下拉菜单" class="headerlink" title="4.2 分列式按钮下拉菜单"></a>4.2 分列式按钮下拉菜单</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Split button --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-group&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-danger&quot;&gt;Action&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-danger dropdown-toggle&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;Toggle Dropdown&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Another action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Something else here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Separated link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-尺寸"><a href="#4-3-尺寸" class="headerlink" title="4.3 尺寸"></a>4.3 尺寸</h3><p>按钮式下拉菜单适用所有尺寸的按钮。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Large button group --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-group&quot;&gt;</span><br><span class="line">  &lt;button class&#x3D;&quot;btn btn-default btn-lg dropdown-toggle&quot; type&#x3D;&quot;button&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    Large button &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Small button group --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-group&quot;&gt;</span><br><span class="line">  &lt;button class&#x3D;&quot;btn btn-default btn-sm dropdown-toggle&quot; type&#x3D;&quot;button&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    Small button &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Extra small button group --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-group&quot;&gt;</span><br><span class="line">  &lt;button class&#x3D;&quot;btn btn-default btn-xs dropdown-toggle&quot; type&#x3D;&quot;button&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    Extra small button &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-向上弹出菜单"><a href="#4-4-向上弹出菜单" class="headerlink" title="4.4 向上弹出菜单"></a>4.4 向上弹出菜单</h3><p>给父元素添加 <code>.dropup</code> 类就能使触发的下拉菜单朝上方打开。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;btn-group dropup&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot;&gt;Dropup&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default dropdown-toggle&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;Toggle Dropdown&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;button&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">    &lt;!-- Dropdown menu links --&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-输入框组"><a href="#5-输入框组" class="headerlink" title="5 输入框组"></a>5 输入框组</h2><p>通过在文本输入框 <code>&lt;input&gt;</code> 前面、后面或是两边加上文字或按钮，可以实现对表单控件的扩展。为 <code>.input-group</code> 赋予 <code>.input-group-addon</code> 或 <code>.input-group-btn</code> 类，可以给 <code>.form-control</code> 的前面或后面添加额外的元素。</p>
<h3 id="5-1-基本使用"><a href="#5-1-基本使用" class="headerlink" title="5.1 基本使用"></a>5.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;input-group-addon&quot; id&#x3D;&quot;basic-addon1&quot;&gt;@&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Username&quot; aria-describedby&#x3D;&quot;basic-addon1&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Recipient&#39;s username&quot; aria-describedby&#x3D;&quot;basic-addon2&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;input-group-addon&quot; id&#x3D;&quot;basic-addon2&quot;&gt;@example.com&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;input-group-addon&quot;&gt;$&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; aria-label&#x3D;&quot;Amount (to the nearest dollar)&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;input-group-addon&quot;&gt;.00&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;label for&#x3D;&quot;basic-url&quot;&gt;Your vanity URL&lt;&#x2F;label&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;input-group-addon&quot; id&#x3D;&quot;basic-addon3&quot;&gt;https:&#x2F;&#x2F;example.com&#x2F;users&#x2F;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;basic-url&quot; aria-describedby&#x3D;&quot;basic-addon3&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-尺寸"><a href="#5-2-尺寸" class="headerlink" title="5.2 尺寸"></a>5.2 尺寸</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;input-group input-group-lg&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;input-group-addon&quot; id&#x3D;&quot;sizing-addon1&quot;&gt;@&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Username&quot; aria-describedby&#x3D;&quot;sizing-addon1&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;input-group-addon&quot; id&#x3D;&quot;sizing-addon2&quot;&gt;@&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Username&quot; aria-describedby&#x3D;&quot;sizing-addon2&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;input-group input-group-sm&quot;&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;input-group-addon&quot; id&#x3D;&quot;sizing-addon3&quot;&gt;@&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Username&quot; aria-describedby&#x3D;&quot;sizing-addon3&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-作为额外元素的多选框和单选框"><a href="#5-3-作为额外元素的多选框和单选框" class="headerlink" title="5.3 作为额外元素的多选框和单选框"></a>5.3 作为额外元素的多选框和单选框</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;input-group-addon&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;input-group --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;input-group-addon&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;radio&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;input-group --&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-作为额外元素的按钮"><a href="#5-4-作为额外元素的按钮" class="headerlink" title="5.4 作为额外元素的按钮"></a>5.4 作为额外元素的按钮</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;input-group-btn&quot;&gt;</span><br><span class="line">        &lt;button class&#x3D;&quot;btn btn-default&quot; type&#x3D;&quot;button&quot;&gt;Go!&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Search for...&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;input-group --&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Search for...&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;input-group-btn&quot;&gt;</span><br><span class="line">        &lt;button class&#x3D;&quot;btn btn-default&quot; type&#x3D;&quot;button&quot;&gt;Go!&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;input-group --&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-5-作为额外元素的按钮式下拉菜单"><a href="#5-5-作为额外元素的按钮式下拉菜单" class="headerlink" title="5.5 作为额外元素的按钮式下拉菜单"></a>5.5 作为额外元素的按钮式下拉菜单</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;input-group-btn&quot;&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default dropdown-toggle&quot; data-toggle&#x3D;&quot;dropdown&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;Action &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Another action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Something else here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Separated link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;&lt;!-- &#x2F;btn-group --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;input-group --&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-6-作为额外元素的分裂式按钮下拉菜单"><a href="#5-6-作为额外元素的分裂式按钮下拉菜单" class="headerlink" title="5.6 作为额外元素的分裂式按钮下拉菜单"></a>5.6 作为额外元素的分裂式按钮下拉菜单</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;input-group-btn&quot;&gt;</span><br><span class="line">    &lt;!-- Button and dropdown menu --&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;input-group-btn&quot;&gt;</span><br><span class="line">    &lt;!-- Button and dropdown menu --&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-7-一个方向多个按钮"><a href="#5-7-一个方向多个按钮" class="headerlink" title="5.7 一个方向多个按钮"></a>5.7 一个方向多个按钮</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;input-group-btn&quot;&gt;</span><br><span class="line">    &lt;!-- Buttons --&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;input-group&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;input-group-btn&quot;&gt;</span><br><span class="line">    &lt;!-- Buttons --&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="6-导航Tab"><a href="#6-导航Tab" class="headerlink" title="6 导航Tab"></a>6 导航Tab</h2><h3 id="6-1-标签页"><a href="#6-1-标签页" class="headerlink" title="6.1 标签页"></a>6.1 标签页</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot; class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Messages&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-胶囊式标签页"><a href="#6-2-胶囊式标签页" class="headerlink" title="6.2 胶囊式标签页"></a>6.2 胶囊式标签页</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;nav nav-pills&quot;&gt;</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot; class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Messages&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<p><strong>胶囊式标签页垂直</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;nav nav-pills nav-stacked&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-两端对齐的标签页"><a href="#6-3-两端对齐的标签页" class="headerlink" title="6.3 两端对齐的标签页"></a>6.3 两端对齐的标签页</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;nav nav-tabs nav-justified&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;ul class&#x3D;&quot;nav nav-pills nav-justified&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-4-禁用的链接"><a href="#6-4-禁用的链接" class="headerlink" title="6.4 禁用的链接"></a>6.4 禁用的链接</h3><p>对任何导航组件（标签页、胶囊式标签页），都可以添加 <code>.disabled</code> 类，从而实现<strong>链接为灰色且没有鼠标悬停效果</strong>。</p>
<h3 id="6-5-带下拉菜单的标签页"><a href="#6-5-带下拉菜单的标签页" class="headerlink" title="6.5 带下拉菜单的标签页"></a>6.5 带下拉菜单的标签页</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot; class&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;dropdown-toggle&quot; data-toggle&#x3D;&quot;dropdown&quot; href&#x3D;&quot;#&quot; role&#x3D;&quot;button&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">      Dropdown &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--胶囊式标签页--&gt;</span><br><span class="line">&lt;ul class&#x3D;&quot;nav nav-pills&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot; class&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;dropdown-toggle&quot; data-toggle&#x3D;&quot;dropdown&quot; href&#x3D;&quot;#&quot; role&#x3D;&quot;button&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">      Dropdown &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7-导航条"><a href="#7-导航条" class="headerlink" title="7 导航条"></a>7 导航条</h2><h3 id="7-1-基本使用"><a href="#7-1-基本使用" class="headerlink" title="7.1 基本使用"></a>7.1 基本使用</h3><p>颜色：navbar-default 和 navbar-inverse</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav class&#x3D;&quot;navbar navbar-default&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container-fluid&quot;&gt;</span><br><span class="line">    &lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;navbar-header&quot;&gt;</span><br><span class="line">      &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;navbar-toggle collapsed&quot; data-toggle&#x3D;&quot;collapse&quot; data-target&#x3D;&quot;#bs-example-navbar-collapse-1&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;sr-only&quot;&gt;Toggle navigation&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;button&gt;</span><br><span class="line">      &lt;a class&#x3D;&quot;navbar-brand&quot; href&#x3D;&quot;#&quot;&gt;Brand&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;collapse navbar-collapse&quot; id&#x3D;&quot;bs-example-navbar-collapse-1&quot;&gt;</span><br><span class="line">      &lt;ul class&#x3D;&quot;nav navbar-nav&quot;&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Link &lt;span class&#x3D;&quot;sr-only&quot;&gt;(current)&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">          &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;dropdown-toggle&quot; data-toggle&#x3D;&quot;dropdown&quot; role&#x3D;&quot;button&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;Dropdown &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;</span><br><span class="line">          &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Another action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Something else here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Separated link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;One more separated link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">      &lt;form class&#x3D;&quot;navbar-form navbar-left&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">          &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Search&quot;&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-default&quot;&gt;Submit&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;form&gt;</span><br><span class="line">      &lt;ul class&#x3D;&quot;nav navbar-nav navbar-right&quot;&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">          &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;dropdown-toggle&quot; data-toggle&#x3D;&quot;dropdown&quot; role&#x3D;&quot;button&quot; aria-haspopup&#x3D;&quot;true&quot; aria-expanded&#x3D;&quot;false&quot;&gt;Dropdown &lt;span class&#x3D;&quot;caret&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;</span><br><span class="line">          &lt;ul class&#x3D;&quot;dropdown-menu&quot;&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Another action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Something else here&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li role&#x3D;&quot;separator&quot; class&#x3D;&quot;divider&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Separated link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;&#x2F;ul&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;&lt;!-- &#x2F;.navbar-collapse --&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;&lt;!-- &#x2F;.container-fluid --&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-品牌图标"><a href="#7-2-品牌图标" class="headerlink" title="7.2 品牌图标"></a>7.2 品牌图标</h3><p>将导航条内放置品牌标志的地方替换为 <code>&lt;img&gt;</code> 元素即可展示自己的品牌图标。由于 <code>.navbar-brand</code> 已经被设置了内补（padding）和高度（height），你需要根据自己的情况添加一些 CSS 代码从而覆盖默认设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav class&#x3D;&quot;navbar navbar-default&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container-fluid&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;navbar-header&quot;&gt;</span><br><span class="line">      &lt;a class&#x3D;&quot;navbar-brand&quot; href&#x3D;&quot;#&quot;&gt;</span><br><span class="line">        &lt;img alt&#x3D;&quot;Brand&quot; src&#x3D;&quot;...&quot;&gt;</span><br><span class="line">      &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-表单"><a href="#7-3-表单" class="headerlink" title="7.3 表单"></a>7.3 表单</h3><p>将表单放置于 <code>.navbar-form</code> 之内可以呈现很好的垂直对齐，并在较窄的视口（viewport）中呈现折叠状态。 使用对齐选项可以规定其在导航条上出现的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form class&#x3D;&quot;navbar-form navbar-left&quot; role&#x3D;&quot;search&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Search&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;btn btn-default&quot;&gt;Submit&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-4-按钮"><a href="#7-4-按钮" class="headerlink" title="7.4 按钮"></a>7.4 按钮</h3><p>对于不包含在 <code>&lt;form&gt;</code> 中的 <code>&lt;button&gt;</code> 元素，加上 <code>.navbar-btn</code> 后，可以让它在导航条里垂直居中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default navbar-btn&quot;&gt;Sign in&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-5-文本"><a href="#7-5-文本" class="headerlink" title="7.5 文本"></a>7.5 文本</h3><p>把文本包裹在 <code>.navbar-text</code>中时，为了有正确的行距和颜色，通常使用 <code>&lt;p&gt;</code> 标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;navbar-text&quot;&gt;Signed in as Mark Otto&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-6-非导航的链接"><a href="#7-6-非导航的链接" class="headerlink" title="7.6 非导航的链接"></a>7.6 非导航的链接</h3><p>或许你希望在标准的导航组件之外添加标准链接，那么，使用 <code>.navbar-link</code> 类可以让链接有正确的默认颜色和反色设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p class&#x3D;&quot;navbar-text navbar-right&quot;&gt;Signed in as &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;navbar-link&quot;&gt;Mark Otto&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-7-组件排列"><a href="#7-7-组件排列" class="headerlink" title="7.7 组件排列"></a>7.7 组件排列</h3><p>通过添加 <code>.navbar-left</code> 和 <code>.navbar-right</code> 工具类让导航链接、表单、按钮或文本对齐。两个类都会通过 CSS 设置特定方向的浮动样式。例如，要对齐导航链接，就要把它们放在个分开的、应用了工具类的 <code>&lt;ul&gt;</code> 标签里。</p>
<h3 id="7-8-固定在顶部"><a href="#7-8-固定在顶部" class="headerlink" title="7.8 固定在顶部"></a>7.8 固定在顶部</h3><p>添加 <code>.navbar-fixed-top</code> 类可以让导航条固定在顶部，还可包含一个 <code>.container</code> 或 <code>.container-fluid</code> 容器，从而让导航条居中，并在两侧添加内补（padding）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav class&#x3D;&quot;navbar navbar-default navbar-fixed-top&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-9-固定在底部"><a href="#7-9-固定在底部" class="headerlink" title="7.9 固定在底部"></a>7.9 固定在底部</h3><p>添加 <code>.navbar-fixed-bottom</code> 类可以让导航条固定在底部，并且还可以包含一个 <code>.container</code> 或 <code>.container-fluid</code> 容器，从而让导航条居中，并在两侧添加内补（padding)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav class&#x3D;&quot;navbar navbar-default navbar-fixed-bottom&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-10-静止在顶部"><a href="#7-10-静止在顶部" class="headerlink" title="7.10 静止在顶部"></a>7.10 静止在顶部</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav class&#x3D;&quot;navbar navbar-default navbar-static-top&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-11-反色"><a href="#7-11-反色" class="headerlink" title="7.11 反色"></a>7.11 反色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav class&#x3D;&quot;navbar navbar-inverse&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<h2 id="8-路径导航"><a href="#8-路径导航" class="headerlink" title="8 路径导航"></a>8 路径导航</h2><p>面包屑导航</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol class&#x3D;&quot;breadcrumb&quot;&gt;</span><br><span class="line">  &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Library&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;active&quot;&gt;Data&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>

<h2 id="9-分页"><a href="#9-分页" class="headerlink" title="9 分页"></a>9 分页</h2><h3 id="9-1-默认分页"><a href="#9-1-默认分页" class="headerlink" title="9.1 默认分页"></a>9.1 默认分页</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav aria-label&#x3D;&quot;Page navigation&quot;&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href&#x3D;&quot;#&quot; aria-label&#x3D;&quot;Previous&quot;&gt;</span><br><span class="line">        &lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;laquo;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;a href&#x3D;&quot;#&quot; aria-label&#x3D;&quot;Next&quot;&gt;</span><br><span class="line">        &lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;raquo;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<p><strong>禁用和激活状态</strong></p>
<p>你可以给不能点击的链接添加 <code>.disabled</code> 类、给当前页添加 <code>.active</code> 类</p>
<p>我们建议将 active 或 disabled 状态的链接（即 <code>&lt;a&gt;</code> 标签）替换为 <code>&lt;span&gt;</code> 标签，或者在向前/向后的箭头处省略<code>&lt;a&gt;</code> 标签，这样就可以让其保持需要的样式而不能被点击。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;disabled&quot;&gt;</span><br><span class="line">      &lt;span&gt;</span><br><span class="line">        &lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;laquo;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;active&quot;&gt;</span><br><span class="line">      &lt;span&gt;1 &lt;span class&#x3D;&quot;sr-only&quot;&gt;(current)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<p><strong>尺寸</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav aria-label&#x3D;&quot;...&quot;&gt;&lt;ul class&#x3D;&quot;pagination pagination-lg&quot;&gt;...&lt;&#x2F;ul&gt;&lt;&#x2F;nav&gt;</span><br><span class="line">&lt;nav aria-label&#x3D;&quot;...&quot;&gt;&lt;ul class&#x3D;&quot;pagination&quot;&gt;...&lt;&#x2F;ul&gt;&lt;&#x2F;nav&gt;</span><br><span class="line">&lt;nav aria-label&#x3D;&quot;...&quot;&gt;&lt;ul class&#x3D;&quot;pagination pagination-sm&quot;&gt;...&lt;&#x2F;ul&gt;&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-翻页"><a href="#9-2-翻页" class="headerlink" title="9.2 翻页"></a>9.2 翻页</h3><p><strong>基本使用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;pager&quot;&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Previous&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Next&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<p><strong>对齐链接</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;pager&quot;&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;previous&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;larr;&lt;&#x2F;span&gt; Older&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;next&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Newer &lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;rarr;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<p><strong>可选的禁用状态</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;nav aria-label&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;pager&quot;&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;previous disabled&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;larr;&lt;&#x2F;span&gt; Older&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;next&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Newer &lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;rarr;&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;nav&gt;</span><br></pre></td></tr></table></figure>

<h2 id="10-标签"><a href="#10-标签" class="headerlink" title="10 标签"></a>10 标签</h2><h3 id="10-1-基本使用"><a href="#10-1-基本使用" class="headerlink" title="10.1 基本使用"></a>10.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;Example heading &lt;span class&#x3D;&quot;label label-default&quot;&gt;New&lt;&#x2F;span&gt;&lt;&#x2F;h3&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10-2-各种颜色的标签"><a href="#10-2-各种颜色的标签" class="headerlink" title="10.2 各种颜色的标签"></a>10.2 各种颜色的标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span class&#x3D;&quot;label label-default&quot;&gt;Default&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;label label-primary&quot;&gt;Primary&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;label label-success&quot;&gt;Success&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;label label-info&quot;&gt;Info&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;label label-warning&quot;&gt;Warning&lt;&#x2F;span&gt;</span><br><span class="line">&lt;span class&#x3D;&quot;label label-danger&quot;&gt;Danger&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

<h2 id="11-徽章"><a href="#11-徽章" class="headerlink" title="11 徽章"></a>11 徽章</h2><p>给链接、导航等元素嵌套 <code>&lt;span class=&quot;badge&quot;&gt;</code> 元素，可以很醒目的展示新的或未读的信息条目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&quot;&gt;Inbox &lt;span class&#x3D;&quot;badge&quot;&gt;42&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;button class&#x3D;&quot;btn btn-primary&quot; type&#x3D;&quot;button&quot;&gt;</span><br><span class="line">  Messages &lt;span class&#x3D;&quot;badge&quot;&gt;4&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul class&#x3D;&quot;nav nav-pills&quot; role&#x3D;&quot;tablist&quot;&gt;</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot; class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Home &lt;span class&#x3D;&quot;badge&quot;&gt;42&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li role&#x3D;&quot;presentation&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Messages &lt;span class&#x3D;&quot;badge&quot;&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h2 id="12-巨幕"><a href="#12-巨幕" class="headerlink" title="12 巨幕"></a>12 巨幕</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;jumbotron&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Hello, world!&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;p&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;a class&#x3D;&quot;btn btn-primary btn-lg&quot; href&#x3D;&quot;#&quot; role&#x3D;&quot;button&quot;&gt;Learn more&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>如果需要让巨幕组件的宽度与浏览器宽度一致并且没有圆角，请把此组件放在所有 <code>.container</code> 元素的外面，并在组件内部添加一个 <code>.container</code> 元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;jumbotron&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="13-页头"><a href="#13-页头" class="headerlink" title="13 页头"></a>13 页头</h2><p>页头组件能够为 <code>h1</code> 标签增加适当的空间，并且与页面的其他部分形成一定的分隔。它支持 <code>h1</code> 标签内内嵌 <code>small</code> 元素的默认效果，还支持大部分其他组件（需要增加一些额外的样式）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;page-header&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Example page header &lt;small&gt;Subtext for header&lt;&#x2F;small&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="14-缩略图"><a href="#14-缩略图" class="headerlink" title="14 缩略图"></a>14 缩略图</h2><h3 id="14-1-基本样式"><a href="#14-1-基本样式" class="headerlink" title="14.1 基本样式"></a>14.1 基本样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-xs-6 col-md-3&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">      &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="14-2-带内容的缩略图"><a href="#14-2-带内容的缩略图" class="headerlink" title="14.2 带内容的缩略图"></a>14.2 带内容的缩略图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;col-sm-6 col-md-4&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">      &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;caption&quot;&gt;</span><br><span class="line">        &lt;h3&gt;Thumbnail label&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;p&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;&lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;btn btn-primary&quot; role&#x3D;&quot;button&quot;&gt;Button&lt;&#x2F;a&gt; &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;btn btn-default&quot; role&#x3D;&quot;button&quot;&gt;Button&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="15-警告框"><a href="#15-警告框" class="headerlink" title="15 警告框"></a>15 警告框</h2><h3 id="15-1-基本用法"><a href="#15-1-基本用法" class="headerlink" title="15.1 基本用法"></a>15.1 基本用法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;alert alert-success&quot; role&#x3D;&quot;alert&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;alert alert-info&quot; role&#x3D;&quot;alert&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;alert alert-warning&quot; role&#x3D;&quot;alert&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;alert alert-danger&quot; role&#x3D;&quot;alert&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="15-2-可关闭的警告框"><a href="#15-2-可关闭的警告框" class="headerlink" title="15.2 可关闭的警告框"></a>15.2 可关闭的警告框</h3><p>为警告框添加一个可选的 <code>.alert-dismissible</code> 类和一个关闭按钮。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;alert alert-warning alert-dismissible&quot; role&#x3D;&quot;alert&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;close&quot; data-dismiss&#x3D;&quot;alert&quot; aria-label&#x3D;&quot;Close&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;times;&lt;&#x2F;span&gt;&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;strong&gt;Warning!&lt;&#x2F;strong&gt; Better check yourself, you&#39;re not looking too good.</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="15-3-警告框中的链接"><a href="#15-3-警告框中的链接" class="headerlink" title="15.3 警告框中的链接"></a>15.3 警告框中的链接</h3><p>用 <code>.alert-link</code> 工具类，可以为链接设置与当前警告框相符的颜色。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;alert alert-success&quot; role&#x3D;&quot;alert&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;alert-link&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;alert alert-info&quot; role&#x3D;&quot;alert&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;alert-link&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;alert alert-warning&quot; role&#x3D;&quot;alert&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;alert-link&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;alert alert-danger&quot; role&#x3D;&quot;alert&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;alert-link&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="15-弹框（sweetalert）"><a href="#15-弹框（sweetalert）" class="headerlink" title="15 弹框（sweetalert）"></a>15 弹框（sweetalert）</h2><p><a href="https://lipis.github.io/bootstrap-sweetalert/">https://lipis.github.io/bootstrap-sweetalert/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &lt;script src&#x3D;&quot;bootstrap-sweetalert-master&#x2F;dist&#x2F;sweetalert.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;bootstrap-sweetalert-master&#x2F;dist&#x2F;sweetalert.css&quot;&gt;</span><br><span class="line"> </span><br><span class="line">swal(&#39;你还号码&#39;,&#39;我不好&#39;,&#39;success&#39;)</span><br><span class="line">swal(&#39;你还号码&#39;,&#39;我不好&#39;,&#39;info&#39;)</span><br><span class="line">swal(&#39;你还好吗&#39;,&#39;我不好&#39;,&#39;error&#39;)</span><br></pre></td></tr></table></figure>



<h2 id="16进度条"><a href="#16进度条" class="headerlink" title="16进度条"></a>16进度条</h2><h3 id="16-1-基本使用"><a href="#16-1-基本使用" class="headerlink" title="16.1 基本使用"></a>16.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar&quot; role&#x3D;&quot;progressbar&quot; style&#x3D;&quot;width: 60%;&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="16-2-带有提示标签的进度条"><a href="#16-2-带有提示标签的进度条" class="headerlink" title="16.2 带有提示标签的进度条"></a>16.2 带有提示标签的进度条</h3><p>将设置了 <code>.sr-only</code> 类的 <code>&lt;span&gt;</code> 标签从进度条组件中移除 类，从而让当前进度显示出来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;60&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 60%;&quot;&gt;</span><br><span class="line">    60%</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>在展示很低的百分比时，如果需要让文本提示能够清晰可见，可以为进度条设置 <code>min-width</code> 属性。</p>
<h3 id="16-3进度条颜色"><a href="#16-3进度条颜色" class="headerlink" title="16.3进度条颜色"></a>16.3进度条颜色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-success&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;40&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 40%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;40% Complete (success)&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-info&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;20&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 20%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;20% Complete&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-warning&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;60&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 60%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;60% Complete (warning)&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-danger&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;80&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 80%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;80% Complete (danger)&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="16-4-条纹效果"><a href="#16-4-条纹效果" class="headerlink" title="16.4 条纹效果"></a>16.4 条纹效果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-success progress-bar-striped&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;40&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 40%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;40% Complete (success)&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-info progress-bar-striped&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;20&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 20%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;20% Complete&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-warning progress-bar-striped&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;60&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 60%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;60% Complete (warning)&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-danger progress-bar-striped&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;80&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 80%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;80% Complete (danger)&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="16-5-动画效果"><a href="#16-5-动画效果" class="headerlink" title="16.5 动画效果"></a>16.5 动画效果</h3><p>为 <code>.progress-bar-striped</code> 添加 <code>.active</code> 类，使其呈现出由右向左运动的动画效果。IE9 及更低版本的浏览器不支持</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-striped active&quot; role&#x3D;&quot;progressbar&quot; aria-valuenow&#x3D;&quot;45&quot; aria-valuemin&#x3D;&quot;0&quot; aria-valuemax&#x3D;&quot;100&quot; style&#x3D;&quot;width: 45%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;45% Complete&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="16-7-堆叠效果"><a href="#16-7-堆叠效果" class="headerlink" title="16.7 堆叠效果"></a>16.7 堆叠效果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;progress&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-success&quot; style&#x3D;&quot;width: 35%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;35% Complete (success)&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-warning progress-bar-striped&quot; style&#x3D;&quot;width: 20%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;20% Complete (warning)&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;progress-bar progress-bar-danger&quot; style&#x3D;&quot;width: 10%&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;10% Complete (danger)&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="17-媒体对象"><a href="#17-媒体对象" class="headerlink" title="17 媒体对象"></a>17 媒体对象</h2><p>这是一个抽象的样式，用以构建不同类型的组件，这些组件都具有在文本内容的左或右侧对齐的图片（就像博客评论或 Twitter 消息等）。</p>
<h3 id="17-1-默认样式"><a href="#17-1-默认样式" class="headerlink" title="17.1 默认样式"></a>17.1 默认样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;media&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;media-left&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;</span><br><span class="line">      &lt;img class&#x3D;&quot;media-object&quot; src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;media-body&quot;&gt;</span><br><span class="line">    &lt;h4 class&#x3D;&quot;media-heading&quot;&gt;Media heading&lt;&#x2F;h4&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="17-2-对齐"><a href="#17-2-对齐" class="headerlink" title="17.2 对齐"></a>17.2 对齐</h3><p>图片或其他媒体类型可以顶部、中部或底部对齐。默认是顶部对齐。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;media&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;media-left media-middle&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;</span><br><span class="line">      &lt;img class&#x3D;&quot;media-object&quot; src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;media-body&quot;&gt;</span><br><span class="line">    &lt;h4 class&#x3D;&quot;media-heading&quot;&gt;Middle aligned media&lt;&#x2F;h4&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="17-3-媒体对象列表"><a href="#17-3-媒体对象列表" class="headerlink" title="17.3 媒体对象列表"></a>17.3 媒体对象列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;media-list&quot;&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;media&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;media-left&quot;&gt;</span><br><span class="line">      &lt;a href&#x3D;&quot;#&quot;&gt;</span><br><span class="line">        &lt;img class&#x3D;&quot;media-object&quot; src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">      &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;media-body&quot;&gt;</span><br><span class="line">      &lt;h4 class&#x3D;&quot;media-heading&quot;&gt;Media heading&lt;&#x2F;h4&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h2 id="18-列表组"><a href="#18-列表组" class="headerlink" title="18 列表组"></a>18 列表组</h2><h3 id="18-1-基本使用"><a href="#18-1-基本使用" class="headerlink" title="18.1 基本使用"></a>18.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Cras justo odio&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Dapibus ac facilisis in&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Morbi leo risus&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Porta ac consectetur ac&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Vestibulum at eros&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="18-2-带徽章"><a href="#18-2-带徽章" class="headerlink" title="18.2 带徽章"></a>18.2 带徽章</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;list-group-item&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;badge&quot;&gt;14&lt;&#x2F;span&gt;</span><br><span class="line">    Cras justo odio</span><br><span class="line">  &lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="18-3-列表"><a href="#18-3-列表" class="headerlink" title="18.3 列表"></a>18.3 列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item active&quot;&gt;</span><br><span class="line">    Cras justo odio</span><br><span class="line">  &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item&quot;&gt;Dapibus ac facilisis in&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item&quot;&gt;Morbi leo risus&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item&quot;&gt;Porta ac consectetur ac&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item&quot;&gt;Vestibulum at eros&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="18-4-按钮"><a href="#18-4-按钮" class="headerlink" title="18.4 按钮"></a>18.4 按钮</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;list-group-item&quot;&gt;Cras justo odio&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;list-group-item&quot;&gt;Dapibus ac facilisis in&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;list-group-item&quot;&gt;Morbi leo risus&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;list-group-item&quot;&gt;Porta ac consectetur ac&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;list-group-item&quot;&gt;Vestibulum at eros&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="18-5-被禁用的条目"><a href="#18-5-被禁用的条目" class="headerlink" title="18.5 被禁用的条目"></a>18.5 被禁用的条目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item disabled&quot;&gt;</span><br><span class="line">    Cras justo odio</span><br><span class="line">  &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item&quot;&gt;Dapibus ac facilisis in&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item&quot;&gt;Morbi leo risus&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item&quot;&gt;Porta ac consectetur ac&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item&quot;&gt;Vestibulum at eros&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="18-6-情景类-颜色"><a href="#18-6-情景类-颜色" class="headerlink" title="18.6 情景类(颜色)"></a>18.6 情景类(颜色)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;list-group-item list-group-item-success&quot;&gt;Dapibus ac facilisis in&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;list-group-item list-group-item-info&quot;&gt;Cras sit amet nibh libero&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;list-group-item list-group-item-warning&quot;&gt;Porta ac consectetur ac&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li class&#x3D;&quot;list-group-item list-group-item-danger&quot;&gt;Vestibulum at eros&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="18-7-定制内容"><a href="#18-7-定制内容" class="headerlink" title="18.7 定制内容"></a>18.7 定制内容</h3><p>列表组中的每个元素都可以是任何 HTML 内容，甚至是像下面的带链接的列表组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;list-group-item active&quot;&gt;</span><br><span class="line">    &lt;h4 class&#x3D;&quot;list-group-item-heading&quot;&gt;List group item heading&lt;&#x2F;h4&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;list-group-item-text&quot;&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="19-面板"><a href="#19-面板" class="headerlink" title="19 面板"></a>19 面板</h2><h3 id="19-1-基本"><a href="#19-1-基本" class="headerlink" title="19.1 基本"></a>19.1 基本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">    Basic panel example</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="19-2-带标题的面板"><a href="#19-2-带标题的面板" class="headerlink" title="19.2 带标题的面板"></a>19.2 带标题的面板</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-heading&quot;&gt;Panel heading without title&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">    Panel content</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-heading&quot;&gt;</span><br><span class="line">    &lt;h3 class&#x3D;&quot;panel-title&quot;&gt;Panel title&lt;&#x2F;h3&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">    Panel content</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="19-3-带脚注的面板"><a href="#19-3-带脚注的面板" class="headerlink" title="19.3 带脚注的面板"></a>19.3 带脚注的面板</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">    Panel content</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-footer&quot;&gt;Panel footer&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="19-4-情境效果"><a href="#19-4-情境效果" class="headerlink" title="19.4 情境效果"></a>19.4 情境效果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;panel panel-primary&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;panel panel-success&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;panel panel-info&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;panel panel-warning&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;panel panel-danger&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="19-5-带表格的面板"><a href="#19-5-带表格的面板" class="headerlink" title="19.5 带表格的面板"></a>19.5 带表格的面板</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">  &lt;!-- Default panel contents --&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-heading&quot;&gt;Panel heading&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">    &lt;p&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Table --&gt;</span><br><span class="line">  &lt;table class&#x3D;&quot;table&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>如果没有 <code>.panel-body</code> ，面版标题会和表格连接起来，没有空隙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">  &lt;!-- Default panel contents --&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-heading&quot;&gt;Panel heading&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Table --&gt;</span><br><span class="line">  &lt;table class&#x3D;&quot;table&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="19-6-带列表组的面板"><a href="#19-6-带列表组的面板" class="headerlink" title="19.6 带列表组的面板"></a>19.6 带列表组的面板</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">  &lt;!-- Default panel contents --&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-heading&quot;&gt;Panel heading&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">    &lt;p&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- List group --&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;list-group&quot;&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Cras justo odio&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Dapibus ac facilisis in&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Morbi leo risus&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Porta ac consectetur ac&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li class&#x3D;&quot;list-group-item&quot;&gt;Vestibulum at eros&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="20-具有响应式特性的嵌入内容"><a href="#20-具有响应式特性的嵌入内容" class="headerlink" title="20 具有响应式特性的嵌入内容"></a>20 具有响应式特性的嵌入内容</h2><p>根据被嵌入内容的外部容器的宽度，自动创建一个固定的比例，从而让浏览器自动确定视频或 slideshow 的尺寸，能够在各种设备上缩放。</p>
<p>这些规则被直接应用在 <code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;video&gt;</code> 和 <code>&lt;object&gt;</code> 元素上。如果你希望让最终样式与其他属性相匹配，还可以明确地使用一个派生出来的 <code>.embed-responsive-item</code> 类。</p>
<p><strong>超级提示：</strong> 不需要为 <code>&lt;iframe&gt;</code> 元素设置 <code>frameborder=&quot;0&quot;</code> 属性，因为我们已经替你这样做了！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 16:9 aspect ratio --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;embed-responsive embed-responsive-16by9&quot;&gt;</span><br><span class="line">  &lt;iframe class&#x3D;&quot;embed-responsive-item&quot; src&#x3D;&quot;...&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 4:3 aspect ratio --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;embed-responsive embed-responsive-4by3&quot;&gt;</span><br><span class="line">  &lt;iframe class&#x3D;&quot;embed-responsive-item&quot; src&#x3D;&quot;...&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="21-Well"><a href="#21-Well" class="headerlink" title="21 Well"></a>21 Well</h2><h3 id="21-1-默认样式"><a href="#21-1-默认样式" class="headerlink" title="21.1 默认样式"></a>21.1 默认样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;well&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="21-2-尺寸"><a href="#21-2-尺寸" class="headerlink" title="21.2 尺寸"></a>21.2 尺寸</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;well well-lg&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;well well-sm&quot;&gt;...&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day04</title>
    <url>/2020/08/29/py-day04/</url>
    <content><![CDATA[<p>python基础<br>函数高级操作(生成器、迭代器、装饰器)+模块(request json)</p>
<a id="more"></a>

<h4 id="复习"><a href="#复习" class="headerlink" title="复习"></a><div id="title">复习</div></h4><p>函数部分：</p>
<p>0.函数嵌套</p>
<ul>
<li>一个函数中可以调用另一个函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;fuc1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    func1()</span><br><span class="line">    print(<span class="string">&#x27;func2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">func2()</span><br></pre></td></tr></table></figure>

<ul>
<li>只要遇见了()就是函数的调用. 如果没有()就不是函数的调用</li>
<li>函数的执行顺序</li>
</ul>
<p>1.内置函数</p>
<ul>
<li>数学计算<ul>
<li>sum</li>
<li>abs</li>
<li>divmod</li>
<li>round</li>
<li>pow</li>
<li>min， max</li>
</ul>
</li>
<li>数据结构相关<ul>
<li>list() 将一个可迭代对象转换成列表</li>
<li>tuple() 将一个可迭代对象转换成元组</li>
<li><strong>bytes() 把字符串类型转换成bytes类型</strong> 重要</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2中经常使用的编码方式</span><br><span class="line">s = <span class="string">&#x27;你好武大&#x27;</span></span><br><span class="line">bs = s.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(bs)</span><br><span class="line">结果:<span class="string">b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd\xe6\xad\xa6\xe5\xa4\xa7&#x27;</span></span><br><span class="line">s1 = bs.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(s1)</span><br><span class="line">结果: 你好武大</span><br><span class="line"></span><br><span class="line">python3中使用如下方式</span><br><span class="line">s = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">bs = bytes(s,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(bs)</span><br><span class="line"><span class="comment"># 将字符串转换成字节</span></span><br><span class="line">bs1 = str(bs,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(bs1)</span><br></pre></td></tr></table></figure>

<ul>
<li>enumerate  对列表的高级操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(lst):</span><br><span class="line">    print(<span class="string">&#x27;这是序号&#x27;</span>,i)</span><br><span class="line">    print(<span class="string">&#x27;这是元素&#x27;</span>,k)</span><br></pre></td></tr></table></figure>

<p>2.匿名函数 lambada  面试问的较多 (<strong>和sorted函数配合使用</strong>)</p>
<blockquote>
<p>没有名字的函数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在项目中单独使用lambada的情况，不是很多。</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">和 sorted 一起使用的时候，比较多。</span><br><span class="line">项目中有很多需要对数据进行排序的需求</span><br><span class="line"></span><br><span class="line">salaries = &#123;</span><br><span class="line">  <span class="string">&#x27;szk&#x27;</span>:<span class="number">30000</span>,</span><br><span class="line">  <span class="string">&#x27;zhangsan&#x27;</span>:<span class="number">888888888</span>,</span><br><span class="line">  <span class="string">&#x27;nick&#x27;</span>:<span class="number">2000</span>,</span><br><span class="line">  <span class="string">&#x27;pounds&#x27;</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">sorted(salaries, key=<span class="keyword">lambda</span> name:salaries[name])</span><br></pre></td></tr></table></figure>


<p>3.迭代器 和for循环机制 <strong>面试中的重点</strong></p>
<blockquote>
<p>如果一个变量中， 包含有<code>__iter__</code>方法的话，那代表这个就是一个迭代器，可以使用<code>__next__</code>来获取其中的每一个元素<br>使用<code>dir()</code>来进行查看，该方法会将这个元素中所有的方法和属性全部列出来</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(a)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__getnewargs__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mod__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__rmod__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;capitalize&#x27;</span>, <span class="string">&#x27;casefold&#x27;</span>, <span class="string">&#x27;center&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;encode&#x27;</span>, <span class="string">&#x27;endswith&#x27;</span>, <span class="string">&#x27;expandtabs&#x27;</span>, <span class="string">&#x27;find&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;format_map&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;isalnum&#x27;</span>, <span class="string">&#x27;isalpha&#x27;</span>, <span class="string">&#x27;isascii&#x27;</span>, <span class="string">&#x27;isdecimal&#x27;</span>, <span class="string">&#x27;isdigit&#x27;</span>, <span class="string">&#x27;isidentifier&#x27;</span>, <span class="string">&#x27;islower&#x27;</span>, <span class="string">&#x27;isnumeric&#x27;</span>, <span class="string">&#x27;isprintable&#x27;</span>, <span class="string">&#x27;isspace&#x27;</span>, <span class="string">&#x27;istitle&#x27;</span>, <span class="string">&#x27;isupper&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;ljust&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>, <span class="string">&#x27;lstrip&#x27;</span>, <span class="string">&#x27;maketrans&#x27;</span>, <span class="string">&#x27;partition&#x27;</span>, <span class="string">&#x27;replace&#x27;</span>, <span class="string">&#x27;rfind&#x27;</span>, <span class="string">&#x27;rindex&#x27;</span>, <span class="string">&#x27;rjust&#x27;</span>, <span class="string">&#x27;rpartition&#x27;</span>, <span class="string">&#x27;rsplit&#x27;</span>, <span class="string">&#x27;rstrip&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;splitlines&#x27;</span>, <span class="string">&#x27;startswith&#x27;</span>, <span class="string">&#x27;strip&#x27;</span>, <span class="string">&#x27;swapcase&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;translate&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;zfill&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = a.__iter__()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&lt;str_iterator object at <span class="number">0x10b4447f0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<p>面试考察时，考察点就是：如何判断一个元素是否是迭代器？<br>答： 包含有<code>__iter__</code>方法的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">print(dir(a))  <span class="comment"># dir查看对象的方法和函数</span></span><br><span class="line"><span class="comment"># 在打印结果中寻找__iter__ 如果存在就表示当前的这个类型是个可迭代对象</span></span><br></pre></td></tr></table></figure>

<p>4.生成器  <strong>面试中的重点</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 生成器定义</span></span><br><span class="line"><span class="comment">### 生成器的本质就是迭代器，因此我们可以使用迭代器中的__next__方法来获取元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">22</span>  <span class="comment">### 将return换成yield关键字即可</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="comment"># print(ret.__next__())</span></span><br><span class="line"><span class="comment"># print(ret)  ### &lt;generator object func at 0x103cc80b0&gt; 生成器的对象</span></span><br></pre></td></tr></table></figure>

<p>总结：生成器一定是迭代器，但是迭代器就不一定是生成器</p>
<p>5.列表生成式和字典生成式 []  <strong>项目中的重点</strong></p>
<blockquote>
<p>写法比较pythonic的风格</p>
</blockquote>
<ul>
<li>列表生成式</li>
</ul>
<blockquote>
<p>目的是把一些复杂的代码，写的简单化</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">**传统的写法**</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    l.append(i)</span><br><span class="line"></span><br><span class="line">**pythonnic的写法**</span><br><span class="line">格式：[结果 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象]</span><br><span class="line"></span><br><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**高级的写法**</span><br><span class="line">格式：[结果 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象 <span class="keyword">if</span> 条件]</span><br><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>字典生成式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># **传统方式构造字典**</span></span><br><span class="line">keys=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">vals=[<span class="string">&#x27;szk&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>]</span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys):</span><br><span class="line">    <span class="comment"># print(i,k)</span></span><br><span class="line">    dic[k]=vals[i] <span class="comment">## dic[&#x27;name&#x27;] = vals[0] = &#x27;szk&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment">### **pythonnic方式**</span></span><br><span class="line"></span><br><span class="line">dic = &#123;k:vals[i] <span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys) <span class="keyword">if</span> 条件判断&#125;</span><br></pre></td></tr></table></figure>

<p>总结：笔试和项目中比较常见的问题。推荐大家，代码比较简单的话，使用上面两种方式，而如果代码比较复杂的话，不建议大家使用</p>
<p>5.5 递归函数  <strong>面试中常见问题</strong></p>
<blockquote>
<p>函数自己调用自己</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello, f1&#x27;</span>)</span><br><span class="line">    f1()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码会报错误，因为，无限制的递归下去，会导致操作系统不断的在内存中开辟栈空间，因此会将内存撑爆，程序死掉。所以，为了防止这种情况出现，python设置了一个最大的递归深度，默认1000。如果想要设置这个递归的深度的话，需要改变一下递归的深度设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getrecursionlimit())  <span class="comment"># 查看最大递归深度 1000</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)  <span class="comment"># 修改最大递归深度</span></span><br></pre></td></tr></table></figure>

<p>所以，如果以后想使用递归的时候，<strong>需要在程序中加入一个终止条件</strong>。</p>
<p>举个例子：</p>
<p>求1到n=5的和？</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">想要获取<span class="number">1</span>到<span class="number">5</span>的和， 只需要知道，<span class="number">1</span>到<span class="number">4</span>的和， 然后加上<span class="number">5</span>，<span class="number">5</span> + sum(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> + sum(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> + sum(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> + sum(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> + sum(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sum1(n<span class="number">-1</span>) + n</span><br><span class="line">        </span><br><span class="line">sum1(5) ===&gt; sum1(4) + 5 </span><br><span class="line">sum1(4) ===&gt; sum1(3) + 4</span><br><span class="line">sum1(3) ===&gt; sum1(2) + 3</span><br><span class="line">sum1(2) ===&gt; sum1(1) + 2</span><br><span class="line">sum1(1) ===&gt; 1</span><br></pre></td></tr></table></figure>

<p>求n的阶乘？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>! = <span class="number">5</span> * <span class="number">4</span> * <span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>! = <span class="number">5</span> * <span class="number">4</span>!</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>! = <span class="number">4</span> * <span class="number">3</span>!</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>! = <span class="number">3</span> * <span class="number">2</span>!</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>! = <span class="number">2</span> * <span class="number">1</span>!</span><br><span class="line"></span><br><span class="line">n! = n * (n<span class="number">-1</span>)!</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sum1(n<span class="number">-1</span>) * n</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>求斐波那契数列</p>
<blockquote>
<p>0, 1, 1, 2, 3, 5, 8,13,21…… </p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">斐波那契数学规律</span><br><span class="line"></span><br><span class="line">当n=<span class="number">0</span>或者n=<span class="number">1</span>, <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">当n&gt;2, f(3) = f(1) + f(2) = 1 + 1 = 2  ==&gt; f(n) = f(n-1) + f(n-2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> <span class="keyword">or</span> n==<span class="number">1</span> :</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line">fib(4) ==&gt; fib(3) + fib(2)</span><br></pre></td></tr></table></figure>

<p>总结：递归比较难理解，因为自己调用自己，如果没有终止条件的话，很可能造成整个程序崩掉。在项目中用的比较少。递归使用最多的场景，是在算法，尤其是树的相关算法中，用的最多。所以面试考察递归的时候，除了，用上面这几个简单的例子外，最多考察的是遍历树之类的问题</p>
<p>有兴趣的话，可以刷一下，算法题中的树</p>
<p>6.函数名的作用以及闭包函数   <strong>面试和项目中的重点</strong></p>
<ul>
<li>函数名的作用</li>
</ul>
<blockquote>
<p>函数名本身就是一个内存地址, 是可以当做参数进行传递的,并且还可以赋值给别的变量</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">f1</span>):</span></span><br><span class="line">    f1()    </span><br><span class="line">    print(<span class="string">&quot;呵呵&quot;</span>)</span><br><span class="line">    print(func)</span><br><span class="line">    </span><br><span class="line">a = func    <span class="comment"># 把函数当成一个值赋值给另一个变量</span></span><br><span class="line">a()     <span class="comment"># 函数调用 func()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>闭包函数</li>
</ul>
<blockquote>
<p>外层函数中嵌套一个内层函数，然后，外层函数的返回值是这个内层函数。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        name = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">        print(name)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">outter()  <span class="comment">### wrapper()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>并且，函数执行完之后，内部的变量不会随着外面变量的改变而改变。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        name = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">        print(name)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">f1 = outter()</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;kkk&#x27;</span></span><br><span class="line">f1()  <span class="comment">### szk</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总结：函数的变量名和闭包函数的使用主要是为装饰器打的基础。这两个知识点，面试中比较常问。而以闭包函数问的最多。</p>
<p>7.**装饰器 面试和项目中的重中之重 **</p>
<p>最简单的装饰器的写法和使用：</p>
<blockquote>
<p>计算时间的装饰器</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 装饰器的写法：</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_time</span>(<span class="params">fuc</span>):</span>  <span class="comment">### 参数是需要计算的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warpper</span>(<span class="params">*args, **kwargs</span>):</span> <span class="comment">### 需要计算的函数的参数</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        fuc(*args, **kwargs)  <span class="comment">### 需要计算时间的函数</span></span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">    <span class="keyword">return</span> warpper</span><br><span class="line"></span><br><span class="line"><span class="comment">### 装饰器的使用：</span></span><br><span class="line"><span class="meta">@count_time   ### python提供的语法糖写法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>带参数的装饰器</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">engine</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>)</span></span><br><span class="line"><span class="function">            ....</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">wrapper</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">outter</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">@<span class="title">count_time</span>(<span class="params">engine=<span class="string">&#x27;file&#x27;</span></span>)  ### <span class="title">python</span>提供的语法糖写法</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">f1</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">wrapper(*args,**kwargs) 这个参数的功能是给原始函数用的；outter(func)，用来装被修饰的函数，auth(engine) 传给内层需要的函数。三层足够使用，最外层可以无限的延伸参数。</span><br></pre></td></tr></table></figure>

<p>总结：装饰器在面试和项目中用的最多。甚至在面试的时候，会当场让你写装饰器。在项目中多用来判断用户是否登录以及记录日志等功能。</p>
<p>函数部分的总结：</p>
<ul>
<li>函数的写法和定义以及基础的参数，位置参数，关键字参数，动态获取参数 </li>
<li>部分内置函数</li>
<li>迭代器和生成器</li>
<li>列表生成式和字典生成式</li>
<li>递归</li>
<li>闭包函数</li>
<li>装饰器</li>
</ul>
<h4 id="模块部分："><a href="#模块部分：" class="headerlink" title="模块部分："></a>模块部分：</h4><blockquote>
<p>python 之所以强大，很大一部分原因是python有非常丰富的内置模块和第三方模块和包</p>
</blockquote>
<ol start="0">
<li>模块的定义</li>
</ol>
<blockquote>
<p>模块的本质就是一系列的python程序。</p>
</blockquote>
<p>“””<br>1、执行源文件代码<br>2、产生一个新的名称空间用于存放源文件执行过程中产生的名字<br>3、在当前执行文件所在的名称空间中得到一个名字foo，该名字指向新创建的模块名称空间，若要引用模块名称空间中的名字，需要加上该前缀，如下</p>
<p>import foo #导入模块foo<br>a=foo.x #引用模块foo中变量x的值赋值给当前名称空间中的名字a<br>foo.get() #调用模块foo的get函数<br>foo.change() #调用模块foo中的change函数<br>obj=foo.Foo() #使用模块foo的类Foo来实例化，进一步可以执行obj.func()<br>“””</p>
<ol>
<li>模块的使用</li>
</ol>
<blockquote>
<p><strong>import 模块名</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> md  <span class="comment">### 直接导入模块文件名即可</span></span><br><span class="line">print(md.read())  <span class="comment">### 调用模块中常见的方法和属性，使用.的方式来获取和使用</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>使用.的方式获取所有的函数或者属性</li>
<li>引入的方法不会和当前运行文件中的函数或者属性冲突</li>
</ul>
<blockquote>
<p><strong>from 模块 import 引入的函数或者属性</strong><br>1.产生一个模块的名称空间<br>2.运行foo.py将运行过程中产生的名字都丢到模块的名称空间去<br><strong>3.在当前名称空间拿到一个名字，该名字与模块名称空间中某一个内存地址关联</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> md <span class="keyword">import</span> read</span><br><span class="line">read()</span><br></pre></td></tr></table></figure>
<p><strong>import x x=模块foo中值0的内存地址</strong></p>
<img src="/2020/08/29/py-day04/from%E5%AF%BC%E5%8C%85x%E7%9A%84%E5%85%B3%E7%B3%BB.png" class title="py-day04">
<img src="/2020/08/29/py-day04/import.png" class title="py-day04">

<ul>
<li>from 模块 import *<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from foo import * #把foo中所有的名字都导入到当前执行文件的名称空间中，在当前位置直接可以使用这些名字</span><br><span class="line"></span><br><span class="line">a&#x3D;x</span><br><span class="line">get()</span><br><span class="line">change()</span><br><span class="line">obj&#x3D;Foo()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#foo.py</span><br><span class="line">__all__&#x3D;[&#39;x&#39;,&#39;get&#39;] #该列表中所有的元素必须是字符串类型，每个元素对应foo.py中的一个名字</span><br><span class="line">x&#x3D;1</span><br><span class="line">def get():</span><br><span class="line">    print(x)</span><br><span class="line">def change():</span><br><span class="line">    global x</span><br><span class="line">    x&#x3D;0</span><br><span class="line">class Foo:</span><br><span class="line">    def func(self):</span><br><span class="line">       print(&#39;from the func&#39;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>无需加前缀的好处是使得我们的代码更加简洁，坏处则是容易与当前名称空间中的名字冲突，如果当前名称空间存在相同的名字，则后定义的名字会覆盖之前定义的名字。</p>
<ul>
<li>优点：使用啥就导入啥，提高程序的执行效率</li>
</ul>
<blockquote>
<p><strong>import foo as f #为导入的模块foo在当前位置起别名f，以后再使用时就用这个别名f</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">as</span> f <span class="comment">#为导入的模块foo在当前位置起别名f，以后再使用时就用这个别名f</span></span><br><span class="line">f.x</span><br><span class="line">f.get()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>模块的导入查找方式</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">模块的查询顺序</span><br><span class="line">    <span class="number">1.</span>先从内存中找可能已经加载了的</span><br><span class="line">    <span class="number">2.</span>python 内置模块  </span><br><span class="line">    <span class="number">3.</span>sys.path列表里面每一个路径下去找, 需要知道sys.path列表中第一个路径就是当前被执行文件所在的文件夹（pycharm会加上根路径，不要考虑）</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如何解决上述找不到的路径的问题：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">###两种方式</span></span><br><span class="line"><span class="comment">#### 1.将该模块的绝对路径加入到sys.path中</span></span><br><span class="line">sys.path.append(<span class="string">r&#x27;/Users/shangzekai/PycharmProjects/day04/md1/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> md  <span class="comment">###</span></span><br><span class="line">print(md.read1())</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 2.从根路径下面的模块开始导入</span></span><br><span class="line"><span class="keyword">from</span> md1 <span class="keyword">import</span> md</span><br><span class="line"><span class="keyword">from</span> md1.md <span class="keyword">import</span> read, read1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>循环导入问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m1.py</span><br><span class="line"></span><br><span class="line">print(&#39;正在导入m1&#39;)</span><br><span class="line">from m2 import y</span><br><span class="line"></span><br><span class="line">x&#x3D;&#39;m1&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m2.py</span><br><span class="line"></span><br><span class="line">print(&#39;正在导入m2&#39;)</span><br><span class="line">from m1 import x</span><br><span class="line"></span><br><span class="line">y&#x3D;&#39;m2&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run.py</span><br><span class="line"></span><br><span class="line">import m1</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、执行run.py会抛出异常</span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;Users&#x2F;linhaifeng&#x2F;PycharmProjects&#x2F;pro01&#x2F;1 aaaa练习目录&#x2F;aa.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    import m1</span><br><span class="line">  File &quot;&#x2F;Users&#x2F;linhaifeng&#x2F;PycharmProjects&#x2F;pro01&#x2F;1 aaaa练习目录&#x2F;m1.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    from m2 import y</span><br><span class="line">  File &quot;&#x2F;Users&#x2F;linhaifeng&#x2F;PycharmProjects&#x2F;pro01&#x2F;1 aaaa练习目录&#x2F;m2.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    from m1 import x</span><br><span class="line">ImportError: cannot import name &#39;x&#39;</span><br><span class="line"></span><br><span class="line">#2、分析</span><br><span class="line">先执行run.py---&gt;执行import m1，开始导入m1并运行其内部代码---&gt;打印内容&quot;正在导入m1&quot;</span><br><span class="line">---&gt;执行from m2 import y 开始导入m2并运行其内部代码---&gt;打印内容“正在导入m2”---&gt;执行from m1 import x,由于m1已经被导入过了，所以不会重新导入，所以直接去m1中拿x，然而x此时并没有存在于m1中，所以报错</span><br></pre></td></tr></table></figure>
<p>解决方法：1.变量名字上提  2.导入语句放到函数中 3.放到中转模块上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 方案一：导入语句放到最后，保证在导入时，所有名字都已经加载过</span><br><span class="line"># 文件：m1.py</span><br><span class="line">print(&#39;正在导入m1&#39;)</span><br><span class="line"></span><br><span class="line">x&#x3D;&#39;m1&#39;</span><br><span class="line"></span><br><span class="line">from m2 import y</span><br><span class="line"></span><br><span class="line"># 文件：m2.py</span><br><span class="line">print(&#39;正在导入m2&#39;)</span><br><span class="line">y&#x3D;&#39;m2&#39;</span><br><span class="line"></span><br><span class="line">from m1 import x</span><br><span class="line"></span><br><span class="line"># 文件：run.py内容如下，执行该文件，可以正常使用</span><br><span class="line">import m1</span><br><span class="line">print(m1.x)</span><br><span class="line">print(m1.y)</span><br><span class="line"></span><br><span class="line"># 方案二：导入语句放到函数中，只有在调用函数时才会执行其内部代码</span><br><span class="line"># 文件：m1.py</span><br><span class="line">print(&#39;正在导入m1&#39;)</span><br><span class="line"></span><br><span class="line">def f1():</span><br><span class="line">    from m2 import y</span><br><span class="line">    print(x,y)</span><br><span class="line"></span><br><span class="line">x &#x3D; &#39;m1&#39;</span><br><span class="line"></span><br><span class="line"># 文件：m2.py</span><br><span class="line">print(&#39;正在导入m2&#39;)</span><br><span class="line"></span><br><span class="line">def f2():</span><br><span class="line">    from m1 import x</span><br><span class="line">    print(x,y)</span><br><span class="line"></span><br><span class="line">y &#x3D; &#39;m2&#39;</span><br><span class="line"></span><br><span class="line"># 文件：run.py内容如下，执行该文件，可以正常使用</span><br><span class="line">import m1</span><br><span class="line"></span><br><span class="line">m1.f1()</span><br></pre></td></tr></table></figure>
</li>
<li><p>点的问题 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">导入语句中的 &quot;.&quot; 是路径分隔符</span><br><span class="line">使用语句中的. 是向名称空间要名字</span><br></pre></td></tr></table></figure>
</li>
<li><p>区分py文件的两种用途<br>一个Python文件有两种用途，一种被当主程序/脚本执行，另一种被当模块导入，为了区别同一个文件的不同用途，每个py文件都内置了__name__变量.<br>__name__在py文件被当做脚本执行时赋值为“__main__”,<br>__name__在py文件被当做模块导入时赋值为模块名.</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作为模块foo.py的开发者，可以在文件末尾基于__name__在不同应用场景下值的不同来控制文件执行不同的逻辑</span><br><span class="line"><span class="comment">#foo.py</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo.py被当做脚本执行时运行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    foo.py被当做模块导入时运行的代码</span><br><span class="line"></span><br><span class="line">通常我们会在<span class="keyword">if</span>的子代码块中编写针对模块功能的测试代码，这样foo.py在被当做脚本运行时，就会执行测试代码，而被当做模块导入时则不用执行测试代码。</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>模块的分类</p>
<ul>
<li>自定义模块</li>
<li>内置模块</li>
<li>第三方模块 </li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  <span class="comment"># 当文件被直接执行时</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.常见的内置模块</p>
<ul>
<li><p>sys ： </p>
<ul>
<li>sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值<br>-os:</li>
<li>os.path.abspath(path)       返回path规范化的绝对路径</li>
<li>os.path.split(path)         将path分割成目录和文件名二元组返回</li>
<li>os.path.dirname(path)       返回path的目录。其实就是os.path.split(path)的第一个元素</li>
<li>os.path.basename(path)      返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</li>
<li>os.path.exists(path)        如果path存在，返回True；如果path不存在，返回False</li>
<li>os.path.isfile(path)        如果path是一个存在的文件，返回True。否则返回False</li>
<li>os.path.isdir(path)         如果path是一个存在的目录，则返回True。否则返回False</li>
</ul>
</li>
<li><p>random : 生成随机字符串，验证码</p>
<ul>
<li>random.randint(1,2)</li>
</ul>
</li>
<li><p>json 使用的场景非常多，常见于不同的语言和python进行数据交互使用</p>
<ul>
<li>dumps：序列化</li>
<li>loads: 反序列化</li>
<li>dump</li>
<li>load   </li>
</ul>
</li>
<li><p>hashlib  编码</p>
<ul>
<li>md5</li>
<li>sha1</li>
<li>sha256</li>
</ul>
</li>
</ul>
<h4 id="包部分："><a href="#包部分：" class="headerlink" title="包部分："></a>包部分：</h4><p>“””<br>随着模块数目的增多，把所有模块不加区分地放到一起也是极不合理的，于是Python为我们提供了一种把模块组织到一起的方法，即创建一个包。包就是一个含有<strong>init</strong>.py文件的文件夹，文件夹内可以组织子模块或子包，例如<br>“””</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pool&#x2F;                #顶级包</span><br><span class="line">├── __init__.py     </span><br><span class="line">├── futures          #子包</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── process.py</span><br><span class="line">│   └── thread.py</span><br><span class="line">└── versions.py      #子模块</span><br></pre></td></tr></table></figure>

<h5 id="1-包就是包含有init-py的文件夹；"><a href="#1-包就是包含有init-py的文件夹；" class="headerlink" title="1.包就是包含有init.py的文件夹；"></a>1.包就是包含有<strong>init</strong>.py的文件夹；</h5><h5 id="2-包的本质是文件的一种形式，包是用来当做模块导入的"><a href="#2-包的本质是文件的一种形式，包是用来当做模块导入的" class="headerlink" title="2.包的本质是文件的一种形式，包是用来当做模块导入的"></a>2.包的本质是文件的一种形式，包是用来当做模块导入的</h5><ul>
<li>需要强调</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. 在python3中，即使包下没有__init__.py文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import 包报错</span><br><span class="line"></span><br><span class="line">#2. 创建包的目的不是为了运行，而是被导入使用，记住，包只是模块的一种形式而已，包的本质就是一种模块</span><br></pre></td></tr></table></figure>

<ul>
<li>导入包与<strong>init</strong>.py-包的使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、执行包下的__init__.py文件</span><br><span class="line">2、产生一个新的名称空间用于存放__init__.py执行过程中产生的名字</span><br><span class="line">3、在当前执行文件所在的名称空间中得到一个名字pool，该名字指向__init__.py的名称空间，例如http:&#x2F;&#x2F;pool.xxx和pool.yyy中的xxx和yyy都是来自于pool下的__init__.py，也就是说导入包时并不会导入包下所有的子模块与子包</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h5 id="强调-包的使用"><a href="#强调-包的使用" class="headerlink" title="强调 - 包的使用"></a><strong>强调</strong> - 包的使用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.关于包相关的导入语句也分为import和from ... import ...两种，但是无论哪种，无论在什么位置，在导入时都必须遵循一个原则：凡是在导入时带点的，点的左边都必须是一个包，否则非法。可以带有一连串的点，如import 顶级包.子包.子模块,但都必须遵循这个原则。但对于导入后，在使用时就没有这种限制了，点的左边可以是包,模块，函数，类(它们都可以用点的方式调用自己的属性)。</span><br><span class="line"></span><br><span class="line">2、包A和包B下有同名模块也不会冲突，如A.a与B.a来自俩个命名空间</span><br><span class="line"></span><br><span class="line">3、import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的__init__.py，导入包本质就是在导入该文件</span><br></pre></td></tr></table></figure>

<h5 id="绝对导入与相对导入"><a href="#绝对导入与相对导入" class="headerlink" title="绝对导入与相对导入"></a>绝对导入与相对导入</h5><p>1、绝对导入：以顶级包为起始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pool下的__init__.py</span></span><br><span class="line"><span class="keyword">from</span> pool <span class="keyword">import</span> versions</span><br></pre></td></tr></table></figure>

<p>2、相对导入：.代表当前文件所在的目录，..代表当前目录的上一级目录，依此类推</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pool下的__init__.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> versions</span><br></pre></td></tr></table></figure>
<p>同理，针对pool.futures.process.ProcessPoolExecutor(3)，则需要</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#操作pool下的__init__.py，保证pool.futures</span><br><span class="line">from . import futures #或from pool import futures</span><br><span class="line"></span><br><span class="line">#操作futrues下的__init__.py，保证pool.futures.process</span><br><span class="line">from . import process #或from pool.futures import process</span><br></pre></td></tr></table></figure>
<p>在包内使用相对导入还可以跨目录导入模块，比如thread.py中想引用versions.py的名字check</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import也能使用绝对导入，导入过程中同样会依次执行包下的__init__.py,只是基于import导入的结果，使用时必须加上该前缀</span><br></pre></td></tr></table></figure>
<p>例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pool.futures #拿到名字pool.futures指向futures下的__init__.py</span><br><span class="line">pool.futures.xxx #要求futures下的__init__.py中必须有名字xxx</span><br></pre></td></tr></table></figure>
<p>例2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pool.futures.thread #拿到名字pool.futures.thread指向thread.py</span><br><span class="line"></span><br><span class="line">thread_pool&#x3D;pool.futures.thread.ThreadPoolExecutor(3)</span><br><span class="line">thread_pool.submit()</span><br></pre></td></tr></table></figure>
<p>相对导入只能用from module import symbol的形式,import ..versions语法是不对的，且symbol只能是一个明确的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pool import futures.process #语法错误</span><br><span class="line">from pool.futures import process #语法正确</span><br></pre></td></tr></table></figure>
<ul>
<li>针对包内部模块之间的相互导入推荐使用相对导入，需要特别强调：<blockquote>
<p>1、相对导入只能在包内部使用，用相对导入不同目录下的模块是非法的<br>2、无论是import还是from-import，但凡是在导入时带点的，点的左边必须是包,否则语法错误</p>
</blockquote>
</li>
</ul>
<h5 id="总结包的使用需要牢记三点"><a href="#总结包的使用需要牢记三点" class="headerlink" title="总结包的使用需要牢记三点"></a>总结包的使用需要牢记三点</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、导包就是在导包下__init__.py文件</span><br><span class="line">2、包内部的导入应该使用相对导入，相对导入也只能在包内部使用，而且...取上一级不能出包</span><br><span class="line">3、</span><br><span class="line">使用语句中的点代表的是访问属性</span><br><span class="line">m.n.x ----&gt; 向m要n，向n要x</span><br><span class="line">而导入语句中的点代表的是路径分隔符</span><br><span class="line">import a.b.c --&gt; a&#x2F;b&#x2F;c，文件夹下a下有子文件夹b，文件夹b下有子文件或文件夹c</span><br><span class="line">所以导入语句中点的左边必须是一个包</span><br></pre></td></tr></table></figure>


<h4 id="项目里面需要注意："><a href="#项目里面需要注意：" class="headerlink" title="项目里面需要注意："></a>项目里面需要注意：</h4><ol>
<li>项目内文件相互引用，选择在环境变量里append在启动文件所在的项目根目录。<br>import os<br>print(<strong>file</strong>)) #当前文件的绝对路径<br>BASE_DIR = os.path.dirname(os.path.dirname(<strong>file</strong>))<br>print(BASE_DIR)<br>sys.path.append(BASE_DIR)</li>
</ol>
<p>LOG_PATH = os.path.join(BASE_DIR,’log’,’access.log’)</p>
<h4 id="本周内容："><a href="#本周内容：" class="headerlink" title="本周内容："></a>本周内容：</h4><p>0.内置的模块</p>
<img src="/2020/08/29/py-day04/%E6%97%B6%E9%97%B4%E6%88%B3.png" class title="内置函数">
<ol>
<li>时间模块 （time）<ul>
<li>import time   time.time() </li>
<li>time.sleep(3)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入时间模块</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#时间戳</span></span><br><span class="line">&gt;&gt;&gt;time.time()</span><br><span class="line"><span class="number">1500875844.800804</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间字符串</span></span><br><span class="line">&gt;&gt;&gt;time.strftime(<span class="string">&quot;%Y-%m-%d %X&quot;</span>)</span><br><span class="line"><span class="string">&#x27;2017-07-24 13:54:37&#x27;</span></span><br><span class="line">&gt;&gt;&gt;time.strftime(<span class="string">&quot;%Y-%m-%d %H-%M-%S&quot;</span>)</span><br><span class="line"><span class="string">&#x27;2017-07-24 13-55-04&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间元组:localtime将一个时间戳转换为当前时区的struct_time</span></span><br><span class="line">time.localtime()</span><br><span class="line">time.struct_time(tm_year=<span class="number">2017</span>, tm_mon=<span class="number">7</span>, tm_mday=<span class="number">24</span>,</span><br><span class="line">　　　　　　　　　　tm_hour=<span class="number">13</span>, tm_min=<span class="number">59</span>, tm_sec=<span class="number">37</span>, </span><br><span class="line">                 tm_wday=<span class="number">0</span>, tm_yday=<span class="number">205</span>, tm_isdst=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ul>
<li>重点转换 字符串&lt;–&gt;时间戳<br>字符串–&gt;时间戳<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 如果别人给你传了一个2016-05-22，转换成时间戳</span></span><br><span class="line"><span class="comment">#将 日期字符串 转成 struct时间对象格式</span></span><br><span class="line">string_to_struct = time.strptime(<span class="string">&quot;2016-05-22&quot;</span>,<span class="string">&quot;%Y-%m-%d&quot;</span>) </span><br><span class="line"><span class="comment"># print(string_to_struct)</span></span><br><span class="line"><span class="comment">#将struct时间对象转成时间戳</span></span><br><span class="line">struct_to_stamp = time.mktime(string_to_struct) </span><br><span class="line">print(struct_to_stamp)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>时间戳 -&gt; 日期字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,time.gmtime()) )</span><br></pre></td></tr></table></figure>
<p>总结：时间的转换以及时间的加减</p>
<ol>
<li><p>时间模块datetime</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义日期</span></span><br><span class="line">res = datetime.date(<span class="number">2019</span>, <span class="number">7</span>, <span class="number">15</span>)</span><br><span class="line">print(res)  <span class="comment"># 2019-07-15</span></span><br><span class="line"></span><br><span class="line">dt_now = datetime.datetime.now()</span><br><span class="line">tdelta = datetime.timedelta(days=<span class="number">7</span>)</span><br><span class="line">print(datetime.datetime.now() + datetime.timedelta(days=<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>random模块<br>场景：验证码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def make_code(size&#x3D;6):</span><br><span class="line">    res &#x3D; &#39;&#39;</span><br><span class="line">    for i in range(size):</span><br><span class="line">        num &#x3D; str(random.randint(0,9))</span><br><span class="line">        alpha &#x3D; chr(random.randint(65,90))</span><br><span class="line">        res +&#x3D; random.choice([num,alpha])</span><br><span class="line">    return res</span><br><span class="line">print(make_code())</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#随机小数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()      <span class="comment"># 大于0且小于1之间的小数</span></span><br><span class="line"><span class="number">0.7664338663654585</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">#大于1小于3的小数</span></span><br><span class="line"><span class="number">1.6270147180533838</span><span class="comment">#恒富：发红包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#随机整数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">5</span>)  <span class="comment"># 大于等于1且小于等于5之间的整数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>) <span class="comment"># 大于等于1且小于10之间的奇数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#随机选择一个返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="number">1</span>,<span class="string">&#x27;23&#x27;</span>,[<span class="number">4</span>,<span class="number">5</span>]])  <span class="comment"># #1或者23或者[4,5]</span></span><br><span class="line"><span class="comment">#随机选择多个返回，返回的个数为函数的第二个参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample([<span class="number">1</span>,<span class="string">&#x27;23&#x27;</span>,[<span class="number">4</span>,<span class="number">5</span>]],<span class="number">2</span>) <span class="comment"># #列表元素任意2个组合</span></span><br><span class="line">[[<span class="number">4</span>, <span class="number">5</span>], <span class="string">&#x27;23&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#打乱列表顺序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(item) <span class="comment"># 打乱次序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item</span><br><span class="line">[<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(item)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>os模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.makedirs(<span class="string">&#x27;dirname1/dirname2&#x27;</span>)    可生成多层递归目录</span><br><span class="line">os.removedirs(<span class="string">&#x27;dirname1&#x27;</span>)    若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</span><br><span class="line">os.mkdir(<span class="string">&#x27;dirname&#x27;</span>)    生成单级目录；相当于shell中mkdir dirname</span><br><span class="line">os.rmdir(<span class="string">&#x27;dirname&#x27;</span>)    删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</span><br><span class="line">os.listdir(<span class="string">&#x27;dirname&#x27;</span>)    列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</span><br><span class="line">os.remove()  删除一个文件</span><br><span class="line">os.rename(<span class="string">&quot;oldname&quot;</span>,<span class="string">&quot;newname&quot;</span>)  重命名文件/目录</span><br><span class="line">os.stat(<span class="string">&#x27;path/filename&#x27;</span>)  获取文件/目录信息</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;bash command&quot;</span>)  运行shell命令，直接显示</span><br><span class="line">os.popen(<span class="string">&quot;bash command).read()  运行shell命令，获取执行结果</span></span><br><span class="line"><span class="string">os.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径</span></span><br><span class="line"><span class="string">os.chdir(&quot;</span>dirname<span class="string">&quot;)  改变当前脚本工作目录；相当于shell下cd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">os.path</span></span><br><span class="line"><span class="string">os.path.abspath(path) 返回path规范化的绝对路径os.path.split(path) 将path分割成目录和文件名二元组返回 </span></span><br><span class="line"><span class="string">os.path.dirname(path) 返回path的目录。其实就是os.path.split(path)的第一个元素 </span></span><br><span class="line"><span class="string">os.path.basename(path) 返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</span></span><br><span class="line"><span class="string">os.path.exists(path)  如果path存在，返回True；如果path不存在，返回False</span></span><br><span class="line"><span class="string">os.path.isabs(path)  如果path是绝对路径，返回True</span></span><br><span class="line"><span class="string">os.path.isfile(path)  如果path是一个存在的文件，返回True。否则返回False</span></span><br><span class="line"><span class="string">os.path.isdir(path)  如果path是一个存在的目录，则返回True。否则返回False</span></span><br><span class="line"><span class="string">os.path.join(path1[, path2[, ...]])  将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span></span><br><span class="line"><span class="string">os.path.getatime(path)  返回path所指向的文件或者目录的最后访问时间</span></span><br><span class="line"><span class="string">os.path.getmtime(path)  返回path所指向的文件或者目录的最后修改时间</span></span><br><span class="line"><span class="string">os.path.getsize(path) 返回path的大小</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sys模块<br>sys模块是与python解释器交互的一个接口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.argv           命令行参数List，第一个元素是程序本身路径</span><br><span class="line">sys.exit(n)        退出程序，正常退出时exit(<span class="number">0</span>),错误退出sys.exit(<span class="number">1</span>)</span><br><span class="line">sys.version        获取Python解释程序的版本信息</span><br><span class="line">sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span><br><span class="line">sys.platform       返回操作系统平台名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> SystemExit <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure></li>
<li><p>pathlib模块(3.5之后一个新的模块)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">res = Path(__file__).parent.parent</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">路径拼接</span><br><span class="line">res = Path(<span class="string">&#x27;/a/b/c&#x27;</span>) / <span class="string">&#x27;d/e.txt&#x27;</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="6">
<li>configparser模块<br>该模块适用于配置文件的格式与windows ini文件类似，可以包含一个或多个节（section），每个节可以有多个参数（键=值）。<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">ServerAliveInterval</span> = <span class="number">45</span></span><br><span class="line"><span class="attr">Compression</span> = <span class="literal">yes</span></span><br><span class="line"><span class="attr">CompressionLevel</span> = <span class="number">9</span></span><br><span class="line"><span class="attr">ForwardX11</span> = <span class="literal">yes</span></span><br><span class="line">  </span><br><span class="line"><span class="section">[bitbucket.org]</span></span><br><span class="line"><span class="attr">User</span> = hg</span><br><span class="line">  </span><br><span class="line"><span class="section">[topsecret.server.com]</span></span><br><span class="line"><span class="attr">Port</span> = <span class="number">50022</span></span><br><span class="line"><span class="attr">ForwardX11</span> = <span class="literal">no</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>如果想用python生成一个这样的文档怎么做呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line">config[<span class="string">&quot;DEFAULT&quot;</span>] = &#123;<span class="string">&#x27;ServerAliveInterval&#x27;</span>: <span class="string">&#x27;45&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;Compression&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;CompressionLevel&#x27;</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;ForwardX11&#x27;</span>:<span class="string">&#x27;yes&#x27;</span></span><br><span class="line">                     &#125;</span><br><span class="line"></span><br><span class="line">config[<span class="string">&#x27;bitbucket.org&#x27;</span>] = &#123;<span class="string">&#x27;User&#x27;</span>:<span class="string">&#x27;hg&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">config[<span class="string">&#x27;topsecret.server.com&#x27;</span>] = &#123;<span class="string">&#x27;Host Port&#x27;</span>:<span class="string">&#x27;50022&#x27;</span>,<span class="string">&#x27;ForwardX11&#x27;</span>:<span class="string">&#x27;no&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;example.ini&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> configfile:</span><br><span class="line"></span><br><span class="line">   config.write(configfile)</span><br></pre></td></tr></table></figure>
<p>查找文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------查找文件内容,基于字典的形式</span></span><br><span class="line"></span><br><span class="line">print(config.sections())        <span class="comment">#  []</span></span><br><span class="line"></span><br><span class="line">config.read(<span class="string">&#x27;example.ini&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(config.sections())        <span class="comment">#   [&#x27;bitbucket.org&#x27;, &#x27;topsecret.server.com&#x27;]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;bytebong.com&#x27;</span> <span class="keyword">in</span> config) <span class="comment"># False</span></span><br><span class="line">print(<span class="string">&#x27;bitbucket.org&#x27;</span> <span class="keyword">in</span> config) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(config[<span class="string">&#x27;bitbucket.org&#x27;</span>][<span class="string">&quot;user&quot;</span>])  <span class="comment"># hg</span></span><br><span class="line"></span><br><span class="line">print(config[<span class="string">&#x27;DEFAULT&#x27;</span>][<span class="string">&#x27;Compression&#x27;</span>]) <span class="comment">#yes</span></span><br><span class="line"></span><br><span class="line">print(config[<span class="string">&#x27;topsecret.server.com&#x27;</span>][<span class="string">&#x27;ForwardX11&#x27;</span>])  <span class="comment">#no</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(config[<span class="string">&#x27;bitbucket.org&#x27;</span>])          <span class="comment">#&lt;Section: bitbucket.org&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> config[<span class="string">&#x27;bitbucket.org&#x27;</span>]:     <span class="comment"># 注意,有default会默认default的键</span></span><br><span class="line">    print(key)</span><br><span class="line"></span><br><span class="line">print(config.options(<span class="string">&#x27;bitbucket.org&#x27;</span>))  <span class="comment"># 同for循环,找到&#x27;bitbucket.org&#x27;下所有键</span></span><br><span class="line"></span><br><span class="line">print(config.items(<span class="string">&#x27;bitbucket.org&#x27;</span>))    <span class="comment">#找到&#x27;bitbucket.org&#x27;下所有键值对</span></span><br><span class="line"></span><br><span class="line">print(config.get(<span class="string">&#x27;bitbucket.org&#x27;</span>,<span class="string">&#x27;compression&#x27;</span>)) <span class="comment"># yes       get方法Section下的key对应的value</span></span><br></pre></td></tr></table></figure>
<p>增删改操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line">config.read(<span class="string">&#x27;example.ini&#x27;</span>)</span><br><span class="line"></span><br><span class="line">config.add_section(<span class="string">&#x27;yuan&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config.remove_section(<span class="string">&#x27;bitbucket.org&#x27;</span>)</span><br><span class="line">config.remove_option(<span class="string">&#x27;topsecret.server.com&#x27;</span>,<span class="string">&quot;forwardx11&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config.set(<span class="string">&#x27;topsecret.server.com&#x27;</span>,<span class="string">&#x27;k1&#x27;</span>,<span class="string">&#x27;11111&#x27;</span>)</span><br><span class="line">config.set(<span class="string">&#x27;yuan&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>,<span class="string">&#x27;22222&#x27;</span>)</span><br><span class="line"></span><br><span class="line">config.write(open(<span class="string">&#x27;new2.ini&#x27;</span>, <span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>logging模块</li>
</ol>
<ul>
<li>函数式简单配置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.debug(<span class="string">&#x27;debug message&#x27;</span>)  </span><br><span class="line">logging.info(<span class="string">&#x27;info message&#x27;</span>)  </span><br><span class="line">logging.warning(<span class="string">&#x27;warning message&#x27;</span>)  </span><br><span class="line">logging.error(<span class="string">&#x27;error message&#x27;</span>)  </span><br><span class="line">logging.critical(<span class="string">&#x27;critical message&#x27;</span>) </span><br></pre></td></tr></table></figure>
默认情况下Python的logging模块将日志打印到了标准输出中，且只显示了大于等于WARNING级别的日志，这说明默认的日志级别设置为WARNING（日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG），默认的日志格式为日志级别：Logger名称：用户输出消息。</li>
</ul>
<p><strong>灵活配置日志级别，日志格式，输出位置:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">file_handler = logging.FileHandler(filename=<span class="string">&#x27;x1.log&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>,)</span><br><span class="line">logging.basicConfig(</span><br><span class="line">    format=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line">    handlers=[file_handler,],</span><br><span class="line">    level=logging.ERROR</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logging.error(<span class="string">&#x27;你好&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>日志切割</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> handlers</span><br><span class="line"></span><br><span class="line">sh = logging.StreamHandler()</span><br><span class="line">rh = handlers.RotatingFileHandler(<span class="string">&#x27;myapp.log&#x27;</span>, maxBytes=<span class="number">1024</span>,backupCount=<span class="number">5</span>)</span><br><span class="line">fh = handlers.TimedRotatingFileHandler(filename=<span class="string">&#x27;x2.log&#x27;</span>, when=<span class="string">&#x27;s&#x27;</span>, interval=<span class="number">5</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">logging.basicConfig(</span><br><span class="line">    format=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line">    handlers=[fh,sh,rh],</span><br><span class="line">    level=logging.ERROR</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100000</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    logging.error(<span class="string">&#x27;KeyboardInterrupt error %s&#x27;</span>%str(i))</span><br></pre></td></tr></table></figure>

<p>配置参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logging.basicConfig()函数中可通过具体参数来更改logging模块默认行为，可用参数有：</span><br><span class="line"></span><br><span class="line">filename：用指定的文件名创建FiledHandler，这样日志会被存储在指定的文件中。</span><br><span class="line">filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。</span><br><span class="line">format：指定handler使用的日志显示格式。</span><br><span class="line">datefmt：指定日期时间格式。</span><br><span class="line">level：设置rootlogger（后边会讲解具体概念）的日志级别</span><br><span class="line">stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件(f&#x3D;open(‘test.log’,’w’))，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。</span><br><span class="line"></span><br><span class="line">format参数中可能用到的格式化串：</span><br><span class="line">%(name)s Logger的名字</span><br><span class="line">%(levelno)s 数字形式的日志级别</span><br><span class="line">%(levelname)s 文本形式的日志级别</span><br><span class="line">%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</span><br><span class="line">%(filename)s 调用日志输出函数的模块的文件名</span><br><span class="line">%(module)s 调用日志输出函数的模块名</span><br><span class="line">%(funcName)s 调用日志输出函数的函数名</span><br><span class="line">%(lineno)d 调用日志输出函数的语句所在的代码行</span><br><span class="line">%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</span><br><span class="line">%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</span><br><span class="line">%(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</span><br><span class="line">%(thread)d 线程ID。可能没有</span><br><span class="line">%(threadName)s 线程名。可能没有</span><br><span class="line">%(process)d 进程ID。可能没有</span><br><span class="line">%(message)s用户输出的消息</span><br></pre></td></tr></table></figure>
<ul>
<li>logger对象配置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line"><span class="comment"># 创建一个handler，用于写入日志文件</span></span><br><span class="line">fh = logging.FileHandler(<span class="string">&#x27;test.log&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 再创建一个handler，用于输出到控制台 ch = logging.StreamHandler() formatter = logging.Formatter(&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;)</span></span><br><span class="line">fh.setLevel(logging.DEBUG)fh.setFormatter(formatter) ch.setFormatter(formatter) </span><br><span class="line">logger.addHandler(fh) <span class="comment">#logger对象可以添加多个fh和ch对象 logger.addHandler(ch) logger.debug(&#x27;logger debug message&#x27;) logger.info(&#x27;logger info message&#x27;) logger.warning(&#x27;logger warning message&#x27;) logger.error(&#x27;logger error message&#x27;) logger.critical(&#x27;logger critical message&#x27;)</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>logging库提供了多个组件：Logger、Handler、Filter、Formatter。Logger对象提供应用程序可直接使用的接口，Handler发送日志到适当的目的地，Filter提供了过滤日志信息的方法，Formatter指定日志显示格式。另外，可以通过：logger.setLevel(logging.Debug)设置级别,当然，也可以通过</p>
<p>fh.setLevel(logging.Debug)单对文件流设置某个级别。</p>
<h5 id="日志模块直奔主题版"><a href="#日志模块直奔主题版" class="headerlink" title="日志模块直奔主题版"></a>日志模块直奔主题版</h5><p>1、日志级别与配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一：日志配置</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    <span class="comment"># 1、日志输出位置：1、终端 2、文件</span></span><br><span class="line">    <span class="comment"># filename=&#x27;access.log&#x27;, # 不指定，默认打印到终端</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、日志格式</span></span><br><span class="line">    format=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、时间格式</span></span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4、日志级别</span></span><br><span class="line">    <span class="comment"># critical =&gt; 50</span></span><br><span class="line">    <span class="comment"># error =&gt; 40</span></span><br><span class="line">    <span class="comment"># warning =&gt; 30</span></span><br><span class="line">    <span class="comment"># info =&gt; 20</span></span><br><span class="line">    <span class="comment"># debug =&gt; 10</span></span><br><span class="line">    level=<span class="number">30</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二：输出日志</span></span><br><span class="line">logging.debug(<span class="string">&#x27;调试debug&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;消息info&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;警告warn&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;错误error&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;严重critical&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 注意下面的root是默认的日志名字</span></span><br><span class="line"><span class="string">WARNING:root:警告warn</span></span><br><span class="line"><span class="string">ERROR:root:错误error</span></span><br><span class="line"><span class="string">CRITICAL:root:严重critical</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>生产配置<br>2、日志配置字典<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">logging配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、定义三种日志输出格式，日志中可能用到的格式化串如下</span></span><br><span class="line"><span class="comment"># %(name)s Logger的名字</span></span><br><span class="line"><span class="comment"># %(levelno)s 数字形式的日志级别</span></span><br><span class="line"><span class="comment"># %(levelname)s 文本形式的日志级别</span></span><br><span class="line"><span class="comment"># %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</span></span><br><span class="line"><span class="comment"># %(filename)s 调用日志输出函数的模块的文件名</span></span><br><span class="line"><span class="comment"># %(module)s 调用日志输出函数的模块名</span></span><br><span class="line"><span class="comment"># %(funcName)s 调用日志输出函数的函数名</span></span><br><span class="line"><span class="comment"># %(lineno)d 调用日志输出函数的语句所在的代码行</span></span><br><span class="line"><span class="comment"># %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</span></span><br><span class="line"><span class="comment"># %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</span></span><br><span class="line"><span class="comment"># %(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</span></span><br><span class="line"><span class="comment"># %(thread)d 线程ID。可能没有</span></span><br><span class="line"><span class="comment"># %(threadName)s 线程名。可能没有</span></span><br><span class="line"><span class="comment"># %(process)d 进程ID。可能没有</span></span><br><span class="line"><span class="comment"># %(message)s用户输出的消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、强调：其中的%(name)s为getlogger时指定的名字</span></span><br><span class="line">standard_format = <span class="string">&#x27;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&#x27;</span> \</span><br><span class="line">                  <span class="string">&#x27;[%(levelname)s][%(message)s]&#x27;</span></span><br><span class="line"></span><br><span class="line">simple_format = <span class="string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line">test_format = <span class="string">&#x27;%(asctime)s] %(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、日志配置字典</span></span><br><span class="line">LOGGING_DIC = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;standard&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: standard_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: simple_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: test_format</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#打印到终端的日志</span></span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,  <span class="comment"># 打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">#打印到文件的日志,收集info及以上的日志</span></span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件,日志轮转</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">            <span class="comment"># 可以定制日志文件路径</span></span><br><span class="line">            <span class="comment"># BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # log文件的目录</span></span><br><span class="line">            <span class="comment"># LOG_PATH = os.path.join(BASE_DIR,&#x27;a1.log&#x27;)</span></span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;a1.log&#x27;</span>,  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,  <span class="comment"># 日志文件的编码，再也不用担心中文log乱码了</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;other&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.FileHandler&#x27;</span>,  <span class="comment"># 保存到文件</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;a2.log&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#logging.getLogger(__name__)拿到的logger配置</span></span><br><span class="line">        <span class="string">&#x27;&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;console&#x27;</span>],  <span class="comment"># 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>, <span class="comment"># loggers(第一层日志级别关限制)---&gt;handlers(第二层日志级别关卡限制)</span></span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,  <span class="comment"># 默认为True，向上（更高level的logger）传递，通常设置为False即可，否则会一份日志向上层层传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;专门的采集&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;other&#x27;</span>,],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">日志配置字典LOGGING_DIC</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3、使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># !!!强调!!!</span></span><br><span class="line"><span class="comment"># 1、logging是一个包，需要使用其下的config、getLogger，可以如下导入</span></span><br><span class="line"><span class="comment"># from logging import config</span></span><br><span class="line"><span class="comment"># from logging import getLogger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、也可以使用如下导入</span></span><br><span class="line"><span class="keyword">import</span> logging.config <span class="comment"># 这样连同logging.getLogger都一起导入了,然后使用前缀logging.config.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、加载配置</span></span><br><span class="line">logging.config.dictConfig(settings.LOGGING_DIC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、输出日志</span></span><br><span class="line">logger1=logging.getLogger(<span class="string">&#x27;用户交易&#x27;</span>)</span><br><span class="line">logger1.info(<span class="string">&#x27;egon儿子alex转账3亿冥币&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># logger2=logging.getLogger(&#x27;专门的采集&#x27;) # 名字传入的必须是&#x27;专门的采集&#x27;，与LOGGING_DIC中的配置唯一对应</span></span><br><span class="line"><span class="comment"># logger2.debug(&#x27;专门采集的日志&#x27;)</span></span><br><span class="line"></span><br><span class="line">common.py</span><br></pre></td></tr></table></figure>

<p>解释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># formatters 多个日志格式，想用哪一个，直接去取</span><br><span class="line"># handlers 是日志的接收者，不同的handler控制日志输出到不同的位置.console，log</span><br><span class="line"># loggers  日志生产者，产生的日志将会传递给handler然后控制输出</span><br><span class="line"></span><br><span class="line"># 注意：loggers(第一层日志级别关限制)---&gt;handlers(第二层日志级别关卡限制)；loggers 和 handler 通常设置成一样就可以了。</span><br><span class="line"># 如果需要配置多个应用打到一个日志，为了避免重复配置，可配置空key</span><br></pre></td></tr></table></figure>



<ol start="8">
<li>序列化模块<br>什么叫序列化——将原本的字典、列表等内容转换成一个字符串的过程就叫做序列化。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如，我们在python代码中计算的一个数据需要给另外一段程序使用，那我们怎么给？</span><br><span class="line">现在我们能想到的方法就是存在文件里，然后另一个python程序再从文件里读出来。</span><br><span class="line">但是我们都知道，对于文件来说是没有字典这个概念的，所以我们只能将数据转换成字典放到文件中。</span><br><span class="line">你一定会问，将字典转换成一个字符串很简单，就是str(dic)就可以办到了，为什么我们还要学习序列化模块呢？</span><br><span class="line">没错序列化的过程就是从dic 变成str(dic)的过程。现在你可以通过str(dic)，将一个名为dic的字典转换成一个字符串，</span><br><span class="line">但是你要怎么把一个字符串转换成字典呢？</span><br><span class="line">聪明的你肯定想到了eval()，如果我们将一个字符串类型的字典str_dic传给eval，就会得到一个返回的字典类型了。</span><br><span class="line">eval()函数十分强大，但是eval是做什么的？e官方demo解释为：将字符串str当成有效的表达式来求值并返回计算结果。</span><br><span class="line">ＢＵＴ！强大的函数有代价。安全性是其最大的缺点。</span><br><span class="line">想象一下，如果我们从文件中读出的不是一个数据结构，而是一句&quot;删除文件&quot;类似的破坏性语句，那么后果实在不堪设设想。</span><br><span class="line">而使用eval就要担这个风险。</span><br><span class="line">所以，我们并不推荐用eval方法来进行反序列化操作(将str转换成python中的数据结构)</span><br><span class="line"></span><br><span class="line">为什么要有序列化模块</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>序列化的目的<br>1、以某种存储形式使自定义对象持久化；<br>2、将对象从一个地方传递到另一个地方。<br>3、使程序更具维护性。</li>
</ul>
<img src="/2020/08/29/py-day04/%E5%BA%8F%E5%88%97%E5%8C%96.png" class title="py-day04">

<ul>
<li><strong>json</strong><blockquote>
<p><strong>注意，json转换完的字符串类型的字典中的字符串是由””表示的</strong></p>
</blockquote>
</li>
</ul>
<img src="/2020/08/29/py-day04/json.png" class title="py-day04">

<p>Json模块提供了四个功能：dumps、dump、loads、load</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>&#125;</span><br><span class="line">str_dic = json.dumps(dic)  <span class="comment">#序列化：将一个字典转换成一个字符串</span></span><br><span class="line">print(type(str_dic),str_dic)  <span class="comment">#&lt;class &#x27;str&#x27;&gt; &#123;&quot;k3&quot;: &quot;v3&quot;, &quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;&#125;</span></span><br><span class="line"><span class="comment">#注意，json转换完的字符串类型的字典中的字符串是由&quot;&quot;表示的</span></span><br><span class="line"></span><br><span class="line">dic2 = json.loads(str_dic)  <span class="comment">#反序列化：将一个字符串格式的字典转换成一个字典</span></span><br><span class="line"><span class="comment">#注意，要用json的loads功能处理的字符串类型的字典中的字符串必须由&quot;&quot;表示</span></span><br><span class="line">print(type(dic2),dic2)  <span class="comment">#&lt;class &#x27;dict&#x27;&gt; &#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;, &#x27;k3&#x27;: &#x27;v3&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_dic = [<span class="number">1</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],<span class="number">3</span>,&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>&#125;]</span><br><span class="line">str_dic = json.dumps(list_dic) <span class="comment">#也可以处理嵌套的数据类型 </span></span><br><span class="line">print(type(str_dic),str_dic) <span class="comment">#&lt;class &#x27;str&#x27;&gt; [1, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], 3, &#123;&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;&#125;]</span></span><br><span class="line">list_dic2 = json.loads(str_dic)</span><br><span class="line">print(type(list_dic2),list_dic2) <span class="comment">#&lt;class &#x27;list&#x27;&gt; [1, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 3, &#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line">loads和dumps</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">&#x27;json_file&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>&#125;</span><br><span class="line">json.dump(dic,f)  <span class="comment">#dump方法接收一个文件句柄，直接将字典转换成json字符串写入文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&#x27;json_file&#x27;</span>)</span><br><span class="line">dic2 = json.load(f)  <span class="comment">#load方法接收一个文件句柄，直接将文件中的json字符串转换成数据结构返回</span></span><br><span class="line">f.close()</span><br><span class="line">print(type(dic2),dic2)</span><br><span class="line"></span><br><span class="line">load和dump</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">json.dump(&#123;<span class="string">&#x27;国籍&#x27;</span>:<span class="string">&#x27;中国&#x27;</span>&#125;,f)</span><br><span class="line">ret = json.dumps(&#123;<span class="string">&#x27;国籍&#x27;</span>:<span class="string">&#x27;中国&#x27;</span>&#125;)</span><br><span class="line">f.write(ret+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">json.dump(&#123;<span class="string">&#x27;国籍&#x27;</span>:<span class="string">&#x27;美国&#x27;</span>&#125;,f,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">ret = json.dumps(&#123;<span class="string">&#x27;国籍&#x27;</span>:<span class="string">&#x27;美国&#x27;</span>&#125;,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">f.write(ret+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">ensure_ascii关键字参数</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Serialize obj to a JSON formatted str.(字符串表示的json对象) </span><br><span class="line">Skipkeys：默认值是<span class="literal">False</span>，如果dict的keys内的数据不是python的基本类型(str,unicode,int,long,float,bool,<span class="literal">None</span>)，设置为<span class="literal">False</span>时，就会报TypeError的错误。此时设置成<span class="literal">True</span>，则会跳过这类key </span><br><span class="line">ensure_ascii:，当它为<span class="literal">True</span>的时候，所有非ASCII码字符显示为\uXXXX序列，只需在dump时将ensure_ascii设置为<span class="literal">False</span>即可，此时存入json的中文即可正常显示。) </span><br><span class="line">If check_circular <span class="keyword">is</span> false, then the circular reference check <span class="keyword">for</span> container types will be skipped <span class="keyword">and</span> a circular reference will result <span class="keyword">in</span> an OverflowError (<span class="keyword">or</span> worse). </span><br><span class="line">If allow_nan <span class="keyword">is</span> false, then it will be a ValueError to serialize out of range float values (nan, inf, -inf) <span class="keyword">in</span> strict compliance of the JSON specification, instead of using the JavaScript equivalents (NaN, Infinity, -Infinity). </span><br><span class="line">indent：应该是一个非负的整型，如果是<span class="number">0</span>就是顶格分行显示，如果为空就是一行最紧凑显示，否则会换行且按照indent的数值显示前面的空白分行显示，这样打印出来的json数据也叫pretty-printed json </span><br><span class="line">separators：分隔符，实际上是(item_separator, dict_separator)的一个元组，默认的就是(‘,’,’:’)；这表示dictionary内keys之间用“,”隔开，而KEY和value之间用“：”隔开。 </span><br><span class="line">default(obj) <span class="keyword">is</span> a function that should <span class="keyword">return</span> a serializable version of obj <span class="keyword">or</span> <span class="keyword">raise</span> TypeError. The default simply raises TypeError. </span><br><span class="line">sort_keys：将数据根据keys的值进行排序。 </span><br><span class="line">To use a custom JSONEncoder subclass (e.g. one that overrides the .default() method to serialize additional types), specify it <span class="keyword">with</span> the cls kwarg; otherwise JSONEncoder <span class="keyword">is</span> used.</span><br><span class="line"></span><br><span class="line">其他参数说明</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;<span class="string">&#x27;username&#x27;</span>:[<span class="string">&#x27;李华&#x27;</span>,<span class="string">&#x27;二愣子&#x27;</span>],<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">16</span>&#125;</span><br><span class="line">json_dic2 = json.dumps(data,sort_keys=<span class="literal">True</span>,indent=<span class="number">2</span>,separators=(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;:&#x27;</span>),ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(json_dic2)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>pickle</strong><br>json &amp; pickle 模块<br>用于序列化的两个模块<br>json，用于字符串 和 python数据类型间进行转换<br>pickle，用于python特有的类型 和 python的数据类型间进行转换<br>pickle模块提供了四个功能：dumps、dump(序列化，存）、loads（反序列化，读）、load  （不仅可以序列化字典，列表…<strong>可以把python中任意的数据类型序列化</strong>）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>&#125;</span><br><span class="line">str_dic = pickle.dumps(dic)</span><br><span class="line">print(str_dic)  <span class="comment">#一串二进制内容</span></span><br><span class="line"></span><br><span class="line">dic2 = pickle.loads(str_dic)</span><br><span class="line">print(dic2)    <span class="comment">#字典</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">struct_time  = time.localtime(<span class="number">1000000000</span>)</span><br><span class="line">print(struct_time)</span><br><span class="line">f = open(<span class="string">&#x27;pickle_file&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pickle.dump(struct_time,f)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&#x27;pickle_file&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">struct_time2 = pickle.load(f)</span><br><span class="line">print(struct_time2.tm_year)</span><br><span class="line"></span><br><span class="line">pickle</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这时候机智的你又要说了，既然pickle如此强大，为什么还要学json呢？<br>这里我们要说明一下，json是一种所有的语言都可以识别的数据结构。<br>如果我们将一个字典或者序列化成了一个json存在文件里，那么java代码或者js代码也可以拿来用。<br>但是如果我们用pickle进行序列化，其他语言就不能读懂这是什么了～<br>所以，如果你序列化的内容是列表或者字典，我们非常推荐你使用json模块<br>但如果出于某种原因你不得不序列化其他的数据类型，而未来你还会用python对这个数据进行反序列化的话，那么就可以使用pickle</p>
<ol start="9">
<li>shutil模块<br>高级的 文件、文件夹、压缩包 处理模块<br>shutil.copyfileobj(fsrc, fdst[, length])<br>将文件内容拷贝到另一个文件中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.copyfileobj(open(&#39;old.xml&#39;,&#39;r&#39;), open(&#39;new.xml&#39;, &#39;w&#39;))</span><br></pre></td></tr></table></figure>
shutil.copyfile(src, dst)<br>拷贝文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shutil.copyfile(&#39;f1.log&#39;, &#39;f2.log&#39;) #目标文件无需存在</span><br></pre></td></tr></table></figure>
shutil.copymode(src, dst)<br>仅拷贝权限。内容、组、用户均不变<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shutil.copymode(&#39;f1.log&#39;, &#39;f2.log&#39;) #目标文件必须存在</span><br></pre></td></tr></table></figure>
shutil.copystat(src, dst)<br>仅拷贝状态的信息，包括：mode bits, atime, mtime, flags<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shutil.copystat(&#39;f1.log&#39;, &#39;f2.log&#39;) #目标文件必须存在</span><br></pre></td></tr></table></figure>
shutil.copy(src, dst)<br>拷贝文件和权限<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.copy(&#39;f1.log&#39;, &#39;f2.log&#39;)</span><br></pre></td></tr></table></figure>
shutil.copy2(src, dst)<br>拷贝文件和状态信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.copy2(&#39;f1.log&#39;, &#39;f2.log&#39;)</span><br></pre></td></tr></table></figure>
shutil.ignore_patterns(*patterns)<br>shutil.copytree(src, dst, symlinks=False, ignore=None)<br>递归的去拷贝文件夹<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.copytree(&#39;folder1&#39;, &#39;folder2&#39;, ignore&#x3D;shutil.ignore_patterns(&#39;*.pyc&#39;, &#39;tmp*&#39;)) #目标目录不能存在，注意对folder2目录父级目录要有可写权限，ignore的意思是排除 </span><br></pre></td></tr></table></figure>
拷贝软连接<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">shutil.copytree(&#39;f1&#39;, &#39;f2&#39;, symlinks&#x3D;True, ignore&#x3D;shutil.ignore_patterns(&#39;*.pyc&#39;, &#39;tmp*&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">通常的拷贝都把软连接拷贝成硬链接，即对待软连接来说，创建新的文件</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">拷贝软连接</span><br></pre></td></tr></table></figure>
shutil.rmtree(path[, ignore_errors[, onerror]])<br>递归的去删除文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.rmtree(&#39;folder1&#39;)</span><br></pre></td></tr></table></figure>
<p>shutil.move(src, dst)<br>递归的去移动文件，它类似mv命令，其实就是重命名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.move(&#39;folder1&#39;, &#39;folder3&#39;)</span><br></pre></td></tr></table></figure>
<p>shutil.make_archive(base_name, format,…)<br>创建压缩包并返回文件路径，例如：zip、tar<br>创建压缩包并返回文件路径，例如：zip、tar<br>base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目录，否则保存至指定路径，<br>如 data_bak                       =&gt;保存至当前路径<br>如：/tmp/data_bak =&gt;保存至/tmp/<br>format： 压缩包种类，“zip”, “tar”, “bztar”，“gztar”<br>root_dir： 要压缩的文件夹路径（默认当前目录）<br>owner： 用户，默认当前用户<br>group： 组，默认当前组<br>logger： 用于记录日志，通常是logging.Logger对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将 /data 下的文件打包放置当前程序目录</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">ret = shutil.make_archive(<span class="string">&quot;data_bak&quot;</span>, <span class="string">&#x27;gztar&#x27;</span>, root_dir=<span class="string">&#x27;/data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将 /data下的文件打包放置 /tmp/目录</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">ret = shutil.make_archive(<span class="string">&quot;/tmp/data_bak&quot;</span>, <span class="string">&#x27;gztar&#x27;</span>, root_dir=<span class="string">&#x27;/data&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的，详细：<br>zipfile压缩解压缩</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&#x27;laxi.zip&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">z.write(<span class="string">&#x27;a.log&#x27;</span>)</span><br><span class="line">z.write(<span class="string">&#x27;data.data&#x27;</span>)</span><br><span class="line">z.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&#x27;laxi.zip&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">z.extractall(path=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">z.close()</span><br><span class="line"></span><br><span class="line">zipfile压缩解压缩</span><br></pre></td></tr></table></figure>

<p>tarfile压缩解压缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tarfile</span><br><span class="line"></span><br><span class="line"># 压缩</span><br><span class="line">&gt;&gt;&gt; t&#x3D;tarfile.open(&#39;&#x2F;tmp&#x2F;egon.tar&#39;,&#39;w&#39;)</span><br><span class="line">&gt;&gt;&gt; t.add(&#39;&#x2F;test1&#x2F;a.py&#39;,arcname&#x3D;&#39;a.bak&#39;)</span><br><span class="line">&gt;&gt;&gt; t.add(&#39;&#x2F;test1&#x2F;b.py&#39;,arcname&#x3D;&#39;b.bak&#39;)</span><br><span class="line">&gt;&gt;&gt; t.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">&gt;&gt;&gt; t&#x3D;tarfile.open(&#39;&#x2F;tmp&#x2F;egon.tar&#39;,&#39;r&#39;)</span><br><span class="line">&gt;&gt;&gt; t.extractall(&#39;&#x2F;egon&#39;)</span><br><span class="line">&gt;&gt;&gt; t.close()</span><br><span class="line"></span><br><span class="line">tarfile压缩解压缩</span><br></pre></td></tr></table></figure>



<ol start="10">
<li>re模块<img src="/2020/08/29/py-day04/%E6%AD%A3%E5%88%99.png" class title="py-day04">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># res = re.findall(&#x27;\w&#x27;,&#x27;hello wo_r++ld 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;_&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\W&#x27;,&#x27;hello wo_r++ld 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27; &#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\W&#x27;,&#x27;hello wo_r++ld 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27; &#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\s&#x27;,&#x27;hello world 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27; &#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\S&#x27;,&#x27;hello world 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\d&#x27;,&#x27;hello world 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\D&#x27;,&#x27;hello world 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27; &#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\Aalex&#x27;, &#x27; alexis sb&#x27;)   # 只能开头匹配</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\Aalex&#x27;, &#x27;alexis sb&#x27;)   # 只能开头匹配</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;alex&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;sb\Z&#x27;, &#x27;alexis sb &#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;sb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;sb$&#x27;, &#x27;alexis alex sb&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;sb&#x27;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;^alex&#x27;, &#x27;alexis alex sb&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;alex&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;^alex$&#x27;, &#x27;alexis alex sb&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;^h&#x27;,&#x27;hello egon 123&#x27;))</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;3$&#x27;,&#x27;hello egon 123&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####重复普匹配</span></span><br><span class="line"><span class="comment"># 1.: 代表匹配一个字符，该字符可以是除了换行符\n之外的任意字符</span></span><br><span class="line"><span class="comment"># print(re.findall(&quot;a.c&quot;,&quot;alc a+c abc aAc a c aaaaaac a\nc a\tc&quot;))</span></span><br><span class="line"><span class="comment"># # [&#x27;alc&#x27;, &#x27;a+c&#x27;, &#x27;abc&#x27;, &#x27;aAc&#x27;, &#x27;a c&#x27;, &#x27;aac&#x27;, &#x27;a\tc&#x27;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(re.findall(&quot;a.c&quot;,&quot;alc a+c abc aAc a c aaaaaac a\nc a\tc&quot;,re.DOTALL))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.*：左侧字符重复次数0次或无穷次，性格贪婪</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;ab*&#x27;,&#x27;a ab abb abbbbbbbb bbbbbbbbbb&#x27;))</span></span><br><span class="line"><span class="comment"># [&#x27;a&#x27;, &#x27;ab&#x27;, &#x27;abb&#x27;, &#x27;abbbbbbbb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. +:左侧字符重复1次或者无穷次，性格贪婪</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;ab+&#x27;,&#x27;a ab abb abbbbbbbb bbbbbbbbbb&#x27;))</span></span><br><span class="line"><span class="comment"># [&#x27;ab&#x27;, &#x27;abb&#x27;, &#x27;abbbbbbbb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.左侧字符0粗或1次，性格贪婪</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;ab?&#x27;,&#x27;a ab abb abbbbbbbb bbbbbbbbbb&#x27;))</span></span><br><span class="line"><span class="comment"># [&#x27;a&#x27;, &#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;ab&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.&#123;n,m&#125; 左侧字符重复n次到m次，性格贪婪</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;ab&#123;2,5&#125;&#x27;,&#x27;a ab abb abbbbbbbb bbbbbbbbbb&#x27;))</span></span><br><span class="line"><span class="comment"># [&#x27;abb&#x27;, &#x27;abbbbb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;\d+\.?\d*&#x27;,&#x27;asdasdasassad123asd1111.13dsf12dfgf1asdffgd3&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># []指定匹配字符的一个</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;a\db&#x27;,&#x27;a1b a3b  a4b a5b a b a\nb&#x27;))</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;a[0-5]b&#x27;,&#x27;a1b a3b  a4b a5b a b a\nb&#x27;))</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;a[0-9a-zA-Z]b&#x27;,&#x27;a1b a3b  a4b a5b azb a b a\nb&#x27;))</span></span><br><span class="line"><span class="comment"># 取反</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;a[^0-9a-zA-Z]b&#x27;,&#x27;a1b a3b  a4b a5b azb a b a\nb&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;a[-0-9]b&#x27;,&#x27;a-b a1b a3b  a4b a5b azb a b a\nb&#x27;))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="11">
<li>hashlib模块</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1、什么叫hash:hash是一种算法（3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法），该算法接受传入的内容，经过运算得到一串hash值</span><br><span class="line"># 2、hash值的特点是：</span><br><span class="line">#2.1 只要传入的内容一样，得到的hash值必然一样&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;要用明文传输密码文件完整性校验</span><br><span class="line">#2.2 不能由hash值返解成内容&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》把密码做成hash值，不应该在网络传输明文密码</span><br><span class="line">#2.3 只要使用的hash算法不变，无论校验的内容有多大，得到的hash值长度是固定的</span><br></pre></td></tr></table></figure>


<p>hashlib 加密的必须是bytes类型<br>1.常用方法<br>m = hashlib.md5()<br>m.update(‘hello’.encode(‘utf-8’))<br>res = m.hexdigest()</p>
<p>2.也可以直接初始就传值<br>m1 = hashlib.md5(‘he’.encode(‘utf-8’))<br>m1.update(‘llo’.encode(‘utf-8’))</p>
<ul>
<li><p>字符串加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m.update(<span class="string">&#x27;world&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">res = m.hexdigest()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">m1 = hashlib.md5(<span class="string">&#x27;he&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;llo&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;wor&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;ld&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">res = m1.hexdigest()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件校验（seek随机位置，读取2000个字符）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m2 = hashlib.md5()</span><br><span class="line">f = open(<span class="string">&#x27;a2.log&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f.seek(<span class="number">5</span>)</span><br><span class="line">f.read(<span class="number">20</span>)</span><br><span class="line">m2.update(f.read(<span class="number">20</span>))</span><br><span class="line">res4 = m2.hexdigest()</span><br><span class="line">print(res4)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>密码加盐</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">pwd</span>):</span></span><br><span class="line">    <span class="comment"># 实例化对象</span></span><br><span class="line">    obj = hashlib.md5(SALT)</span><br><span class="line">    <span class="comment"># 写入要加密的字节</span></span><br><span class="line">    obj.update(pwd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment"># 获取密文</span></span><br><span class="line">    <span class="keyword">return</span> obj.hexdigest()</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ol start="12">
<li>subprocess模块</li>
</ol>
<ul>
<li>执行系统命令的模块<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  subprocess</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sh-3.2# ls /Users/egon/Desktop |grep txt$</span></span><br><span class="line"><span class="string">mysql.txt</span></span><br><span class="line"><span class="string">tt.txt</span></span><br><span class="line"><span class="string">事物.txt</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">res1=subprocess.Popen(<span class="string">&#x27;ls /Users/jieli/Desktop&#x27;</span>,shell=<span class="literal">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">res=subprocess.Popen(<span class="string">&#x27;grep txt$&#x27;</span>,shell=<span class="literal">True</span>,stdin=res1.stdout,</span><br><span class="line">                 stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">print(res.stdout.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#等同于上面,但是上面的优势在于,一个数据流可以和另外一个数据流交互,可以通过爬虫得到结果然后交给grep</span></span><br><span class="line">res1=subprocess.Popen(<span class="string">&#x27;ls /Users/jieli/Desktop |grep txt$&#x27;</span>,shell=<span class="literal">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">print(res1.stdout.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#windows下:</span></span><br><span class="line"><span class="comment"># dir | findstr &#x27;test*&#x27;</span></span><br><span class="line"><span class="comment"># dir | findstr &#x27;txt$&#x27;</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">res1=subprocess.Popen(<span class="string">r&#x27;dir C:\Users\Administrator\PycharmProjects\test\函数备课&#x27;</span>,shell=<span class="literal">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">res=subprocess.Popen(<span class="string">&#x27;findstr test*&#x27;</span>,shell=<span class="literal">True</span>,stdin=res1.stdout,</span><br><span class="line">                 stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">print(res.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)) <span class="comment">#subprocess使用当前系统默认编码，得到结果为bytes类型，在windows下需要用gbk解码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>1.第三方模块  requests， pymysql， jenkins，gitlab</p>
<p>pip工具，下载安装第三方模块。和yum类似</p>
<p>pip工具安装的包一定是和python的解释器相对应的</p>
<blockquote>
<p>pip3 install 安装的包<br>pip3 uninstall 安装的包<br>pip3 list<br>换源：</p>
</blockquote>
<p>临时换源：</p>
<blockquote>
<p>pip install 包名 -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
</blockquote>
<p>永久性换源<br>修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>2.requests模块</p>
<blockquote>
<p>爬虫中非常重要的一个模块<br>通过这个模块可以发起http请求，get， post， put， delete方法</p>
</blockquote>
<p>3.pymysql模块</p>
<blockquote>
<p>pip3 install  pymysql</p>
</blockquote>
<p>总结: sql语句的写法是不变。需要关注操作的函数即可。execute</p>
<p>4.redis模块</p>
<blockquote>
<p><a href="https://www.cnblogs.com/john-xiong/p/12089103.html">https://www.cnblogs.com/john-xiong/p/12089103.html</a></p>
</blockquote>
<p>5.gitlab模块</p>
<p>生成token： settings ===&gt; accesstoken ===&gt; create 生成</p>
<blockquote>
<p><a href="https://pypi.org/project/python-gitlab/">https://pypi.org/project/python-gitlab/</a></p>
</blockquote>
<ul>
<li>ATM作业</li>
<li>python操作 docker， k8s， saltstack， ansible</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day05</title>
    <url>/2020/09/06/py-day05/</url>
    <content><![CDATA[<p>python基础<br>class(封装、多态、继承)</p>
<a id="more"></a>


<p>1.第三方模块  requests， pymysql， jenkins，gitlab</p>
<p>pip工具，下载安装第三方模块。和yum类似</p>
<p>pip工具安装的包一定是和python的解释器相对应的</p>
<blockquote>
<p>pip3 install 安装的包<br>pip3 uninstall 安装的包<br>pip3 list<br>换源：</p>
</blockquote>
<ul>
<li>临时换源：</li>
</ul>
<blockquote>
<p>pip install 包名 -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
</blockquote>
<ul>
<li>永久性换源<br>修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>2.requests模块</p>
<blockquote>
<p>pip3 install requests</p>
</blockquote>
<blockquote>
<p>linux curl<br>爬虫中非常重要的一个模块<br>通过这个模块可以发起http请求，get， post， put， delete方法</p>
</blockquote>
<blockquote>
<p>后续，请求第三放的api获取数据的时候，都是要用到的</p>
</blockquote>
<p>3.pymysql模块<br>如果以后有些老的项目，使用python2.7写的，使用python操作mysql的模块是：MySQL-Python</p>
<p>在python3中的使用方法：</p>
<blockquote>
<p>pip3 install  pymysql</p>
</blockquote>
<p>总结: sql语句的写法是不变。需要关注操作的函数即可。execute</p>
<p>4.redis模块</p>
<blockquote>
<p><a href="https://www.cnblogs.com/john-xiong/p/12089103.html">https://www.cnblogs.com/john-xiong/p/12089103.html</a></p>
</blockquote>
<p>5.gitlab模块</p>
<p>生成token： settings ===&gt; accesstoken ===&gt; create 生成</p>
<blockquote>
<p><a href="https://pypi.org/project/python-gitlab/">https://pypi.org/project/python-gitlab/</a></p>
</blockquote>
<ul>
<li>操作docker</li>
<li>操作paramiko  堡垒机、ansible、saltstack</li>
</ul>
<blockquote>
<p>总结：python之所以强大，是因为他有很强大的第三方模块。以后我们在使用python解决问题的时候，我们可以首先先考虑一下有没有现成的第三方的模块(轮子)，有的话直接拿来用就好了。找第三方模块的方法：首先考虑到github找。</p>
</blockquote>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="1-面向对象编程的学习"><a href="#1-面向对象编程的学习" class="headerlink" title="1.面向对象编程的学习"></a>1.面向对象编程的学习</h4><ul>
<li>面向过程编程思想<ul>
<li>在我们学习函数之前，写的所有的程序代码，都是面向过程式的编程</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    total += <span class="number">1</span></span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure>

<ul>
<li>面向过程编程有点像高中的时候解题：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">答：第一步：</span><br><span class="line">   第二步：</span><br><span class="line">   第三步：</span><br></pre></td></tr></table></figure>

<ul>
<li>面向函数编程思想</li>
</ul>
<blockquote>
<p>学完函数之后，我们写的代码，发生了一些改变。我们会把一些功能相同的代码写到一个函数中去，而后，那块需要用到这个功能，我们直接调用这个函数即可</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;鉴权逻辑&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;登录逻辑&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>减少代码的冗余</li>
<li>增加了代码的灵活度</li>
</ul>
<blockquote>
<p>shell编程中，是没有面向对象的思想的。shell编程是面向函数式的编程。处理一些简单的任务，所以面向函数编程，已经足够满足我们的日常需求了。但是如果写一些大的项目话，shell就力不从心了。因此，引入了面向对象的编程，来满足大型项目的开发需要    </p>
</blockquote>
<blockquote>
<p>面向函数式编程和面向对象编程，是没有好坏之分的，需要看你的应用场景来决定。面向对象编程他的封装性和扩展性比其他的编程思想要好很多。</p>
</blockquote>
<h4 id="2-面向对象的概念"><a href="#2-面向对象的概念" class="headerlink" title="2.面向对象的概念"></a>2.面向对象的概念</h4><p><strong>什么是类?什么又是对象?</strong></p>
<blockquote>
<p>类：类也是容器，该容器用来存放<strong>同类对象共有的数据与功能</strong>。</p>
</blockquote>
<blockquote>
<p>对象：就是类的具体表现形式, 对象是”容器”，用来盛放<strong>数据与功能</strong>的；终极奥义是将程序”整合” –&gt; 程序=数据+功能</p>
</blockquote>
<p><strong>所谓的类，就是一个模板，对象就是模板的具体生产出来的实例</strong></p>
<ul>
<li>面向对象中类和对象的基本使用</li>
</ul>
<blockquote>
<p>现在基本上所有的高级语言(c++, java, php, python,C#)中，都有面向对象的</p>
</blockquote>
<h5 id="3-从类的角度研究基本使用方法"><a href="#3-从类的角度研究基本使用方法" class="headerlink" title="3.从类的角度研究基本使用方法"></a>3.从类的角度研究基本使用方法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    mind = <span class="string">&quot;有思想&quot;</span></span><br><span class="line">    leg = <span class="number">2</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;eating...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sleeping...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>‘’’<br>注意：<br>    1. class是定义类的关键字，Person是类名，建议大家首字母大写<br>    2. 冒号后面是这个类的具体内容<br>‘’’</p>
<blockquote>
<p>print(Person.<strong>dict</strong>) ### 获取类中所有的属性和方法<br>print(Person.<strong>dict</strong>.get(‘leg’)) ### 获取某一个属性的方式</p>
</blockquote>
<ul>
<li><strong>注意</strong>: 在类定义阶段就会立刻执行类体代码，会产生类的名称空间，用于将类体代码执行过程中产生的名字都存放与类的名称空间中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在类定义阶段就会立刻执行类体代码，会产生类的名称空间，用于将类体代码执行过程中产生的名字都存放与类的名称空间中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;Oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;is choosing course&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 定义执行后就会输出====&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-类与对象的使用"><a href="#4-类与对象的使用" class="headerlink" title="4.类与对象的使用"></a>4.类与对象的使用</h4><p>类有两种用途<br><strong>用途一：类本身就一个容器（名称空间），所以可以增删改查类的属性</strong></p>
<ul>
<li>属性访问的语法(.key的方式访问属性)</li>
</ul>
<ol>
<li>数据访问的属性</li>
<li>函数访问的属性<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(OldboyStudent.school) <span class="comment">#OldboyStudent.__dict__[&#x27;school&#x27;]</span></span><br><span class="line"><span class="comment"># print(OldboyStudent.xxx) #OldboyStudent.__dict__[&#x27;xxx&#x27;]</span></span><br><span class="line">print(OldboyStudent.choose_course)</span><br><span class="line">OldboyStudent.choose_course(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">print(OldboyStudent.school)</span><br><span class="line"><span class="comment"># print(OldboyStudent.xxxx)</span></span><br><span class="line"></span><br><span class="line">OldboyStudent.country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">OldboyStudent.school=<span class="string">&#x27;Oldgirl&#x27;</span></span><br><span class="line">print(OldboyStudent.__dict__)</span><br><span class="line"><span class="keyword">del</span> OldboyStudent.school</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">print(OldboyStudent.__dict__)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>用途二：调用类来产生对象，调用类的过程又称之为实例化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;Oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;is choosing course&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1=OldboyStudent()  <span class="comment"># stu1可称为一个对象，也可以称为一个实例</span></span><br><span class="line">stu2=OldboyStudent()  <span class="comment"># stu1可称为一个对象，也可以称为一个实例</span></span><br><span class="line">stu3=OldboyStudent()  <span class="comment"># stu1可称为一个对象，也可以称为一个实例</span></span><br></pre></td></tr></table></figure>

<h4 id="5-推荐大家使用如下方式"><a href="#5-推荐大家使用如下方式" class="headerlink" title="5.推荐大家使用如下方式"></a>5.推荐大家使用如下方式</h4><p><strong>使用类的方式来获取类中的属性和类的方法</strong><br><strong>直接使用 . 的方式来获取，万能的点</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    mind = <span class="string">&quot;有思想&quot;</span></span><br><span class="line">    leg = <span class="number">2</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;eating...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sleeping...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(Person.leg)</span><br><span class="line">Person.eat(<span class="number">123</span>)  <span class="comment">####</span></span><br><span class="line"></span><br><span class="line">Person.mind = <span class="string">&#x27;无脑&#x27;</span>  <span class="comment"># 改</span></span><br><span class="line">print(Person.mind)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> Person.mind  <span class="comment"># 删</span></span><br><span class="line">print(Person.mind)</span><br></pre></td></tr></table></figure>


<h5 id="6-初始化方法init"><a href="#6-初始化方法init" class="headerlink" title="6.初始化方法init"></a>6.初始化方法<strong>init</strong></h5><p>p1 = Person()  # Person.__init__(空对象,x,y,z)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    mind = <span class="string">&quot;有思想&quot;</span></span><br><span class="line">    leg = <span class="number">2</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### 当实例化一个对象的时候，会自动的触发该__init__函数</span></span><br><span class="line">    <span class="comment">### 此时self指代的就是当前实例化的对象，也就是 self = p1</span></span><br><span class="line">    <span class="comment">### init方法只能返回None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, height</span>):</span></span><br><span class="line">        <span class="comment"># print(self) ### &lt;__main__.Person object at 0x10ee29760&gt;</span></span><br><span class="line">        self.name = name <span class="comment">### p1.name = &#x27;wenliang&#x27;  p2.name = &#x27;nick&#x27;</span></span><br><span class="line">        self.age = age   <span class="comment">### p1.age = 73   p2.age = 84</span></span><br><span class="line">        self.height = height <span class="comment">### p1.height = 168 p2.height=178</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">### self = p1</span></span><br><span class="line">        print(<span class="string">&#x27;%s eating...&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sleeping...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p1 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># p2 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># p3 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># print(id(p1)) ### 产生对象的内存地址是不同的</span></span><br><span class="line"><span class="comment"># print(id(p2))</span></span><br><span class="line"><span class="comment"># print(id(p3))</span></span><br><span class="line"></span><br><span class="line">p1 = Person(name=<span class="string">&#x27;wenliang&#x27;</span>, age=<span class="number">73</span>, height=<span class="number">168</span>)</span><br><span class="line">p2 = Person(name=<span class="string">&#x27;nick&#x27;</span>, age=<span class="number">84</span>, height=<span class="number">170</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p1.__dict__)</span></span><br><span class="line"><span class="comment"># print(p2.__dict__)</span></span><br></pre></td></tr></table></figure>

<p><strong>对象操作属性</strong></p>
<ol>
<li>类的属性是共享给对象使用的，大家的访问地址都一样<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(p1.mind)</span><br><span class="line">print(p1.name)</span><br><span class="line">print(p2.mind)</span><br><span class="line">print(p2.name)</span><br></pre></td></tr></table></figure></li>
<li>类的函数属性是绑定给对象用的</li>
</ol>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>调用类产生对象，过程称之为实例化，发生了三件事<ul>
<li>1.产生一个空对象(调用new方法产生一个空对象)</li>
<li>2.python会自动调用类中的__init__方法,将空对象以及调用类时括号内传入的参数一同传给__init__方法</li>
<li>3.返回初始化完的对象</li>
</ul>
</li>
</ul>
<hr>
<h3 id="6-绑定方法"><a href="#6-绑定方法" class="headerlink" title="6.绑定方法"></a>6.绑定方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person.eat(1)</span><br><span class="line">p1.eat()  ### 会默认将当前的对象p1,传给方法中的self</span><br><span class="line">p2.eat()</span><br></pre></td></tr></table></figure>
<ol>
<li>类的属性是共享给对象使用的，大家的访问地址都一样</li>
<li>类的函数属性是绑定给对象用的；绑定方法的特殊之处在于：谁来调用绑定方法就会将谁当做第一个参数，自动传入</li>
<li>属性查找顺序：对象的名称空间里只存放着对象独有的属性，而对象们相似的属性是存放于类中的。对象在访问属性时，会优先从对象本身的__dict__中查找，未找到，则去类的__dict__中查找</li>
</ol>
<blockquote>
<p>总结：<br>1.后续项目中大部分都是使用对象来操作类中相关的属性和方法的<br>2.self 指代的就是当前的对象<br>3.<code>__init__()</code>初始化方法</p>
</blockquote>
<h3 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h3><ul>
<li>python 中一切皆对象；linux一切皆文件</li>
<li><strong>封装</strong><ul>
<li>封装的总共有两个特点：<br>1.将内容封装到某个地方，以后再去调用被封装在某处的内容。<br>2.一些私有的不想被外部访问的变量，也可以封装起来</li>
</ul>
</li>
<li>隐藏属性<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># I: 在类外部无法访问双下划线开头的属性，但知道了类名和属性名就可以拼出名字:_类名__属性就可以访问了，如Foo._A__N就可以访问了，所以说这种操作并没有严格意义上的限制外部访问；仅仅只是语法上的一种变形、</span></span><br><span class="line"><span class="comment"># II: 这种隐藏对外不对内，因为__开头的属性会在检查类内代码时统一发生变形。</span></span><br><span class="line"><span class="comment"># III: 这种变形操作只在检查类体语法的时候发生一次，之后定义的__开头的属性都不会变形</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>():</span></span><br><span class="line">    __x = <span class="number">1</span>     <span class="comment"># _Foo__x</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span>  <span class="comment"># _Foo__f1</span></span><br><span class="line">        print(<span class="string">&#x27;from test&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.__x)</span><br><span class="line">        print(self.__f1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj.f2()</span><br><span class="line">Foo.__y = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li><p>为什么要隐藏（数据，函数）</p>
<ul>
<li>将数据隐藏起来就限制了类外部对数据的直接操作，然后类内应该提供相应的接口来允许类外部间接地操作数据，接口之上可以附加额外的逻辑来对数据的操作进行严格地控制</li>
<li>目的的是为了隔离复杂度，例如ATM程序的取款功能,该功能有很多其他功能组成，比如插卡、身份认证、输入金额、打印小票、取钱等，而对使用者来说,只需要开发取款这个功能接口即可,其余功能我们都可以隐藏起来</li>
</ul>
<ul>
<li><p><strong>继承</strong></p>
<ul>
<li>分类：<ul>
<li>单继承</li>
<li>多继承   C++， python有，但是php和java没有</li>
</ul>
</li>
</ul>
</li>
<li><p>多态</p>
</li>
</ul>
</li>
</ul>
<h4 id="1-继承与派生"><a href="#1-继承与派生" class="headerlink" title="1.继承与派生"></a>1.继承与派生</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、什么是继承</span><br><span class="line">    继承一种新建类的方式，新建的类称为子类或者派生类，被继承的类称为父类或基类或超类</span><br><span class="line">    子类会遗传父类的一系列属性</span><br><span class="line"></span><br><span class="line">    python支持多继承</span><br><span class="line">    注意：</span><br><span class="line">        在python3中，如果没有显式地继承任何类，那默认继承object类</span><br><span class="line">        在python2中，如果没有显式地继承任何类，也不会继承object类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    在python中类分为两种：</span><br><span class="line">        新式类:</span><br><span class="line">            但凡继承object的类，以及该类的子类都是新式类</span><br><span class="line">            在python3中所有的类都是新式类</span><br><span class="line">        经典类</span><br><span class="line">            没有继承object类，以该类的子类都是经典类</span><br><span class="line">            只有在python2中才存在经典类，为何？</span><br><span class="line">            因为在python2中没有没有显式地继承任何类，也不会继承object类</span><br><span class="line"></span><br><span class="line">2、为什么要用继承</span><br><span class="line">    减少代码冗余</span><br><span class="line">多继承缺点: 违背人的思维习惯；代码可读性变差；扩展性变差，有可能引发菱形问题；如果不可避免，应该使用Mixins</span><br><span class="line"></span><br><span class="line">3、如何用继承</span><br></pre></td></tr></table></figure>
<p>使用继承</p>
<blockquote>
<p>在Python中，每个类有一个__bases__属性，列出其基类</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent1</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub1</span>(<span class="params">Parent1</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub2</span>(<span class="params">Parent1,Parent2</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(Parent1.__bases__)</span><br><span class="line">print(Parent2.__bases__)</span><br><span class="line"></span><br><span class="line">print(Sub1.__bases__)</span><br><span class="line">print(Sub2.__bases__)</span><br></pre></td></tr></table></figure>

<p><strong>基于继承减少代码冗余的案例+派生/衍生</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;%s&#x27;</span> % self.name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(self, f)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self,course</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is choosing course:%s&#x27;</span> %(self.name,course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span></span><br><span class="line">        <span class="comment"># self.name = name</span></span><br><span class="line">        <span class="comment"># self.age = age</span></span><br><span class="line">        <span class="comment"># self.sex = sex</span></span><br><span class="line">        OldboyPeople.__init__(self,name,age,sex)</span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self,stu</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is score %s&#x27;</span> %(self.name,stu.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># stu1=OldboyStudent(&#x27;alex&#x27;,38,&#x27;male&#x27;)</span></span><br><span class="line"><span class="comment"># print(stu1.__dict__)</span></span><br><span class="line"><span class="comment"># stu1.save()</span></span><br><span class="line"></span><br><span class="line">tea1=OldboyTeacher(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">print(tea1.name,tea1.level)</span><br><span class="line"><span class="comment"># tea1.save()</span></span><br><span class="line"><span class="comment"># print(stu1.school)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-继承属性查找关系"><a href="#2-继承属性查找关系" class="headerlink" title="2.继承属性查找关系"></a>2.继承属性查找关系</h4><ol>
<li>单继承的属性查找：对象自己-&gt;对象的类-&gt;父类-&gt;父类</li>
<li>多继承的属性查找：对象自己-&gt;对象的类-&gt;从左往右一个一个的分支找下去</li>
</ol>
<blockquote>
<p><strong>Python3</strong> 中， 新式类的查找方法 是：BFS：<strong>广度优先</strong></p>
</blockquote>
<blockquote>
<p><strong>Python2</strong>中， 经典类的查找方式 是：DFS ：<strong>深度优先</strong></p>
</blockquote>
<blockquote>
<p>树 </p>
</blockquote>
<p>继承原理（python如何实现的继承）：<br>python到底是如何实现继承的，对于你定义的每一个类，python会通过C3算法计算出一个顺序(MRO)列表，这个MRO列表就是一个简单的所有基类的线性顺序列表，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; F.mro() #等同于F.__mro__</span><br><span class="line">[&lt;class &#39;__main__.F&#39;&gt;, &lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.E&#39;&gt;, &lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;object&#39;&gt;]</span><br></pre></td></tr></table></figure>
<p><strong>mro只有新式类才有这个属性可以查看线性列表，经典类没有这个属性</strong></p>
<p>为了实现继承,python会在MRO列表上从左到右开始查找基类,直到找到第一个匹配这个属性的类为止。<br>而这个MRO列表的构造是通过一个C3线性化算法来实现的。我们不去深究这个算法的数学原理,它实际上就是合并所有父类的MRO列表并遵循如下三条准则:</p>
<ul>
<li>1.子类会先于父类被检查</li>
<li>2.多个父类会根据它们在列表中的顺序被检查</li>
<li>3.如果对下一个类存在两个合法的选择,选择第一个父类</li>
</ul>
<h4 id="3-在子类中重用父类功能的两种方式"><a href="#3-在子类中重用父类功能的两种方式" class="headerlink" title="3.在子类中重用父类功能的两种方式"></a>3.在子类中重用父类功能的两种方式</h4><p>在子类派生出的新方法中重用父类的功能：</p>
<ul>
<li><p><strong>方式一：指名道姓地访问某一个类的函数，与继承是没有关系的</strong><br>OldboyPeople.<strong>init</strong>(self,name,age,sex)</p>
</li>
<li><p><strong>方式二：super(自己的类名,self).父类中的方法名()</strong><br>调用super会得到一个特殊的对象，该对象是专门用来引用父类中的方法的，参照属性发起者的MRO </p>
</li>
</ul>
<blockquote>
<p>具体的：该对象会严格按照当前类的MRO列表从当前类的父类中依次查找属性，即这种方式是严格依赖于继承的</p>
</blockquote>
<blockquote>
<p>ps:在python3中可以简写为super()</p>
</blockquote>
<blockquote>
<p> ！！！！！强调：二者使用哪一种都可以，但最好不要混合使用 ！！！ </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span></span><br><span class="line">        <span class="comment"># OldboyPeople.__init__(self, name, age, sex)</span></span><br><span class="line">        <span class="comment"># super().__init__(name,age,sex)</span></span><br><span class="line">        super().__init__(name, age, sex)</span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">tea1=OldboyTeacher(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">print(tea1.name,tea1.level)</span><br></pre></td></tr></table></figure>

<p><strong>即使没有直接继承关系，super仍然会按照mro继续往后查找</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        super().f2() <span class="comment"># super（）会基于当前所在的查找位置继续往后查找</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A,B</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj=C()</span><br><span class="line">print(C.mro())</span><br><span class="line">obj.f1()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的"><a href="#4-父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的" class="headerlink" title="4. 父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的"></a>4. 父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.f1()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Bar()</span><br><span class="line">obj.f2()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;</span><br><span class="line">Foo.f2</span><br><span class="line">Bar.f1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;方式一: 通过__ 进行属性变形</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment">#已经变形 _Foo__f1</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.__f1() <span class="comment"># self._Foo__f1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Bar()</span><br><span class="line">obj.f2()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">Foo.f2</span><br><span class="line">Foo.f1</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">直接调用类的方法实现</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.f1(self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Bar()</span><br><span class="line">obj.f2()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-组合"><a href="#5-组合" class="headerlink" title="5.组合"></a>5.组合</h4><ul>
<li>1、什么是组合<br>  对象的属性的值是来自于另外一个类的对象，这就叫类的组合使用</li>
<li>2、为何要用组合<br>  组合是用来减少类与类代码冗余的<ul>
<li>组合vs继承<br>   只有在类与类之间有从属的关系的时候才能用继承<br>   否则的话用组合</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;%s&#x27;</span> % self.name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(self, f)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        OldboyPeople.__init__(self,name,age,sex)</span><br><span class="line">        self.courses=[]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self,course</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is choosing course:%s&#x27;</span> %(self.name,course))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_courses_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> course <span class="keyword">in</span> self.courses:</span><br><span class="line">            course.tell_info()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span></span><br><span class="line">        <span class="comment"># self.name = name</span></span><br><span class="line">        <span class="comment"># self.age = age</span></span><br><span class="line">        <span class="comment"># self.sex = sex</span></span><br><span class="line">        OldboyPeople.__init__(self,name,age,sex)</span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self,stu</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is score %s&#x27;</span> %(self.name,stu.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,price,period</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.price=price</span><br><span class="line">        self.period=period</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            课程名：%s</span></span><br><span class="line"><span class="string">            价钱：%s</span></span><br><span class="line"><span class="string">            周期：%s</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span> % (self.name, self.price, self.period))</span><br><span class="line"></span><br><span class="line">python=Course(<span class="string">&#x27;python&#x27;</span>,<span class="number">8000</span>,<span class="string">&#x27;5mons&#x27;</span>)</span><br><span class="line">linux=Course(<span class="string">&#x27;linux&#x27;</span>,<span class="number">10000</span>,<span class="string">&#x27;3mons&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1=OldboyStudent(<span class="string">&#x27;李三泡&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">stu1.courses.append(python)</span><br><span class="line">stu1.courses.append(linux)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu2=OldboyStudent(<span class="string">&#x27;李二泡&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line">stu2.courses.append(python)</span><br></pre></td></tr></table></figure>

<h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h4><ul>
<li><ol>
<li>如果结构为<strong>非菱形</strong>，无论新式类 经典类 python2 python3 ；则按照分支查找。</li>
</ol>
</li>
<li><ol start="2">
<li>菱形继承；python3 新式类 广度优先（最后找大脑袋）； python2 经典类深度优先（在以一个分支就大脑袋找了一下）</li>
</ol>
</li>
</ul>
<h4 id="7-mixins"><a href="#7-mixins" class="headerlink" title="7. mixins"></a>7. mixins</h4><ul>
<li>minxins机制核心: 就是多继承背景下尽可能地多提升多继承的可读性</li>
</ul>
<p>功能类放在左边(mixins), 主继承类放在右边<br>典型模块: SocketServer</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>:</span>  <span class="comment"># 交通工具</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyableMixin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        飞行功能相应的代码        </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        print(<span class="string">&quot;I am flying&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CivilAircraft</span>(<span class="params">FlyableMixin, Vehicle</span>):</span>  <span class="comment"># 民航飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Helicopter</span>(<span class="params">FlyableMixin, Vehicle</span>):</span>  <span class="comment"># 直升飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">Vehicle</span>):</span>  <span class="comment"># 汽车</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps: 采用某种规范（如命名规范）来解决具体的问题是python惯用的套路</span></span><br></pre></td></tr></table></figure>



<h4 id="8-多态与多态性"><a href="#8-多态与多态性" class="headerlink" title="8.多态与多态性"></a>8.多态与多态性</h4><ul>
<li><p>1、什么是多态<br>  同一种事物的多种形态</p>
</li>
<li><p>2、为何要用多态<br>   多态性：指的是可以在不用考虑对象具体类型的前提下，直接调用对象的方法</p>
</li>
<li><p>3、如何用多态</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">metaclass=abc.ABCMeta</span>):</span> <span class="comment"># 父类存在的意义就是用来定义规范</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;xxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;哼哼哼&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1 = People()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多态：不同类，拥有同样的方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何实现多态的条件：通过 abc 抽象类来去定义规范实现</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>python推崇的是鸭子类型</strong><br>代码解耦合；也有规范</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;say hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;哼哼哼&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peo1=People()</span><br><span class="line">dog1=Dog()</span><br><span class="line">pig1=Pig()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peo1.talk()</span><br><span class="line">dog1.talk()</span><br><span class="line">pig1.talk()</span><br></pre></td></tr></table></figure>

<h4 id="9-封装"><a href="#9-封装" class="headerlink" title="9.封装"></a>9.封装</h4><ol>
<li><p>什么是封装<br> “装”的意思就往一个容器中放入一系列属性<br> “封”的意思就是藏起来，在内部可以看到，但对外部是隐藏的</p>
</li>
<li><p>为什么要用封装</p>
</li>
<li><p>如何用封装<br> 但凡是双下划线开头（不能是双下划线结尾）的属性，会被隐藏起来，类内部可以直接使用<br> 而类外部无法直接使用，即封装是对外不对内的</p>
<p> 这种隐藏的特点：</p>
<pre><code> 1、只是一种语法上的变形，会将__开头的属性变形为:_自己的类名__属性名
 2、该变形只在类定义阶段发生一次，在类定义阶段之后新增的__开头的属性并不会发生变形
 3、隐藏是对外不对内的
 4、在继承中，父类如果不想让子类覆盖自己的同名方法，可以将方法定义为私有的</code></pre>
</li>
</ol>
<p>‘’’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment">#_Foo__f1</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.__f1() <span class="comment">#self._Foo__f1()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment">#_Bar__f1</span></span><br><span class="line">        print(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Bar()</span><br><span class="line">obj.f2()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>为何要封装</li>
</ol>
<ul>
<li>1、封装数据属性：将数据数据隐藏起来，从而类的使用者无法直接操作该数据属性<br>需要类的设计者在类内部开辟接口，让类的使用者同接口来间接地操作数据，<br>类的设计者可以在接口之上附加任意逻辑，从而严格控制类的使用者对属性的操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.__name=name</span><br><span class="line">        self.__age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&lt;%s:%s&gt;&#x27;</span> %(self.__name,self.__age))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_info</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        <span class="keyword">if</span> type(name) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;用户名必须是str类型&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> type(age) <span class="keyword">is</span> <span class="keyword">not</span> int:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;年龄必须是int类型&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.__name=name</span><br><span class="line">        self.__age=age</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">p=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="comment"># p.tell_info()</span></span><br><span class="line">p.set_info(<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;asdfsadf&#x27;</span>)</span><br><span class="line"><span class="comment"># p.tell_info()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2、封装函数属性：隔离复杂度</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ATM</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__card</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;插卡&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__auth</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;用户认证&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__input</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;输入取款金额&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__print_bill</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;打印账单&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__take_money</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;取款&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__card()</span><br><span class="line">        self.__auth()</span><br><span class="line">        self.__input()</span><br><span class="line">        self.__print_bill()</span><br><span class="line">        self.__take_money()</span><br><span class="line"></span><br><span class="line">a=ATM()</span><br><span class="line">a.withdraw()</span><br></pre></td></tr></table></figure>

<h4 id="10-面向的对象中的装饰器"><a href="#10-面向的对象中的装饰器" class="headerlink" title="10.面向的对象中的装饰器"></a>10.面向的对象中的装饰器</h4><ul>
<li>封装之property<br>property是一种特殊的属性，访问它时会执行一段功能（函数）然后返回值<br>将一个类的函数定义成特性以后，对象再去使用的时候obj.name,根本无法察觉自己的name是执行了一个函数然后计算出来的，这种特性的使用方式遵循了统一访问的原则</li>
</ul>
<p><strong>但凡是被property修饰过的方法，可以使用@def_name.setter,@def_name.deleter</strong></p>
<p>@property  <strong>使用方式一</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,height,weight</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.height=height</span><br><span class="line">        self.weight=weight</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bmi</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.weight / (self.height ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">egon=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">1.80</span>,<span class="number">75</span>)</span><br><span class="line">egon.height=<span class="number">1.82</span></span><br><span class="line"><span class="comment"># print(egon.bmi())</span></span><br><span class="line"></span><br><span class="line">print(egon.bmi)</span><br></pre></td></tr></table></figure>

<p>@property <strong>使用方式二</strong><br>name = 的方式赋值为 查看 设置 删除 函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> type(val) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            print(<span class="string">&#x27;必须传入str类型&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.__name = val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;不让删除&#x27;</span>)</span><br><span class="line">        <span class="comment"># del self.__name</span></span><br><span class="line"></span><br><span class="line">    name = property(get_name, set_name, del_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = People(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(obj1.name)</span><br><span class="line"></span><br><span class="line">obj1.name = <span class="string">&#x27;alex&#x27;</span></span><br><span class="line"></span><br><span class="line">print(obj1.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj1.name</span><br></pre></td></tr></table></figure>


<p>@property <strong>使用方式三</strong><br>所有操作函数名称都改为 <strong>属性名称</strong><br>@def_name.setter<br>@def_name.deleter</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.__name=name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self,val</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;=====&gt;准备修改名字的值：&#x27;,val)</span></span><br><span class="line">        <span class="keyword">if</span> type(val) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;名字的值必须为str类型&#x27;</span>)</span><br><span class="line">        self.__name=val</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># del self.__name</span></span><br><span class="line">        print(<span class="string">&#x27;不让删啊老铁&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=People(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(p.name)</span><br><span class="line"></span><br><span class="line">p.name=<span class="string">&#x27;EGON&#x27;</span></span><br><span class="line"><span class="comment"># p.name=123</span></span><br><span class="line">print(p.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> p.name</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">print(p.name)</span><br></pre></td></tr></table></figure>


<ul>
<li>绑定方法与非绑定方法<ul>
<li>classmethod</li>
<li>staticmethod</li>
</ul>
</li>
</ul>
<ol>
<li><p>绑定方法：<br> 特点：</p>
<pre><code> 绑定给谁，就应该由谁来调用，谁来调用就会将谁当做第一个参数传入</code></pre>
<p> 绑定到对象的方法：</p>
<pre><code> 在类中定义的函数，在没有被任何装饰器装饰的情况下，默认都是绑定给对象的</code></pre>
<p> 绑定到类的方法</p>
<pre><code> 在类中定义的函数，在被装饰器classmethod装饰的情况下，该方法是绑定类的
 最常用：提供额外的造对象(实例化)方式</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port</span>):</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">conn1 = MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>)</span><br><span class="line">conn2 = MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>)</span><br><span class="line"></span><br><span class="line">演变：提供额外的实例化方式，来从配置文件里面加载配置的方式来帮助完成自动传参，不用自己再去指定主机端口。</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># def from_conf():</span></span><br><span class="line">    <span class="comment">#     return MySQL(settings.HOST,settings.PORT)</span></span><br><span class="line">    <span class="comment"># 演变如下</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_conf</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(settings.HOST,settings.PORT)</span><br><span class="line"></span><br><span class="line">conn1=MySQL.from_conf()</span><br><span class="line">print(conn1.host,conn1.port)</span><br><span class="line"></span><br><span class="line">conn=MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line">print(conn.host,conn.port)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li>非绑定方法：既不与类绑定也不与对象绑定，没有任何自动传值的效果，因为函数体根本也不需要</li>
</ol>
<p><strong>函数体既不需要类传进来，也不需要对象传进来</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_conf</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(settings.HOST,settings.PORT)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_id</span>():</span></span><br><span class="line">        m=hashlib.md5()</span><br><span class="line">        m.update(str(time.clock()).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line">obj=MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(MySQL.create_id())</span></span><br><span class="line"><span class="comment"># print(obj.create_id())</span></span><br><span class="line">obj.id=obj.create_id()</span><br><span class="line"></span><br><span class="line">print(obj.id)</span><br></pre></td></tr></table></figure>


<h4 id="11-类的内在机制-反射"><a href="#11-类的内在机制-反射" class="headerlink" title="11.类的内在机制-反射"></a>11.类的内在机制-反射</h4><ul>
<li><strong>反射</strong> <ul>
<li>只有在Python中有</li>
</ul>
</li>
</ul>
<ol>
<li>反射：指的是通过<strong>字符串</strong>来操作类或者对象的属性</li>
</ol>
<ul>
<li>涉及四个内置函数<br><strong>dict</strong> 打印类的属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=People(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hasattr ===&gt; 判断属性是否存在</span><br><span class="line">print(<span class="string">&#x27;country&#x27;</span> <span class="keyword">in</span> People.__dict__)</span><br><span class="line">print(hasattr(People,<span class="string">&#x27;country&#x27;</span>))</span><br><span class="line"></span><br><span class="line">getattr ===&gt; 通过字符串访问类的属性</span><br><span class="line">print(People.__dict__[<span class="string">&#x27;country&#x27;</span>])</span><br><span class="line">print(getattr(People,<span class="string">&#x27;country&#x27;</span>))</span><br><span class="line"></span><br><span class="line">==============================</span><br><span class="line">print(getattr(People,<span class="string">&#x27;country1111&#x27;</span>,<span class="literal">None</span>))</span><br><span class="line">==============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setattr ===&gt; 通过字符串设置类的属性</span><br><span class="line">People.__dict__[<span class="string">&#x27;x&#x27;</span>]=<span class="number">111</span></span><br><span class="line">print(People.x)</span><br><span class="line">setattr(People,<span class="string">&#x27;x&#x27;</span>,<span class="number">111</span>)</span><br><span class="line">print(People.__dict__)</span><br><span class="line"></span><br><span class="line">delattr ===&gt; 通过字符串删除类的属性</span><br><span class="line">delattr(People,<span class="string">&#x27;country&#x27;</span>)</span><br><span class="line">print(People.__dict__)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ftp</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;get...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;put...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;auth...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd=input(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip() <span class="comment">#cmd=&#x27;get&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> hasattr(self,cmd):</span><br><span class="line">                method=getattr(self,cmd)</span><br><span class="line">                method()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;输入的方法不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Ftp()</span><br><span class="line"></span><br><span class="line">obj.run()</span><br></pre></td></tr></table></figure>

<h4 id="12-内置方法-开头-结尾的方法，会在某种情况下自动触发"><a href="#12-内置方法-开头-结尾的方法，会在某种情况下自动触发" class="headerlink" title="12.内置方法(__开头,__结尾的方法，会在某种情况下自动触发)"></a>12.内置方法(__开头,__结尾的方法，会在某种情况下自动触发)</h4><ul>
<li>定义: 在类内部，以__开发并以__结尾的方法</li>
<li>特点: 会在某种情况下自动触发执行</li>
</ul>
<ol>
<li>__str__</li>
</ol>
<p><strong>该方法会在对象被打印时自动触发,将返回值当做本次打印的结果。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该方法会在对象被打印时自动触发，</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;=====run=====&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[&quot;%s&quot;,%s,&quot;%s&quot;]&#x27;</span> %(self.name,self.age,self.sex)</span><br><span class="line"></span><br><span class="line">obj=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">print(obj) <span class="comment">#print(obj.__str__())</span></span><br><span class="line"></span><br><span class="line">obj1=list([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(obj1)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>__del__</li>
</ol>
<p><strong>会在清理对象之前,自动触发;</strong></p>
<blockquote>
<p>什么时候用del:在涉及到一个python的变量关联了一个系统变量的时候，涉及到回收资源的问题，python的变量是被python所管理的，但涉及到的系统资源python不会管，需要自己定义del方法，在删对象之前先触发del执行，先把对象关联的系统资源回收，再做其他。</p>
</blockquote>
<blockquote>
<p><strong>应用: 在应用结束之前，发起系统调用，回收相关系统资源</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name, age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.f = open(<span class="string">&#x27;a.txt&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;del......&#x27;</span>)</span><br><span class="line">        self.f.close()</span><br><span class="line">    </span><br><span class="line">obj = People(<span class="string">&#x27;egon&#x27;</span>, <span class="number">18</span>)  <span class="comment"># </span></span><br><span class="line"><span class="comment"># del obj</span></span><br><span class="line">print(<span class="string">&#x27;=====&gt;&#x27;</span>) 现象，实例化对象结束之后就会自动执行__del__方法print(<span class="string">&#x27;del.....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line">        self.conn=connect(host,port)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">obj=Mysql(<span class="string">&#x27;1.1.1.1&#x27;</span>,<span class="number">3306</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>__hash__<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        self.b = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> hash(str(self.a)+str(self.b))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(hash(a))</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li>__call__<br>对象后面加括号，触发执行。</li>
</ol>
<p>注：构造方法new的执行是由创建对象触发的，即：对象 = 类名() ；而对于 call 方法的执行是由对象后加括号触发的，即：对象() 或者 类()()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;__call__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo() <span class="comment"># 执行 __init__</span></span><br><span class="line">obj()       <span class="comment"># 执行 __call__</span></span><br></pre></td></tr></table></figure>


<ol start="5">
<li>__new__<br>对象实例化的时候，默认首先会执行 <strong>new</strong> 方法， 而后才会执行 <strong>init</strong> 方法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x = <span class="number">1</span></span><br><span class="line">        print(<span class="string">&#x27;in init function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;in new function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object.__new__(A, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">a = A()  <span class="comment">### 对象实例化的时候，默认首先会执行 __new__ 方法， 而后才会执行 __init__ 方法</span></span><br><span class="line">print(a.x)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p><strong>面试经常会问：单例模式</strong></p>
<ul>
<li>23种设计模式 ：<ul>
<li>单例模式 ： 对象只能出现一次<ul>
<li>__new__方法</li>
<li>装饰器</li>
</ul>
</li>
<li>工厂模式</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">### 当实例化一个对象的时候，会自动的触发该__init__函数</span></span><br><span class="line">    <span class="comment">### 此时self指代的就是当前实例化的对象，也就是 self = p1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, height</span>):</span></span><br><span class="line">        <span class="comment"># print(self) ### &lt;__main__.Person object at 0x10ee29760&gt;</span></span><br><span class="line">        self.name = name <span class="comment">### p1.name = &#x27;wenliang&#x27;  p2.name = &#x27;nick&#x27;</span></span><br><span class="line">        self.age = age   <span class="comment">### p1.age = 73   p2.age = 84</span></span><br><span class="line">        self.height = height <span class="comment">### p1.height = 168 p2.height=178</span></span><br><span class="line"></span><br><span class="line">p1 = Person(name=<span class="string">&#x27;szk&#x27;</span>, age=<span class="number">12</span>, height=<span class="number">178</span>)  <span class="comment">### 实例化Person类，产生一个对象</span></span><br><span class="line">p2 = Person(name=<span class="string">&#x27;szk&#x27;</span>, age=<span class="number">12</span>, height=<span class="number">178</span>)  <span class="comment">### 实例化Person类，产生一个对象</span></span><br><span class="line">p3 = Person(name=<span class="string">&#x27;szk&#x27;</span>, age=<span class="number">12</span>, height=<span class="number">178</span>)  <span class="comment">### 实例化Person类，产生一个对象</span></span><br><span class="line">print(id(p1)) <span class="comment">### 产生对象的内存地址是不同的</span></span><br><span class="line">print(id(p2))</span><br><span class="line">print(id(p3))</span><br></pre></td></tr></table></figure>
<p>代码解释：当实例化p1()的时候，就会调用__new__；第一次实例，就会判断__instance有没有这个值，第一次实例，没有这个值；判断是None，接下来就会实例化一个对象，赋值给instance属性上面。p1实例化完成之后，就有了p1实例的内存地址了；会把cls.__instance__地址返回,接着就正常执行__init__初始化实例；当p2再实例化的时候，先走__new___再__init__；判断cls.__instance__上面有没有这么一个对象，由于p1已经实例化，instance绑定的是p1的对象，返回的是p1对象的内存地址；所以p2用的还是这个内存地址，不会再重新开辟内存了。</p>
<p>要保证不管怎么实例化，实例化出来的对象永远只是这么一个，内存地址都是一样的。这种设计模式就叫单例</p>
<h4 id="13-内置函数"><a href="#13-内置函数" class="headerlink" title="13. 内置函数"></a>13. 内置函数</h4><ul>
<li><strong>需要掌握</strong></li>
</ul>
<ol>
<li>isinstance <strong>(做类型判断，不推荐用type)</strong><br>判断实例是否属于类</li>
<li>issubclass<br>判断类是否属于xx子类</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="comment">#判断Foo 是不是 obj 的实例</span></span><br><span class="line"><span class="comment"># print(isinstance(obj,Foo))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(isinstance([],list))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(type(obj) is Foo)</span></span><br><span class="line"><span class="comment"># print(type([1,2]) is list) </span></span><br><span class="line"></span><br><span class="line">print(issubclass(Foo,object))</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">绝对值</span><br><span class="line">print(abs(<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">all后面跟可迭代对象，bool(x)返回Ture，x来自于可迭代对象，x都为真，才为真</span><br><span class="line">print(all([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="literal">None</span>,<span class="string">&#x27;&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">    可迭代对象空为真</span><br><span class="line">    <span class="comment"># print(all([]))</span></span><br><span class="line"></span><br><span class="line">任何一个来自于可迭代对象的值为真，最终结果为真</span><br><span class="line"><span class="comment"># print(any([0,None,&#x27;&#x27;,1]))</span></span><br><span class="line"></span><br><span class="line">为空的时候返回<span class="literal">False</span></span><br><span class="line"><span class="comment"># print(any([]))</span></span><br><span class="line"></span><br><span class="line">返回对象的所有属性</span><br><span class="line"><span class="comment"># print(dir(obj1))</span></span><br><span class="line"></span><br><span class="line">转成二进制</span><br><span class="line"><span class="comment"># print(bin(3)) #11</span></span><br><span class="line">十进制转八进制</span><br><span class="line"><span class="comment"># print(oct(9)) #11</span></span><br><span class="line">十进制转十六机制</span><br><span class="line"><span class="comment"># print(hex(17)) #11</span></span><br><span class="line"></span><br><span class="line">可调用的</span><br><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class Foo:</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment"># print(callable(func))</span></span><br><span class="line"><span class="comment"># print(callable(Foo))</span></span><br><span class="line"></span><br><span class="line">取余数（应用领域：分页）</span><br><span class="line"><span class="comment"># print(divmod(10,3))</span></span><br><span class="line"><span class="comment"># print(divmod(131,20))</span></span><br><span class="line"></span><br><span class="line">枚举（小元祖）</span><br><span class="line"><span class="comment"># l=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br><span class="line"><span class="comment"># for index,item in enumerate(l):</span></span><br><span class="line"><span class="comment">#     print(index,item)</span></span><br><span class="line"></span><br><span class="line">可变集合</span><br><span class="line"><span class="comment"># s=set(&#123;1,2,3&#125;)</span></span><br><span class="line"><span class="comment"># s.add(4)</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line"></span><br><span class="line">不可变集合</span><br><span class="line"><span class="comment"># s=frozenset(&#123;1,2,3&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可变类型可以当做字典的key，不可变类型即可hash类型</span></span><br><span class="line"><span class="comment"># print(hash((1,2,3)))</span></span><br><span class="line"><span class="comment"># print(hash(&#x27;sdafsafdas&#x27;))</span></span><br><span class="line"><span class="comment"># print(hash(1))</span></span><br><span class="line"><span class="comment"># print(hash([1,2,3]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d=&#123;[1,2,3]:&#x27;aaa&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     这是一个xxx功能</span></span><br><span class="line"><span class="comment">#     :return:</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(help(func))</span></span><br><span class="line"></span><br><span class="line">数字转ASCII码</span><br><span class="line"><span class="comment"># print(chr(65))</span></span><br><span class="line">ASCII码转数字</span><br><span class="line"><span class="comment"># print(ord(&#x27;A&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(pow(3,2,3)) #10**2%3</span></span><br><span class="line">四舍五入</span><br><span class="line"><span class="comment"># print(round(3.5))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># l=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]</span></span><br><span class="line">切片，好处是切片对象可重复使用</span><br><span class="line"><span class="comment"># sc=slice(1,4,1)</span></span><br><span class="line"><span class="comment"># # print(l[1:4])</span></span><br><span class="line"><span class="comment"># print(l[sc])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(vars(People)) #People.__dict__</span></span><br><span class="line"></span><br><span class="line">拉链函数，左右对应，zip之后得到一个迭代器对象，list之后可以看到</span><br><span class="line"><span class="comment"># x=&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment"># y=[1,2,3,4,5,6,7]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># obj=zip(x,y)</span></span><br><span class="line"><span class="comment"># print(list(obj))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line">以字符串的方式导入模块</span><br><span class="line">m=__import__(<span class="string">&#x27;time&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(m.time())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="14-元类"><a href="#14-元类" class="headerlink" title="14. 元类"></a>14. 元类</h4><p>定义源自于: 一切皆为对象，那么我们用class关键字定义的类本身也是一个对象，负责产生该对象的类称之为元类，即元类可以简称为类的类。</p>
<p>查看对象属于哪个类（type对象）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span>  <span class="comment"># Foo=元类()</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s %s&#x27;</span> %(self.name, self.age))</span><br><span class="line"></span><br><span class="line">obj = People(<span class="string">&#x27;egon&#x27;</span>, <span class="number">28</span>)</span><br><span class="line">print(type(obj))</span><br><span class="line"></span><br><span class="line">print(type(People))</span><br><span class="line">print(type(int))</span><br><span class="line"></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">People</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">## 查看内置的元类</span></span><br><span class="line"><span class="class"># 1. <span class="title">type</span>是内置的元类</span></span><br><span class="line"><span class="class"># 2.我们用<span class="title">class</span>关键字定义所有的类都是由<span class="title">type</span>实例化产生的，</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210428183220063.png" alt="image-20210428183220063"></p>
<h5 id="为什么用元类"><a href="#为什么用元类" class="headerlink" title="为什么用元类"></a>为什么用元类</h5><ul>
<li>元类是负责产生类的，所以我们学习元类或者自定义元类的目的：是为了控制类的产生过程，还可以控制对象的产生过程</li>
</ul>
<h5 id="内置函数exec-储备"><a href="#内置函数exec-储备" class="headerlink" title="内置函数exec(储备)"></a>内置函数exec(储备)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cmd = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">x=1</span></span><br><span class="line"><span class="string">print(&#x27;exec函数运行了&#x27;)</span></span><br><span class="line"><span class="string">def func(self):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">class_dic = &#123;&#125;</span><br><span class="line"><span class="comment"># 执行cmd中的代码，然后把产生的名字丢入class_dic字典中</span></span><br><span class="line">exec(cmd, &#123;&#125;, class_dic)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec函数运行了</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(class_dic)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;x&#39;: 1, &#39;func&#39;: &lt;function func at 0x10a0bc048&gt;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="class创建类"><a href="#class创建类" class="headerlink" title="class创建类"></a>class创建类</h5><ul>
<li>如果说类也是对象，那么用class关键字的去创建类的过程也是一个实例化的过程，该实例化的目的是为了得到一个类，调用的是元类</li>
<li>用class关键字创建一个类，用的默认的元类type，因此以前说不要用type作为类别判断</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class People:  # People&#x3D;type(...)</span><br><span class="line">    country &#x3D; &#39;China&#39;</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&#39;%s is eating&#39; % self.name)</span><br></pre></td></tr></table></figure>

<p>######<font color="red">内置的元类type(参数)实例化产生</font></p>
<blockquote>
<p><strong>我们class关键字定义的所有的类都是由内置的元类type实例化产生的.</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">print(type(People))</span><br><span class="line">&lt;class &#39;type&#39;&gt;  # 我们class关键字定义的所有的类都是由内置的元类type实例化产生的.</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210428183546627.png" alt="image-20210428183546627"></p>
<h5 id="type实现"><a href="#type实现" class="headerlink" title="type实现"></a>type实现</h5><ul>
<li><strong>创建类的3个要素：类名，基类，类的名称空间</strong></li>
<li>People = type(类名，基类，类的名称空间)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.定义类名</span></span><br><span class="line">class_name = <span class="string">&#x27;People&#x27;</span>  <span class="comment"># 类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定义类的基类</span></span><br><span class="line">class_bases = (object, )  <span class="comment"># 基类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.执行类体代码拿到 - 得到类的名称空间</span></span><br><span class="line">class_dic = &#123;&#125;</span><br><span class="line">class_body = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">country=&#x27;China&#x27;</span></span><br><span class="line"><span class="string">def __init__(self,name,age):</span></span><br><span class="line"><span class="string">    self.name=name</span></span><br><span class="line"><span class="string">    self.age=age</span></span><br><span class="line"><span class="string">def eat(self):</span></span><br><span class="line"><span class="string">    print(&#x27;%s is eating&#x27; %self.name)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">exec(</span><br><span class="line">    class_body,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    class_dic,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(class_name)</span><br><span class="line">People</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(class_bases)</span><br><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(class_dic)  # 类的名称空间</span><br><span class="line">&#123;&#39;country&#39;: &#39;China&#39;, &#39;__init__&#39;: &lt;function __init__ at 0x10a0bc048&gt;, &#39;eat&#39;: &lt;function eat at 0x10a0bcd08&gt;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>People = type(类名，基类，类的名称空间)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 4.调用内置元类</span><br><span class="line">People1 &#x3D; type(class_name, class_bases, class_dic)</span><br><span class="line">print(People1)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;__main__.People&#39;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj1 &#x3D; People1(1, 2)</span><br><span class="line">obj1.eat()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 is eating</span><br></pre></td></tr></table></figure>

<ul>
<li>class创建的类的调用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(People)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;class &#39;__main__.People&#39;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj &#x3D; People1(1, 2)</span><br><span class="line">obj.eat()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 is eating</span><br></pre></td></tr></table></figure>

<p><strong>总结：第4步调用内置的元类type，实例化之后赋值给People。 能改变的就是第4步调用的元类</strong></p>
<h5 id="自定义元类控制类的创建"><a href="#自定义元类控制类的创建" class="headerlink" title="自定义元类控制类的创建"></a>自定义元类控制类的创建</h5><ul>
<li><p>不继承自定义元类，</p>
</li>
<li><p>使用自定义的元类（只有继承了type类的类才是元类）</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params">type</span>):</span>  <span class="comment"># 只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, class_name, class_bases, class_dic</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;self:&#x27;</span>, self)  <span class="comment"># 现在是People</span></span><br><span class="line">        print(<span class="string">&#x27;class_name:&#x27;</span>, class_name)</span><br><span class="line">        print(<span class="string">&#x27;class_bases:&#x27;</span>, class_bases)</span><br><span class="line">        print(<span class="string">&#x27;class_dic:&#x27;</span>, class_dic)</span><br><span class="line">        super(Mymeta, self).__init__(class_name, class_bases,</span><br><span class="line">                                     class_dic)  <span class="comment"># 重用父类type的功能</span></span><br></pre></td></tr></table></figure>

<ul>
<li>分析用class自定义类的运行原理（而非元类的的运行原理）：</li>
</ul>
<ol>
<li>拿到一个字符串格式的类名class_name=’People’</li>
<li>拿到一个类的基类们class_bases=(obejct,)</li>
<li>执行类体代码，拿到一个类的名称空间class_dic={…}</li>
<li>调用People=type(class_name,class_bases,class_dic)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">object, metaclass=Mymeta</span>):</span>  <span class="comment"># People=Mymeta(类名,基类们,类的名称空间)</span></span><br><span class="line">    country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is eating&#x27;</span> % self.name)</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self: &lt;class &#39;__main__.People&#39;&gt;</span><br><span class="line">class_name: People</span><br><span class="line">class_bases: (&lt;class &#39;object&#39;&gt;,)</span><br><span class="line">class_dic: &#123;&#39;__module__&#39;: &#39;__main__&#39;, &#39;__qualname__&#39;: &#39;People&#39;, &#39;country&#39;: &#39;China&#39;, &#39;__init__&#39;: &lt;function People.__init__ at 0x10a0bcbf8&gt;, &#39;eat&#39;: &lt;function People.eat at 0x10a0bc2f0&gt;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><ul>
<li>自定义元类控制类的产生过程，类的产生过程其实就是元类的调用过程</li>
<li>我们可以控制类必须有文档，可以使用如下的方式实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params">type</span>):</span>  <span class="comment"># 只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, class_name, class_bases, class_dic</span>):</span></span><br><span class="line">        <span class="keyword">if</span> class_dic.get(<span class="string">&#x27;__doc__&#x27;</span>) <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> len(</span><br><span class="line">                class_dic.get(<span class="string">&#x27;__doc__&#x27;</span>).strip()) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类中必须有文档注释，并且文档注释不能为空&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> class_name.istitle():</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;类名首字母必须大写&#x27;</span>)</span><br><span class="line">        super(Mymeta, self).__init__(class_name, class_bases,</span><br><span class="line">                                     class_dic)  <span class="comment"># 重用父类的功能    </span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">object, metaclass=Mymeta</span></span></span><br><span class="line"><span class="class"><span class="params">                 </span>):</span>  <span class="comment">#People  = Mymeta(&#x27;People&#x27;,(object,),&#123;....&#125;)</span></span><br><span class="line">        <span class="comment">#     &quot;&quot;&quot;这是People类&quot;&quot;&quot;</span></span><br><span class="line">        country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">            self.name = name</span><br><span class="line">            self.age = age</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">            print(<span class="string">&#x27;%s is eating&#x27;</span> % self.name)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类中必须有文档注释，并且文档注释不能为空</span><br></pre></td></tr></table></figure>

<h5 id="call-储备"><a href="#call-储备" class="headerlink" title="call(储备)"></a><strong>call</strong>(储备)</h5><ul>
<li>要想让obj这个对象变成一个可调用的对象，需要在该对象的类中定义一个方法、、<strong>call</strong>方法，该方法会在调用对象时自动触发</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(args)</span><br><span class="line">        print(kwargs)</span><br><span class="line">        print(<span class="string">&#x27;__call__实现了，实例化对象可以加括号调用了&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj(<span class="string">&#x27;lqz&#x27;</span>, age=<span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&#39;lqz&#39;,)</span><br><span class="line">&#123;&#39;age&#39;: 18&#125;</span><br><span class="line">__call__实现了，实例化对象可以加括号调用了</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="new-储备"><a href="#new-储备" class="headerlink" title="new(储备)"></a><strong>new</strong>(储备)</h5><p>我们之前说类实例化第一个调用的是<strong>init</strong>，但<strong>init</strong>其实不是实例化一个类的时候第一个被调用 的方法。当使用 Persion(name, age) 这样的表达式来实例化一个类时，最先被调用的方法 其实是 <strong>new</strong> 方法。</p>
<p><strong>new</strong>方法接受的参数虽然也是和<strong>init</strong>一样，但<strong>init</strong>是在类实例创建之后调用，而 <strong>new</strong>方法正是创建这个类实例的方法。</p>
<p>注意：*<strong>*new\</strong>() 函数只能用于从object继承的新式类。**</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls</span>):</span></span><br><span class="line">        print(<span class="string">&quot;__new__方法被执行&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> cls.__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;__init__方法被执行&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br></pre></td></tr></table></figure>

<h5 id="自定义元类控制类的实例化"><a href="#自定义元类控制类的实例化" class="headerlink" title="自定义元类控制类的实例化"></a>自定义元类控制类的实例化</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params">type</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(self)  <span class="comment"># self是People</span></span><br><span class="line">        print(args)  <span class="comment"># args = (&#x27;lqz&#x27;,)</span></span><br><span class="line">        print(kwargs)  <span class="comment"># kwargs = &#123;&#x27;age&#x27;:18&#125;</span></span><br><span class="line">        <span class="comment"># return 123</span></span><br><span class="line">        <span class="comment"># 1. 先造出一个People的空对象，申请内存空间</span></span><br><span class="line">        <span class="comment"># __new__方法接受的参数虽然也是和__init__一样，但__init__是在类实例创建之后调用，而 __new__方法正是创建这个类实例的方法。</span></span><br><span class="line">        obj = self.__new__(self)  <span class="comment"># 虽然和下面同样是People，但是People没有，找到的__new__是父类的</span></span><br><span class="line">        <span class="comment"># 2. 为该对空对象初始化独有的属性</span></span><br><span class="line">        self.__init__(obj, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 3. 返回一个初始化好的对象</span></span><br><span class="line">        <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure>

<ul>
<li><p>People = Mymeta()，People()则会触发<strong>call</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">object, metaclass=Mymeta</span>):</span></span><br><span class="line">    country = <span class="string">&#x27;China&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is eating&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#     在调用Mymeta的__call__的时候，首先会找自己（如下函数）的，自己的没有才会找父类的</span></span><br><span class="line"><span class="comment">#     def __new__(cls, *args, **kwargs):</span></span><br><span class="line"><span class="comment">#         # print(cls)  # cls是People</span></span><br><span class="line"><span class="comment">#         # cls.__new__(cls) # 错误，无限死循环，自己找自己的，会无限递归</span></span><br><span class="line"><span class="comment">#         obj = super(People, cls).__new__(cls)  # 使用父类的，则是去父类中找__new__</span></span><br><span class="line"><span class="comment">#         return obj    </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>类的调用，即类实例化就是元类的调用过程，可以通过元类Mymeta的<strong>call</strong>方法控制</p>
</li>
<li><p>分析：调用Pepole的目的</p>
<ol>
<li>先造出一个People的空对象</li>
<li>为该对空对象初始化独有的属性</li>
<li>返回一个初始化好的对象</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj &#x3D; People(&#39;lqz&#39;, age&#x3D;18)</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">People</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">(<span class="params"><span class="string">&#x27;lqz&#x27;</span>,</span>)</span></span><br><span class="line">&#123;&#x27;age&#x27;: 18&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(obj.__dict__)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lqz&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>

<h5 id="自定义元类后类的继承顺序"><a href="#自定义元类后类的继承顺序" class="headerlink" title="自定义元类后类的继承顺序"></a>自定义元类后类的继承顺序</h5><p>结合python继承的实现原理+元类重新看属性的查找应该是什么样子呢？？？</p>
<p>在学习完元类后，其实我们用class自定义的类也全都是对象（包括object类本身也是元类type的 一个实例，可以用type(object)查看），我们学习过继承的实现原理，如果把类当成对象去看，将下述继承应该说成是：对象OldboyTeacher继承对象Foo，对象Foo继承对象Bar，对象Bar继承对象object</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params">type</span>):</span>  <span class="comment"># 只有继承了type类才能称之为一个元类，否则就是一个普通的自定义类</span></span><br><span class="line">    n = <span class="number">444</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args,</span></span></span><br><span class="line"><span class="function"><span class="params">                 **kwargs</span>):</span>  <span class="comment">#self=&lt;class &#x27;__main__.OldboyTeacher&#x27;&gt;</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        self.__init__(obj, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">object</span>):</span></span><br><span class="line">    n = <span class="number">333</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">Bar</span>):</span></span><br><span class="line">    n = <span class="number">222</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">Foo, metaclass=Mymeta</span>):</span></span><br><span class="line">    n = <span class="number">111</span></span><br><span class="line"></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s says welcome to the oldboy to learn Python&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line">    OldboyTeacher.n</span><br><span class="line">)  <span class="comment"># 自下而上依次注释各个类中的n=xxx，然后重新运行程序，发现n的查找顺序为OldboyTeacher-&gt;Foo-&gt;Bar-&gt;object-&gt;Mymeta-&gt;type</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">111</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(OldboyTeacher.n)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">111</span><br></pre></td></tr></table></figure>

<ul>
<li>查找顺序：<ol>
<li>先对象层：OldoyTeacher-&gt;Foo-&gt;Bar-&gt;object</li>
<li>然后元类层：Mymeta-&gt;type</li>
</ol>
</li>
</ul>
<p>依据上述总结，我们来分析下元类Mymeta中<strong>call</strong>里的self.<strong>new</strong>的查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params">type</span>):</span></span><br><span class="line">    n = <span class="number">444</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args,</span></span></span><br><span class="line"><span class="function"><span class="params">                 **kwargs</span>):</span>  <span class="comment">#self=&lt;class &#x27;__main__.OldboyTeacher&#x27;&gt;</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        print(self.__new__ <span class="keyword">is</span> object.__new__)  <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">object</span>):</span></span><br><span class="line">    n = <span class="number">333</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Bar.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">Bar</span>):</span></span><br><span class="line">    n = <span class="number">222</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Foo.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">Foo, metaclass=Mymeta</span>):</span></span><br><span class="line">    n = <span class="number">111</span></span><br><span class="line"></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s says welcome to the oldboy to learn Python&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __new__(cls, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     print(&#x27;OldboyTeacher.__new__&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OldboyTeacher(<span class="string">&#x27;lqz&#x27;</span>,</span><br><span class="line">              <span class="number">18</span>)  <span class="comment"># 触发OldboyTeacher的类中的__call__方法的执行，进而执行self.__new__开始查找</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总结，Mymeta下的<strong>call</strong>里的self.<strong>new</strong>在OldboyTeacher、Foo、Bar里都没有找到<strong>new</strong>的情况下，会去找object里的<strong>new</strong>，而object下默认就有一个<strong>new</strong>，所以即便是之前的类均未实现<strong>new</strong>,也一定会在object中找到一个，根本不会、也根本没必要再去找元类Mymeta-&gt;type中查找<strong>new</strong></p>
<h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><p>需求：使用元类修改属性为隐藏属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mymeta</span>(<span class="params">type</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, class_name, class_bases, class_dic</span>):</span></span><br><span class="line">        <span class="comment"># 加上逻辑，控制类Foo的创建</span></span><br><span class="line">        super(Mymeta, self).__init__(class_name, class_bases, class_dic)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 加上逻辑，控制Foo的调用过程，即Foo对象的产生过程</span></span><br><span class="line">        obj = self.__new__(self)</span><br><span class="line">        self.__init__(obj, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 修改属性为隐藏属性</span></span><br><span class="line">        obj.__dict__ = &#123;</span><br><span class="line">            <span class="string">&#x27;_%s__%s&#x27;</span> % (self.__name__, k): v</span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> obj.__dict__.items()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">object, metaclass=Mymeta</span>):</span>  <span class="comment"># Foo = Mymeta(...)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, sex</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(obj.__dict__)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;_Foo__name&#x27;</span>: <span class="string">&#x27;egon&#x27;</span>, <span class="string">&#x27;_Foo__age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;_Foo__sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>上课模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 总结:</span><br><span class="line"># 对象() -&gt; 类内的__call__</span><br><span class="line"># 类() -&gt; 自定义元类内的__call__</span><br><span class="line"># 自定义元类() -&gt; 内置元类的__call__</span><br><span class="line"></span><br><span class="line"># 六.自定义元类控制类的调用 --&gt; 类的对象的产生</span><br><span class="line"></span><br><span class="line">class Mymeta(type):  # 只有继承了type类的类才是元类</span><br><span class="line">    def __call__(self, *args, **kwargs):</span><br><span class="line">        # 1. Mymeta.__call__函数内会先调用People内的__new__</span><br><span class="line">        people_obj &#x3D; self.__new__(self) # 如果People里面没有，就会按继承关系去找，没找到最后找objec.__new__</span><br><span class="line">        </span><br><span class="line">        # 2. Mymeta.__call__函数内调用People内的__init__</span><br><span class="line">        self.__init__(people_obj,*args,**kwargs)</span><br><span class="line">        # 3. Mymeta.__call__函数会返回一个初始化好的对象</span><br><span class="line">        people_obj.__dict__[&#39;xxxx&#39;]&#x3D;1111</span><br><span class="line">        return people_obj</span><br><span class="line"></span><br><span class="line"># 类的产生</span><br><span class="line"># People&#x3D;Mymeta() --&gt; type.__call__ -&gt; 干了三件事</span><br><span class="line"># 1. type.__call__函数内会先调用Mymeta内的__new__</span><br><span class="line"># 2. type.__call__函数内先调用Mymeta内的__init__</span><br><span class="line"># 3. type.__call__函数会返回一个初始化好的对象</span><br><span class="line"></span><br><span class="line">class People(metaclass&#x3D;Mymeta):</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line"></span><br><span class="line">    def say(self):</span><br><span class="line">        print(&#39;%s %s&#39; %(self.name, self.age))</span><br><span class="line"></span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        # 产生真正的对象，采用真正的方法造对象</span><br><span class="line">        return object.__new__(cls)</span><br><span class="line"></span><br><span class="line"># 类的调用</span><br><span class="line">obj &#x3D; People(&#39;egon&#39;, 18) # &#x3D;&#x3D;&#x3D;&gt; Mymeta.__call__() --》 干了三件事</span><br><span class="line">print(obj)</span><br><span class="line">print(obj.__dict__)</span><br><span class="line"># 1. Mymeta.__call__函数内会先调用People内的__new__</span><br><span class="line"># 2. Mymeta.__call__函数内调用People内的__init__</span><br><span class="line"># 3. Mymeta.__call__函数会返回一个初始化好的对象</span><br></pre></td></tr></table></figure>

<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 应用：如果想让一个对象可以加括号调用，需要在该对象的类中添加一个__call__方法</span><br><span class="line"></span><br><span class="line"># 总结:</span><br><span class="line"># 对象() -&gt; 类内的__call__</span><br><span class="line"># 类() -&gt; 自定义元类内的__call__</span><br><span class="line"># 自定义元类() -&gt; 内置元类的__call__</span><br></pre></td></tr></table></figure>



<h5 id="模板-自定义元类模板"><a href="#模板-自定义元类模板" class="headerlink" title="模板:自定义元类模板"></a>模板:自定义元类模板</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME &#x3D; &#39;lqz&#39;</span><br><span class="line">AGE &#x3D; 18</span><br><span class="line"></span><br><span class="line">class Mymeta(type):</span><br><span class="line">    def __init__(self,class_name,class_bases,class_dict):</span><br><span class="line">        super().__init__(class_name,class_bases,class_dict)</span><br><span class="line">        self.__instance &#x3D; self(NAME,AGE)</span><br><span class="line">     </span><br><span class="line">    def __call__(self,*args,**kwargs):</span><br><span class="line">        </span><br><span class="line">        if len(args) &#x3D;&#x3D; 0 and len(kwargs) &#x3D;&#x3D; 0:</span><br><span class="line">            return self.__instance</span><br><span class="line">        </span><br><span class="line">        obj &#x3D; object.__new__(self)</span><br><span class="line">        self.__init__(obj,*args,**kwargs)</span><br><span class="line">        </span><br><span class="line">        return obj</span><br><span class="line">    </span><br><span class="line">class People(metaclass&#x3D;Mymeta):</span><br><span class="line">    def __init__(self,name,age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age &#x3D; age</span><br><span class="line">        </span><br><span class="line">peo1 &#x3D; People()</span><br><span class="line">peo2 &#x3D; People()</span><br></pre></td></tr></table></figure>

<h5 id="属性查找"><a href="#属性查找" class="headerlink" title="属性查找"></a>属性查找</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 属性查找原则：对象-&gt; 类 -&gt; 父类</span></span><br><span class="line"><span class="comment"># 切忌：父类 不是 元类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找顺序：</span></span><br><span class="line"><span class="comment">#1、先对象层：StanfordTeacher-&gt;Foo-&gt;Bar-&gt;object</span></span><br><span class="line"><span class="comment">#2、然后元类层：Mymeta-&gt;type</span></span><br><span class="line"></span><br><span class="line">obj.n 对象的属性查找在下面一层就结束掉了，不会去元类找。</span><br><span class="line">如果是类.属性(StanfordTeacher.n) 下层找完，会去元类层找</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210429024949402.png" alt="image-20210429024949402"></p>
<h4 id="15-异常处理"><a href="#15-异常处理" class="headerlink" title="15. 异常处理"></a>15. 异常处理</h4><ol>
<li><p>什么是异常处理<br> 异常是程序发生错误的信号，即程序一旦出错就会立刻产生一个异常，如果该异常没有被处理<br> 那么异常就抛出来，程序的运行也随之终止</p>
<p> 异常分为三部分：</p>
<pre><code> 异常的类型
 异常的内容、提示信息
 异常的追踪/定位信息信息</code></pre>
<p> 捕捉/检测异常，一旦发生异常就立刻执行相应的处理逻辑，而不是任由异常抛出来终止程序</p>
</li>
<li><p>为何要进行异常处理<br> 增强程序的健壮性</p>
</li>
</ol>
<ul>
<li>异常又分为两大类：<ul>
<li><ol>
<li>语法上错误导致的异常 #SyntaxError<br>针对语法上的错误，应该在程序运行前就立刻改正</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>异常打入日志</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    logging.error(str(e))</span><br><span class="line"></span><br><span class="line">自定义异常</span><br></pre></td></tr></table></figure></li>
<li><p>语法错误不会捕捉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line">   print(<span class="string">&#x27;====&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>逻辑错误导致的异常<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">int(<span class="string">&#x27;xxxxxxx&#x27;</span>) <span class="comment">#ValueError</span></span><br><span class="line"></span><br><span class="line">age <span class="comment">#NameError</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">10</span>: <span class="comment">#TypeError:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">l=[]</span><br><span class="line">l[<span class="number">1111111</span>] <span class="comment">#IndexError</span></span><br><span class="line"></span><br><span class="line">d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">d[<span class="string">&#x27;y&#x27;</span>] <span class="comment">#KeyError</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span> <span class="comment">#ZeroDivisionError</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
<li><ol start="3">
<li><p>如何进行异常处理</p>
<p>   try…except…</p>
</li>
</ol>
</li>
</ul>
<p>1.异常的单分支</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    age=<span class="number">10</span></span><br><span class="line">    age</span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    l[<span class="number">100</span>]</span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    d[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    print(<span class="string">&#x27;=====&gt;NameError&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>2.异常的多分支</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    age</span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># l[100]</span></span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment"># d[&#x27;y&#x27;]</span></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;NameError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError: %s&#x27;</span> %e)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>3.万能异常：Exception，可以匹配所有种类的异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># l[100]</span></span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    d[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>
<p>4.多分支+Exception，注意Exception一定要<strong>放到except 其他异常的的后面</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    l[<span class="number">100</span>]</span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    d[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError:%s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>5.try…else，else会在被检测的代码块没有异常发生的情况下执行， else一定要与except连用，并且一定要放到多个except后面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># l[100]</span></span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment"># d[&#x27;y&#x27;]</span></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError:%s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;else的代码只有在被检测的代码块没有异常发生的情况下才会执行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>6.try…finally,finnaly的代码会什么时候运行？ finally应放到最后面;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    f=open(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    l[<span class="number">100</span>]</span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment"># d[&#x27;y&#x27;]</span></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError:%s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;else的代码只有在被检测的代码块没有异常发生的情况下才会执行&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&#x27;finally的代码，无论被检测的代码有无异常，都会执行，通常在finally内做一些回收资源的事情&#x27;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>7.主动触发异常raise 异常类型(’异常的内容‘),指定抛出已知类型错误；触发异常后，后面的代码就不会再执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;===&gt;1&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;===&gt;2&#x27;</span>)</span><br><span class="line"><span class="keyword">raise</span> TypeError(<span class="string">&#x27;类型错误&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;===&gt;3&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;===&gt;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;阶段1---&gt;1&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段1---&gt;2&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段1---&gt;3&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义异常错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrError</span>(<span class="params">BaseException</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, v</span>):</span></span><br><span class="line">        self.v = v</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;%s&gt;&quot;</span> %self.v</span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> StrError(<span class="string">&#x27;名字必须str类型&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>8.断言</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assert  表达式 , 描述</span><br></pre></td></tr></table></figure>
<p>表达式为我们的预期结果，当表达式的结果为False时，抛出 AssertionError 异常，如无异常捕获程序遇到异常时直接结束运行。反之，表达式结果为True 程序继续向下运行。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if len(info) != 7:</span></span><br><span class="line"><span class="comment">#     raise ValueError(&#x27;值的个数 &lt; 7&#x27;)</span></span><br><span class="line"><span class="keyword">assert</span> len(info) == <span class="number">6</span> <span class="comment"># 我断定len(info) == 7,如果我断言失败，程序则抛出异常</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;阶段2---&gt;1&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段2---&gt;2&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段2---&gt;3&#x27;</span>)</span><br></pre></td></tr></table></figure>




<h3 id="面向对象实战"><a href="#面向对象实战" class="headerlink" title="面向对象实战"></a>面向对象实战</h3><p>链接：<a href="http://www.cnblogs.com/linhaifeng/articles/7341318.html">http://www.cnblogs.com/linhaifeng/articles/7341318.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Bootstrap-04</title>
    <url>/2021/05/02/%E5%89%8D%E7%AB%AF-Bootstrap-04/</url>
    <content><![CDATA[<p>Bootstrap插件</p>
<a id="more"></a>

<h2 id="1-BootStrap插件使用规则"><a href="#1-BootStrap插件使用规则" class="headerlink" title="1 BootStrap插件使用规则"></a>1 BootStrap插件使用规则</h2><h3 id="1-1-单个引入"><a href="#1-1-单个引入" class="headerlink" title="1.1 单个引入"></a>1.1 单个引入</h3><p>JavaScript 插件可以单个引入（使用 Bootstrap 提供的单个 <code>*.js</code> 文件），或者一次性全部引入（使用 <code>bootstrap.js</code> 或压缩版的 <code>bootstrap.min.js</code>）。</p>
<blockquote>
<p>某些插件和 CSS 组件依赖于其它插件。如果你是单个引入每个插件的，请确保在文档中检查插件之间的依赖关系。注意，所有插件都依赖 jQuery （也就是说，jQuery必须在所有插件<strong>之前</strong>引入页面）。 <a href="https://github.com/twbs/bootstrap/blob/v3.3.7/bower.json"><code>bower.json</code></a> 文件中列出了 Bootstrap 所支持的 jQuery 版本。</p>
</blockquote>
<h3 id="1-2-data属性"><a href="#1-2-data属性" class="headerlink" title="1.2 data属性"></a>1.2 data属性</h3><p>你可以仅仅通过 data 属性 API 就能使用所有的 Bootstrap 插件，无需写一行 JavaScript 代码。这是 Bootstrap 中的一等 API，也应该是你的首选方式。</p>
<p>话又说回来，在某些情况下可能需要将此功能关闭。因此，我们还提供了关闭 data 属性 API 的方法，即解除以 <code>data-api</code> 为命名空间并绑定在文档上的事件。就像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).off(&#39;.data-api&#39;)</span><br></pre></td></tr></table></figure>

<p>另外，如果是针对某个特定的插件，只需在 <code>data-api</code> 前面添加那个插件的名称作为命名空间，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).off(&#39;.alert.data-api&#39;)</span><br></pre></td></tr></table></figure>

<h3 id="1-3-编程方式的-API"><a href="#1-3-编程方式的-API" class="headerlink" title="1.3 编程方式的 API"></a>1.3 编程方式的 API</h3><p>我们为所有 Bootstrap 插件提供了纯 JavaScript 方式的 API。所有公开的 API 都是支持单独或链式调用方式，并且返回其所操作的元素集合（注：和jQuery的调用形式一致）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;.btn.danger&#39;).button(&#39;toggle&#39;).addClass(&#39;fat&#39;)</span><br></pre></td></tr></table></figure>

<p>所有方法都可以接受一个可选的 option 对象作为参数，或者一个代表特定方法的字符串，或者什么也不提供（在这种情况下，插件将会以默认值初始化）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myModal&#39;).modal()                      &#x2F;&#x2F; 以默认值初始化</span><br><span class="line">$(&#39;#myModal&#39;).modal(&#123; keyboard: false &#125;)   &#x2F;&#x2F; initialized with no keyboard</span><br><span class="line">$(&#39;#myModal&#39;).modal(&#39;show&#39;)                &#x2F;&#x2F; 初始化后立即调用 show 方法</span><br></pre></td></tr></table></figure>

<p>每个插件还通过 <code>Constructor</code> 属性暴露了其原始的构造函数：<code>$.fn.popover.Constructor</code>。如果你想获取某个插件的实例，可以直接通过页面元素获取：<code>$(&#39;[rel=&quot;popover&quot;]&#39;).data(&#39;popover&#39;)</code>。</p>
<p><strong>默认设置</strong></p>
<p>每个插件都可以通过修改其自身的 <code>Constructor.DEFAULTS</code> 对象从而改变插件的默认设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.fn.modal.Constructor.DEFAULTS.keyboard &#x3D; false &#x2F;&#x2F; 将模态框插件的 &#96;keyboard&#96; 默认选参数置为 false</span><br></pre></td></tr></table></figure>

<h3 id="1-4-避免命名空间冲突"><a href="#1-4-避免命名空间冲突" class="headerlink" title="1.4 避免命名空间冲突"></a>1.4 避免命名空间冲突</h3><p>某些时候可能需要将 Bootstrap 插件与其他 UI 框架共同使用。在这种情况下，命名空间冲突随时可能发生。如果不幸发生了这种情况，你可以通过调用插件的 <code>.noConflict</code> 方法恢复其原始值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bootstrapButton &#x3D; $.fn.button.noConflict() &#x2F;&#x2F; return $.fn.button to previously assigned value</span><br><span class="line">$.fn.bootstrapBtn &#x3D; bootstrapButton            &#x2F;&#x2F; give $().bootstrapBtn the Bootstrap functionality</span><br></pre></td></tr></table></figure>

<h3 id="1-5-事件"><a href="#1-5-事件" class="headerlink" title="1.5 事件"></a>1.5 事件</h3><p>Bootstrap 为大部分插件所具有的动作提供了自定义事件。一般来说，这些事件都有不定式和过去式两种动词的命名形式，例如，不定式形式的动词（例如 <code>show</code>）表示其在事件开始时被触发；而过去式动词（例如 <code>shown</code> ）表示在动作执行完毕之后被触发。</p>
<p>从 3.0.0 版本开始，所有 Bootstrap 事件的名称都采用命名空间方式。</p>
<p>所有以不定式形式的动词命名的事件都提供了 <code>preventDefault</code> 功能。这就赋予你在动作开始执行前将其停止的能力。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myModal&#39;).on(&#39;show.bs.modal&#39;, function (e) &#123;</span><br><span class="line">  if (!data) return e.preventDefault() &#x2F;&#x2F; 阻止模态框的展示</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="1-6-版本号"><a href="#1-6-版本号" class="headerlink" title="1.6 版本号"></a>1.6 版本号</h3><p>每个 Bootstrap 的 jQuery 插件的版本号都可以通过插件的构造函数上的 <code>VERSION</code> 属性获取到。例如工具提示框（tooltip）插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.fn.tooltip.Constructor.VERSION &#x2F;&#x2F; &#x3D;&gt; &quot;3.3.7&quot;</span><br></pre></td></tr></table></figure>

<h2 id="2-过渡效果-transition-js"><a href="#2-过渡效果-transition-js" class="headerlink" title="2 过渡效果 transition.js"></a>2 过渡效果 transition.js</h2><h3 id="2-1-关于过渡效果"><a href="#2-1-关于过渡效果" class="headerlink" title="2.1 关于过渡效果"></a>2.1 关于过渡效果</h3><p>对于简单的过渡效果，只需将 <code>transition.js</code> 和其它 JS 文件一起引入即可。如果你使用的是编译（或压缩）版的 <code>bootstrap.js</code> 文件，就无需再单独将其引入了。</p>
<h3 id="2-3-包含的内容"><a href="#2-3-包含的内容" class="headerlink" title="2.3 包含的内容"></a>2.3 包含的内容</h3><p>Transition.js 是针对 <code>transitionEnd</code> 事件的一个基本辅助工具，也是对 CSS 过渡效果的模拟。它被其它插件用来检测当前浏览器对是否支持 CSS 的过渡效果。</p>
<h3 id="2-4-禁用过度效果"><a href="#2-4-禁用过度效果" class="headerlink" title="2.4 禁用过度效果"></a>2.4 禁用过度效果</h3><p>通过下面的 JavaScript 代码可以在全局范围禁用过渡效果，并且必须将此代码放在 <code>transition.js</code> （或 <code>bootstrap.js</code> 或 <code>bootstrap.min.js</code>）后面，确保在 js 文件加载完毕后再执行下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.support.transition &#x3D; false</span><br></pre></td></tr></table></figure>

<h2 id="3-模态框-modal-js"><a href="#3-模态框-modal-js" class="headerlink" title="3 模态框 modal.js"></a>3 模态框 modal.js</h2><blockquote>
<p>务必将模态框的 HTML 代码放在文档的最高层级内（也就是说，尽量作为 body 标签的直接子元素），以避免其他组件影响模态框的展现和/或功能。</p>
</blockquote>
<h3 id="3-1-模态框定义"><a href="#3-1-模态框定义" class="headerlink" title="3.1 模态框定义"></a>3.1 模态框定义</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Modal --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;modal fade&quot; id&#x3D;&quot;myModal&quot; tabindex&#x3D;&quot;-1&quot; role&#x3D;&quot;dialog&quot; aria-labelledby&#x3D;&quot;myModalLabel&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;modal-dialog&quot; role&#x3D;&quot;document&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;modal-content&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;modal-header&quot;&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;close&quot; data-dismiss&#x3D;&quot;modal&quot; aria-label&#x3D;&quot;Close&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;times;&lt;&#x2F;span&gt;&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;h4 class&#x3D;&quot;modal-title&quot; id&#x3D;&quot;myModalLabel&quot;&gt;Modal title&lt;&#x2F;h4&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;modal-body&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;modal-footer&quot;&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-dismiss&#x3D;&quot;modal&quot;&gt;Close&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot;&gt;Save changes&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-按钮"><a href="#3-2-按钮" class="headerlink" title="3.2 按钮"></a>3.2 按钮</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Button trigger modal --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary btn-lg&quot; data-toggle&#x3D;&quot;modal&quot; data-target&#x3D;&quot;#myModal&quot;&gt;</span><br><span class="line">  Launch demo modal</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-模态框尺寸"><a href="#3-3-模态框尺寸" class="headerlink" title="3.3 模态框尺寸"></a>3.3 模态框尺寸</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Large modal --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; data-toggle&#x3D;&quot;modal&quot; data-target&#x3D;&quot;.bs-example-modal-lg&quot;&gt;Large modal&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;modal fade bs-example-modal-lg&quot; tabindex&#x3D;&quot;-1&quot; role&#x3D;&quot;dialog&quot; aria-labelledby&#x3D;&quot;myLargeModalLabel&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;modal-dialog modal-lg&quot; role&#x3D;&quot;document&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;modal-content&quot;&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Small modal --&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; data-toggle&#x3D;&quot;modal&quot; data-target&#x3D;&quot;.bs-example-modal-sm&quot;&gt;Small modal&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;modal fade bs-example-modal-sm&quot; tabindex&#x3D;&quot;-1&quot; role&#x3D;&quot;dialog&quot; aria-labelledby&#x3D;&quot;mySmallModalLabel&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;modal-dialog modal-sm&quot; role&#x3D;&quot;document&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;modal-content&quot;&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-禁止动画效果"><a href="#3-4-禁止动画效果" class="headerlink" title="3.4 禁止动画效果"></a>3.4 禁止动画效果</h3><p>如果你不需要模态框弹出时的动画效果（淡入淡出效果），删掉 <code>.fade</code> 类即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;modal&quot; tabindex&#x3D;&quot;-1&quot; role&#x3D;&quot;dialog&quot; aria-labelledby&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-模态框中使用栅格系统"><a href="#3-5-模态框中使用栅格系统" class="headerlink" title="3.5 模态框中使用栅格系统"></a>3.5 模态框中使用栅格系统</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;modal fade&quot; tabindex&#x3D;&quot;-1&quot; role&#x3D;&quot;dialog&quot; aria-labelledby&#x3D;&quot;gridSystemModalLabel&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;modal-dialog&quot; role&#x3D;&quot;document&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;modal-content&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;modal-header&quot;&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;close&quot; data-dismiss&#x3D;&quot;modal&quot; aria-label&#x3D;&quot;Close&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;times;&lt;&#x2F;span&gt;&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;h4 class&#x3D;&quot;modal-title&quot; id&#x3D;&quot;gridSystemModalLabel&quot;&gt;Modal title&lt;&#x2F;h4&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;modal-body&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-md-4&quot;&gt;.col-md-4&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-md-4 col-md-offset-4&quot;&gt;.col-md-4 .col-md-offset-4&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-md-3 col-md-offset-3&quot;&gt;.col-md-3 .col-md-offset-3&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-md-2 col-md-offset-4&quot;&gt;.col-md-2 .col-md-offset-4&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-md-6 col-md-offset-3&quot;&gt;.col-md-6 .col-md-offset-3&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;col-sm-9&quot;&gt;</span><br><span class="line">            Level 1: .col-sm-9</span><br><span class="line">            &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">              &lt;div class&#x3D;&quot;col-xs-8 col-sm-6&quot;&gt;</span><br><span class="line">                Level 2: .col-xs-8 .col-sm-6</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">              &lt;div class&#x3D;&quot;col-xs-4 col-sm-6&quot;&gt;</span><br><span class="line">                Level 2: .col-xs-4 .col-sm-6</span><br><span class="line">              &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;modal-footer&quot;&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-dismiss&#x3D;&quot;modal&quot;&gt;Close&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot;&gt;Save changes&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;&lt;!-- &#x2F;.modal-content --&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;&lt;!-- &#x2F;.modal-dialog --&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&lt;!-- &#x2F;.modal --&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-6-基于触发器按钮的不同模态内容"><a href="#3-6-基于触发器按钮的不同模态内容" class="headerlink" title="3.6 基于触发器按钮的不同模态内容"></a>3.6 基于触发器按钮的不同模态内容</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; data-toggle&#x3D;&quot;modal&quot; data-target&#x3D;&quot;#exampleModal&quot; data-whatever&#x3D;&quot;@mdo&quot;&gt;Open modal for @mdo&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; data-toggle&#x3D;&quot;modal&quot; data-target&#x3D;&quot;#exampleModal&quot; data-whatever&#x3D;&quot;@fat&quot;&gt;Open modal for @fat&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; data-toggle&#x3D;&quot;modal&quot; data-target&#x3D;&quot;#exampleModal&quot; data-whatever&#x3D;&quot;@getbootstrap&quot;&gt;Open modal for @getbootstrap&lt;&#x2F;button&gt;</span><br><span class="line">...more buttons...</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;modal fade&quot; id&#x3D;&quot;exampleModal&quot; tabindex&#x3D;&quot;-1&quot; role&#x3D;&quot;dialog&quot; aria-labelledby&#x3D;&quot;exampleModalLabel&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;modal-dialog&quot; role&#x3D;&quot;document&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;modal-content&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;modal-header&quot;&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;close&quot; data-dismiss&#x3D;&quot;modal&quot; aria-label&#x3D;&quot;Close&quot;&gt;&lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;times;&lt;&#x2F;span&gt;&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;h4 class&#x3D;&quot;modal-title&quot; id&#x3D;&quot;exampleModalLabel&quot;&gt;New message&lt;&#x2F;h4&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;modal-body&quot;&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">            &lt;label for&#x3D;&quot;recipient-name&quot; class&#x3D;&quot;control-label&quot;&gt;Recipient:&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;recipient-name&quot;&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">            &lt;label for&#x3D;&quot;message-text&quot; class&#x3D;&quot;control-label&quot;&gt;Message:&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;textarea class&#x3D;&quot;form-control&quot; id&#x3D;&quot;message-text&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;modal-footer&quot;&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-dismiss&#x3D;&quot;modal&quot;&gt;Close&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot;&gt;Send message&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">$(&#39;#exampleModal&#39;).on(&#39;show.bs.modal&#39;, function (event) &#123;</span><br><span class="line">  var button &#x3D; $(event.relatedTarget) &#x2F;&#x2F; Button that triggered the modal</span><br><span class="line">  var recipient &#x3D; button.data(&#39;whatever&#39;) &#x2F;&#x2F; Extract info from data-* attributes</span><br><span class="line">  &#x2F;&#x2F; If necessary, you could initiate an AJAX request here (and then do the updating in a callback).</span><br><span class="line">  &#x2F;&#x2F; Update the modal&#39;s content. We&#39;ll use jQuery here, but you could use a data binding library or other methods instead.</span><br><span class="line">  var modal &#x3D; $(this)</span><br><span class="line">  modal.find(&#39;.modal-title&#39;).text(&#39;New message to &#39; + recipient)</span><br><span class="line">  modal.find(&#39;.modal-body input&#39;).val(recipient)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-7-通过JavaScript处理模态框"><a href="#3-7-通过JavaScript处理模态框" class="headerlink" title="3.7 通过JavaScript处理模态框"></a>3.7 通过JavaScript处理模态框</h3><h4 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myModal&#39;).modal(options)</span><br></pre></td></tr></table></figure>

<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>backdrop</td>
<td>boolean 或 字符串 <code>&#39;static&#39;</code></td>
<td>true</td>
<td>I指定一个静态的背景，当用户点击模态框外部时不会关闭模态框。</td>
</tr>
<tr>
<td>keyboard</td>
<td>boolean</td>
<td>true</td>
<td>键盘上的 esc 键被按下时关闭模态框。</td>
</tr>
<tr>
<td>show</td>
<td>boolean</td>
<td>true</td>
<td>模态框初始化之后就立即显示出来。</td>
</tr>
<tr>
<td>remote</td>
<td>path</td>
<td>false</td>
<td><strong>This option is deprecated since v3.3.0 and has been removed in v4.</strong> We recommend instead using client-side templating or a data binding framework, or calling <a href="http://api.jquery.com/load/">jQuery.load</a>yourself.如果提供的是 URL，将利用 jQuery 的 <code>load</code> 方法<strong>从此 URL 地址加载要展示的内容（只加载一次）</strong>并插入 <code>.modal-content</code> 内。如果使用的是 data 属性 API，还可以利用 <code>href</code> 属性指定内容来源地址。下面是一个实例：<code>&lt;a data-toggle=&quot;modal&quot; href=&quot;remote.html&quot; data-target=&quot;#modal&quot;&gt;Click me&lt;/a&gt;</code></td>
</tr>
</tbody></table>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p><strong><code>.modal(options)</code></strong></p>
<p>将页面中的某块内容作为模态框激活。接受可选参数 <code>object</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myModal&#39;).modal(&#123;</span><br><span class="line">  keyboard: false</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong><code>.modal(&#39;toggle&#39;)</code></strong></p>
<p>手动打开或关闭模态框。<strong>在模态框显示或隐藏之前返回到主调函数中</strong>（也就是，在触发 <code>shown.bs.modal</code> 或 <code>hidden.bs.modal</code> 事件之前）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myModal&#39;).modal(&#39;toggle&#39;)</span><br></pre></td></tr></table></figure>

<p><strong><code>.modal(&#39;show&#39;)</code></strong></p>
<p>手动打开模态框。<strong>在模态框显示之前返回到主调函数中</strong> （也就是，在触发 <code>shown.bs.modal</code> 事件之前）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myModal&#39;).modal(&#39;show&#39;)</span><br></pre></td></tr></table></figure>

<p><strong><code>.modal(&#39;hide&#39;)</code></strong></p>
<p>手动隐藏模态框。<strong>在模态框隐藏之前返回到主调函数中</strong> （也就是，在触发 <code>hidden.bs.modal</code> 事件之前）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myModal&#39;).modal(&#39;hide&#39;)</span><br></pre></td></tr></table></figure>

<p><strong><code>.modal(&#39;handleUpdate&#39;)</code></strong></p>
<p>整模态的定位，以对抗滚动条，以防出现一个模式，这会使模态向左跳</p>
<p>只需要当模态的高度在打开时改变。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myModal&#39;).modal(&#39;handleUpdate&#39;)</span><br></pre></td></tr></table></figure>

<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>Bootstrap 的模态框类提供了一些事件用于监听并执行你自己的代码。</p>
<table>
<thead>
<tr>
<th>事件类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>show.bs.modal</td>
<td><code>show</code> 方法调用之后立即触发该事件。如果是通过点击某个作为触发器的元素，则此元素可以通过事件的 <code>relatedTarget</code> 属性进行访问。</td>
</tr>
<tr>
<td>shown.bs.modal</td>
<td>此事件在模态框已经显示出来（并且同时在 CSS 过渡效果完成）之后被触发。如果是通过点击某个作为触发器的元素，则此元素可以通过事件的 <code>relatedTarget</code> 属性进行访问。</td>
</tr>
<tr>
<td>hide.bs.modal</td>
<td><code>hide</code> 方法调用之后立即触发该事件。</td>
</tr>
<tr>
<td>hidden.bs.modal</td>
<td>此事件在模态框被隐藏（并且同时在 CSS 过渡效果完成）之后被触发。</td>
</tr>
<tr>
<td>loaded.bs.modal</td>
<td>从<code>远端的数据源</code>加载完数据之后触发该事件。</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myModal&#39;).on(&#39;hidden.bs.modal&#39;, function (e) &#123;</span><br><span class="line">  &#x2F;&#x2F; do something...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-下拉菜单-dropdown-js"><a href="#4-下拉菜单-dropdown-js" class="headerlink" title="4 下拉菜单 dropdown.js"></a>4 下拉菜单 dropdown.js</h2><h3 id="4-1-JavaScript调用"><a href="#4-1-JavaScript调用" class="headerlink" title="4.1 JavaScript调用"></a>4.1 JavaScript调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;.dropdown-toggle&#39;).dropdown()</span><br></pre></td></tr></table></figure>

<h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p><strong><code>$().dropdown(&#39;toggle&#39;)</code></strong></p>
<p>Toggles the dropdown menu of a given navbar or tabbed navigation.</p>
<h4 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h4><table>
<thead>
<tr>
<th>Event Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>show.bs.dropdown</td>
<td>This event fires immediately when the show instance method is called.</td>
</tr>
<tr>
<td>shown.bs.dropdown</td>
<td>This event is fired when the dropdown has been made visible to the user (will wait for CSS transitions, to complete).</td>
</tr>
<tr>
<td>hide.bs.dropdown</td>
<td>This event is fired immediately when the hide instance method has been called.</td>
</tr>
<tr>
<td>hidden.bs.dropdown</td>
<td>This event is fired when the dropdown has finished being hidden from the user (will wait for CSS transitions, to complete).</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myDropdown&#39;).on(&#39;show.bs.dropdown&#39;, function () &#123;</span><br><span class="line">  &#x2F;&#x2F; do something…</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5-滚动监听-scrollspy-js"><a href="#5-滚动监听-scrollspy-js" class="headerlink" title="5 滚动监听 scrollspy.js"></a>5 滚动监听 scrollspy.js</h2><p>滚动监听插件是用来根据滚动条所处的位置来自动更新导航项的。滚动导航条下面的区域并关注导航项的变化。下拉菜单中的条目也会自动高亮显示。</p>
<blockquote>
<p>依赖 Bootstrap 的导航组件</p>
<p>滚动监听插件依赖 Bootstrap 的导航组件用于高亮显示当前激活的链接。</p>
<p>无论何种实现方式，滚动监听都需要被监听的组件是 <code>position: relative;</code> 即相对定位方式。大多数时候是监听 <code>&lt;body&gt;</code> 元素</p>
</blockquote>
<h3 id="5-1-基本调用"><a href="#5-1-基本调用" class="headerlink" title="5.1 基本调用"></a>5.1 基本调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">&lt;body data-spy&#x3D;&quot;scroll&quot; data-target&#x3D;&quot;#navbar-example&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;div id&#x3D;&quot;navbar-example&quot;&gt;</span><br><span class="line">    &lt;ul class&#x3D;&quot;nav nav-tabs&quot; role&#x3D;&quot;tablist&quot;&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-JavaScript调用"><a href="#5-2-JavaScript调用" class="headerlink" title="5.2 JavaScript调用"></a>5.2 JavaScript调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;body&#39;).scrollspy(&#123; target: &#39;#navbar-example&#39; &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><p><strong><code>.scrollspy(&#39;refresh&#39;)</code></strong></p>
<p>当使用滚动监听插件的同时在 DOM 中添加或删除元素后，你需要像下面这样调用此刷新（ refresh） 方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;[data-spy&#x3D;&quot;scroll&quot;]&#39;).each(function () &#123;</span><br><span class="line">  var $spy &#x3D; $(this).scrollspy(&#39;refresh&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>可以通过 data 属性或 JavaScript 传递参数。对于 data 属性，其名称是将参数名附着到 <code>data-</code> 后面组成，例如 <code>data-offset=&quot;&quot;</code>。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>offset</td>
<td>number</td>
<td>10</td>
<td>计算滚动位置时相对于顶部的偏移量（像素数）。</td>
</tr>
</tbody></table>
<h4 id="事件-2"><a href="#事件-2" class="headerlink" title="事件"></a>事件</h4><table>
<thead>
<tr>
<th>事件类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>activate.bs.scrollspy</td>
<td>每当一个新条目被激活后都将由滚动监听插件触发此事件。</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myScrollspy&#39;).on(&#39;activate.bs.scrollspy&#39;, function () &#123;</span><br><span class="line">  &#x2F;&#x2F; do something…</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="6-标签页-tab-js"><a href="#6-标签页-tab-js" class="headerlink" title="6 标签页 tab.js"></a>6 标签页 tab.js</h2><h3 id="6-1-基本使用"><a href="#6-1-基本使用" class="headerlink" title="6.1 基本使用"></a>6.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Nav tabs --&gt;</span><br><span class="line">  &lt;ul class&#x3D;&quot;nav nav-tabs&quot; role&#x3D;&quot;tablist&quot;&gt;</span><br><span class="line">    &lt;li role&#x3D;&quot;presentation&quot; class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;#home&quot; aria-controls&#x3D;&quot;home&quot; role&#x3D;&quot;tab&quot; data-toggle&#x3D;&quot;tab&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li role&#x3D;&quot;presentation&quot;&gt;&lt;a href&#x3D;&quot;#profile&quot; aria-controls&#x3D;&quot;profile&quot; role&#x3D;&quot;tab&quot; data-toggle&#x3D;&quot;tab&quot;&gt;Profile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li role&#x3D;&quot;presentation&quot;&gt;&lt;a href&#x3D;&quot;#messages&quot; aria-controls&#x3D;&quot;messages&quot; role&#x3D;&quot;tab&quot; data-toggle&#x3D;&quot;tab&quot;&gt;Messages&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li role&#x3D;&quot;presentation&quot;&gt;&lt;a href&#x3D;&quot;#settings&quot; aria-controls&#x3D;&quot;settings&quot; role&#x3D;&quot;tab&quot; data-toggle&#x3D;&quot;tab&quot;&gt;Settings&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Tab panes --&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tab-content&quot;&gt;</span><br><span class="line">    &lt;div role&#x3D;&quot;tabpanel&quot; class&#x3D;&quot;tab-pane active&quot; id&#x3D;&quot;home&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div role&#x3D;&quot;tabpanel&quot; class&#x3D;&quot;tab-pane&quot; id&#x3D;&quot;profile&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div role&#x3D;&quot;tabpanel&quot; class&#x3D;&quot;tab-pane&quot; id&#x3D;&quot;messages&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div role&#x3D;&quot;tabpanel&quot; class&#x3D;&quot;tab-pane&quot; id&#x3D;&quot;settings&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-Fade特效"><a href="#6-2-Fade特效" class="headerlink" title="6.2 Fade特效"></a>6.2 Fade特效</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;tab-content&quot;&gt;</span><br><span class="line">  &lt;div role&#x3D;&quot;tabpanel&quot; class&#x3D;&quot;tab-pane fade in active&quot; id&#x3D;&quot;home&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div role&#x3D;&quot;tabpanel&quot; class&#x3D;&quot;tab-pane fade&quot; id&#x3D;&quot;profile&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div role&#x3D;&quot;tabpanel&quot; class&#x3D;&quot;tab-pane fade&quot; id&#x3D;&quot;messages&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div role&#x3D;&quot;tabpanel&quot; class&#x3D;&quot;tab-pane fade&quot; id&#x3D;&quot;settings&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-JavaScript调用"><a href="#6-3-JavaScript调用" class="headerlink" title="6.3 JavaScript调用"></a>6.3 JavaScript调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myTabs a&#39;).click(function (e) &#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  $(this).tab(&#39;show&#39;)</span><br><span class="line">&#125;)</span><br><span class="line">$(&#39;#myTabs a[href&#x3D;&quot;#profile&quot;]&#39;).tab(&#39;show&#39;) &#x2F;&#x2F; Select tab by name</span><br><span class="line">$(&#39;#myTabs a:first&#39;).tab(&#39;show&#39;) &#x2F;&#x2F; Select first tab</span><br><span class="line">$(&#39;#myTabs a:last&#39;).tab(&#39;show&#39;) &#x2F;&#x2F; Select last tab</span><br><span class="line">$(&#39;#myTabs li:eq(2) a&#39;).tab(&#39;show&#39;) &#x2F;&#x2F; Select third tab (0-indexed)</span><br></pre></td></tr></table></figure>

<h4 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h4><p><strong><code>$().tab</code></strong></p>
<p>该方法可以激活标签页元素和内容容器。标签页需要用一个 <strong>data-target</strong> 或者一个指向 DOM 中容器节点的 <strong>href</strong>。</p>
<p><strong><code>.tab(&#39;show&#39;)</code></strong></p>
<p>Selects the given tab and shows its associated content. Any other tab that was previously selected becomes unselected and its associated content is hidden. <strong>Returns to the caller before the tab pane has actually been shown</strong> (i.e. before the <code>shown.bs.tab</code>event occurs).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#someTab&#39;).tab(&#39;show&#39;)</span><br></pre></td></tr></table></figure>

<h4 id="事件-3"><a href="#事件-3" class="headerlink" title="事件"></a>事件</h4><table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>show.bs.tab</td>
<td>该事件在标签页显示时触发，但是必须在新标签页被显示之前。分别使用 <strong>event.target</strong> 和 <strong>event.relatedTarget</strong> 来定位到激活的标签页和前一个激活的标签页。</td>
<td><code>$(&#39;a[data-toggle=&quot;tab&quot;]&#39;).on(&#39;show.bs.tab&#39;, function (e) &#123; e.target // 激活的标签页 e.relatedTarget // 前一个激活的标签页 &#125;)</code></td>
</tr>
<tr>
<td>shown.bs.tab</td>
<td>该事件在标签页显示时触发，但是必须在某个标签页已经显示之后。分别使用 <strong>event.target</strong> 和 <strong>event.relatedTarget</strong> 来定位到激活的标签页和前一个激活的标签页。</td>
<td><code>$(&#39;a[data-toggle=&quot;tab&quot;]&#39;).on(&#39;shown.bs.tab&#39;, function (e) &#123; e.target // 激活的标签页 e.relatedTarget // 前一个激活的标签页 &#125;)</code></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;a[data-toggle&#x3D;&quot;tab&quot;]&#39;).on(&#39;shown.bs.tab&#39;, function (e) &#123;</span><br><span class="line">  e.target &#x2F;&#x2F; newly activated tab</span><br><span class="line">  e.relatedTarget &#x2F;&#x2F; previous active tab</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="7-工具提示-tooltips-js"><a href="#7-工具提示-tooltips-js" class="headerlink" title="7 工具提示 tooltips.js"></a>7 工具提示 tooltips.js</h2><h3 id="7-1-基本使用"><a href="#7-1-基本使用" class="headerlink" title="7.1 基本使用"></a>7.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-toggle&#x3D;&quot;tooltip&quot; data-placement&#x3D;&quot;left&quot; title&#x3D;&quot;Tooltip on left&quot;&gt;Tooltip on left&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-toggle&#x3D;&quot;tooltip&quot; data-placement&#x3D;&quot;top&quot; title&#x3D;&quot;Tooltip on top&quot;&gt;Tooltip on top&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-toggle&#x3D;&quot;tooltip&quot; data-placement&#x3D;&quot;bottom&quot; title&#x3D;&quot;Tooltip on bottom&quot;&gt;Tooltip on bottom&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-toggle&#x3D;&quot;tooltip&quot; data-placement&#x3D;&quot;right&quot; title&#x3D;&quot;Tooltip on right&quot;&gt;Tooltip on right&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-JavaScript调用"><a href="#7-2-JavaScript调用" class="headerlink" title="7.2 JavaScript调用"></a>7.2 JavaScript调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#example&#39;).tooltip(options)</span><br></pre></td></tr></table></figure>

<h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><table>
<thead>
<tr>
<th>选项名称</th>
<th>类型/默认值</th>
<th>Data 属性名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>animation</td>
<td>boolean <em>默认值：true</em></td>
<td>data-animation</td>
<td>提示工具使用 CSS 渐变滤镜效果。</td>
</tr>
<tr>
<td>html</td>
<td>boolean <em>默认值：false</em></td>
<td>data-html</td>
<td>向提示工具插入 HTML。如果为 false，jQuery 的 text 方法将被用于向 dom 插入内容。如果您担心 XSS 攻击，请使用 text。</td>
</tr>
<tr>
<td>placement</td>
<td>string|function <em>默认值：top</em></td>
<td>data-placement</td>
<td>规定如何定位提示工具（即 top|bottom|left|right|auto）。 当指定为 <em>auto</em> 时，会动态调整提示工具。例如，如果 placement 是 “auto left”，提示工具将会尽可能显示在左边，在情况不允许的情况下它才会显示在右边。</td>
</tr>
<tr>
<td>selector</td>
<td>string <em>默认值：false</em></td>
<td>data-selector</td>
<td>如果提供了一个选择器，提示工具对象将被委派到指定的目标。</td>
</tr>
<tr>
<td>title</td>
<td>string | function <em>默认值：’’</em></td>
<td>data-title</td>
<td>如果未指定 <em>title</em> 属性，则 title 选项是默认的 title 值。</td>
</tr>
<tr>
<td>trigger</td>
<td>string <em>默认值：’hover focus’</em></td>
<td>data-trigger</td>
<td>定义如何触发提示工具： <strong>click| hover | focus | manual</strong>。您可以传递多个触发器，每个触发器之间用空格分隔。</td>
</tr>
<tr>
<td>delay</td>
<td>number | object <em>默认值：0</em></td>
<td>data-delay</td>
<td>延迟显示和隐藏提示工具的毫秒数 - 对 manual 手动触发类型不适用。如果提供的是一个数字，那么延迟将会应用于显示和隐藏。如果提供的是对象，结构如下所示：<code>delay: &#123; show: 500, hide: 100 &#125;</code></td>
</tr>
<tr>
<td>container</td>
<td>string | false <em>默认值：false</em></td>
<td>data-container</td>
<td>向指定元素追加提示工具。 实例： container: ‘body’</td>
</tr>
</tbody></table>
<h4 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Options:</strong> .tooltip(options)</td>
<td>向元素集合附加提示工具句柄。</td>
<td><code>$().tooltip(options)</code></td>
</tr>
<tr>
<td><strong>Toggle:</strong> .tooltip(‘toggle’)</td>
<td>切换显示/隐藏元素的提示工具。</td>
<td><code>$(&#39;#element&#39;).tooltip(&#39;toggle&#39;)</code></td>
</tr>
<tr>
<td><strong>Show:</strong> .tooltip(‘show’)</td>
<td>显示元素的提示工具。</td>
<td><code>$(&#39;#element&#39;).tooltip(&#39;show&#39;)</code></td>
</tr>
<tr>
<td><strong>Hide:</strong> .tooltip(‘hide’)</td>
<td>隐藏元素的提示工具。</td>
<td><code>$(&#39;#element&#39;).tooltip(&#39;hide&#39;)</code></td>
</tr>
<tr>
<td><strong>Destroy:</strong> .tooltip(‘destroy’)</td>
<td>隐藏并销毁元素的提示工具。</td>
<td><code>$(&#39;#element&#39;).tooltip(&#39;destroy&#39;)</code></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#element&#39;).tooltip(&#39;destroy&#39;)</span><br></pre></td></tr></table></figure>

<h4 id="事件-4"><a href="#事件-4" class="headerlink" title="事件"></a>事件</h4><table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>show.bs.tooltip</td>
<td>当调用 show 实例方法时立即触发该事件。</td>
<td><code>$(&#39;#myTooltip&#39;).on(&#39;show.bs.tooltip&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td>shown.bs.tooltip</td>
<td>当提示工具对用户可见时触发该事件（将等待 CSS 过渡效果完成）。</td>
<td><code>$(&#39;#myTooltip&#39;).on(&#39;shown.bs.tooltip&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td>hide.bs.tooltip</td>
<td>当调用 hide 实例方法时立即触发该事件。</td>
<td><code>$(&#39;#myTooltip&#39;).on(&#39;hide.bs.tooltip&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td>hidden.bs.tooltip</td>
<td>当提示工具对用户隐藏时触发该事件（将等待 CSS 过渡效果完成）。</td>
<td><code>$(&#39;#myTooltip&#39;).on(&#39;hidden.bs.tooltip&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myTooltip&#39;).on(&#39;hidden.bs.tooltip&#39;, function () &#123;</span><br><span class="line">  &#x2F;&#x2F; do something…</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="8-弹出框-popover-js"><a href="#8-弹出框-popover-js" class="headerlink" title="8 弹出框 popover.js"></a>8 弹出框 popover.js</h2><h3 id="8-1-基本使用"><a href="#8-1-基本使用" class="headerlink" title="8.1 基本使用"></a>8.1 基本使用</h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-lg btn-danger&quot; data-toggle&#x3D;&quot;popover&quot; title&#x3D;&quot;Popover title&quot; data-content&#x3D;&quot;And here&#39;s some amazing content. It&#39;s very engaging. Right?&quot;&gt;点我弹出&#x2F;隐藏弹出框&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<h4 id="弹出方向"><a href="#弹出方向" class="headerlink" title="弹出方向"></a>弹出方向</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-container&#x3D;&quot;body&quot; data-toggle&#x3D;&quot;popover&quot; data-placement&#x3D;&quot;left&quot; data-content&#x3D;&quot;Vivamus sagittis lacus vel augue laoreet rutrum faucibus.&quot;&gt;</span><br><span class="line">  Popover on 左侧</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-container&#x3D;&quot;body&quot; data-toggle&#x3D;&quot;popover&quot; data-placement&#x3D;&quot;top&quot; data-content&#x3D;&quot;Vivamus sagittis lacus vel augue laoreet rutrum faucibus.&quot;&gt;</span><br><span class="line">  Popover on 顶部</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-container&#x3D;&quot;body&quot; data-toggle&#x3D;&quot;popover&quot; data-placement&#x3D;&quot;bottom&quot; data-content&#x3D;&quot;Vivamus</span><br><span class="line">sagittis lacus vel augue laoreet rutrum faucibus.&quot;&gt;</span><br><span class="line">  Popover on 底部</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-default&quot; data-container&#x3D;&quot;body&quot; data-toggle&#x3D;&quot;popover&quot; data-placement&#x3D;&quot;right&quot; data-content&#x3D;&quot;Vivamus sagittis lacus vel augue laoreet rutrum faucibus.&quot;&gt;</span><br><span class="line">  Popover on 右侧</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<h4 id="点击并让弹出框消失"><a href="#点击并让弹出框消失" class="headerlink" title="点击并让弹出框消失"></a>点击并让弹出框消失</h4><p>通过使用 <code>focus</code> 触发器可以在用户点击弹出框是让其消失。</p>
<blockquote>
<p>实现“点击并让弹出框消失”的效果需要一些额外的代码</p>
<p>为了更好的跨浏览器和跨平台效果，你必须使用 <code>&lt;a&gt;</code> 标签，<em>不能</em>使用 <code>&lt;button&gt;</code> 标签，并且，还必须包含 <code>role=&quot;button&quot;</code> 和 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#tabindex"><code>tabindex</code></a> 属性。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a tabindex&#x3D;&quot;0&quot; class&#x3D;&quot;btn btn-lg btn-danger&quot; role&#x3D;&quot;button&quot; data-toggle&#x3D;&quot;popover&quot; data-trigger&#x3D;&quot;focus&quot; title&#x3D;&quot;Dismissible popover&quot; data-content&#x3D;&quot;And here&#39;s some amazing content. It&#39;s very engaging. Right?&quot;&gt;可消失的弹出框&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-2-javaScript调用"><a href="#8-2-javaScript调用" class="headerlink" title="8.2 javaScript调用"></a>8.2 javaScript调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#example&#39;).popover(options)</span><br></pre></td></tr></table></figure>

<h4 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h4><p>可以通过 data 属性或 JavaScript 传递参数。对于 data 属性，将参数名附着到 <code>data-</code> 后面，例如 <code>data-animation=&quot;&quot;</code>。</p>
<table>
<thead>
<tr>
<th>选项名称</th>
<th>类型/默认值</th>
<th>Data 属性名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>animation</td>
<td>boolean <em>默认值：true</em></td>
<td>data-animation</td>
<td>向弹出框应用 CSS 褪色过渡效果。</td>
</tr>
<tr>
<td>html</td>
<td>boolean <em>默认值：false</em></td>
<td>data-html</td>
<td>向弹出框插入 HTML。如果为 false，jQuery 的 text 方法将被用于向 dom 插入内容。如果您担心 XSS 攻击，请使用 text。</td>
</tr>
<tr>
<td>placement</td>
<td>string|function <em>默认值：top</em></td>
<td>data-placement</td>
<td>规定如何定位弹出框（即 top|bottom|left|right|auto）。 当指定为 <em>auto</em> 时，会动态调整弹出框。例如，如果 placement 是 “auto left”，弹出框将会尽可能显示在左边，在情况不允许的情况下它才会显示在右边。</td>
</tr>
<tr>
<td>selector</td>
<td>string <em>默认值：false</em></td>
<td>data-selector</td>
<td>如果提供了一个选择器，弹出框对象将被委派到指定的目标。</td>
</tr>
<tr>
<td>title</td>
<td>string | function <em>默认值：’’</em></td>
<td>data-title</td>
<td>如果未指定 <em>title</em> 属性，则 title 选项是默认的 title 值。</td>
</tr>
<tr>
<td>trigger</td>
<td>string <em>默认值：’hover focus’</em></td>
<td>data-trigger</td>
<td>定义如何触发弹出框： <strong>click| hover | focus | manual</strong>。您可以传递多个触发器，每个触发器之间用空格分隔。</td>
</tr>
<tr>
<td>delay</td>
<td>number | object <em>默认值：0</em></td>
<td>data-delay</td>
<td>延迟显示和隐藏弹出框的毫秒数 - 对 manual 手动触发类型不适用。如果提供的是一个数字，那么延迟将会应用于显示和隐藏。如果提供的是对象，结构如下所示：<code>delay: &#123; show: 500, hide: 100 &#125;</code></td>
</tr>
<tr>
<td>container</td>
<td>string | false <em>默认值：false</em></td>
<td>data-container</td>
<td>向指定元素追加弹出框。 实例： container: ‘body’</td>
</tr>
</tbody></table>
<h4 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Options:</strong> .popover(options)</td>
<td>向元素集合附加弹出框句柄。</td>
<td><code>$().popover(options)</code></td>
</tr>
<tr>
<td><strong>Toggle:</strong> .popover(‘toggle’)</td>
<td>切换显示/隐藏元素的弹出框。</td>
<td><code>$(&#39;#element&#39;).popover(&#39;toggle&#39;)</code></td>
</tr>
<tr>
<td><strong>Show:</strong> .popover(‘show’)</td>
<td>显示元素的弹出框。</td>
<td><code>$(&#39;#element&#39;).popover(&#39;show&#39;)</code></td>
</tr>
<tr>
<td><strong>Hide:</strong> .popover(‘hide’)</td>
<td>隐藏元素的弹出框。</td>
<td><code>$(&#39;#element&#39;).popover(&#39;hide&#39;)</code></td>
</tr>
<tr>
<td><strong>Destroy:</strong> .popover(‘destroy’)</td>
<td>隐藏并销毁元素的弹出框。</td>
<td><code>$(&#39;#element&#39;).popover(&#39;destroy&#39;)</code></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#element&#39;).popover(&#39;destroy&#39;)</span><br></pre></td></tr></table></figure>

<h4 id="事件-5"><a href="#事件-5" class="headerlink" title="事件"></a>事件</h4><table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>show.bs.popover</td>
<td>当调用 show 实例方法时立即触发该事件。</td>
<td><code>$(&#39;#mypopover&#39;).on(&#39;show.bs.popover&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td>shown.bs.popover</td>
<td>当弹出框对用户可见时触发该事件（将等待 CSS 过渡效果完成）。</td>
<td><code>$(&#39;#mypopover&#39;).on(&#39;shown.bs.popover&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td>hide.bs.popover</td>
<td>当调用 hide 实例方法时立即触发该事件。</td>
<td><code>$(&#39;#mypopover&#39;).on(&#39;hide.bs.popover&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td>hidden.bs.popover</td>
<td>当工具提示对用户隐藏时触发该事件（将等待 CSS 过渡效果完成）。</td>
<td><code>$(&#39;#mypopover&#39;).on(&#39;hidden.bs.popover&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myPopover&#39;).on(&#39;hidden.bs.popover&#39;, function () &#123;</span><br><span class="line">  &#x2F;&#x2F; do something…</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="9-警告信息-alert-js"><a href="#9-警告信息-alert-js" class="headerlink" title="9 警告信息 alert.js"></a>9 警告信息 alert.js</h2><h3 id="9-1-基本使用"><a href="#9-1-基本使用" class="headerlink" title="9.1 基本使用"></a>9.1 基本使用</h3><p>当使用 <code>.close</code> 按钮时，它必须是 <code>.alert-dismissible</code> 的第一个子元素，并且在它之前不能有任何文本内容。</p>
<p>为关闭按钮添加 <code>data-dismiss=&quot;alert&quot;</code> 属性就可以使其自动为警告框赋予关闭功能。关闭警告框也就是将其从 DOM 中删除。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;close&quot; data-dismiss&#x3D;&quot;alert&quot; aria-label&#x3D;&quot;Close&quot;&gt;</span><br><span class="line">  &lt;span aria-hidden&#x3D;&quot;true&quot;&gt;&amp;times;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<p>为了让警告框在关闭时表现出动画效果，请确保为其添加了 <code>.fade</code> 和 <code>.in</code> 类。</p>
<h3 id="9-2-JavaScript调用"><a href="#9-2-JavaScript调用" class="headerlink" title="9.2 JavaScript调用"></a>9.2 JavaScript调用</h3><h4 id="方法-6"><a href="#方法-6" class="headerlink" title="方法"></a>方法</h4><p><strong><code>$().alert()</code></strong></p>
<p>让警告框监听具有 <code>data-dismiss=&quot;alert&quot;</code> 属性的后裔元素的点击（click）事件。（如果是通过 data 属性进行的初始化则无需使用）</p>
<p><strong><code>$().alert(&#39;close&#39;)</code></strong></p>
<p>关闭警告框并从 DOM 中将其删除。如果警告框被赋予了 <code>.fade</code> 和 <code>.in</code> 类，那么，警告框在淡出之后才会被删除。</p>
<h4 id="事件-6"><a href="#事件-6" class="headerlink" title="事件"></a>事件</h4><p>Bootstrap 的警告框插件对外暴露了一些可以被监听的事件。</p>
<table>
<thead>
<tr>
<th>事件类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>close.bs.alert</td>
<td>当 <code>close</code> 方法被调用后立即触发此事件。</td>
</tr>
<tr>
<td>closed.bs.alert</td>
<td>当警告框被关闭后（也即 CSS 过渡效果完毕之后）立即触发此事件。</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myAlert&#39;).on(&#39;closed.bs.alert&#39;, function () &#123;</span><br><span class="line">  &#x2F;&#x2F; do something…</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="10-按钮-button-js"><a href="#10-按钮-button-js" class="headerlink" title="10 按钮 button.js"></a>10 按钮 button.js</h2><h3 id="10-1-加载状态"><a href="#10-1-加载状态" class="headerlink" title="10.1 加载状态"></a>10.1 加载状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; id&#x3D;&quot;myButton&quot; data-loading-text&#x3D;&quot;Loading...&quot; class&#x3D;&quot;btn btn-primary&quot; autocomplete&#x3D;&quot;off&quot;&gt;</span><br><span class="line">  Loading state</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $(&#39;#myButton&#39;).on(&#39;click&#39;, function () &#123;</span><br><span class="line">    var $btn &#x3D; $(this).button(&#39;loading&#39;)</span><br><span class="line">    &#x2F;&#x2F; business logic...</span><br><span class="line">    $btn.button(&#39;reset&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10-2-独立的按钮切换状态"><a href="#10-2-独立的按钮切换状态" class="headerlink" title="10.2 独立的按钮切换状态"></a>10.2 独立的按钮切换状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot; data-toggle&#x3D;&quot;button&quot; aria-pressed&#x3D;&quot;false&quot; autocomplete&#x3D;&quot;off&quot;&gt;</span><br><span class="line">  Single toggle</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10-3-Checkbox和Radio"><a href="#10-3-Checkbox和Radio" class="headerlink" title="10.3 Checkbox和Radio"></a>10.3 Checkbox和Radio</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;btn-group&quot; data-toggle&#x3D;&quot;buttons&quot;&gt;</span><br><span class="line">  &lt;label class&#x3D;&quot;btn btn-primary active&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; autocomplete&#x3D;&quot;off&quot; checked&gt; Checkbox 1 (pre-checked)</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">  &lt;label class&#x3D;&quot;btn btn-primary&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; autocomplete&#x3D;&quot;off&quot;&gt; Checkbox 2</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">  &lt;label class&#x3D;&quot;btn btn-primary&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; autocomplete&#x3D;&quot;off&quot;&gt; Checkbox 3</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-group&quot; data-toggle&#x3D;&quot;buttons&quot;&gt;</span><br><span class="line">  &lt;label class&#x3D;&quot;btn btn-primary active&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;options&quot; id&#x3D;&quot;option1&quot; autocomplete&#x3D;&quot;off&quot; checked&gt; Radio 1 (preselected)</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">  &lt;label class&#x3D;&quot;btn btn-primary&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;options&quot; id&#x3D;&quot;option2&quot; autocomplete&#x3D;&quot;off&quot;&gt; Radio 2</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">  &lt;label class&#x3D;&quot;btn btn-primary&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;options&quot; id&#x3D;&quot;option3&quot; autocomplete&#x3D;&quot;off&quot;&gt; Radio 3</span><br><span class="line">  &lt;&#x2F;label&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="10-4-JavaScript方法"><a href="#10-4-JavaScript方法" class="headerlink" title="10.4 JavaScript方法"></a>10.4 JavaScript方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>button(‘toggle’)</td>
<td>切换按压状态。赋予按钮被激活的外观。您可以使用 <strong>data-toggle</strong> 属性启用按钮的自动切换。</td>
<td><code>$().button(&#39;toggle&#39;)</code></td>
</tr>
<tr>
<td>.button(‘loading’)</td>
<td>当加载时，按钮是禁用的，且文本变为 button 元素的 <strong>data-loading-text</strong> 属性的值。</td>
<td><code>$().button(&#39;loading&#39;)</code></td>
</tr>
<tr>
<td>.button(‘reset’)</td>
<td>重置按钮状态，文本内容恢复为最初的内容。当您想要把按钮返回为原始的状态时，该方法非常有用。</td>
<td><code>$().button(&#39;reset&#39;)</code></td>
</tr>
<tr>
<td>.button(string)</td>
<td>该方法中的字符串是指由用户声明的任何字符串。使用该方法，重置按钮状态，并添加新的内容。</td>
<td><code>$().button(string)</code></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; id&#x3D;&quot;myStateButton&quot; data-complete-text&#x3D;&quot;finished!&quot; class&#x3D;&quot;btn btn-primary&quot; autocomplete&#x3D;&quot;off&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $(&#39;#myStateButton&#39;).on(&#39;click&#39;, function () &#123;</span><br><span class="line">    $(this).button(&#39;complete&#39;) &#x2F;&#x2F; button text will be &quot;finished!&quot;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="11-折叠-collapse-js"><a href="#11-折叠-collapse-js" class="headerlink" title="11 折叠 collapse.js"></a>11 折叠 collapse.js</h2><h3 id="11-1-基本使用"><a href="#11-1-基本使用" class="headerlink" title="11.1 基本使用"></a>11.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;btn btn-primary&quot; role&#x3D;&quot;button&quot; data-toggle&#x3D;&quot;collapse&quot; href&#x3D;&quot;#collapseExample&quot; aria-expanded&#x3D;&quot;false&quot; aria-controls&#x3D;&quot;collapseExample&quot;&gt;</span><br><span class="line">  Link with href</span><br><span class="line">&lt;&#x2F;a&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;btn btn-primary&quot; type&#x3D;&quot;button&quot; data-toggle&#x3D;&quot;collapse&quot; data-target&#x3D;&quot;#collapseExample&quot; aria-expanded&#x3D;&quot;false&quot; aria-controls&#x3D;&quot;collapseExample&quot;&gt;</span><br><span class="line">  Button with data-target</span><br><span class="line">&lt;&#x2F;button&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;collapse&quot; id&#x3D;&quot;collapseExample&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;well&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="11-2-手风琴菜单"><a href="#11-2-手风琴菜单" class="headerlink" title="11.2 手风琴菜单"></a>11.2 手风琴菜单</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;panel-group&quot; id&#x3D;&quot;accordion&quot; role&#x3D;&quot;tablist&quot; aria-multiselectable&#x3D;&quot;true&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;panel-heading&quot; role&#x3D;&quot;tab&quot; id&#x3D;&quot;headingOne&quot;&gt;</span><br><span class="line">      &lt;h4 class&#x3D;&quot;panel-title&quot;&gt;</span><br><span class="line">        &lt;a role&#x3D;&quot;button&quot; data-toggle&#x3D;&quot;collapse&quot; data-parent&#x3D;&quot;#accordion&quot; href&#x3D;&quot;#collapseOne&quot; aria-expanded&#x3D;&quot;true&quot; aria-controls&#x3D;&quot;collapseOne&quot;&gt;</span><br><span class="line">          Collapsible Group Item #1</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;h4&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;collapseOne&quot; class&#x3D;&quot;panel-collapse collapse in&quot; role&#x3D;&quot;tabpanel&quot; aria-labelledby&#x3D;&quot;headingOne&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven&#39;t heard of them accusamus labore sustainable VHS.</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;panel-heading&quot; role&#x3D;&quot;tab&quot; id&#x3D;&quot;headingTwo&quot;&gt;</span><br><span class="line">      &lt;h4 class&#x3D;&quot;panel-title&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;collapsed&quot; role&#x3D;&quot;button&quot; data-toggle&#x3D;&quot;collapse&quot; data-parent&#x3D;&quot;#accordion&quot; href&#x3D;&quot;#collapseTwo&quot; aria-expanded&#x3D;&quot;false&quot; aria-controls&#x3D;&quot;collapseTwo&quot;&gt;</span><br><span class="line">          Collapsible Group Item #2</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;h4&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;collapseTwo&quot; class&#x3D;&quot;panel-collapse collapse&quot; role&#x3D;&quot;tabpanel&quot; aria-labelledby&#x3D;&quot;headingTwo&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven&#39;t heard of them accusamus labore sustainable VHS.</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;panel panel-default&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;panel-heading&quot; role&#x3D;&quot;tab&quot; id&#x3D;&quot;headingThree&quot;&gt;</span><br><span class="line">      &lt;h4 class&#x3D;&quot;panel-title&quot;&gt;</span><br><span class="line">        &lt;a class&#x3D;&quot;collapsed&quot; role&#x3D;&quot;button&quot; data-toggle&#x3D;&quot;collapse&quot; data-parent&#x3D;&quot;#accordion&quot; href&#x3D;&quot;#collapseThree&quot; aria-expanded&#x3D;&quot;false&quot; aria-controls&#x3D;&quot;collapseThree&quot;&gt;</span><br><span class="line">          Collapsible Group Item #3</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;h4&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;collapseThree&quot; class&#x3D;&quot;panel-collapse collapse&quot; role&#x3D;&quot;tabpanel&quot; aria-labelledby&#x3D;&quot;headingThree&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;panel-body&quot;&gt;</span><br><span class="line">        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably haven&#39;t heard of them accusamus labore sustainable VHS.</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>It’s also possible to swap out <code>.panel-body</code>s with <code>.list-group</code>s.</p>
<h3 id="11-3-JavaScript调用"><a href="#11-3-JavaScript调用" class="headerlink" title="11.3 JavaScript调用"></a>11.3 JavaScript调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;.collapse&#39;).collapse()</span><br></pre></td></tr></table></figure>

<h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><table>
<thead>
<tr>
<th>选项名称</th>
<th>类型/默认值</th>
<th>Data 属性名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>parent</td>
<td>selector <em>默认值：false</em></td>
<td>data-parent</td>
<td>如果提供了一个选择器，当可折叠项目显示时，指定父元素下的所有可折叠的元素将被关闭。这与传统的折叠面板（accordion）的行为类似 - 这依赖于 accordion-group 类。</td>
</tr>
<tr>
<td>toggle</td>
<td>boolean <em>默认值：true</em></td>
<td>data-toggle</td>
<td>切换调用可折叠元素。</td>
</tr>
</tbody></table>
<h4 id="方法-7"><a href="#方法-7" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Options:</strong> .collapse(options)</td>
<td>激活内容为可折叠元素。接受一个可选的 options 对象。</td>
<td><code>$(&#39;#identifier&#39;).collapse(&#123; toggle: false &#125;)</code></td>
</tr>
<tr>
<td><strong>Toggle:</strong> .collapse(‘toggle’)</td>
<td>切换显示/隐藏可折叠元素。</td>
<td><code>$(&#39;#identifier&#39;).collapse(&#39;toggle&#39;)</code></td>
</tr>
<tr>
<td><strong>Show:</strong> .collapse(‘show’)</td>
<td>显示可折叠元素。</td>
<td><code>$(&#39;#identifier&#39;).collapse(&#39;show&#39;)</code></td>
</tr>
<tr>
<td><strong>Hide:</strong> .collapse(‘hide’)</td>
<td>隐藏可折叠元素。</td>
<td><code>$(&#39;#identifier&#39;).collapse(&#39;hide&#39;)</code></td>
</tr>
</tbody></table>
<h4 id="事件-7"><a href="#事件-7" class="headerlink" title="事件"></a>事件</h4><table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>show.bs.collapse</td>
<td>在调用 show 方法后触发该事件。</td>
<td><code>$(&#39;#identifier&#39;).on(&#39;show.bs.collapse&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td>shown.bs.collapse</td>
<td>当折叠元素对用户可见时触发该事件（将等待 CSS 过渡效果完成）。</td>
<td><code>$(&#39;#identifier&#39;).on(&#39;shown.bs.collapse&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td>hide.bs.collapse</td>
<td>当调用 hide 实例方法时立即触发该事件。</td>
<td><code>$(&#39;#identifier&#39;).on(&#39;hide.bs.collapse&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td>hidden.bs.collapse</td>
<td>当折叠元素对用户隐藏时触发该事件（将等待 CSS 过渡效果完成）。</td>
<td><code>$(&#39;#identifier&#39;).on(&#39;hidden.bs.collapse&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myCollapsible&#39;).on(&#39;hidden.bs.collapse&#39;, function () &#123;</span><br><span class="line">  &#x2F;&#x2F; do something…</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="12-轮播-carousel-js"><a href="#12-轮播-carousel-js" class="headerlink" title="12 轮播 carousel.js"></a>12 轮播 carousel.js</h2><h3 id="12-1-基本使用"><a href="#12-1-基本使用" class="headerlink" title="12.1 基本使用"></a>12.1 基本使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;carousel-example-generic&quot; class&#x3D;&quot;carousel slide&quot; data-ride&#x3D;&quot;carousel&quot;&gt;</span><br><span class="line">  &lt;!-- Indicators --&gt;</span><br><span class="line">  &lt;ol class&#x3D;&quot;carousel-indicators&quot;&gt;</span><br><span class="line">    &lt;li data-target&#x3D;&quot;#carousel-example-generic&quot; data-slide-to&#x3D;&quot;0&quot; class&#x3D;&quot;active&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li data-target&#x3D;&quot;#carousel-example-generic&quot; data-slide-to&#x3D;&quot;1&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li data-target&#x3D;&quot;#carousel-example-generic&quot; data-slide-to&#x3D;&quot;2&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ol&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Wrapper for slides --&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;carousel-inner&quot; role&#x3D;&quot;listbox&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;item active&quot;&gt;</span><br><span class="line">      &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;carousel-caption&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">      &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;carousel-caption&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- Controls --&gt;</span><br><span class="line">  &lt;a class&#x3D;&quot;left carousel-control&quot; href&#x3D;&quot;#carousel-example-generic&quot; role&#x3D;&quot;button&quot; data-slide&#x3D;&quot;prev&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;Previous&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;a class&#x3D;&quot;right carousel-control&quot; href&#x3D;&quot;#carousel-example-generic&quot; role&#x3D;&quot;button&quot; data-slide&#x3D;&quot;next&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;sr-only&quot;&gt;Next&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="12-2-每个项目的标题"><a href="#12-2-每个项目的标题" class="headerlink" title="12.2 每个项目的标题"></a>12.2 每个项目的标题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">  &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;carousel-caption&quot;&gt;</span><br><span class="line">    &lt;h3&gt;...&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;p&gt;...&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="12-3-JavaScript-调用"><a href="#12-3-JavaScript-调用" class="headerlink" title="12.3 JavaScript 调用"></a>12.3 JavaScript 调用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;.carousel&#39;).carousel()</span><br></pre></td></tr></table></figure>

<h4 id="选项-1"><a href="#选项-1" class="headerlink" title="选项"></a>选项</h4><table>
<thead>
<tr>
<th>选项名称</th>
<th>类型/默认值</th>
<th>Data 属性名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>interval</td>
<td>number <em>默认值：5000</em></td>
<td>data-interval</td>
<td>自动循环每个项目之间延迟的时间量。如果为 false，轮播将不会自动循环。</td>
</tr>
<tr>
<td>pause</td>
<td>string <em>默认值：”hover”</em></td>
<td>data-pause</td>
<td>鼠标进入时暂停轮播循环，鼠标离开时恢复轮播循环。</td>
</tr>
<tr>
<td>wrap</td>
<td>boolean <em>默认值：true</em></td>
<td>data-wrap</td>
<td>轮播是否连续循环。</td>
</tr>
</tbody></table>
<h4 id="方法-8"><a href="#方法-8" class="headerlink" title="方法"></a>方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>.carousel(options)</td>
<td>初始化轮播为可选的 options 对象，并开始循环项目。</td>
<td><code>$(&#39;#identifier&#39;).carousel(&#123; interval: 2000 &#125;)</code></td>
</tr>
<tr>
<td>.carousel(‘cycle’)</td>
<td>从左到右循环轮播项目。</td>
<td><code>$(&#39;#identifier&#39;).carousel(&#39;cycle&#39;)</code></td>
</tr>
<tr>
<td>.carousel(‘pause’)</td>
<td>停止轮播循环项目。</td>
<td><code>$(&#39;#identifier&#39;).carousel(&#39;pause&#39;)</code></td>
</tr>
<tr>
<td>.carousel(number)</td>
<td>循环轮播到某个特定的帧（从 0 开始计数，与数组类似）。</td>
<td><code>$(&#39;#identifier&#39;).carousel(number)</code></td>
</tr>
<tr>
<td>.carousel(‘prev’)</td>
<td>循环轮播到上一个项目。</td>
<td><code>$(&#39;#identifier&#39;).carousel(&#39;prev&#39;)</code></td>
</tr>
<tr>
<td>.carousel(‘next’)</td>
<td>循环轮播到下一个项目。</td>
<td><code>$(&#39;#identifier&#39;).carousel(&#39;next&#39;)</code></td>
</tr>
</tbody></table>
<h4 id="事件-8"><a href="#事件-8" class="headerlink" title="事件"></a>事件</h4><table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>slide.bs.carousel</td>
<td>当调用 slide 实例方法时立即触发该事件。</td>
<td><code>$(&#39;#identifier&#39;).on(&#39;slide.bs.carousel&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
<tr>
<td>slid.bs.carousel</td>
<td>当轮播完成幻灯片过渡效果时触发该事件。</td>
<td><code>$(&#39;#identifier&#39;).on(&#39;slid.bs.carousel&#39;, function () &#123; // 执行一些动作... &#125;)</code></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myCarousel&#39;).on(&#39;slide.bs.carousel&#39;, function () &#123;</span><br><span class="line">  &#x2F;&#x2F; do something…</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="13-附加-affix-js"><a href="#13-附加-affix-js" class="headerlink" title="13 附加 affix.js"></a>13 附加 affix.js</h2><h3 id="12-1-基本使用-1"><a href="#12-1-基本使用-1" class="headerlink" title="12.1 基本使用"></a>12.1 基本使用</h3><p>To easily add affix behavior to any element, just add <code>data-spy=&quot;affix&quot;</code> to the element you want to spy on. Use offsets to define when to toggle the pinning of an element.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div data-spy&#x3D;&quot;affix&quot; data-offset-top&#x3D;&quot;60&quot; data-offset-bottom&#x3D;&quot;200&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="13-2-JavaScript调用"><a href="#13-2-JavaScript调用" class="headerlink" title="13.2 JavaScript调用"></a>13.2 JavaScript调用</h3><p>Call the affix plugin via JavaScript:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myAffix&#39;).affix(&#123;</span><br><span class="line">  offset: &#123;</span><br><span class="line">    top: 100,</span><br><span class="line">    bottom: function () &#123;</span><br><span class="line">      return (this.bottom &#x3D; $(&#39;.footer&#39;).outerHeight(true))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="选项-2"><a href="#选项-2" class="headerlink" title="选项"></a>选项</h4><p>Options can be passed via data attributes or JavaScript. For data attributes, append the option name to <code>data-</code>, as in <code>data-offset-top=&quot;200&quot;</code>.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>type</th>
<th>default</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>offset</td>
<td>number | function | object</td>
<td>10</td>
<td>Pixels to offset from screen when calculating position of scroll. If a single number is provided, the offset will be applied in both top and bottom directions. To provide a unique, bottom and top offset just provide an object <code>offset: &#123; top: 10 &#125;</code> or <code>offset: &#123; top: 10, bottom: 5 &#125;</code>. Use a function when you need to dynamically calculate an offset.</td>
</tr>
<tr>
<td>target</td>
<td>selector | node | jQuery element</td>
<td>the <code>window</code>object</td>
<td>Specifies the target element of the affix.</td>
</tr>
</tbody></table>
<h4 id="方法-9"><a href="#方法-9" class="headerlink" title="方法"></a>方法</h4><p><strong><code>$().affix(options)</code></strong></p>
<p>Activates your content as affixed content. Accepts an optional options <code>object</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myAffix&#39;).affix(&#123;</span><br><span class="line">  offset: 15</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>** <code>$().affix(&#39;checkPosition&#39;)</code>**</p>
<p>Recalculates the state of the affix based on the dimensions, position, and scroll position of the relevant elements. The <code>.affix</code>, <code>.affix-top</code>, and <code>.affix-bottom</code> classes are added to or removed from the affixed content according to the new state. This method needs to be called whenever the dimensions of the affixed content or the target element are changed, to ensure correct positioning of the affixed content.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;#myAffix&#39;).affix(&#39;checkPosition&#39;)</span><br></pre></td></tr></table></figure>

<h4 id="事件-9"><a href="#事件-9" class="headerlink" title="事件"></a>事件</h4><p>Bootstrap’s affix plugin exposes a few events for hooking into affix functionality.</p>
<table>
<thead>
<tr>
<th>Event Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>affix.bs.affix</td>
<td>This event fires immediately before the element has been affixed.</td>
</tr>
<tr>
<td>affixed.bs.affix</td>
<td>This event is fired after the element has been affixed.</td>
</tr>
<tr>
<td>affix-top.bs.affix</td>
<td>This event fires immediately before the element has been affixed-top.</td>
</tr>
<tr>
<td>affixed-top.bs.affix</td>
<td>This event is fired after the element has been affixed-top.</td>
</tr>
<tr>
<td>affix-bottom.bs.affix</td>
<td>This event fires immediately before the element has been affixed-bottom.</td>
</tr>
<tr>
<td>affixed-bottom.bs.affix</td>
<td>This event is fired after the element has been affixed-bottom.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day06</title>
    <url>/2020/09/13/py-day06/</url>
    <content><![CDATA[<p>前端基础<br>html css</p>
<a id="more"></a>
<hr>
<ol>
<li><p>什么是反射，python中如何实现反射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">动态语言重要的特征；动态语言的特点是，定义一个变量，无需事先声明类型，直到程序运行的时候才知道其类型。</span><br><span class="line">反射：动态背景之下，有某种方法可以获取到数据内部信息；指的是通过字符串来操作类或者对象的属性</span><br><span class="line">hasattr getattr delattr setattr</span><br></pre></td></tr></table></figure>
</li>
<li><p>内置方法__str__与__del__的作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__str__:方法会在对象被打印时自动触发,将返回值当做本次打印的结果。</span><br><span class="line">__del__:会在清理对象之前,自动触发;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义元类的意义何在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元类: 类的类,可以实例化得到类。</span><br><span class="line">意义: 调用元类可以生成类,定义元类的目的就是控制类的行为。</span><br><span class="line">      1.控制类的产生 </span><br><span class="line">          __new__, __init__ 这两个方法控制类的产生。</span><br><span class="line">      2.控制类的调用,之后的用法。</span><br><span class="line">          __call__ 定义 控制类的调用</span><br></pre></td></tr></table></figure>
</li>
<li><p>__call__,__new__,__init__的执行顺序是？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象类中的.__call__</span><br><span class="line">    对象.__new__</span><br><span class="line">    对象.__init_</span><br></pre></td></tr></table></figure>


</li>
</ol>
<hr>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h3><p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210507213828564.png" alt="image-20210507213828564"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">超文本传输协议 用来规定服务端和浏览器之间的数据交互的格式。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 四大特性</span></span><br><span class="line"><span class="number">1.</span> 基于请求响应</span><br><span class="line"><span class="number">2.</span> 基于TCP/IP作用于应用层智商的协议</span><br><span class="line"><span class="number">3.</span> 无状态</span><br><span class="line">   不保存用户信息</span><br><span class="line">   eg: 一个人来了<span class="number">1000</span>次，都如初见</span><br><span class="line">      由于是无状态的，所以出现了一些专门用来记录用户状态的而技术</span><br><span class="line">      cookie，session，token</span><br><span class="line"><span class="number">4.</span>无链接，短链接</span><br><span class="line">  请求来一次/响应一次，之后就没有任何关系了。</span><br><span class="line">  补充知识点: 长连接：双方建立连接之后默认不断开  websocket</span><br><span class="line"></span><br><span class="line"><span class="comment">## 请求数据格式</span></span><br><span class="line">   请求首行: 协议和版本，请求方法</span><br><span class="line">   请求头: (kv键值对) host:端口 路径  请求参数(请求类型text/html，压缩，语言，缓存，认证，长连接，UA等)</span><br><span class="line">   空行</span><br><span class="line">   请求体(get没有 / post有；存放的是post的请求提交的敏感数据)</span><br><span class="line"><span class="comment">## 响应数据格式</span></span><br><span class="line">   响应首行: 协议和版本 状态码</span><br><span class="line">   响应头: (kv键值对) 服务器信息，时间，返回内容类型+字符集，Etag缓存，长连接和超时时间，缓存过期时间，压缩方法，命中缓存</span><br><span class="line">   空行</span><br><span class="line">   响应体(返回的数据)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210507213739518.png" alt="image-20210507213739518"></p>
<h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427194939535.png" alt="image-20210427194939535" style="zoom: 33%;">

<h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427195824041.png" alt="image-20210427195824041" style="zoom:33%;">



<h3 id="http1和2区别"><a href="#http1和2区别" class="headerlink" title="http1和2区别"></a>http1和2区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">总结：线程阻塞，在同一时间，同一域名的请求有一定数量限制，超过限制数目的请求会被阻塞</span><br><span class="line">http1.0: 浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接</span><br><span class="line"></span><br><span class="line">http1.1: 持久连接,引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive。允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是**按次序进行**的。服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着。这将导致“队头堵塞”</span><br><span class="line"></span><br><span class="line">http2.0: 完全多路复用，而非有序并阻塞的、只需一个连接即可实现并行。</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427195950067.png" alt="image-20210427195950067"></p>
<ul>
<li><p>Http1.x</p>
<ul>
<li><strong>缺陷</strong>：线程阻塞，在同一时间，同一域名的请求有一定数量限制，超过限制数目的请求会被阻塞</li>
</ul>
</li>
<li><p>http1.0</p>
<ul>
<li><strong>缺陷</strong>：浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接（T<strong>CP连接的新建成本很高，因为需要客户端和服务器三次握手</strong>），服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求；</li>
<li><strong>解决方案</strong>：<ul>
<li>添加头信息——非标准的Connection字段<code>Connection: keep-alive</code></li>
</ul>
</li>
</ul>
</li>
<li><p>http1.1</p>
<ul>
<li><strong>持久连接</strong><ul>
<li>引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用，不用声明<code>Connection: keep-alive</code>(对于同一个域名，大多数浏览器允许同时建立6个持久连接)</li>
</ul>
</li>
<li><strong>管道机制</strong><ul>
<li>即在同一个TCP连接里面，客户端可以同时发送多个请求。</li>
</ul>
</li>
<li><strong>分块传输编码</strong><ul>
<li>即服务端没产生一块数据，就发送一块，采用”流模式”而取代”缓存模式”。</li>
</ul>
</li>
<li><strong>新增请求方式</strong><ul>
<li>PUT:请求服务器存储一个资源;</li>
<li>DELETE：请求服务器删除标识的资源；</li>
<li>OPTIONS：请求查询服务器的性能，或者查询与资源相关的选项和需求；</li>
<li>TRACE：请求服务器回送收到的请求信息，主要用于测试或诊断；</li>
<li>CONNECT：保留将来使用</li>
</ul>
</li>
<li><strong>缺点：</strong><ul>
<li>虽然允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是<strong>按次序进行</strong>的。服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着。这将导致“队头堵塞”</li>
<li><strong>避免方式：</strong>一是减少请求数，二是同时多开持久连接</li>
</ul>
</li>
</ul>
</li>
<li><p>HTTP/2.0</p>
<ul>
<li><p>特点</p>
<ul>
<li>采用二进制格式而非文本格式；</li>
<li><font color="red">完全多路复用，而非有序并阻塞的、只需一个连接即可实现并行；</font></li>
<li>使用报头压缩，降低开销</li>
<li>服务器推送</li>
</ul>
</li>
<li><p><strong>完全多路复用</strong></p>
<ul>
<li>HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了”队头堵塞”。</li>
</ul>
</li>
<li><p><strong>报头压缩</strong></p>
<ul>
<li>HTTP 协议是没有状态，导致每次请求都必须附上所有信息。所以，请求的很多头字段都是重复的，比如Cookie，一样的内容每次请求都必须附带，这会浪费很多带宽，也影响速度。</li>
<li>对于相同的头部，不必再通过请求发送，只需发送一次；</li>
<li>HTTP/2 对这一点做了优化，引入了头信息压缩机制；</li>
<li>一方面，头信息使用gzip或compress压缩后再发送；</li>
<li>另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，产生一个索引号，之后就不发送同样字段了，只需发送索引号。</li>
</ul>
</li>
<li><p><strong>服务器推送</strong></p>
<ul>
<li>HTTP/2 允许服务器未经请求，主动向客户端发送资源；</li>
<li>通过推送那些服务器任务客户端将会需要的内容到客户端的缓存中，避免往返的延迟</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="前端-html-css-js"><a href="#前端-html-css-js" class="headerlink" title="前端 (html css js)"></a>前端 (html css js)</h2><blockquote>
<p>HTML：HTML，全称“Hyper Text Markup Language（超文本标记语言）”。HTML是网页的结构内容</p>
</blockquote>
<blockquote>
<p>CSS：全称“（层叠样式表）。CSS是网页的外观</p>
</blockquote>
<blockquote>
<p>JavaScript: JavaScript是一门脚本语言。JavaScript是页面的行为动作</p>
</blockquote>
<blockquote>
<p>关系：html相当于页面(人)的骨架，css就相当于给这个页面(人)穿上漂亮的衣服，js是让这个人动起来</p>
</blockquote>
<blockquote>
<p>前端框架：bootstrap、jQuery、Vue</p>
<p>（提前封装好了很多操作，只需要按照固定的语法调用即可）</p>
</blockquote>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><blockquote>
<p>html的标签， 相当于linux中的命令。常见的标签 也就那么十几个</p>
</blockquote>
<p>html， css, js文件执行的原理：也是需要有一个解释器来从上到下执行html代码， 而这个解释器就是：浏览器。浏览器中内置了html的解释器，google的V8解释器，他可以执行html，css， js代码</p>
<p>其实就是一套规则，浏览器认识的规则</p>
<p>html代码结构介绍：</p>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> <span class="comment">&lt;!--代表使用的是html5的版本--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="comment">&lt;!--文件的元信息标签，默认使用的额是utf8编码--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>51aiops<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;张三&quot;</span>&gt;</span> <span class="comment">&lt;!-- 描述信息 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--html的代码内容--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h3><ul>
<li>标签是HTML中最基本单位,也是最重要组成部分</li>
<li>通常要用两个角括号括起来:<code>&lt;</code>和<code>&gt;</code></li>
<li>标签都是闭合的（两种形式：成对与不成对）</li>
<li>双标签（成对）: <code>&lt;标签名&gt;内容&lt;/标签名&gt;</code> 如：<code>&lt;table&gt;&lt;/table&gt;</code> 即分起始和结束</li>
<li>单标签（不成对）: <code>&lt;标签名 /&gt;</code>; 如： <code>&lt;br/&gt;</code>、<code>&lt;hr/&gt;</code></li>
<li>标签是大小写无关的,<code>&lt;body&gt;</code>;跟<code>&lt;BODY&gt;</code>表示意思是一样的，标准推荐使用小写，这样符合XHTML标准。</li>
<li>对于HTML标签来讲，最重要的是语义</li>
</ul>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"># 重点：</span></span><br><span class="line"><span class="xml">    -单标签（自闭和标签）双标签</span></span><br><span class="line"><span class="xml">  -块级标签和行内标签</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML标签属性"><a href="#HTML标签属性" class="headerlink" title="HTML标签属性"></a>HTML标签属性</h3><ul>
<li>HTML属性一般都出现在HTML的开始标签中, 是HTML标签的一部分。</li>
<li>标签可以有属性,它包含了额外的信息.属性的值一定要在双引号中。</li>
<li>标签可以拥有多个属性。</li>
<li>属性由属性名和值成对出现。</li>
<li>语法格式如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;标签名 属性名1&#x3D;&quot;属性值&quot; 属性名2&#x3D;&quot;属性值&quot; ... 属性名N&#x3D;&quot;属性值&quot;&gt;</span><br><span class="line">  &lt;!– 输出内容…  --&gt;</span><br><span class="line">&lt;&#x2F;标签名&gt;</span><br></pre></td></tr></table></figure>

<h3 id="HTML代码格式"><a href="#HTML代码格式" class="headerlink" title="HTML代码格式"></a>HTML代码格式</h3><p>任何回车或空格在源代码中都是不起作用，<br>所以在编写HTML代码时，都可以使用回车或者空格进行代码排版，<br>这样可以使代码清晰，也便于团队合作。必须保持严格的缩进规则，以<code>Tab</code>键为准。</p>
<h3 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 注释内容 --&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">    这里全是注释</span><br><span class="line">    都是注释</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<h3 id="HTML-实体-特殊字符"><a href="#HTML-实体-特殊字符" class="headerlink" title="HTML 实体 (特殊字符)"></a>HTML 实体 (特殊字符)</h3><table>
<thead>
<tr>
<th></th>
<th>描述</th>
<th>实体名称</th>
<th>实体编号</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>空格</td>
<td></td>
<td><code>&amp;nbsp</code></td>
</tr>
<tr>
<td>&lt;</td>
<td>小于号</td>
<td>&lt;</td>
<td><code>&amp;gt</code></td>
</tr>
<tr>
<td>&gt;</td>
<td>大于号</td>
<td>&gt;</td>
<td><code>&amp;lt</code></td>
</tr>
<tr>
<td>&amp;</td>
<td>和号</td>
<td>&amp;</td>
<td><code>&amp;amp;</code></td>
</tr>
<tr>
<td>“</td>
<td>引号</td>
<td>“</td>
<td><code>&quot;</code></td>
</tr>
<tr>
<td>‘</td>
<td>撇号</td>
<td>‘ (IE不支持)</td>
<td><code>&#39;</code></td>
</tr>
<tr>
<td>￠</td>
<td>分（cent）</td>
<td>¢</td>
<td><code>¢</code></td>
</tr>
<tr>
<td>£</td>
<td>镑（pound）</td>
<td>£</td>
<td><code>£</code></td>
</tr>
<tr>
<td>¥</td>
<td>元（yen）</td>
<td>¥</td>
<td><code>&amp;yen;</code></td>
</tr>
<tr>
<td>€</td>
<td>欧元（euro）</td>
<td>€</td>
<td><code>€</code></td>
</tr>
<tr>
<td>§</td>
<td>小节</td>
<td>§</td>
<td><code>§</code></td>
</tr>
<tr>
<td>©</td>
<td>版权（copyright）</td>
<td>©</td>
<td><code>&amp;copy;</code></td>
</tr>
<tr>
<td>®</td>
<td>注册商标</td>
<td>®</td>
<td><code>&amp;reg;</code></td>
</tr>
<tr>
<td>™</td>
<td>商标</td>
<td>™</td>
<td><code>™</code></td>
</tr>
<tr>
<td>×</td>
<td>乘号</td>
<td>×</td>
<td><code>×</code></td>
</tr>
<tr>
<td>÷</td>
<td>除号</td>
<td>÷</td>
<td><code>÷</code></td>
</tr>
</tbody></table>
<h2 id="主体结构标签"><a href="#主体结构标签" class="headerlink" title="主体结构标签"></a>主体结构标签</h2><ul>
<li><code>&lt;html&gt;&lt;/html&gt;</code> 此元素可告知浏览器其自身是一个 HTML 文档。</li>
<li><code>&lt;head&gt;&lt;/head&gt;</code> 用于定义文档的头部，它是所有头部元素的容器。<code>&lt;head&gt;</code> 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等等。</li>
<li><code>&lt;body&gt;&lt;/doby&gt;</code> 定义文档的主体</li>
</ul>
<p><strong>几个很重要的属性：</strong></p>
<ul>
<li>id：定义标签的唯一ID，HTML文档树中唯一</li>
<li>class：为html元素定义一个或多个类名（classname）(CSS样式类名)</li>
<li>style：规定元素的行内样式（CSS样式）</li>
</ul>
<h3 id="HEAD头部标签"><a href="#HEAD头部标签" class="headerlink" title="HEAD头部标签"></a>HEAD头部标签</h3><ul>
<li><code>&lt;title&gt;&lt;/title&gt;</code> 定义文档标题</li>
<li><code>&lt;base/&gt;</code> 标签为页面上的所有链接规定默认地址或默认目标</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。标签永远位于 head 元素内部。</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>&lt;link&gt;&lt;/link&gt;</code> 标签定义文档与外部资源的关系。引入外部css文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>  <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;images/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com/favicon.ico&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><style></style>签用于为 HTML 文档定义样式信息。
</li>
<li><script></script> 标签用于定义客户端脚本，比如 JavaScript。script 元素既可以包含脚本语句，也可以通过 src 属性指向外部脚本文件。

</li>
</ul>
<h3 id="meta元信息"><a href="#meta元信息" class="headerlink" title="meta元信息"></a>meta元信息</h3><ul>
<li>元素可提供有关页面的元信息（mata-information）,针对搜索引擎和更新频度的描述和关键词。</li>
<li>标签位于文档的头部，不包含任何内容。</li>
<li>提供的信息是用户不可见的。</li>
</ul>
<p>meta标签的组成：meta标签共有两个属性，它们分别是http-equiv属性和name 属性，不同的属性又有不同的参数值，这些不同的参数值就实现了不同的网页功能。</p>
<p>1.http-equiv属性：相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--指定文档的编码类型(需要知道)--&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;content-Type&quot; charset&#x3D;UTF8&quot;&gt;  </span><br><span class="line">&lt;!--2秒后跳转到对应的网址，注意引号(了解)--&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;2;URL&#x3D;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;</span><br><span class="line">&lt;!--告诉IE以最高级模式渲染文档(了解)--&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;x-ua-compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>2.name属性: 主要用于描述网页，与之对应的属性值为content，keywords 的 content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的，description的content主要就是网站的描述的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;meta总结,html meta,meta属性,meta跳转&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;老男孩教育Python学院&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Body内常用标签"><a href="#Body内常用标签" class="headerlink" title="Body内常用标签"></a>Body内常用标签</h3><h4 id="基本标签（块级标签和内联标签）"><a href="#基本标签（块级标签和内联标签）" class="headerlink" title="基本标签（块级标签和内联标签）"></a>基本标签（块级标签和内联标签）</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">b,i,u,s,p,h1--h6,br,hr</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题5<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--水平线--&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="div块级标签和span行内标签"><a href="#div块级标签和span行内标签" class="headerlink" title="div块级标签和span行内标签"></a>div块级标签和span行内标签</h4><p>div标签用来定义一个块级元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现。<br>span标签用来定义内联(行内)元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现。</p>
<h4 id="块级元素与行内元素的区别"><a href="#块级元素与行内元素的区别" class="headerlink" title="块级元素与行内元素的区别"></a>块级元素与行内元素的区别</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 块级标签:独占一行（h1~h6    p div）</span></span><br><span class="line"><span class="number">1</span> 块儿级标签可以修改长宽 行内标签不可以 修改了也不会变化</span><br><span class="line"><span class="number">2</span> 块儿级标签内部可以嵌套任意的块儿级标签和行内标签</span><br><span class="line"><span class="number">3</span> 但是p标签虽然是块儿级标签 但是它只能嵌套行内标签 不能嵌套块儿级标签</span><br><span class="line"><span class="number">4</span> 如果你套了 问题也不大 因为浏览器会自动帮你解开(浏览器是直接面向用户的 不会轻易的报错 哪怕有报错用户也基本感觉不出来)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行内标签:自身文本多大就占多大（i u s b span）</span></span><br><span class="line"><span class="number">1</span> 行内标签不能嵌套块儿级标签 可以嵌套行内标签</span><br><span class="line">       </span><br><span class="line"><span class="comment"># 总结:</span></span><br><span class="line"> <span class="number">1</span> 只要是块儿级标签都可以嵌套任意的块儿级标签和行内标签</span><br><span class="line"> <span class="number">2</span> 但是p标签只能嵌套行内标签，不能包含块级标签，p标签也不能包含p标签（HTML书写规范）</span><br><span class="line"> <span class="number">3</span> 内联元素不能包含块级元素，它只能包含其它内联元素</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>块级标签:独占一行（h1~h6    p   div）</strong></font></p>
<p><font color="red"><strong>行内标签:自身文本多大就占多大（i  u  s  b  span）</strong></font></p>
<h4 id="div和span"><a href="#div和span" class="headerlink" title="div和span"></a>div和span</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上述的两个标签是在构造页面初期最常使用的 页面的布局一般先用div和span占位之后再去调整样式 尤其是div使用非常的频繁.</span><br><span class="line">div你可以把它看成是一块区域 也就意味着用div来提前规定所有的区域</span><br><span class="line">之后往该区域内部填写内容即可</span><br><span class="line">而普通的文本先用span标签</span><br></pre></td></tr></table></figure>

<h3 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片的路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片未加载成功时的提示&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标悬浮时提示信息&quot;</span> <span class="attr">width</span>=<span class="string">&quot;宽&quot;</span> <span class="attr">height</span>=<span class="string">&quot;高(宽高两个属性只用一个会自动等比缩放)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h3><p>超链接标签</p>
<p>所谓的超链接是指从一个网页指向一个目标的连接关系，这个目标可以是另一个网页，也可以是相同网页上的不同位置，还可以是一个图片，一个电子邮件地址，一个文件，甚至是一个应用程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.oldboyedu.com&quot; target&#x3D;&quot;_blank&quot; &gt;点我&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>href属性指定目标网页地址。该地址可以有几种类型：</p>
<ul>
<li>绝对URL - 指向另一个站点（比如 href=”<a href="http://www.jd.com/">http://www.jd.com）</a>/)</li>
<li>相对URL - 指当前站点中确切的路径（href=”index.htm”）</li>
<li>锚URL - 指向页面中的锚（href=”#top”）</li>
</ul>
<p>target：</p>
<ul>
<li>_blank表示在新标签页中打开目标网页</li>
<li>_self表示在当前标签页中打开目标网页(默认)</li>
</ul>
<h3 id="标签具有的两个重要属性书写"><a href="#标签具有的两个重要属性书写" class="headerlink" title="标签具有的两个重要属性书写"></a>标签具有的两个重要属性书写</h3>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">href=”<span class="comment">#top”  放其他标签的id值，点击即可跳转到对应的标签位置</span></span><br><span class="line">- id值: </span><br><span class="line">  类似于标签的身份证号，在同一个HTML页面上id值不能重复</span><br><span class="line">- <span class="class"><span class="keyword">class</span>值:</span> </span><br><span class="line">  该值有点类似于面向对象里的继承，一个标签可以继承多个<span class="class"><span class="keyword">class</span>值。</span></span><br></pre></td></tr></table></figure>

<p>标签既可以有默认的属性，也可以用自定义的属性</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h4><p>虽然ul标签很丑，但是页面排版布局的时候 ，只要是排版一致的几行数据基本上都用的是ul标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul type&#x3D;&quot;disc&quot;&gt;</span><br><span class="line">  &lt;li&gt;第一项&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;第二项&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<p>type属性：</p>
<ul>
<li>disc（实心圆点，默认值）</li>
<li>circle（空心圆圈）</li>
<li>square（实心方块）</li>
<li>none（无样式）</li>
</ul>
<h4 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol type&#x3D;&quot;1&quot; start&#x3D;&quot;2&quot;&gt;</span><br><span class="line">  &lt;li&gt;第一项&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;第二项&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br><span class="line"></span><br><span class="line">start 从哪里开始排练吧</span><br></pre></td></tr></table></figure>

<p>type属性：</p>
<ul>
<li>1 数字列表，默认值</li>
<li>A 大写字母</li>
<li>a 小写字母</li>
<li>Ⅰ大写罗马</li>
<li>ⅰ小写罗马</li>
</ul>
<h4 id="3-标题列表"><a href="#3-标题列表" class="headerlink" title="3.标题列表"></a>3.标题列表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;标题1&lt;&#x2F;dt&gt;</span><br><span class="line">  &lt;dd&gt;内容1&lt;&#x2F;dd&gt;</span><br><span class="line">  &lt;dt&gt;标题2&lt;&#x2F;dt&gt;</span><br><span class="line">  &lt;dd&gt;内容1&lt;&#x2F;dd&gt;</span><br><span class="line">  &lt;dd&gt;内容2&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure>

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是一个二维数据空间，一个表格由若干行组成，一个行又有若干单元格组成，单元格里可以包含文字、列表、图案、表单、数字符号、预置文本和其它的表格等内容。<br>表格最重要的目的是显示表格类数据。表格类数据是指最适合组织为表格格式（即按行和列组织）的数据。<br>表格的基本结构：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Egon<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>杠娘<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Yuan<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>日天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性:</p>
<ul>
<li>border: 表格边框.</li>
<li>cellpadding: 内边距</li>
<li>cellspacing: 外边距.</li>
<li>width: 像素 百分比.（最好通过css来设置长宽）</li>
<li>rowspan: 单元格竖跨多少行</li>
<li>colspan: 单元格横跨多少列（即合并单元格）</li>
</ul>
<h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>表单用于向服务器传输数据，从而实现用户与Web服务器的交互</p>
<p>表单能够包含input系列标签，比如文本字段、复选框、单选框、提交按钮等等。</p>
<p>表单还可以包含textarea、select、fieldset和 label标签。</p>
<h4 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>accept-charset</td>
<td>规定在被提交表单中使用的字符集（默认：页面字符集）。</td>
</tr>
<tr>
<td>action</td>
<td>规定向何处提交表单的地址（URL）（提交页面）。<br>1. 什么都不写，默认就是朝当前页面所在的url提交数据<br>2.写全路径: <a href="https://www.baidu.com/">https://www.baidu.com</a> 朝百度服务端提交数据<br>3.只写路径后缀action=’/index/‘自动识别出当前服务端的ip和port拼接到前面host:port/index</td>
</tr>
<tr>
<td>autocomplete</td>
<td>规定浏览器应该自动完成表单（默认：开启）。</td>
</tr>
<tr>
<td>enctype</td>
<td>规定被提交数据的编码（默认：url-encoded），不能发送文件。想要接受文件，改成<strong>enctype=”multipart/form-data”</strong></td>
</tr>
<tr>
<td>method</td>
<td>规定在提交表单时所用的 HTTP 方法（默认：GET）。</td>
</tr>
<tr>
<td>name</td>
<td>规定识别表单的名称（对于 DOM 使用：document.forms.name）。</td>
</tr>
<tr>
<td>novalidate</td>
<td>规定浏览器不验证表单。</td>
</tr>
<tr>
<td>target</td>
<td>规定 action 属性中地址的目标（默认：_self）。</td>
</tr>
</tbody></table>
<h4 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h4><p>基本概念：<br>HTML表单是HTML元素中较为复杂的部分，表单往往和脚本、动态页面、数据处理等功能相结合，因此它是制作动态网站很重要的内容。<br>表单一般用来收集用户的输入信息<br>表单工作原理：<br>访问者在浏览有表单的网页时，可填写必需的信息，然后按某个按钮提交。这些信息通过Internet传送到服务器上。<br>服务器上专门的程序对这些数据进行处理，如果有错误会返回错误信息，并要求纠正错误。当数据完整无误后，服务器反馈一个输入完成的信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>(<span class="params">request</span>):</span></span><br><span class="line">    print(<span class="string">&quot;request.GET:&quot;</span>, request.GET)</span><br><span class="line">    print(<span class="string">&quot;request.POST:&quot;</span>, request.POST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.FILES:</span><br><span class="line">        filename = request.FILES[<span class="string">&quot;file&quot;</span>].name</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> request.FILES[<span class="string">&#x27;file&#x27;</span>].chunks():</span><br><span class="line">                f.write(chunk)</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;上传成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;收到了！&quot;</span>)</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^upload/&#x27;</span>, upload),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id><a href="#" class="headerlink" title></a></h4><h3 id="input-行内标签"><a href="#input-行内标签" class="headerlink" title="input(行内标签)"></a>input(行内标签)</h3><p> 元素会根据不同的 type 属性，变化为多种形态</p>
<table>
<thead>
<tr>
<th>type属性值</th>
<th>表现形式</th>
<th>对应代码</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>单行输入文本</td>
<td><input type="text”"></td>
</tr>
<tr>
<td>password</td>
<td>密码输入框</td>
<td></td>
</tr>
<tr>
<td>date</td>
<td>日期输入框</td>
<td></td>
</tr>
<tr>
<td>checkbox</td>
<td>复选框</td>
<td><input type="checkbox">read<br> <input type="checkbox">DBJ</td>
</tr>
<tr>
<td>radio</td>
<td>单选框</td>
<td>默认选中要加checked=”checked”<br><code>&lt;input type=&quot;radio&quot;name=&quot;gender&quot; checked=&quot;checked&quot;&gt;</code><br>当标签名和属性值一样的时候可以简写<br><code>&lt;input type=&quot;radio&quot;name=&quot;gender&quot; checked&gt;男 </code></td>
</tr>
<tr>
<td>submit</td>
<td>提交按钮</td>
<td>用来触发form表单提交数据的动作；</td>
</tr>
<tr>
<td>reset</td>
<td>重置按钮</td>
<td>重置内容</td>
</tr>
<tr>
<td>button</td>
<td>普通按钮</td>
<td>就是一个普普通通的按钮，本身没有任何功能 但是它是最有用的，学完js之后可以给它自定义各种功能</td>
</tr>
<tr>
<td>hidden</td>
<td>隐藏输入框</td>
<td>仅仅是用户看不到；钓鱼网站 <code>&lt;input type=&quot;hidden&quot; name=&quot;usernamename&quot; value=&quot;骗子账户&quot;&gt;</code></td>
</tr>
<tr>
<td>disabled</td>
<td>禁用</td>
<td></td>
</tr>
<tr>
<td>readonly</td>
<td>只读</td>
<td></td>
</tr>
<tr>
<td>file</td>
<td>文本选择框</td>
<td>默认一个；也可以多个，multiple</td>
</tr>
<tr>
<td>value</td>
<td>针对用户输入的标签，如果你加了value， 那就是默认值</td>
<td><code>&lt;label for=&quot;d1&quot;&gt;&lt;br/&gt;      username: &lt;input type=&quot;text&quot; id=&quot;d1&quot; name=&quot;username&quot; value=&quot;默认值&quot;&gt;&lt;br/&gt;&lt;/label&gt;</code></td>
</tr>
<tr>
<td>placefolder</td>
<td>输入框提示</td>
<td></td>
</tr>
</tbody></table>
<p>属性说明:</p>
<ul>
<li>name：<strong>表单提交时的“键”，注意和id的区别</strong>。</li>
<li>value：<strong>表单提交时对应项的值</strong><ul>
<li>type=”button”, “reset”, “submit”时，为按钮上显示的文本年内容</li>
<li>type=”text”,”password”,”hidden”时，为输入框的初始值</li>
<li>type=”checkbox”, “radio”, “file”，为输入相关联的值</li>
</ul>
</li>
<li>checked：radio和checkbox默认被选中的项</li>
<li>readonly：text和password设置只读</li>
<li>disabled：所有input均适用</li>
</ul>
<p><font color="red">注意: 能够触发表单提交数据的按钮有哪些？</font></p>
<p><font color="red"><strong>submit 和 button</strong></font></p>
<h3 id="select标签（下拉框）"><a href="#select标签（下拉框）" class="headerlink" title="select标签（下拉框）"></a>select标签（下拉框）</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 默认是单选，可以加mutiple参数变多选；默认选中（selected=&quot;selected&quot;），可以简写为：selected</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性说明：</p>
<ul>
<li>multiple：布尔属性，设置后为多选，否则默认单选</li>
<li>disabled：禁用</li>
<li>selected：默认选中该项</li>
<li>value：定义提交时的选项值</li>
</ul>
<h3 id="label标签-行内标签"><a href="#label标签-行内标签" class="headerlink" title="label标签(行内标签)"></a>label标签(行内标签)</h3><p>定义： 标签为 input 元素定义标注（标记）。<br>说明：一般和input一起使用</p>
<ol>
<li>label 元素不会向用户呈现任何特殊效果，给input相关的注释信息。</li>
<li>标签的 for 关联input的 id 值。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="textarea多行文本"><a href="#textarea多行文本" class="headerlink" title="textarea多行文本"></a>textarea多行文本</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;memo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;memo&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  默认内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性说明：</p>
<ul>
<li>name：名称</li>
<li>rows：行数</li>
<li>cols：列数</li>
<li>disabled：禁用</li>
</ul>
<h4 id="Flask-验证接收form表单"><a href="#Flask-验证接收form表单" class="headerlink" title="Flask 验证接收form表单"></a>Flask 验证接收form表单</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后端</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/index/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    print(request.form)  <span class="comment"># 获取form表单提交过来的非文件数据</span></span><br><span class="line">    <span class="comment"># ImmutableMultiDict([(&#x27;username&#x27;, &#x27;asd&#x27;), (&#x27;password&#x27;, &#x27;asdsad&#x27;), (&#x27;date&#x27;, &#x27;2021-04-27&#x27;), (&#x27;gender&#x27;, &#x27;on&#x27;), (&#x27;hobby&#x27;, &#x27;on&#x27;), (&#x27;hobby&#x27;, &#x27;on&#x27;), (&#x27;province&#x27;, &#x27;&#x27;), (&#x27;myfile&#x27;, &#x27;&#x27;), (&#x27;info&#x27;, &#x27;&#x27;)])</span></span><br><span class="line">    print(request.files) <span class="comment"># 获取文件数据</span></span><br><span class="line">    file_obj = request.files.get(<span class="string">&#x27;myfile&#x27;</span>)</span><br><span class="line">    file_obj.save(file_obj.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 前端代码 需要掌握###############################################</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;注册页面&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;http://127.0.0.1:5000/index/&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><br><span class="line">            username: &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;d1&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><br><span class="line">            password: &lt;input type=<span class="string">&quot;password&quot;</span> id=<span class="string">&quot;d2&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">            birthday: &lt;input type=<span class="string">&quot;date&quot;</span> name=<span class="string">&quot;date&quot;</span>&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        gender:</span><br><span class="line">        &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> checked=<span class="string">&quot;checked&quot;</span> value=<span class="string">&quot;male&quot;</span>&gt;男</span><br><span class="line">        &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;female&quot;</span>&gt;女</span><br><span class="line">        &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> value=<span class="string">&quot;others&quot;</span>&gt;其他</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        hobby:</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;read&quot;</span>&gt;read</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;DBJ&quot;</span>&gt;DBJ</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;JBD&quot;</span>&gt;JBD</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby&quot;</span> value=<span class="string">&quot;hecha&quot;</span>&gt;hecha</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        province:</span><br><span class="line">        &lt;select name=<span class="string">&quot;province&quot;</span> id=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">            &lt;option value=&quot;sh&quot; selected=&quot;selected&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;bj&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;sz&quot;&gt;深圳&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;file&quot;</span> multiple name=<span class="string">&quot;myfile&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;自我介绍:</span><br><span class="line">        &lt;textarea name=&quot;info&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span>&gt;</span><br><span class="line">    &lt;!--    当没有指定按钮的文本内容，不同浏览器打开可能是不一样的--&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;按钮&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;reset&quot;</span> value=<span class="string">&quot;重置&quot;</span>&gt;</span><br><span class="line">    &lt;button&gt;点我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># form表单默认提交数据的方式 是get请求  数据直接放在url后面的</span></span><br><span class="line"><span class="comment"># 可以通过method制定提交方式</span></span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;http://127.0.0.1:5000/index/&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">form表单提交数据需要注意</span></span><br><span class="line"><span class="string">   1.method必须是post</span></span><br><span class="line"><span class="string">   2.enctype=&quot;multipart/form-data&quot;</span></span><br><span class="line"><span class="string">     enctype 类似于提交数据的编码格式</span></span><br><span class="line"><span class="string">       默认是unicode 只能够提交普通的文本数据</span></span><br><span class="line"><span class="string">       formdata 就可以支持提交文件数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对用户输入的标签，如果你加了value， 那就是默认值</span></span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">&quot;d1&quot;</span>&gt;</span><br><span class="line">      username: &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;d1&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;默认值&quot;</span>&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">disabled 禁用</span><br><span class="line">readonly 只读</span><br><span class="line">hidden   隐藏</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">获取用户数据的标签都应该有name属性</span></span><br><span class="line"><span class="string">  因为需要给后端发送数据并且需要标明数据到底是什么</span></span><br><span class="line"><span class="string">  name   字典的key</span></span><br><span class="line"><span class="string">  value  字典的value(用户数据)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">需要用户选择的标签  你需要自己加上value值</span></span><br><span class="line"><span class="string">  radio</span></span><br><span class="line"><span class="string">  CheckBox</span></span><br><span class="line"><span class="string">  option</span></span><br><span class="line"><span class="string">  ps: 如果你给获取用户输入的标签加了value值，那么就类似于默认值。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>







<h3 id="其他了解"><a href="#其他了解" class="headerlink" title="其他了解"></a>其他了解</h3><h4 id="格式排版标签"><a href="#格式排版标签" class="headerlink" title="格式排版标签"></a>格式排版标签</h4><ul>
<li><p><code>&lt;br/&gt;</code> 换行标签，完成文字的紧凑显示。可以使用连续多个<code>&lt;br/&gt;</code>标签来换行</p>
</li>
<li><p><code>&lt;hr/&gt;</code> 水平分割线标签，用于段落与段落之间的分割</p>
</li>
<li><pre><code>&lt;p&gt;&lt;/p&gt;
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  段落标签,里面可以加入文字,列表,表格等，可以&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  或&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;pre&amp;gt;&amp;lt;&amp;#x2F;pre&amp;gt;&amp;#96;按原文显示标签，可以把原文件中的空格,回车,换行,tab键表现出来&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;hn&amp;gt;&amp;lt;&amp;#x2F;hn&amp;gt;&amp;#96; 标题字标签，n为1-6，定义六级标题，而且会自动换行插入一个空行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;div&amp;gt;&amp;lt;&amp;#x2F;div&amp;gt;&amp;#96; 没有任何语义的标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 文本标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;em&amp;gt;&amp;lt;&amp;#x2F;em&amp;gt;&amp;#96; 表示强调，通常为斜体字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;strong&amp;gt;&amp;lt;&amp;#x2F;strong&amp;gt;&amp;#96; 表示强调(语气更强)，通常为粗体字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;del&amp;gt;&amp;lt;&amp;#x2F;del&amp;gt;&amp;#96; 标签定义文档中已删除的文本。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;ins&amp;gt;&amp;lt;&amp;#x2F;ins&amp;gt;&amp;#96; 标签定义已经被插入文档中的文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;sub&amp;gt;&amp;lt;&amp;#x2F;sub&amp;gt;&amp;#96; 文字下标字体标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;sup&amp;gt;&amp;lt;&amp;#x2F;sup&amp;gt;&amp;#96; 文字上标字体标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;mark&amp;gt;&amp;lt;&amp;#x2F;mark&amp;gt;&amp;#96; **H5新增** 标签定义带有记号的文本 请在需要突出显示文本时使用,如搜索引擎搜索页面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;ruby&amp;gt;&amp;lt;&amp;#x2F;ruby&amp;gt;&amp;#96; **H5新增** 标签定义 ruby 注释（中文注音或字符） 在东亚使用，显示的是东亚字符的发音。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;lt;rt&amp;gt;&amp;lt;&amp;#x2F;rt&amp;gt;&amp;#96; **H5新增** 标签定义字符（中文注音或字符）的解释或发音&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
&lt;!--一下文本标签  作为了解--&gt;
&lt;cite&gt;    用于引证、举例、(标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题)通常为斜体字
&lt;dfn&gt; 定义一个定义项目
&lt;code&gt; 定义计算机代码文本
&lt;samp&gt; 定义样式文本 标签并不经常使用。只有在要从正常的上下文中将某些短字符序列提取出来，对它们加以强调的极少情况下，才使用这个标签。
&lt;kbd&gt; 定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。
&lt;abbr&gt; 定义缩写 配合title属性  (IE6以上)
&lt;bdo&gt;  来覆盖默认的文本方向 dir属性 值: lrt  rtl
&lt;var&gt; 定义变量。您可以将此标签与 &lt;pre&gt; 及 &lt;code&gt; 标签配合使用。
&lt;small&gt; 标签定义小型文本（和旁注）
&lt;b&gt;    粗体字标签 根据 HTML 5 的规范，&lt;b&gt; 标签应该做为最后的选择，只有在没有其他标记比较合适时才使用它。
&lt;i&gt;    斜体字标签 标签被用来表示科技术语、其他语种的成语俗语、想法、宇宙飞船的名字等等。
&lt;u&gt;    下划线字体标签 标签定义与常规文本风格不同的文本，像拼写错误的单词或者汉语中的专有名词。 请尽量避免使用 &lt;u&gt; 为文本加下划线，用户会把它混淆为一个超链接。
&lt;q&gt;  签定义一个短的引用。浏览器经常会在这种引用的周围插入引号。(小段文字)
&lt;blockquote&gt; 标签定义摘自另一个源的块引用。浏览器通常会对 &lt;blockquote&gt; 元素进行缩进。(大段文字) (块状元素)
&lt;address&gt;  定义地址 通常为斜体 (注意非通讯地址)  块状元素
&lt;font&gt;       H5已删除 字体标签，可以通过标签的属性指定文字的大小、颜色及字体等信息
&lt;tt&gt;       H5已删除 打字机文字
&lt;big&gt;       H5已删除 大型字体标签
&lt;strike&gt;   H5已删除 添加删除线
&lt;acronym&gt;  H5已删除 首字母缩写 请使用&lt;abbr&gt;代替
&lt;bdi&gt;      H5新增 标签允许您设置一段文本，使其脱离其父元素的文本方向设置。(经测试,各大浏览器都不起作用)
&lt;mark&gt;     H5新增 标签定义带有记号的文本 请在需要突出显示文本时使用,如搜索引擎搜索页面
&lt;meter&gt;    H5新增 定义预定义范围的度量
&lt;progress&gt; H5新增 标签标示任务的进度（进程）
&lt;time&gt;     H5新增 定义时间和日期 
&lt;wbr&gt;        H5新增    规定在文本中的何处适合添加换行符。Word Break Opportunity
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &amp;#96;&amp;lt;label&amp;gt;&amp;#96;标签的for属性应当与相关元素的id属性相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 结合CSS可以控制表单文本或控件对齐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 总结&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;![form表单标签](py-day06&amp;#x2F;form表单标签.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;全称：cascading style sheet 层叠样式表 css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;作用：美化页面，对页面进行布局&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### CSS的语法结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 每个CSS样式由两个组成部分：选择器和声明。声明又包括属性和属性值。每个声明之后用分号结束&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;![css的语法结构](py-day06&amp;#x2F;css语法结构.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**注意：在css中，选择器是非常重要的，它制定了对哪些元素进行样式设置**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#96;&amp;#96;&amp;#96;css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;*单行注释*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;多行注释1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;多行注释2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;多行注释3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通常我们在写css样式的时候也会用注释来划定样式区域（因为HTML代码多所以对css代码也会很多）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;*这是博客园首页的css样式文件*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;*顶部导航条样式*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;*左侧菜单栏样式*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;*右侧菜单栏样式*&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;



</code></pre>
</li>
</ul>
<h4 id="CSS的三种引入方式"><a href="#CSS的三种引入方式" class="headerlink" title="CSS的三种引入方式"></a>CSS的三种引入方式</h4><ol>
<li><p>行内样式（<strong>不推荐使用，没有体现CSS的优势</strong>）</p>
<blockquote>
<p>直接对HTML的标签使用style属性，然后将css代码直接写在其中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p style&#x3D;&quot;color: red;font-size: 50px;text-align: center&quot;&gt;Egon是一个非常了不起的人&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>内部样式</p>
<blockquote>
<p>将css写在与之间，并用标签进行声明</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;1111&lt;/p&gt;</span><br><span class="line">&lt;p&gt;2222&lt;/p&gt;</span><br><span class="line">&lt;p&gt;3333&lt;/p&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="3">
<li>外部样式(<strong>最正规的方式</strong>)<blockquote>
<p>将css写在一个单独的文件中，然后在页面进行引入</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;09.css&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>总结：外部引入一般是引入第三方的资源css，而上面两种是自己写</p>
<h4 id="CSS常见选择器"><a href="#CSS常见选择器" class="headerlink" title="CSS常见选择器"></a>CSS常见选择器</h4><ol>
<li>标签选择器</li>
</ol>
<ul>
<li>a. 只要是HTML的标签都能当做标签选择器</li>
<li>b. 标签选择器选中的是当前界面中的所有标签,而不能单独选中某一标签</li>
<li>c. 标签选择器，无论嵌套多少层都能选中</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>id选择器(用的多)</strong></li>
</ol>
<ul>
<li><strong>a. 在企业开发中如果仅仅只是为了设置样式，通常不会使用id，在前端开发中id通常是留给js使用的</strong></li>
<li><strong>b. 每个标签都可以设置唯一一个id，id就相当于人/标签的身份证，因此在同一界面内id绝不能重复</strong></li>
<li><strong>c.引用id一定要加#</strong></li>
<li><strong>d. id的命名只能由字符、数字、下划线组成，且不能以数字开头，更不能是html关键字如p，a，img等</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#one</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;span id=&quot;one&quot;&gt;asdasdasdasd&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>类别选择器(用的多)</strong></li>
</ol>
<ul>
<li>a. 类名就是专门用来给某个特定的标签设置样式的</li>
<li>b. 每个标签都可以设置一个或多个class（空格分隔），class就相当于人/标签的名称，因此同一界面内class可以重复</li>
<li>c. 引用class一定要加点.</li>
<li>d. 类名的命名规则与id的命名规则相同</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;id选择器&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .p1 &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .p2 &#123;</span><br><span class="line">            font-size: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">        .p3 &#123;</span><br><span class="line">            text-decoration: underline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;p1 p2&quot;&gt;第一行内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;p2 p3&quot;&gt;第二行内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;p1 p3&quot;&gt;第三行内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>通用选择器**(不怎么用)**</li>
</ol>
<ul>
<li>在企业开发中一般不会使用通配符选择器：由于通配符选择器是设置界面上所有的标签的属性，所以在设置之前会遍历所有的标签，如果当前界面上的标签比较多，那么性能就会比较差。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>通配符选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        * &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> &gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> &gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>组合选择器(比如只想让div 下面的span更改样式)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在前端，我们用标签嵌套表示层级关系</span></span><br><span class="line">&lt;div&gt;div</span><br><span class="line">    &lt;p&gt;div p&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;div p</span><br><span class="line">    &lt;span&gt;div p span&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;span&gt;span&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;span&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">div里面的p和span都是div的后代</span><br><span class="line">p是div的儿子</span><br><span class="line">p里面的span是p的儿子 是div的孙子</span><br><span class="line">div是p的父亲</span><br></pre></td></tr></table></figure>

<ul>
<li>后代选择器<ul>
<li>div p {} 只要是div内部的p都拿到</li>
</ul>
</li>
<li>儿子选择器<ul>
<li>div&gt;p {} 只拿内部第一层级的p</li>
</ul>
</li>
<li>毗邻选择器<ul>
<li>div+p {} 紧挨着我的同级<strong>下一个</strong></li>
</ul>
</li>
<li>弟弟选择器<ul>
<li>div~p {} 同级别下面所有的p</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*后代选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*div span &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    color: red;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*儿子选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*div&gt;span&#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    color: red;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*毗邻选择器*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*div+span&#123; !*同级别紧挨着下面的第一个*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    color: red;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*弟弟选择器*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>~<span class="selector-tag">span</span>&#123; <span class="comment">/* 同级别下面所有的span */</span></span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>div</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>div p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>div p</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>div p span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>属性选择器</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1 含有某个属性</span></span><br><span class="line"><span class="string">2 含有某个属性并且有某个值</span></span><br><span class="line"><span class="string">3 含有某个属性并且有某个值的某个标签</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 属性选择器是以[]作为标志的。</span></span><br><span class="line">ps: 标签既可以有默认的书写 id <span class="class"><span class="keyword">class</span>。。。。</span></span><br><span class="line"><span class="class">    还可以有自定义的书写并且支持多个</span></span><br><span class="line">    &lt;p id=&#x27;d1&#x27; username=&#x27;jason&#x27;&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        /*[username] &#123; !*将所有含有属性名是username的标签背景色改为红色 *!*/</span><br><span class="line">        /*    background-color: red;*/</span><br><span class="line">        /*&#125;*/</span><br><span class="line"></span><br><span class="line">        /*[username=<span class="string">&quot;jason&quot;</span>] &#123; !* 找到所有属性名为username并且属性值是Jason的标签*/</span><br><span class="line">        /*    background-color: orange;*/</span><br><span class="line">        /*&#125;*/</span><br><span class="line">        </span><br><span class="line">        /*input[username=<span class="string">&#x27;jason&#x27;</span>] &#123; !*找到input标签中所有属性名为username并且属性值为Jason*!*/</span><br><span class="line">        /*    background-color: burlywood;*/</span><br><span class="line">        /*&#125;*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> username&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> username=<span class="string">&quot;jason&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> username=<span class="string">&quot;egon&quot;</span>&gt;</span><br><span class="line">    &lt;p username=&quot;tank&quot;&gt;水箱老师&lt;/p&gt;</span><br><span class="line">    &lt;p username=&quot;jason&quot;&gt;jason老师&lt;/p&gt;</span><br><span class="line">    &lt;p username=&quot;egon&quot;&gt;egon老师&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<ol start="7">
<li>分组与嵌套选择器</li>
</ol>
<ul>
<li>分组</li>
</ul>
<p>当多个元素的样式相同的时候，我们没有必要重复地为每个元素都设置样式，我们可以通过在多个选择器之间使用逗号分隔的分组选择器来统一设置元素样式。</p>
<p>例如：<code>div,p,span 逗号表示并列关系</code></p>
<p>上面的代码为div标签和p标签统一设置字体为红色。</p>
<p>通常，我们会分两行来写，更清晰:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div, p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div,</span><br><span class="line">p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>嵌套</li>
</ul>
<p>多种选择器可以混合起来使用，比如：.c1类内部所有p标签设置字体颜色为红色。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.c1 p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#d1, .c1, span &#123;</span><br><span class="line">    color: orange;</span><br><span class="line">&#125;</span><br><span class="line">#d1 .c2 #d3 &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>伪类选择器(针对a标签)<strong>(记住hover 悬浮态)</strong></li>
</ol>
<ul>
<li><p>（1）静态伪类：只能用于超链接的样式。如下：</p>
<blockquote>
<p>:link 超链接点击之前</p>
</blockquote>
<blockquote>
<p>:visited 链接被访问过之后</p>
</blockquote>
<blockquote>
<p>PS：以上两种样式，只能用于超链接。</p>
</blockquote>
</li>
<li><p>（2）动态伪类：针对所有标签都适用的样式。如下：</p>
<blockquote>
<p>:<strong>hover</strong> “悬停”：鼠标放到标签上的时候</p>
</blockquote>
<blockquote>
<p>:active “激活”： 鼠标点击标签，但是不松手时。</p>
</blockquote>
<blockquote>
<p>:focus 是某个标签获得焦点时的样式（比如某个输入框获得焦点）</p>
</blockquote>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="comment">/* 访问之前的状态 */</span></span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-tag">aqua</span>;  <span class="comment">/* 鼠标悬浮态 */</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-tag">black</span>; <span class="comment">/* 鼠标点击不松开状态 激活态 */</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-tag">darkgray</span>; <span class="comment">/*访问之后的状态*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.jd.com&quot;</span>&gt;</span>在不在？<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> /*input框获取焦点，鼠标点了input框*/</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li>伪元素选择器</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:first-letter</span> &#123;  <span class="comment">/*第一个字符放大*/</span></span></span><br><span class="line">            font-size: 48px;</span><br><span class="line">            color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:before</span> &#123;  <span class="comment">/*在文本开头 同css添加内容*/</span></span></span><br><span class="line">            content: &#x27;你说的对&#x27;;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:after</span> &#123;  <span class="comment">/*在文本末尾 同css添加内容*/</span></span></span><br><span class="line">            content: &#x27;雨露均沾&#x27;;</span><br><span class="line">            color: orange;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>奥术大师多啊阿萨德阿萨德，阿萨德阿萨德阿萨德阿萨德<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>ps : before 和 after 通常都是用来清除浮动带来的影响: 父标签塌陷的问题</strong></p>
<ol start="10">
<li>优先级排序<br><code>&lt;!--行内样式 &gt; id选择器 &gt; 类别选择器 &gt; 标签选择器 &gt; 通用选择器 --&gt;</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1 &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#show1</span>&#123;</span></span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.show</span>&#123;</span></span><br><span class="line">            color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;show1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: gray&quot;</span>&gt;</span>优先级测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>总结：看自己的习惯使用. 推荐大家使用 id选择器，标签选择器</p>
</blockquote>
<h4 id="css常见的属性和属性值"><a href="#css常见的属性和属性值" class="headerlink" title="css常见的属性和属性值"></a>css常见的属性和属性值</h4><h5 id="1、宽和高"><a href="#1、宽和高" class="headerlink" title="1、宽和高"></a>1、宽和高</h5><p>width属性可以为元素设置宽度。</p>
<p>height属性可以为元素设置高度。</p>
<p>块级标签才能设置宽度，内联标签的宽度由内容来决定(行内标签无法设置宽度，设置了也不会生效)。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        p &#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 400px;</span><br><span class="line">        &#125;</span><br><span class="line">        span &#123;</span><br><span class="line">            background-color: green;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 400px;</span><br><span class="line"><span class="css">            <span class="comment">/*行内标签无法设置长宽 就算你写了 也不会生效*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>ppp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="2、字体属性"><a href="#2、字体属性" class="headerlink" title="2、字体属性"></a>2、字体属性</h5><h6 id="2-1-文字字体"><a href="#2-1-文字字体" class="headerlink" title="2-1 文字字体"></a>2-1 文字字体</h6><p>font-family可以把多个字体名称作为一个“回退”系统来保存。如果浏览器不支持第一个字体，则会尝试下一个。浏览器会使用它可识别的第一个值。</p>
<p>简单实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  font-family: &quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;, &quot;Arial&quot;, sans-serif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-2-字体大小"><a href="#2-2-字体大小" class="headerlink" title="2-2 字体大小"></a>2-2 字体大小</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果设置成inherit表示继承父元素的字体大小值。</p>
<h6 id="2-3-字重（粗细）"><a href="#2-3-字重（粗细）" class="headerlink" title="2-3 字重（粗细）"></a>2-3 字重（粗细）</h6><p>font-weight用来设置字体的字重（粗细）。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td>默认值，标准粗细</td>
</tr>
<tr>
<td>bold</td>
<td>粗体</td>
</tr>
<tr>
<td>bolder</td>
<td>更粗</td>
</tr>
<tr>
<td>lighter</td>
<td>更细</td>
</tr>
<tr>
<td>100~900</td>
<td>设置具体粗细，400等同于normal，而700等同于bold</td>
</tr>
<tr>
<td>inherit</td>
<td>继承父元素字体的粗细值</td>
</tr>
</tbody></table>
<h6 id="2-4-文本颜色"><a href="#2-4-文本颜色" class="headerlink" title="2-4 文本颜色"></a>2-4 文本颜色</h6><p>颜色属性被用来设置文字的颜色。</p>
<p>颜色是通过CSS最经常的指定：</p>
<ul>
<li>十六进制值 - 如: <strong>＃</strong>FF0000</li>
<li>一个RGB值 - 如: RGB(255,0,0)</li>
<li>颜色的名称 - 如: red</li>
</ul>
<p>还有rgba(255,0,0,0.3)，第四个值为alpha, 指定了色彩的透明度/不透明度，它的范围为0.0到1.0之间。</p>
<h6 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2-5 总结"></a>2-5 总结</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*字族：STSong作为首选字体, 微软雅黑作为备用字体*&#x2F;</span><br><span class="line">font-family: &quot;STSong&quot;, &quot;微软雅黑&quot;;</span><br><span class="line">&#x2F;*字体大小*&#x2F;</span><br><span class="line">font-size: 40px;</span><br><span class="line">&#x2F;*字重：100、200、300、400、500、600、700、800、900，值越大字越粗*&#x2F;</span><br><span class="line">font-weight: 900;</span><br><span class="line">&#x2F;*行高: 字体文本默认在行高中垂直居中显示*&#x2F;</span><br><span class="line">line-height: 200px;</span><br><span class="line">&#x2F;*字划线: overline(上划线) | line-through(中划线) | underline(下划线) | none(取消划线)  *&#x2F;</span><br><span class="line">text-decoration: overline;</span><br><span class="line">&#x2F;*字间距*&#x2F;</span><br><span class="line">letter-spacing: 2px;</span><br><span class="line">&#x2F;*词间距*&#x2F;</span><br><span class="line">word-spacing: 5px;</span><br><span class="line">&#x2F;*首行缩进：1em相当于一个字的宽度*&#x2F;</span><br><span class="line">text-indent: 2em;</span><br><span class="line">&#x2F;*字体颜色*&#x2F;</span><br><span class="line">color: red;</span><br><span class="line">&#x2F;* 文本水平排列方式：left(水平居左) | center(水平居中) | right(水平居右) *&#x2F;</span><br><span class="line">text-align: center;</span><br></pre></td></tr></table></figure>

<h6 id="2-6-案例"><a href="#2-6-案例" class="headerlink" title="2-6 案例"></a>2-6 案例</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        p &#123;</span><br><span class="line"><span class="css">            <span class="comment">/*font-family: &quot;Arial Black&quot;,&quot;微软雅黑&quot;,&quot;...&quot;;  !*第一个不生效就用后面的 写多个备用*!*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*font-size: 24px;  !*字体大小*!*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*font-weight: inherit;  !*bolder lighter 100~900 inherit继承父元素的粗细值*!*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*color: red;  !*直接写颜色英文*!*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*color: #ee762e;  !*颜色编号*!*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*color: rgb(128,23,45);  !*三基色 数字  范围0-255*!*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*color: rgba(23, 128, 91, 0.9);  !*第四个参数是颜色的透明度 范围是0-1*!*/</span></span></span><br><span class="line"></span><br><span class="line">            /*当你想要一些颜色的时候 可以利用现成的工具</span><br><span class="line">                1 pycharm提供的取色器</span><br><span class="line">                2 qq或者微信截图功能</span><br><span class="line"></span><br><span class="line">                微信公众号:软件管家...</span><br><span class="line">            */</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>曹老板 抬人！！！fuck off!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-文字属性"><a href="#3-文字属性" class="headerlink" title="3. 文字属性"></a>3. 文字属性</h5><h6 id="3-1-文字对齐"><a href="#3-1-文字对齐" class="headerlink" title="3-1 文字对齐"></a>3-1 文字对齐</h6><p>text-align 属性规定元素中的文本的水平对齐方式。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>左边对齐 默认值</td>
</tr>
<tr>
<td>right</td>
<td>右对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>justify</td>
<td>两端对齐</td>
</tr>
</tbody></table>
<h6 id="3-2-文字装饰"><a href="#3-2-文字装饰" class="headerlink" title="3-2 文字装饰"></a>3-2 文字装饰</h6><p>text-decoration 属性用来给文字添加特殊效果。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认。定义标准的文本。</td>
</tr>
<tr>
<td>underline</td>
<td>定义文本下的一条线。</td>
</tr>
<tr>
<td>overline</td>
<td>定义文本上的一条线。</td>
</tr>
<tr>
<td>line-through</td>
<td>定义穿过文本下的一条线。</td>
</tr>
<tr>
<td>inherit</td>
<td>继承父元素的text-decoration属性的值。</td>
</tr>
</tbody></table>
<p><strong>常用的为去掉a标签默认的自划线：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-3-首行缩进"><a href="#3-3-首行缩进" class="headerlink" title="3-3 首行缩进"></a>3-3 首行缩进</h6><p>将段落的第一行缩进 32像素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  # font-size: 16px; (1个字16px)</span><br><span class="line">  text-indent: 32px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-4-案例"><a href="#3-4-案例" class="headerlink" title="3-4 案例"></a>3-4 案例</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        p &#123;</span><br><span class="line">            &#x2F;*text-align: center;  !*居中*!*&#x2F;</span><br><span class="line">            &#x2F;*text-align: right;*&#x2F;</span><br><span class="line">            &#x2F;*text-align: left;*&#x2F;</span><br><span class="line">            &#x2F;*text-align: justify;  !*两端对齐*!*&#x2F;</span><br><span class="line"></span><br><span class="line">            &#x2F;*text-decoration: underline;*&#x2F;</span><br><span class="line">            &#x2F;*text-decoration: overline;*&#x2F;</span><br><span class="line">            &#x2F;*text-decoration: line-through;*&#x2F;</span><br><span class="line">            &#x2F;*text-decoration: none;*&#x2F;</span><br><span class="line">            &#x2F;*在html中 有很多标签渲染出来的样式效果是一样的*&#x2F;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            text-indent: 32px;   &#x2F;*缩进32px*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;  &#x2F;*主要用于给a标签去掉自带的下划线  需要掌握*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--    &lt;p&gt;我要感谢我的导师，要不是他，我论文早写完了（狗头）&lt;&#x2F;p&gt;--&gt;</span><br><span class="line">&lt;!--&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.mzitu.com&#x2F;&quot;&gt;点我&lt;&#x2F;a&gt;--&gt;</span><br><span class="line">&lt;p&gt;我要感谢我的导师，要不是他，我论文早写完了（狗头）,我要感谢我的导师，要不是他，我论文早写完了（狗头）,我要感谢我的导师，要不是他，我论文早写完了（狗头）&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="4、背景属性"><a href="#4、背景属性" class="headerlink" title="4、背景属性"></a>4、背景属性</h5><h6 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4-1 基本使用"></a>4-1 基本使用</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*背景颜色*&#x2F;</span><br><span class="line">background-color: red;</span><br><span class="line">&#x2F;*背景图片*&#x2F;</span><br><span class="line">background-image: url(&#39;1.jpg&#39;);</span><br><span class="line">&#x2F;*</span><br><span class="line"> 背景重复</span><br><span class="line"> repeat(默认):背景图片平铺排满整个网页</span><br><span class="line"> repeat-x：背景图片只在水平方向上平铺</span><br><span class="line"> repeat-y：背景图片只在垂直方向上平铺</span><br><span class="line"> no-repeat：背景图片不平铺</span><br><span class="line">*&#x2F;</span><br><span class="line">background-repeat: no-repeat; </span><br><span class="line">&#x2F;*背景位置*&#x2F;</span><br><span class="line">background-position: 左 上;</span><br><span class="line">&#x2F;*background-position: 200px 200px;*&#x2F;</span><br></pre></td></tr></table></figure>

<h6 id="4-2-支持简写"><a href="#4-2-支持简写" class="headerlink" title="4-2 支持简写"></a>4-2 支持简写</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background:#336699 url(&#39;1.png&#39;) no-repeat left top;</span><br></pre></td></tr></table></figure>

<p>使用背景图片的一个常见案例就是很多网站会把很多小图标放在一张图片上，然后根据位置去显示图片。减少频繁的图片请求。</p>
<h6 id="4-3-有趣的例子（图片不动）"><a href="#4-3-有趣的例子（图片不动）" class="headerlink" title="4-3 有趣的例子（图片不动）"></a>4-3 有趣的例子（图片不动）</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;滚动背景图示例&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        .box &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background: url(&quot;http:&#x2F;&#x2F;gss0.baidu.com&#x2F;94o3dSag_xI4khGko9WTAnF6hhy&#x2F;zhidao&#x2F;wh%3D450%2C600&#x2F;sign&#x3D;e9952f4a6f09c93d07a706f3aa0dd4ea&#x2F;4a36acaf2edda3cc5c5bdd6409e93901213f9232.jpg&quot;)  center center;</span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">        &#125;</span><br><span class="line">        .d1 &#123;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: tomato;</span><br><span class="line">        &#125;</span><br><span class="line">        .d2 &#123;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: steelblue;</span><br><span class="line">        &#125;</span><br><span class="line">        .d3 &#123;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background-color: mediumorchid;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;d1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;d2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;d3&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h6 id="4-4-案例"><a href="#4-4-案例" class="headerlink" title="4-4 案例"></a>4-4 案例</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            height: 800px;</span><br><span class="line">            width: 800px;</span><br><span class="line">            &#x2F;*background-color: red;*&#x2F;</span><br><span class="line">            &#x2F;*背景图片*&#x2F;</span><br><span class="line">            &#x2F;*background-image: url(&quot;222.png&quot;);  !*默认要全部铺满*!*&#x2F;</span><br><span class="line">            &#x2F;*background-repeat: no-repeat;  !*不铺*!*&#x2F;</span><br><span class="line">            &#x2F;*background-repeat: no-repeat;  !*不铺*!*&#x2F;</span><br><span class="line">            &#x2F;*background-repeat:repeat-x;  *&#x2F;</span><br><span class="line">            &#x2F;*background-repeat:repeat-y;  *&#x2F;</span><br><span class="line">            &#x2F;*其实浏览器不是一个平面  是一个三维立体结构</span><br><span class="line">            z轴指向用户 越大离用户越近</span><br><span class="line">            *&#x2F;</span><br><span class="line">            &#x2F;*background-position:center center;  !*第一个左  第二个上*!*&#x2F;</span><br><span class="line"></span><br><span class="line">            &#x2F;*如果出现了多个属性名前缀是一样的情况 一般情况下都可以简写 只写前缀*&#x2F;</span><br><span class="line">            background: red url(&quot;222.png&quot;) no-repeat center center;  &#x2F;*只需要填上你想要加的参数即可 位置没有关系 参数个数也不做限制 加就显示不加就用默认的设置*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="5、边框"><a href="#5、边框" class="headerlink" title="5、边框"></a>5、边框</h5><h6 id="5-1-边框属性"><a href="#5-1-边框属性" class="headerlink" title="5-1 边框属性"></a>5-1 边框属性</h6><ul>
<li>border-width</li>
<li>border-style</li>
<li>border-color</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#i1 &#123;</span><br><span class="line">  border-width: 2px;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  border-color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常使用简写方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#i1 &#123;</span><br><span class="line">  border: 2px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="5-2边框样式"><a href="#5-2边框样式" class="headerlink" title="5-2边框样式"></a><strong>5-2边框样式</strong></h6><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>无边框。</td>
</tr>
<tr>
<td>dotted</td>
<td>点状虚线边框。</td>
</tr>
<tr>
<td>dashed</td>
<td>矩形虚线边框。</td>
</tr>
<tr>
<td>solid</td>
<td>实线边框。</td>
</tr>
</tbody></table>
<p>除了可以统一设置边框外还可以单独为某一个边框设置样式，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#i1 &#123;</span><br><span class="line">  border-top-style:dotted;</span><br><span class="line">  border-top-color: red;</span><br><span class="line">  border-right-style:solid;</span><br><span class="line">  border-bottom-style:dotted;</span><br><span class="line">  border-left-style:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="5-3-案例"><a href="#5-3-案例" class="headerlink" title="5-3 案例"></a>5-3 案例</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">        p &#123;</span><br><span class="line">            background-color: red;</span><br><span class="line"></span><br><span class="line">            border-width: 5px;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            border-color: green;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        div &#123;</span><br><span class="line">            &#x2F;*border-left-width: 5px;*&#x2F;</span><br><span class="line">            &#x2F;*border-left-color: red;*&#x2F;</span><br><span class="line">            &#x2F;*border-left-style: dotted;*&#x2F;</span><br><span class="line"></span><br><span class="line">            &#x2F;*border-right-width: 10px;*&#x2F;</span><br><span class="line">            &#x2F;*border-right-color: greenyellow;*&#x2F;</span><br><span class="line">            &#x2F;*border-right-style: solid;*&#x2F;</span><br><span class="line"></span><br><span class="line">            &#x2F;*border-top-width: 15px;*&#x2F;</span><br><span class="line">            &#x2F;*border-top-color: deeppink;*&#x2F;</span><br><span class="line">            &#x2F;*border-top-style: dashed;*&#x2F;</span><br><span class="line"></span><br><span class="line">            &#x2F;*border-bottom-width: 10px;*&#x2F;</span><br><span class="line">            &#x2F;*border-bottom-color: tomato;*&#x2F;</span><br><span class="line">            &#x2F;*border-bottom-style: solid;*&#x2F;</span><br><span class="line">            border: 3px solid red;  &#x2F;*三者位置可以随意写*&#x2F;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        #d1 &#123;</span><br><span class="line">            background-color: greenyellow;</span><br><span class="line">            height: 400px;</span><br><span class="line">            width: 400px;</span><br><span class="line">            border-radius: 50%;  &#x2F;*直接写50%即可 长宽一样就是圆 不一样就是椭圆*&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;穷人  被diss到了  哭泣.png&lt;&#x2F;p&gt;</span><br><span class="line">&lt;div&gt;妈拉个巴子,妈拉个巴子,妈拉个巴子,妈拉个巴子&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;d1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h5 id="6、border-radius"><a href="#6、border-radius" class="headerlink" title="6、border-radius"></a>6、border-radius</h5><p>用这个属性能实现圆角边框的效果。</p>
<p>将border-radius设置为长或高的一半即可得到一个圆形。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#di&#123;</span><br><span class="line">  border-radius:50%</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7、display属性（显示样式）"><a href="#7、display属性（显示样式）" class="headerlink" title="7、display属性（显示样式）"></a>7、display属性（显示样式）</h5><h6 id="7-1-介绍"><a href="#7-1-介绍" class="headerlink" title="7-1 介绍"></a>7-1 介绍</h6><p>用于控制HTML元素的显示效果。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>display:”none”</td>
<td>HTML文档中元素存在，但是在浏览器中不显示,占用位置也让出。一般用于配合JavaScript代码使用。</td>
</tr>
<tr>
<td>display:”block”</td>
<td>默认占满整个页面宽度，如果设置了指定宽度，则会用margin填充剩下的部分。</td>
</tr>
<tr>
<td>display:”inline”</td>
<td>按行内元素显示，此时再设置元素的width、height、margin-top、margin-bottom和float属性都不会有什么影响。</td>
</tr>
<tr>
<td>display:”inline-block”</td>
<td>使元素同时具有行内元素和块级元素的特点。</td>
</tr>
</tbody></table>
<p><strong>display:”none”与visibility:hidden的区别：</strong></p>
<p>visibility:hidden: 可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。</p>
<p>display:none: 可以隐藏某个元素，且隐藏的元素不会占用任何空间。也就是说，该元素不但被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。</p>
<h6 id="7-2-详细"><a href="#7-2-详细" class="headerlink" title="7-2 详细"></a>7-2 详细</h6><p>HTML5预定义了很多系统标签，大家学习了html标签部分的时候，肯定注意到了，不同的标签在页面中的显示效果是不一样的，比如两个div之间默认会换行显示，而两个span标签却在一行来显示，到底是什么样式控制着标签这种显示效果呢，那就是显示样式display来控制的。</p>
<ul>
<li>display: block;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;display: block;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;span style&#x3D;&quot;display: block;&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;i style&#x3D;&quot;display: block;&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">1. 任意标签的display样式值均可以设置为block，那么该标签就会以block方式来显示</span><br><span class="line">2. block方式显示的标签，默认会换行</span><br><span class="line">3. block方式显示的标签，支持所有的css样式</span><br><span class="line">4. block方式显示的标签，可以嵌套所有显示方式的标签</span><br><span class="line">注：标题标签和段落标签虽然也是block显示类标签，但不建议嵌套block显示类标签</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>display: inline;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;display: inline;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;span style&#x3D;&quot;display: inline;&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;i style&#x3D;&quot;display: inline;&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">1. 任意标签的display样式值均可以设置为inline，那么该标签就会以inline方式来显示</span><br><span class="line">2. inline方式显示的标签，默认不会换行</span><br><span class="line">3. inline方式显示的标签，不支持所有css样式(如：不支持手动设置该标签的宽高)</span><br><span class="line">4. inline方式显示的标签，建议只用来嵌套所有inline显示方式的标签</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>display: inline-block;</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;display: inline-block;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;span style&#x3D;&quot;display: inline-block;&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;i style&#x3D;&quot;display: inline-block;&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">1. 任意标签的display样式值均可以设置为inline-block，那么该标签就会以inline-block方式来显示</span><br><span class="line">2. inline-block方式显示的标签，具有inline特性，默认不换行</span><br><span class="line">3. inline-block方式显示的标签，也具备block特征，支持所有css样式</span><br><span class="line">4. inline-block方式显示的标签，不建议嵌套任意显示方式的标签</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<h6 id="7-3-案例"><a href="#7-3-案例" class="headerlink" title="7-3 案例"></a>7-3 案例</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    !*display: none;  !*隐藏标签不展示到前端页面并且原来的位置也不再占有了 但是还存在于文档上*!*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline;  !*将标签设置为行内标签的特点*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: block;  !*将标签设置成块儿级标签的特点*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: block;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d1 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline-block;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*#d2 &#123;*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*    display: inline-block;  !*标签即可以在一行显示又可以设置长宽*!*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*&#125;*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;visibility: hidden&quot;</span>&gt;</span>单纯的隐藏 位置还在<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id=&quot;d1&quot; style=&quot;height: 100px;width: 100px;background-color: red&quot;&gt;01&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id=&quot;d2&quot; style=&quot;height: 100px;width: 100px;background-color: greenyellow&quot;&gt;02&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;span id=&quot;d1&quot; style=&quot;height: 100px;width: 100px;background-color: red&quot;&gt;span&lt;/span&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;span id=&quot;d2&quot; style=&quot;height: 100px;width: 100px;background-color: greenyellow&quot;&gt;span&lt;/span&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;div id=&quot;d1&quot; style=&quot;height: 100px;width: 100px;background-color: red&quot;&gt;01&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;div id=&quot;d2&quot; style=&quot;height: 100px;width: 100px;background-color: greenyellow&quot;&gt;02&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h5><p>商品布局真是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#pg-content</span>&#123;</span></span><br><span class="line">            border: 1px solid orange;</span><br><span class="line">            width: 700px;</span><br><span class="line">            height: 500px;</span><br><span class="line">        &#125;</span><br><span class="line">        h2&#123;</span><br><span class="line">            color: orange;</span><br><span class="line">            font-size: 18px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">orange</span>;</span></span><br><span class="line">            margin-top: 0;</span><br><span class="line">            padding-left: 12px;</span><br><span class="line"><span class="css">            <span class="comment">/*line-height: 18px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*height: 12px;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e7e7e7</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">            margin: 11px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        img&#123;</span><br><span class="line">            width: 130px;</span><br><span class="line">            height: 130px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item</span> <span class="selector-tag">p</span>, <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            font-size: 13px;</span><br><span class="line">            color: black;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.current</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">            font-size: 13px;</span><br><span class="line">            margin-left: -8px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.orgin</span>&#123;</span></span><br><span class="line">            text-decoration: line-through;</span><br><span class="line">            margin-left: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hot</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hot</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pg-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>限时抢购<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>常用快捷键</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. table&gt;tr*3&gt;td*3</span><br><span class="line">2. ！ Tab   ----快速生成文档结构</span><br><span class="line">3. SETTINGS-EDITOR-LIVE TEMPLATES   ---定义模板、快捷键</span><br><span class="line">4. (h$)*6  Tab   ---六个标题标签 h1,h2,h3,h4,h5,h6</span><br><span class="line">5. p*n  Tab   ---多个段落标签 p, p, ...</span><br><span class="line">6. div &gt; span  Tab   ---嵌套父子模式</span><br><span class="line">7. div &gt;(span+a)   ---嵌套兄弟模式</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.写一个商品页面展示布局效果   <a href="https://s2.ax1x.com/old/FZckt.png">https://s2.ax1x.com/old/FZckt.png</a><br>2.<a href="https://s2.ax1x.com/old/FEens.png">https://s2.ax1x.com/old/FEens.png</a></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>分组与嵌套</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 多个选择器可以别列共用一套css样式</span><br><span class="line">div, p, span &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 不同选择器之间也可以混合使用</span><br><span class="line">.c1,#d1&gt;span &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>伪类选择器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:link &#123;&#125;</span><br><span class="line">a:hover &#123;&#125;  # 需要记忆</span><br><span class="line">a:active &#123;&#125;</span><br><span class="line">a:visited &#123;&#125;</span><br><span class="line">input:focus &#123;&#125; # input 框获取焦点</span><br></pre></td></tr></table></figure>

<ul>
<li>伪元素选择器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p:first-letter &#123;&#125; <span class="comment"># 通过css加文本内容 但是无法选中</span></span><br><span class="line">p:before &#123;&#125;</span><br><span class="line">p:after &#123;&#125;</span><br><span class="line"><span class="comment"># ps:before和after多用于清除浮动带来的负面影响。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>选择器优先级</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">行内&gt;id&gt;<span class="class"><span class="keyword">class</span>&gt;标签</span></span><br><span class="line"><span class="class">精确度越高说话越硬</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">ps</span>:</span>  !important强制让标签采用你的样式</span><br></pre></td></tr></table></figure>

<ul>
<li>宽和高</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">width</span><br><span class="line">height</span><br><span class="line"></span><br><span class="line"><span class="comment"># 块级标签的宽度不修改的情况下默认占浏览器一整行，块级标签的高度也是取决于标签内部文本的高度；可以通过css设置</span></span><br><span class="line"><span class="comment"># 行内标签宽度和高度都是由内部文本决定的  行内标签无法设置长宽，无效。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字体属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字体样式 草书 行书 ...</span></span><br><span class="line">font-family</span><br><span class="line"><span class="comment"># 字体大小</span></span><br><span class="line">font-size</span><br><span class="line"><span class="comment"># 字重</span></span><br><span class="line">font-weight</span><br><span class="line"><span class="comment"># 问题颜色</span></span><br><span class="line">   <span class="number">1.</span> 直接写颜色英文</span><br><span class="line">   <span class="number">2.</span> 写颜色编号 <span class="comment">#4e4e4e</span></span><br><span class="line">   <span class="number">3.</span> 写颜色的三基色rgb(<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>)</span><br><span class="line">   <span class="number">4.</span> 可以给颜色加透明度 rgba(<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>,<span class="number">0.5</span>)  <span class="comment"># 范围0-1</span></span><br><span class="line">   ps: pycharm 或者 截图 快速获取到颜色</span><br></pre></td></tr></table></figure>

<ul>
<li>文字属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文字对齐</span></span><br><span class="line">text-align</span><br><span class="line">      center</span><br><span class="line"><span class="comment"># 文字装饰 记忆 主要就是用来给a标签去掉自带的下划线</span></span><br><span class="line">text-decoration</span><br><span class="line">     none</span><br><span class="line"><span class="comment"># 首行缩进</span></span><br><span class="line">text-indent</span><br></pre></td></tr></table></figure>

<ul>
<li>背景属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 背景色</span></span><br><span class="line">background-color</span><br><span class="line"><span class="comment"># 背景图片</span></span><br><span class="line">background: <span class="comment">#fff url(&quot;&quot;) no-repeat center center</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ps: 当多个属性名前缀都是相同的情况下，一般都支持简写，只写前缀</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">ps: 在调样式的时候 可以借助于浏览器快速的微调，然后将调整好的参数修改到css样式中</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 背景图片不动的应用案例</span></span><br></pre></td></tr></table></figure>

<ul>
<li>边框</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 任何一个标签都有上下左右四个方向的边框</span></span><br><span class="line">border-width</span><br><span class="line">border-style</span><br><span class="line">border-color</span><br><span class="line">简写</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画圆</span></span><br><span class="line">height: <span class="number">400</span>px;</span><br><span class="line">width: <span class="number">400</span>px;</span><br><span class="line">border-raddius: <span class="number">50</span>%</span><br></pre></td></tr></table></figure>

<ul>
<li>display属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display</span><br><span class="line">    none 隐藏 并且原来的位置也没了</span><br><span class="line">    inline</span><br><span class="line">    block</span><br><span class="line">    inline-block</span><br><span class="line">ps: visibility:hidden 只隐藏，位置还在。</span><br></pre></td></tr></table></figure>

<ul>
<li>css盒子模型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 外间距（标签与标签之间的距离）   margin</span></span><br><span class="line"><span class="comment"># 2 边框                         border</span></span><br><span class="line"><span class="comment"># 3 内边距/内填充                 padding</span></span><br><span class="line"><span class="comment"># 4 内容                         content</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">浏览器会识别body标签默认自带8px的margin，一般情况下我们在写页面的时候，上来就会先将body的margin去除</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">margin 上下左右</span><br><span class="line"></span><br><span class="line">padding 上下左右</span><br></pre></td></tr></table></figure>

<ul>
<li>浮动float</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">只要是前期页面布局 一般都是用浮动来设计页面</span></span><br><span class="line"><span class="string">能够让标签脱离正常的文档流漂浮到空中（距离用户更近）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">浮动的元素没有块和行内一说，标签多大浮动起来之后就占多大</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>





































































]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-01</title>
    <url>/2021/01/10/mysql-01/</url>
    <content><![CDATA[<p>sql 库表操作</p>
<a id="more"></a>

<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SQL语言主要用于存取数据、查询数据、更新数据和管理关系数据库系统,SQL语言由IBM开发。SQL语言分为3种类型：</span><br><span class="line"><span class="meta">#</span><span class="bash">1、DDL语句    数据库定义语言： 数据库、表、视图、索引、存储过程，例如CREATE DROP ALTER</span></span><br><span class="line"><span class="meta">#</span><span class="bash">2、DML语句    数据库操纵语言： 插入数据INSERT、删除数据DELETE、更新数据UPDATE、查询数据SELECT</span></span><br><span class="line"><span class="meta">#</span><span class="bash">3、DCL语句    数据库控制语言： 例如控制用户的访问权限GRANT、REVOKE</span></span><br></pre></td></tr></table></figure>



<h2 id="基本库表语句"><a href="#基本库表语句" class="headerlink" title="基本库表语句"></a>基本库表语句</h2><p>1、mysql是什么？<br>    mysql本质就是一个c/s架构的套接字软件</p>
<p>2、数据库基本概念<br>    数据库服务器： 运行有数据库管理软件的计算机<br>    数据库管理软件：mysql<br>    库：文件夹<br>    表：文件<br>    记录：文件中的一行的内容</p>
<p>3、针对库、表、记录的操作</p>
<blockquote>
<p>库</p>
</blockquote>
<p>数据库命名规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以由字母、数字、下划线、＠、＃、＄</span><br><span class="line">区分大小写</span><br><span class="line">唯一性</span><br><span class="line">不能使用关键字如 create select</span><br><span class="line">不能单独使用数字</span><br><span class="line">最长128位</span><br></pre></td></tr></table></figure>

<p>数据库相关操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">增</span><br><span class="line">    create database db12 charset utf8;</span><br><span class="line">改</span><br><span class="line">    alter database db12 charset gbk;</span><br><span class="line">查</span><br><span class="line">    show databases;</span><br><span class="line">    show create database db12;</span><br><span class="line">    select database();</span><br><span class="line">删</span><br><span class="line">    drop database db12;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>表</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件：</span><br><span class="line">    use db1; # 切换文件夹</span><br><span class="line"></span><br><span class="line">    增</span><br><span class="line">        create table t1(id int,name char(16));</span><br><span class="line">    改</span><br><span class="line">        alter table db1.t1 modify name char(15);</span><br><span class="line">        alter table db1.t1 change name NAME char(10);</span><br><span class="line">        alter table db1.t1 rename db1.t2;</span><br><span class="line">    查</span><br><span class="line">        show tables;</span><br><span class="line">        show create table t1; # 查看创表语句</span><br><span class="line">        desc t1;</span><br><span class="line">        desc db1.t1;</span><br><span class="line"></span><br><span class="line">    删</span><br><span class="line">        drop table db1.t1;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>记录</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件中一行行内容</span><br><span class="line">    增</span><br><span class="line">        insert into db1.t1(id,name) values</span><br><span class="line">        (1,&#39;egon&#39;),</span><br><span class="line">        (2,&#39;alexdsb&#39;),</span><br><span class="line">        (3,&#39;wxxsb&#39;);</span><br><span class="line"></span><br><span class="line">        insert into db1.t1(name) values</span><br><span class="line">        (&#39;egon&#39;),</span><br><span class="line">        (&#39;alexdsb&#39;),</span><br><span class="line">        (&#39;wxxsb&#39;);</span><br><span class="line">    改</span><br><span class="line">        update db1.t1 set name&#x3D;&#39;SB&#39; where id&#x3D;3;</span><br><span class="line">    查</span><br><span class="line">        select id,name from db1.t1;</span><br><span class="line"></span><br><span class="line">    删</span><br><span class="line">        delete from db1.t1 where id &gt;&#x3D; 2;</span><br><span class="line"></span><br><span class="line">        # delete 只能用于删除符合条件的某几条记录，不能用于清空表</span><br><span class="line">        delete from t1;</span><br><span class="line"></span><br><span class="line">        # 清空表应该使用truncate,不仅删除所有记录，而且将自增字段的值归0</span><br><span class="line">        truncate t1;</span><br></pre></td></tr></table></figure>



<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>存储引擎就是表的类型(例如文件类型txt pdf)<br> 不同的类型会对应不同处理机制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看存储引擎</span><br><span class="line">show engines;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* myisam</span><br><span class="line"># 5.5之前默认</span><br><span class="line">      create table t4(id int)engine&#x3D;&#39;myisam&#39;;</span><br><span class="line">      特点: 速度比innodb快, 但是我们更加注重数据的安全</span><br><span class="line">      文件特点: t4.frm 表结构 </span><br><span class="line">               t4.MYD 表数据</span><br><span class="line">               t4.MYI 索引</span><br><span class="line">      存数据特点: insert into t4 values(1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* innodb</span><br><span class="line"># 5.5之后默认</span><br><span class="line">      create table t3(id int)engine&#x3D;&#39;innodb&#39;;</span><br><span class="line">      特点: 存储数据更加安全; 支持事务(数据安全),行级锁(数据安全), 外键(数据与数据之间的联系)</span><br><span class="line">      文件特点: t3.frm 表结构 </span><br><span class="line">               t3.MYD 表数据</span><br><span class="line">      存数据特点: insert into t3 values(1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* blackhole</span><br><span class="line"># 黑洞  无论存什么，都立刻消失</span><br><span class="line">      create table t5(id int)engine&#x3D;&#39;blackhole&#39;;</span><br><span class="line">      文件特点: t5.frm  只有表结构 </span><br><span class="line">      存数据特点: insert into t5 values(1); 数据没有</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* memory</span><br><span class="line"># 内存引擎(全部存在内存中) 断电数据丢失</span><br><span class="line">      create table t6(id int)engine&#x3D;&#39;memory&#39;;</span><br><span class="line">      文件特点: t6.frm 只有表结构 </span><br><span class="line">      存数据特点: insert into t6 values(1); 重启数据丢失</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>建表的完整语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line"> 字段名1 类型[(宽度) 约束条件],</span><br><span class="line"> 字段名2 类型[(宽度) 约束条件],</span><br><span class="line"> 字段名3 类型[(宽度) 约束条件]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li><p>同一张表字段名不能重复</p>
</li>
<li><p>宽度和约束条件是可选的；字段名必须的；</p>
<ul>
<li>约束条件支持多个<ul>
<li>字段名1 类型[(宽度) 约束条件1 约束条件2….</li>
</ul>
</li>
</ul>
</li>
<li><p>建表时最后一个字段后一定不要加逗号</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">补充：</span><br><span class="line">    宽度一般是对存储数据的限制，</span><br><span class="line">    create table t7(name char); 默认宽度<span class="number">1</span></span><br><span class="line">    insert into t7 values(<span class="string">&#x27;jason&#x27;</span>);</span><br><span class="line">    5.6 --&gt; 默认没有开启严格模式 规定只能存一个字符 你给了多个字符，那么自动截取</span><br><span class="line">    5.7 --&gt; 默认开启了严格模式，那么规定只能存几个，就不能超，否则报错 Data too long for column &#x27;name&#x27; at row 1</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;严格模式到底开否？&quot;&quot;&quot;</span></span><br><span class="line">MySQL <span class="number">5.7</span>以后默认开启；要开，少让DB干活。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 约束条件 null not null</span></span><br><span class="line">create table t8（id int, name char <span class="keyword">not</span> null）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">宽度：限制数据存储</span></span><br><span class="line"><span class="string">约束条件：在宽度的基础之上增加额外的约束</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">设置sql模式为严格模式</span><br><span class="line">show variables like <span class="string">&quot;%mode&quot;</span>;</span><br><span class="line"><span class="comment"># 全局设置</span></span><br><span class="line">set <span class="keyword">global</span> sql_mode=<span class="string">&quot;strict_trans_tables&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者修改配置文件</span></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">需要重启客户端，会重新加载sql_mode</span><br></pre></td></tr></table></figure>



<h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul>
<li>整型（默认有符号）  int占用4字节<ul>
<li>TINYINT SMALLINT MEDUIMINT INT BIGINT</li>
<li>年龄，等级，id，号码</li>
</ul>
</li>
<li>浮点型                        float占用4字节<ul>
<li>FLOAT DOUBLE DECIMAL</li>
<li>身高，体重，薪资</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.1 整型</span><br><span class="line">    强调：对于整型类型来说，无需指定宽度，默认宽度足够显示。</span><br><span class="line">         数据类型的宽度限制的是显示宽度而非存储宽度；</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         id int(8)</span><br><span class="line">            如果数字没有超出8位，那么默认用空格填充至8位</span><br><span class="line">            超出，有几位存几位（遵守最大范围）</span><br><span class="line">         </span><br><span class="line">    </span><br><span class="line"># tinyint</span><br><span class="line">    create table t7(id tinyint);</span><br><span class="line">    insert into t7 values(-129),(256);</span><br><span class="line">    结论：默认有符号，超出限制只存最大值</span><br><span class="line">    </span><br><span class="line"># tinyint 无符号</span><br><span class="line">    create table t8(id tinyint unsigned);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"># int</span><br><span class="line">    create table t1(id int);</span><br><span class="line">    insert into t1 values(-1),(256);</span><br><span class="line">    结论：默认有符号，可以存负数</span><br><span class="line"></span><br><span class="line"># int 无符号</span><br><span class="line">    create table t2(id int unsigned);</span><br><span class="line">    insert into t2 values(4294967295);</span><br><span class="line">    # 用0 填充</span><br><span class="line">    create table t10(id int(3) unsigned zerofill);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">1.2 浮点型（数的宽度-包含小数，小数位)</span><br><span class="line"></span><br><span class="line">    create table t14(x float(255,30));   # 总共255位，小数30位，整数位就是225</span><br><span class="line">    create table t15(x double(255,30));  # 总共255位，小数30位，整数位就是225</span><br><span class="line">    create table t16(x decimal(65,30));  # 总共65位，小数30位，整数位就是35</span><br><span class="line"></span><br><span class="line">    insert into t14 values(1.111111111111111111111111111111);</span><br><span class="line">    insert into t15 values(1.111111111111111111111111111111);</span><br><span class="line">    insert into t16 values(1.111111111111111111111111111111);</span><br><span class="line">    </span><br><span class="line">    float &lt; double &lt; decimal </span><br><span class="line">    # 要结合实际场景  三者都能用</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210423085136177.png" alt="image-20210423085136177"></p>
<h3 id="字符类型：char-定长-，varchar-变长"><a href="#字符类型：char-定长-，varchar-变长" class="headerlink" title="字符类型：char(定长)，varchar(变长)"></a>字符类型：char(定长)，varchar(变长)</h3><p><strong>ps</strong>: 现在用vachar比较多，<strong>针对不精确问题有时候直接存字符串解决</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">varchar不一定更省内存，当存储额数据刚好到达限制的时候,varchar刚好大一个头部信息1-2bytes    varchar(4) char(4) 存储&#39;abcd&#39;</span><br><span class="line"></span><br><span class="line">char(5)</span><br><span class="line">    优点： 存取都很简单，直接按照固定的字符存取数据即可</span><br><span class="line">    缺点： 浪费空间</span><br><span class="line">    相同点：最大能存放5个字符</span><br><span class="line">    不同点：char 定长</span><br><span class="line">        传入3个字符，那么用空格补全两个空格</span><br><span class="line">        </span><br><span class="line">varchar(5)</span><br><span class="line">    优点: 节省空间</span><br><span class="line">    缺点: 存取较为麻烦（存的时候需要制作报头，取的时候也需要先读取报头，之后才能读取真实数据）</span><br><span class="line">    相同点:最大能存放5个字符</span><br><span class="line">    不同点：</span><br><span class="line">        varchar变长</span><br><span class="line">        传入3个字符，就存3个字符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table t22(x char(5));</span><br><span class="line">create table t23(x varchar(5));</span><br><span class="line"></span><br><span class="line">insert into t22 values(&#39;a&#39;);</span><br><span class="line">insert into t23 values(&#39;a&#39;);</span><br><span class="line"></span><br><span class="line"># 统计字段长度</span><br><span class="line">select char_length(x) from t22;</span><br><span class="line">select char_length(x) from t23;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">1.</span><br><span class="line">    针对char类型，在存放时会将字符补全为5个，然后在查询时又会将末尾补全的空格去掉，如果不想让mysql</span><br><span class="line">    去掉末尾的空格，应该修改sql模式</span><br><span class="line">    set global sql_mode&#x3D;&quot;strict_trans_tables,PAD_CHAR_TO_FULL_LENGTH&quot;</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">    查询语句中where  字段&#x3D;“值    ”，会将值右面的空格去掉后再做比较</span><br><span class="line">egon</span><br><span class="line">alex</span><br><span class="line">lxx</span><br><span class="line"></span><br><span class="line">char(5)</span><br><span class="line">egon |alex |lxx  |</span><br><span class="line"></span><br><span class="line">varchar(5)</span><br><span class="line">1bytes+egon|1bytes+alex|1bytes+lxx|</span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<h3 id="日期类型：time，date，datetime，timestamp，year"><a href="#日期类型：time，date，datetime，timestamp，year" class="headerlink" title="日期类型：time，date，datetime，timestamp，year"></a>日期类型：time，date，datetime，timestamp，year</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date:     年月日      2020-5-4</span><br><span class="line">datetime: 年月日时分秒 2020-5-4 11:12:32</span><br><span class="line">time:     时分秒      11:12:32</span><br><span class="line">timestamp:</span><br><span class="line">year:     2020</span><br><span class="line"></span><br><span class="line">create table student(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name char(16),</span><br><span class="line">    born_year year,</span><br><span class="line">    class_time time,</span><br><span class="line">    birth date,</span><br><span class="line">    reg_time datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table stu(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name char(16),</span><br><span class="line">    born_year year,</span><br><span class="line">    class_time time,</span><br><span class="line">    birth date,</span><br><span class="line">    reg_time datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into student(name,born_year,class_time,birth,reg_time) values</span><br><span class="line">(&#39;egon1&#39;,now(),now(),now(),now());</span><br><span class="line"></span><br><span class="line">create table t17(x datetime);</span><br><span class="line">create table t18(x timestamp);</span><br><span class="line">create table t19(x datetime not null default now());</span><br></pre></td></tr></table></figure>



<h3 id="枚举类型enum与集合类型set"><a href="#枚举类型enum与集合类型set" class="headerlink" title="枚举类型enum与集合类型set"></a>枚举类型enum与集合类型set</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum:多选一</span><br><span class="line">set：多选多</span><br><span class="line"></span><br><span class="line">create table emp(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name char(16),</span><br><span class="line">    sex enum(&#39;male&#39;,&#39;female&#39;,&#39;unknow&#39;),</span><br><span class="line">    hobbies set(&#39;play&#39;,&#39;read&#39;,&#39;sleep&#39;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into emp(name,sex,hobbies) values</span><br><span class="line">(&#39;egon&#39;,&#39;male&#39;,&#39;play,read&#39;);</span><br></pre></td></tr></table></figure>




<h2 id="表操作之约束条件"><a href="#表操作之约束条件" class="headerlink" title="表操作之约束条件"></a>表操作之约束条件</h2><p><strong>约束条件：约束条件是在类型之外为字段附加的限制</strong></p>
<h3 id><a href="#" class="headerlink" title></a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t2(</span><br><span class="line">    id int,</span><br><span class="line">    name char(16),</span><br><span class="line">    gender enum(&#39;male&#39;, &#39;female&#39;, &#39;others&#39;) default &#39;male&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into t2(id, name) values(1, &#39;alex&#39;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="not-null"><a href="#not-null" class="headerlink" title="not null"></a>not null</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">非空</span><br></pre></td></tr></table></figure>

<h3 id="zerofill"><a href="#zerofill" class="headerlink" title="zerofill"></a>zerofill</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 用0 填充</span><br><span class="line">create table t10(id int(3) unsigned zerofill);</span><br></pre></td></tr></table></figure>

<h3 id="unsigned"><a href="#unsigned" class="headerlink" title="unsigned"></a>unsigned</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># int 无符号</span><br><span class="line">    create table t2(id int unsigned);</span><br><span class="line">    insert into t2 values(4294967295);</span><br></pre></td></tr></table></figure>



<p>###unique key（单列唯一，联合唯一）</p>
<h4 id="单列唯一"><a href="#单列唯一" class="headerlink" title="单列唯一"></a>单列唯一</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;设置唯一约束 UNIQUE&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法一：</span><br><span class="line">create table department1(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20) unique,</span><br><span class="line">comment varchar(100)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">create table department2(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20),</span><br><span class="line">comment varchar(100),</span><br><span class="line">constraint uk_name unique(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; insert into department1 values(1,&#39;IT&#39;,&#39;技术&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; insert into department1 values(1,&#39;IT&#39;,&#39;技术&#39;);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;IT&#39; for key &#39;name&#39;</span><br><span class="line"></span><br><span class="line">create table t25(x char(5) unique);</span><br><span class="line">create table t26(</span><br><span class="line">    x int,</span><br><span class="line">    y char(5),</span><br><span class="line">    constraint uni_x unique key(x)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="联合唯一"><a href="#联合唯一" class="headerlink" title="联合唯一"></a>联合唯一</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table services(</span><br><span class="line">    id int,</span><br><span class="line">    name char(16),</span><br><span class="line">    ip char(15),</span><br><span class="line">    port int,</span><br><span class="line">    unique key(ip,port)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="not-null-unqiue-化学反应"><a href="#not-null-unqiue-化学反应" class="headerlink" title="not null +  unqiue 化学反应"></a>not null +  unqiue 化学反应</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t1(id int not null unique);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc t1;</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| Field | Type    | Null | Key | Default | Extra |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11) | NO   | PRI | NULL    |       |</span><br><span class="line">+-------+---------+------+-----+---------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">not null+unique的化学反应</span><br><span class="line">create table service(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20),</span><br><span class="line">host varchar(15) not null,</span><br><span class="line">port int not null,</span><br><span class="line">unique(host,port) #联合唯一</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into service values</span><br><span class="line">    -&gt; (1,&#39;nginx&#39;,&#39;192.168.0.10&#39;,80),</span><br><span class="line">    -&gt; (2,&#39;haproxy&#39;,&#39;192.168.0.20&#39;,80),</span><br><span class="line">    -&gt; (3,&#39;mysql&#39;,&#39;192.168.0.30&#39;,3306)</span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into service(name,host,port) values(&#39;nginx&#39;,&#39;192.168.0.10&#39;,80);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;192.168.0.10-80&#39; for key &#39;host&#39;</span><br></pre></td></tr></table></figure>

<h3 id="primary-key"><a href="#primary-key" class="headerlink" title="primary key"></a>primary key</h3><blockquote>
<p>常用写法 id int primary key auto_increment</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create table t5(id int primary key);</span><br><span class="line">insert into t5 values(null);</span><br><span class="line">insert into t5 values(1),(2);</span><br><span class="line"></span><br><span class="line">强调：</span><br><span class="line">1. 约束效果上看  primary key =  not null + unique</span><br><span class="line"></span><br><span class="line">2. primary key是innodb存储引擎组织数据的一句</span><br><span class="line">   (1).那么在创建表时，必须定义一个主键且只有一个主键</span><br><span class="line">   (2).没有设置主键时</span><br><span class="line">       1.innodb存储引擎会自上而下寻找一个 不为空且唯一的字段 自动当做主键</span><br><span class="line">       2. 如果不指定并且也没有not null+unique的字段，那么innodb存储引擎会生成一个隐藏的字段当做主键。原因是innodb存储引擎会以主键为准创建聚集索引</span><br><span class="line">       3. 一张表中通常应该有一个id字段并且该字段应该是主键</span><br><span class="line"></span><br><span class="line">3. auto_increment 自增</span><br><span class="line">   注意 auto_increment 通常是加在设置成key键的字段上,不能给普通字段加. 并且一般跟主键一起使用。</span><br><span class="line">     eg: id int primary_key auto_increment;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">age 会自动成为主键</span><br><span class="line">create table t3 (</span><br><span class="line">   id int,</span><br><span class="line">   name char(16),</span><br><span class="line">   age int not null unique,</span><br><span class="line">   addr char(32) not null unique</span><br><span class="line">);</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 联合主键(多个字段联合起来作为表的主键，本质还是一个主键)（用的不多）</span></span><br><span class="line">create table t4(</span><br><span class="line">   ip char(16),</span><br><span class="line">   port int,</span><br><span class="line">   primary key(ip,port)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 必须由主键的原因</span></span><br><span class="line">原因:</span><br><span class="line">    为什么一定要有主键,因为MySQL考虑到,你以后要查询的时候会用到。总需要有一个字段作为依据，这个字段就是主键,以这个字段为基础，建立B+tree索引结构，意义是按照主键字段查询的时候可以加速查询。Innodb存储引擎建表的时候一定要有主键，Mysql就会以ID字段为基准造索引，以ID字段查的时候就会用到。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from 在删除表中数据的时候，主键的自增并不会停止</span><br><span class="line">truncate t1 清空表数据并且重置主键</span><br></pre></td></tr></table></figure>

<p>###foreign key(帮助建立表与表关系的字段)</p>
<p>背景：</p>
<p>假设我们要描述所有公司的员工，需要描述的属性有这些 ： 工号 姓名 部门</p>
<p>公司有3个部门，但是有1个亿的员工，那意味着部门这个字段需要重复存储，部门名字越长，越浪费</p>
<p>问题: </p>
<ol>
<li><p>一张表组织结构不是很清晰</p>
</li>
<li><p>浪费硬盘空间</p>
</li>
<li><p>数据的扩展性极差(无法忽视)</p>
</li>
</ol>
<p>解决方法： 我们完全可以定义一个部门表 然后让员工信息表关联该表，如何关联，即foreign key</p>
<blockquote>
<p>表与表关系</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一对多（**外键建在多的一方**）</span><br><span class="line">多对多（**单独一张表存储关系**）</span><br><span class="line">一对一（**外键建在任意一方，通常航建立在查询较多的表中**）</span><br><span class="line">没有</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如何找出两张表的关系</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分析步骤：必须双向对比</span><br><span class="line">#1、先站在左表的角度去找</span><br><span class="line">是否左表的多条记录可以对应右表的一条记录，如果是，则证明左表的一个字段foreign key 右表一个字段（通常是id）</span><br><span class="line"></span><br><span class="line">#2、再站在右表的角度去找</span><br><span class="line">是否右表的多条记录可以对应左表的一条记录，如果是，则证明右表的一个字段foreign key 左表一个字段（通常是id）</span><br><span class="line"></span><br><span class="line">#3、总结：</span><br><span class="line">#多对一：</span><br><span class="line">如果只有步骤1成立，则是左表多对一右表</span><br><span class="line">如果只有步骤2成立，则是右表多对一左表</span><br><span class="line"></span><br><span class="line">#多对多</span><br><span class="line">如果步骤1和2同时成立，则证明这两张表时一个双向的多对一，即多对多,需要定义一个这两张表的关系表来专门存放二者的关系</span><br><span class="line"></span><br><span class="line">#一对一:</span><br><span class="line">如果1和2都不成立，而是左表的一条记录唯一对应右表的一条记录，反之亦然。这种情况很简单，就是在左表foreign key右表的基础上，将左表的外键字段设置成unique即可</span><br></pre></td></tr></table></figure>

<h4 id="一对多（-外键建在多的一方-）-级联"><a href="#一对多（-外键建在多的一方-）-级联" class="headerlink" title="一对多（**外键建在多的一方**）  级联"></a>一对多（**<font color="red">外键建在多的一方</font>**）  级联</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table dep(</span><br><span class="line">   id int primary key auto_increment,</span><br><span class="line">   dep_name char(16),</span><br><span class="line">   dep_desc char(32)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table emp(</span><br><span class="line">   id int primary key auto_increment,</span><br><span class="line">   name char(16),</span><br><span class="line">   gender enum(&#39;male&#39;,&#39;female&#39;,&#39;others&#39;) default &#39;male&#39;,</span><br><span class="line">   dep_id int,</span><br><span class="line">   foreign key(dep_id) references dep(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into dep values</span><br><span class="line">(1,&#39;欧德博爱技术有限事业部&#39;,&#39;教书育人&#39;),</span><br><span class="line">(2,&#39;艾利克斯人力资源部&#39;, &#39;不做人&#39;),</span><br><span class="line">(3,&#39;销售部&#39;, &#39;忽悠人&#39;);</span><br><span class="line"></span><br><span class="line">insert into emp (id,name,dep_id) values</span><br><span class="line">(1,&#39;egon&#39;,1),</span><br><span class="line">(2,&#39;alex1&#39;,2),</span><br><span class="line">(3,&#39;alex2&#39;,2),</span><br><span class="line">(4,&#39;alex3&#39;,2),</span><br><span class="line">(5,&#39;李坦克&#39;,3),</span><br><span class="line">(6,&#39;刘飞机&#39;,3),</span><br><span class="line">(7,&#39;张火箭&#39;,3),</span><br><span class="line">(8,&#39;林子弹&#39;,3),</span><br><span class="line">(9,&#39;加特林&#39;,3)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"># 修改dep表里面的id字段</span><br><span class="line">update dep set id&#x3D;200 where id&#x3D;2; 不行</span><br><span class="line"># 删除dep表里面的数据</span><br><span class="line">delete from dep;  不行</span><br><span class="line"># 1. 先删除销售部对应的员工数据 之后删除部门</span><br><span class="line">  操作太过繁琐</span><br><span class="line"># 2. 真正做到数据之间有关系</span><br><span class="line">  更新就同步更新-级联更新</span><br><span class="line">  删除就同步删除-级联删除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table dep(</span><br><span class="line">   id int primary key auto_increment,</span><br><span class="line">   dep_name char(16),</span><br><span class="line">   dep_desc char(32)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table emp(</span><br><span class="line">   id int primary key auto_increment,</span><br><span class="line">   name char(16),</span><br><span class="line">   gender enum(&#39;male&#39;,&#39;female&#39;,&#39;others&#39;) default &#39;male&#39;,</span><br><span class="line">   dep_id int,</span><br><span class="line">   foreign key(dep_id) references dep(id)</span><br><span class="line">   on update cascade  # 级联更新</span><br><span class="line">   on delete cascade  # 级联删除</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table book(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    title varchar(32),</span><br><span class="line">    price int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table author(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(32),</span><br><span class="line">    age int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table book2author(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    author_id int,</span><br><span class="line">    book_id int,</span><br><span class="line">    foreign key(author_id) references author(id)</span><br><span class="line">    on update cascade  # 级联更新</span><br><span class="line">    on delete cascade,  # 级联删除</span><br><span class="line">    foreign key(book_id) references book(id)</span><br><span class="line">    on update cascade  # 级联更新</span><br><span class="line">    on delete cascade</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">insert into author(name,age) values(&#39;jason&#39;,18),(&#39;egon&#39;,73);</span><br><span class="line">insert into book(title,price) values(&#39;jpm&#39;, 555),(&#39;xxx&#39;,123),(&#39;qwe&#39;,456);</span><br><span class="line">insert into book2author(author_id, book_id) values(1,1),(1,2),(1,3),(2,1),(2,3);</span><br></pre></td></tr></table></figure>

<h4 id="一对一-外键字段在任何一方都可以，建议建在查询频率比较高的表中"><a href="#一对一-外键字段在任何一方都可以，建议建在查询频率比较高的表中" class="headerlink" title="一对一: 外键字段在任何一方都可以，建议建在查询频率比较高的表中"></a>一对一: <strong>外键字段在任何一方都可以，建议建在查询频率比较高的表中</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果一个表的字段特别多 每次查询又不是所有的字段都能用的到</span><br><span class="line">将表一分为二</span><br><span class="line"># 示例1</span><br><span class="line">用户表</span><br><span class="line">     用户表</span><br><span class="line">     id name age</span><br><span class="line">     用户详情表</span><br><span class="line">     id addr phone hobby email.....</span><br><span class="line">关联方式：foreign key+unique</span><br><span class="line"></span><br><span class="line">create table authordetail(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    phone int,</span><br><span class="line">    addr varchar(64)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table authors(</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    name varchar(32),</span><br><span class="line">    age int,</span><br><span class="line">    authordetail_id int unique,</span><br><span class="line">    foreign key(authordetail_id) references authordetail(id)</span><br><span class="line">    on update cascade  # 级联更新</span><br><span class="line">    on delete cascade</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">表与表如果有关系的话，可以有两种建立联系的方式</span><br><span class="line">    1.通过外键强制性的建立关系</span><br><span class="line">    2.通过sql语句逻辑层面上建立联系，必须多写几条sql语句，动一条数据，相关联数据也通过sql删除</span><br><span class="line">      delete from emp where id&#x3D;1;</span><br><span class="line">      delete from dep where id&#x3D;1;</span><br><span class="line"></span><br><span class="line">创建外键需要消耗一定的资源 并且增加了表与表之间的耦合度</span><br><span class="line">在实际项目中，如果表特别多  其实可以不做任何外键处理，直接通过sql语句来建立逻辑层面上的关系</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>



<p><strong>主键、外键和索引的区别</strong></p>
<ol>
<li>定义</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主键：唯一标识一条记录，不能有重复，不允许为空。</span><br><span class="line">外键：表的外键是另一表的主键，外键是可以有重复的，可以是空值。</span><br><span class="line">索引：该字段没有重复值，但可以有一个空值。</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>作用</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主键：用来保证数据完整性</span><br><span class="line">外键：用来和其他表建立联系用</span><br><span class="line">索引：用来提高查询排序的速度</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>个数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主键：主键只能有一个。</span><br><span class="line">外键：一个表可以有多个外键。</span><br><span class="line">索引：一个表可以有多个唯一索引。</span><br></pre></td></tr></table></figure>















<blockquote>
<p>引用其他博客</p>
</blockquote>
<h4 id="创造外键的条件"><a href="#创造外键的条件" class="headerlink" title="创造外键的条件"></a>创造外键的条件</h4><pre><code>mysql&gt; create table departments (dep_id int(4),dep_name varchar(11));
Query OK, 0 rows affected (0.02 sec)

mysql&gt; desc departments;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| dep_id   | int(4)      | YES  |     | NULL    |       |
| dep_name | varchar(11) | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+
rows in set (0.00 sec)

# 创建外键不成功
mysql&gt; create table staff_info (s_id int,name varchar(20),dep_id int,foreign key(dep_id) references departments(dep_id));
ERROR 1215 (HY000): Cannot add foreign key 

# 设置dep_id非空，仍然不能成功创建外键
mysql&gt; alter table departments modify dep_id int(4) not null;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; desc departments;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| dep_id   | int(4)      | NO   |     | NULL    |       |
| dep_name | varchar(11) | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+
rows in set (0.00 sec)

mysql&gt; create table staff_info (s_id int,name varchar(20),dep_id int,foreign key(dep_id) references departments(dep_id));
ERROR 1215 (HY000): Cannot add foreign key constraint

# 当设置字段为unique唯一字段时，设置该字段为外键成功
mysql&gt; alter table departments modify dep_id int(4) unique;
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; desc departments;                                                                                                       +----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| dep_id   | int(4)      | YES  | UNI | NULL    |       |
| dep_name | varchar(11) | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+
rows in set (0.01 sec)

mysql&gt; create table staff_info (s_id int,name varchar(20),dep_id int,foreign key(dep_id) references departments(dep_id));
Query OK, 0 rows affected (0.02 sec)
多对一：单向的多对一
多对多：双向的多对一
一对一：</code></pre>
<h4 id="外键操作示例"><a href="#外键操作示例" class="headerlink" title="外键操作示例"></a>外键操作示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#表类型必须是innodb存储引擎，且被关联的字段，即references指定的另外一个表的字段，必须保证唯一</span><br><span class="line">create table department(</span><br><span class="line">id int primary key,</span><br><span class="line">name varchar(20) not null</span><br><span class="line">)engine&#x3D;innodb;</span><br><span class="line"></span><br><span class="line">#dpt_id外键，关联父表（department主键id），同步更新，同步删除</span><br><span class="line">create table employee(</span><br><span class="line">id int primary key,</span><br><span class="line">name varchar(20) not null,</span><br><span class="line">dpt_id int,</span><br><span class="line">foreign key(dpt_id)</span><br><span class="line">references department(id)</span><br><span class="line">on delete cascade  # 级连删除</span><br><span class="line">on update cascade # 级连更新</span><br><span class="line">)engine&#x3D;innodb;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#先往父表department中插入记录</span><br><span class="line">insert into department values</span><br><span class="line">(1,&#39;教质部&#39;),</span><br><span class="line">(2,&#39;技术部&#39;),</span><br><span class="line">(3,&#39;人力资源部&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#再往子表employee中插入记录</span><br><span class="line">insert into employee values</span><br><span class="line">(1,&#39;jason&#39;,1),</span><br><span class="line">(2,&#39;oscar&#39;,2),</span><br><span class="line">(3,&#39;lqz&#39;,2),</span><br><span class="line">(4,&#39;tank&#39;,2),</span><br><span class="line">(5,&#39;mac&#39;,3),</span><br><span class="line">(6,&#39;李沁洋&#39;,3),</span><br><span class="line">(7,&#39;皮卡丘&#39;,3),</span><br><span class="line">(8,&#39;程咬金&#39;,3),</span><br><span class="line">(9,&#39;程咬银&#39;,3)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删父表department，子表employee中对应的记录跟着删</span><br><span class="line">mysql&gt; delete from department where id&#x3D;2;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from employee;</span><br><span class="line">+----+-----------+--------+</span><br><span class="line">| id | name      | dpt_id |</span><br><span class="line">+----+-----------+--------+</span><br><span class="line">|  1 | jason      |      1 |</span><br><span class="line">|  5 | mac     |      3 |</span><br><span class="line">|  6 | 李沁洋    |      3 |</span><br><span class="line">|  7 | 皮卡丘    |      3 |</span><br><span class="line">|  8 | 程咬金    |      3 |</span><br><span class="line">|  9 | 程咬银    |      3 |</span><br><span class="line">+----+-----------+--------+</span><br><span class="line">rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更新父表department，子表employee中对应的记录跟着改</span><br><span class="line">mysql&gt; update department set id&#x3D;2 where id&#x3D;3;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from employee;</span><br><span class="line">+----+-----------+--------+</span><br><span class="line">| id | name      | dpt_id |</span><br><span class="line">+----+-----------+--------+</span><br><span class="line">|  1 | jason      |      1 |</span><br><span class="line">|  5 | mac     |      2 |</span><br><span class="line">|  6 | 李沁洋    |      2 |</span><br><span class="line">|  7 | 皮卡丘    |      2 |</span><br><span class="line">|  8 | 程咬金    |      2 |</span><br><span class="line">|  9 | 程咬银    |      2 |</span><br><span class="line">+----+-----------+--------+</span><br><span class="line">rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="on-delete"><a href="#on-delete" class="headerlink" title="on delete"></a>on delete</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  cascade方式</span><br><span class="line">在父表上update&#x2F;delete记录时，同步update&#x2F;delete掉子表的匹配记录 </span><br><span class="line"></span><br><span class="line">#  set null方式</span><br><span class="line">在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null</span><br><span class="line">要注意子表的外键列不能为not null  </span><br><span class="line"></span><br><span class="line">#  No action方式</span><br><span class="line">如果子表中有匹配的记录,则不允许对父表对应候选键进行update&#x2F;delete操作  </span><br><span class="line"></span><br><span class="line">#  Restrict方式</span><br><span class="line">同no action, 都是立即检查外键约束</span><br><span class="line"></span><br><span class="line">#  Set default方式</span><br><span class="line">父表有变更时,子表将外键列设置成一个默认的值 但Innodb不能识别</span><br></pre></td></tr></table></figure>

<h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MySQL对大小写不敏感</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 修改表名</span></span><br><span class="line"><span class="string">    alter table 表名 rename 新表名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 增加字段</span></span><br><span class="line"><span class="string">    alter table 表名 add 字段名 字段类型(宽度)  约束条件; # 默认在最后</span></span><br><span class="line"><span class="string">    alter table 表名 add 字段名 字段类型(宽度)  约束条件 first;</span></span><br><span class="line"><span class="string">    alter table 表名 add 字段名 字段类型(宽度)  约束条件 after 字段名;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 删除字段</span></span><br><span class="line"><span class="string">        alter table 表名 drop 字段名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4. 修改字段</span></span><br><span class="line"><span class="string">    alter table 表名 modify 字段名 字段类型(宽度) 约束条件;</span></span><br><span class="line"><span class="string">    alter table 表名 change 旧字段名 新字段名 字段类型(宽度) 约束条件;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">sql查询结果就是一张虚拟表</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">create table 表名 select * from 旧表;   不能复制表结构，主键 外键。。。</span><br></pre></td></tr></table></figure>



<h2 id="记录相关操作"><a href="#记录相关操作" class="headerlink" title="记录相关操作"></a>记录相关操作</h2><h3 id="插入数据INSERT"><a href="#插入数据INSERT" class="headerlink" title="插入数据INSERT"></a>插入数据INSERT</h3><h3 id="更新数据UPDATE"><a href="#更新数据UPDATE" class="headerlink" title="更新数据UPDATE"></a>更新数据UPDATE</h3><h3 id="删除数据DELETE"><a href="#删除数据DELETE" class="headerlink" title="删除数据DELETE"></a>删除数据DELETE</h3><h3 id="查询数据SELECT"><a href="#查询数据SELECT" class="headerlink" title="查询数据SELECT"></a>查询数据SELECT</h3><h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><ul>
<li>单表查询语法:<ul>
<li>select distinct 字段1,字段2,字段3,… from 表名</li>
<li>where 条件</li>
<li>group by 分组的字段</li>
<li>having 条件</li>
<li>order by 排序字段</li>
<li>limit 限制显示的条数;</li>
</ul>
</li>
</ul>
<p>创建表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">company.employee</span><br><span class="line">    员工id      id                  int             </span><br><span class="line">    姓名        emp_name            varchar</span><br><span class="line">    性别        sex                 enum</span><br><span class="line">    年龄        age                 int</span><br><span class="line">    入职日期     hire_date           date</span><br><span class="line">    岗位        post                varchar</span><br><span class="line">    职位描述     post_comment        varchar</span><br><span class="line">    薪水        salary              double</span><br><span class="line">    办公室       office              int</span><br><span class="line">    部门编号     depart_id           int</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建表</span><br><span class="line">create table employee(</span><br><span class="line">id int not null unique auto_increment,</span><br><span class="line">name varchar(20) not null,</span><br><span class="line">sex enum(&#39;male&#39;,&#39;female&#39;) not null default &#39;male&#39;, #大部分是男的</span><br><span class="line">age int(3) unsigned not null default 28,</span><br><span class="line">hire_date date not null,</span><br><span class="line">post varchar(50),</span><br><span class="line">post_comment varchar(100),</span><br><span class="line">salary double(15,2),</span><br><span class="line">office int, #一个部门一个屋子</span><br><span class="line">depart_id int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看表结构</span><br><span class="line">mysql&gt; desc employee;</span><br><span class="line">+--------------+-----------------------+------+-----+---------+----------------+</span><br><span class="line">| Field        | Type                  | Null | Key | Default | Extra          |</span><br><span class="line">+--------------+-----------------------+------+-----+---------+----------------+</span><br><span class="line">| id           | int(11)               | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name         | varchar(20)           | NO   |     | NULL    |                |</span><br><span class="line">| sex          | enum(&#39;male&#39;,&#39;female&#39;) | NO   |     | male    |                |</span><br><span class="line">| age          | int(3) unsigned       | NO   |     | 28      |                |</span><br><span class="line">| hire_date    | date                  | NO   |     | NULL    |                |</span><br><span class="line">| post         | varchar(50)           | YES  |     | NULL    |                |</span><br><span class="line">| post_comment | varchar(100)          | YES  |     | NULL    |                |</span><br><span class="line">| salary       | double(15,2)          | YES  |     | NULL    |                |</span><br><span class="line">| office       | int(11)               | YES  |     | NULL    |                |</span><br><span class="line">| depart_id    | int(11)               | YES  |     | NULL    |                |</span><br><span class="line">+--------------+-----------------------+------+-----+---------+----------------+</span><br><span class="line"></span><br><span class="line">#插入记录</span><br><span class="line">#三个部门：教学，销售，运营</span><br><span class="line">insert into employee(name,sex,age,hire_date,post,salary,office,depart_id) values</span><br><span class="line">(&#39;egon&#39;,&#39;male&#39;,18,&#39;20170301&#39;,&#39;老男孩驻沙河办事处外交大使&#39;,7300.33,401,1), #以下是教学部</span><br><span class="line">(&#39;alex&#39;,&#39;male&#39;,78,&#39;20150302&#39;,&#39;teacher&#39;,1000000.31,401,1),</span><br><span class="line">(&#39;wupeiqi&#39;,&#39;male&#39;,81,&#39;20130305&#39;,&#39;teacher&#39;,8300,401,1),</span><br><span class="line">(&#39;yuanhao&#39;,&#39;male&#39;,73,&#39;20140701&#39;,&#39;teacher&#39;,3500,401,1),</span><br><span class="line">(&#39;liwenzhou&#39;,&#39;male&#39;,28,&#39;20121101&#39;,&#39;teacher&#39;,2100,401,1),</span><br><span class="line">(&#39;jingliyang&#39;,&#39;female&#39;,18,&#39;20110211&#39;,&#39;teacher&#39;,9000,401,1),</span><br><span class="line">(&#39;jinxin&#39;,&#39;male&#39;,18,&#39;19000301&#39;,&#39;teacher&#39;,30000,401,1),</span><br><span class="line">(&#39;成龙&#39;,&#39;male&#39;,48,&#39;20101111&#39;,&#39;teacher&#39;,10000,401,1),</span><br><span class="line"></span><br><span class="line">(&#39;歪歪&#39;,&#39;female&#39;,48,&#39;20150311&#39;,&#39;sale&#39;,3000.13,402,2),#以下是销售部门</span><br><span class="line">(&#39;丫丫&#39;,&#39;female&#39;,38,&#39;20101101&#39;,&#39;sale&#39;,2000.35,402,2),</span><br><span class="line">(&#39;丁丁&#39;,&#39;female&#39;,18,&#39;20110312&#39;,&#39;sale&#39;,1000.37,402,2),</span><br><span class="line">(&#39;星星&#39;,&#39;female&#39;,18,&#39;20160513&#39;,&#39;sale&#39;,3000.29,402,2),</span><br><span class="line">(&#39;格格&#39;,&#39;female&#39;,28,&#39;20170127&#39;,&#39;sale&#39;,4000.33,402,2),</span><br><span class="line"></span><br><span class="line">(&#39;张野&#39;,&#39;male&#39;,28,&#39;20160311&#39;,&#39;operation&#39;,10000.13,403,3), #以下是运营部门</span><br><span class="line">(&#39;程咬金&#39;,&#39;male&#39;,18,&#39;19970312&#39;,&#39;operation&#39;,20000,403,3),</span><br><span class="line">(&#39;程咬银&#39;,&#39;female&#39;,18,&#39;20130311&#39;,&#39;operation&#39;,19000,403,3),</span><br><span class="line">(&#39;程咬铜&#39;,&#39;male&#39;,18,&#39;20150411&#39;,&#39;operation&#39;,18000,403,3),</span><br><span class="line">(&#39;程咬铁&#39;,&#39;female&#39;,18,&#39;20140512&#39;,&#39;operation&#39;,17000,403,3)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">#ps：如果在windows系统中，插入中文字符，select的结果为空白，可以将所有字符编码统一设置成gbk</span><br><span class="line"></span><br><span class="line">准备表和记录</span><br></pre></td></tr></table></figure>

<h5 id="书写建议"><a href="#书写建议" class="headerlink" title="书写建议"></a>书写建议</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 书写</span><br><span class="line">select id,name from emp where id &gt; 3;</span><br><span class="line"># 执行顺序</span><br><span class="line">from</span><br><span class="line">where</span><br><span class="line">select</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">虽然执行顺序和书写顺序不一致 你在写sql语句的时候可能不知道怎么写</span><br><span class="line">你就按照书写顺序的方式写sql</span><br><span class="line">    select * 占位</span><br><span class="line">    补全sql语句</span><br><span class="line">    * 替换成想要的具体字段</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="几个重要关键字的执行顺序"><a href="#几个重要关键字的执行顺序" class="headerlink" title="几个重要关键字的执行顺序"></a>几个重要关键字的执行顺序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">执行优先级</span><br><span class="line"><span class="number">1.</span>找到表:<span class="keyword">from</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>拿着where指定的约束条件，去文件/表中取出一条条记录</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>将取出的一条条记录进行分组group by，如果没有group by，则整体作为一组</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>将分组的结果进行having过滤</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>执行select</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>去重</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>将结果按条件排序：order by</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>限制结果的显示条数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">where</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">group</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">having</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distinct</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">limit</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select</span>():</span></span><br><span class="line">    f=<span class="keyword">from</span>()</span><br><span class="line">    vt1=where(f,条件)</span><br><span class="line">    vt2=group(v1,分组字段)</span><br><span class="line">    vt3=having(vt2,条件)</span><br><span class="line">    vt4=distinct(vt3)</span><br><span class="line">    vt5=order(vt4,排序的字段)</span><br><span class="line">    vt6=limit(vt5,限制显示的条数)</span><br><span class="line">    print(vt6)</span><br></pre></td></tr></table></figure>

<h5 id="where约束条件"><a href="#where约束条件" class="headerlink" title="where约束条件"></a>where约束条件</h5><p>where字句中可以使用：</p>
<ol>
<li>比较运算符：&gt; &lt; &gt;= &lt;= &lt;&gt; !=</li>
<li>between 80 and 100 值在10到20之间</li>
<li>in(80,90,100) 值是10或20或30</li>
<li>like ‘egon%’<br>  pattern可以是%或_，<br>  %表示任意多字符<br>  _表示一个字符</li>
<li>逻辑运算符：在多个条件直接可以使用逻辑运算符 and or not</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1:单条件查询</span><br><span class="line">    SELECT name FROM employee</span><br><span class="line">        WHERE post&#x3D;&#39;sale&#39;;</span><br><span class="line">        </span><br><span class="line">#2:多条件查询</span><br><span class="line">    SELECT name,salary FROM employee</span><br><span class="line">        WHERE post&#x3D;&#39;teacher&#39; AND salary&gt;10000;</span><br><span class="line"></span><br><span class="line">#3:关键字BETWEEN AND</span><br><span class="line">    SELECT name,salary FROM employee </span><br><span class="line">        WHERE salary BETWEEN 10000 AND 20000;</span><br><span class="line"></span><br><span class="line">    SELECT name,salary FROM employee </span><br><span class="line">        WHERE salary NOT BETWEEN 10000 AND 20000;</span><br><span class="line">    </span><br><span class="line">#4:关键字IS NULL(判断某个字段是否为NULL不能用等号，需要用IS)</span><br><span class="line">    SELECT name,post_comment FROM employee </span><br><span class="line">        WHERE post_comment IS NULL;</span><br><span class="line"></span><br><span class="line">    SELECT name,post_comment FROM employee </span><br><span class="line">        WHERE post_comment IS NOT NULL;</span><br><span class="line">        </span><br><span class="line">    SELECT name,post_comment FROM employee </span><br><span class="line">        WHERE post_comment&#x3D;&#39;&#39;; 注意&#39;&#39;是空字符串，不是null</span><br><span class="line">    ps：</span><br><span class="line">        执行</span><br><span class="line">        update employee set post_comment&#x3D;&#39;&#39; where id&#x3D;2;</span><br><span class="line">        再用上条查看，就会有结果了</span><br><span class="line"></span><br><span class="line">#5:关键字IN集合查询</span><br><span class="line">    SELECT name,salary FROM employee </span><br><span class="line">        WHERE salary&#x3D;3000 OR salary&#x3D;3500 OR salary&#x3D;4000 OR salary&#x3D;9000 ;</span><br><span class="line">    </span><br><span class="line">    SELECT name,salary FROM employee </span><br><span class="line">        WHERE salary IN (3000,3500,4000,9000) ;</span><br><span class="line"></span><br><span class="line">    SELECT name,salary FROM employee </span><br><span class="line">        WHERE salary NOT IN (3000,3500,4000,9000) ;</span><br><span class="line"></span><br><span class="line">#6:关键字LIKE模糊查询</span><br><span class="line">    通配符’%’</span><br><span class="line">    SELECT * FROM employee </span><br><span class="line">            WHERE name LIKE &#39;eg%&#39;;</span><br><span class="line"></span><br><span class="line">    通配符’_’</span><br><span class="line">    SELECT * FROM employee </span><br><span class="line">            WHERE name LIKE &#39;al__&#39;;</span><br></pre></td></tr></table></figure>

<h5 id="分组查询-GROUP-BY"><a href="#分组查询-GROUP-BY" class="headerlink" title="分组查询:GROUP BY"></a>分组查询:GROUP BY</h5><p><strong>什么是分组？为什么要分组？</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、首先明确一点：分组发生在where之后，即分组是基于where之后得到的记录而进行的</span><br><span class="line"></span><br><span class="line">#2、分组指的是：将所有记录按照某个相同字段进行归类，比如针对员工信息表的职位分组，或者按照性别进行分组等</span><br><span class="line"></span><br><span class="line">#3、为何要分组呢？</span><br><span class="line">    取每个部门的最高工资</span><br><span class="line">    取每个部门的员工数</span><br><span class="line">    取男人数和女人数</span><br><span class="line"></span><br><span class="line">小窍门：‘每’这个字后面的字段，就是我们分组的依据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#4、大前提：</span><br><span class="line">    可以按照任意字段分组，但是分组完毕后，比如group by post，只能查看post字段，如果想查看组内信息，需要借助于聚合函数</span><br></pre></td></tr></table></figure>

<p><strong>ONLY_FULL_GROUP_BY</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看MySQL 5.7默认的sql_mode如下：</span><br><span class="line">mysql&gt; select @@global.sql_mode;</span><br><span class="line">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line">#！！！注意</span><br><span class="line">ONLY_FULL_GROUP_BY的语义就是确定select target list中的所有列的值都是明确语义，简单的说来，在ONLY_FULL_GROUP_BY模式下，target list中的值要么是来自于聚集函数的结果，要么是来自于group by list中的表达式的值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#设置sql_mole如下操作(我们可以去掉ONLY_FULL_GROUP_BY模式)：</span><br><span class="line">mysql&gt; set global sql_mode&#x3D;&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;;</span><br><span class="line"></span><br><span class="line">！！！SQL_MODE设置！！！</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@global.sql_mode;</span><br><span class="line">+-------------------+</span><br><span class="line">| @@global.sql_mode |</span><br><span class="line">+-------------------+</span><br><span class="line">|                   |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from emp group by post; </span><br><span class="line">+----+------+--------+-----+------------+----------------------------+--------------+------------+--------+-----------+</span><br><span class="line">| id | name | sex    | age | hire_date  | post                       | post_comment | salary     | office | depart_id |</span><br><span class="line">+----+------+--------+-----+------------+----------------------------+--------------+------------+--------+-----------+</span><br><span class="line">| 14 | 张野 | male   |  28 | 2016-03-11 | operation                  | NULL         |   10000.13 |    403 |         3 |</span><br><span class="line">|  9 | 歪歪 | female |  48 | 2015-03-11 | sale                       | NULL         |    3000.13 |    402 |         2 |</span><br><span class="line">|  2 | alex | male   |  78 | 2015-03-02 | teacher                    | NULL         | 1000000.31 |    401 |         1 |</span><br><span class="line">|  1 | egon | male   |  18 | 2017-03-01 | 老男孩驻沙河办事处外交大使 | NULL         |    7300.33 |    401 |         1 |</span><br><span class="line">+----+------+--------+-----+------------+----------------------------+--------------+------------+--------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#由于没有设置ONLY_FULL_GROUP_BY,于是也可以有结果，默认都是组内的第一条记录，但其实这是没有意义的</span><br><span class="line"></span><br><span class="line">mysql&gt; set global sql_mode&#x3D;&#39;ONLY_FULL_GROUP_BY&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit #设置成功后，一定要退出，然后重新登录方可生效</span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">mysql&gt; use db1;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select * from emp group by post; #报错</span><br><span class="line">ERROR 1055 (42000): &#39;db1.emp.id&#39; isn&#39;t in GROUP BY</span><br><span class="line">mysql&gt; select post,count(id) from emp group by post; #只能查看分组依据和使用聚合函数</span><br><span class="line">+----------------------------+-----------+</span><br><span class="line">| post                       | count(id) |</span><br><span class="line">+----------------------------+-----------+</span><br><span class="line">| operation                  |         5 |</span><br><span class="line">| sale                       |         5 |</span><br><span class="line">| teacher                    |         7 |</span><br><span class="line">| 老男孩驻沙河办事处外交大使 |         1 |</span><br><span class="line">+----------------------------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>GROUP BY</strong>（GROUP_CONCAT，CONCAT）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 碰到的关键字一般使用group by</span><br><span class="line">每个 最高 最低 平均</span><br><span class="line"></span><br><span class="line">单独使用GROUP BY关键字分组</span><br><span class="line">    SELECT post FROM employee GROUP BY post;</span><br><span class="line">    注意：我们按照post字段分组，那么select查询的字段只能是post，想要获取组内的其他相关信息，需要借助函数</span><br><span class="line"></span><br><span class="line"># GROUP_CONCAT 获取分组之后的其他字段的值，还可以拼接操作</span><br><span class="line">GROUP BY关键字和GROUP_CONCAT()函数一起使用 (分组之后帮助获取组内单个元素某一个字段对应数据帮助拼接起来)</span><br><span class="line">    SELECT post,GROUP_CONCAT(name) FROM employee GROUP BY post;#按照岗位分组，并查看组内成员名</span><br><span class="line">    SELECT post,GROUP_CONCAT(name) as emp_members FROM employee GROUP BY post;</span><br><span class="line">    # 还可以拼接</span><br><span class="line">    SELECT post,GROUP_CONCAT(name,&#39;_DSB&#39;) as emp_members FROM employee GROUP BY post;</span><br><span class="line">    SELECT post,GROUP_CONCAT(name,&#39;,&#39;,salary) as emp_members FROM employee GROUP BY post;</span><br><span class="line"></span><br><span class="line"># CONCAT 不分组的时候 拼接操作用</span><br><span class="line">    select concat(&#39;NAME:&#39;, name),concat(&#39;SAL:&#39;,salary) from emp;</span><br><span class="line"># CONCAT_WS 如果多个字段之间的连接符号是相同的情况下，可以直接使用concat_ws来完成</span><br><span class="line">    select concat_ws(&#39;:&#39;,name,age,sex) from emp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GROUP BY与聚合函数一起使用</span><br><span class="line">    select post,count(id) as count from employee group by post;#按照岗位分组，并查看每个组有多少人</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"># 补充: as 不单单可以给字段起别名，还可以临时给表起别名</span><br><span class="line">select emp.id,emp.name from employee;</span><br><span class="line">select emp.id,emp.name from employee as t1; 报错</span><br><span class="line">select t1.id,t1.name from employee as t1;</span><br><span class="line"></span><br><span class="line"># 查询每个人的年薪</span><br><span class="line">select name,salary*12 from employee group by name;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>强调</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果我们用unique的字段作为分组的依据，则每一条记录自成一组，这种分组没有意义</span><br><span class="line">多条记录之间的某个字段值相同，该字段通常用来作为分组的依据</span><br></pre></td></tr></table></figure>

<p><strong>聚合函数</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#强调：聚合函数聚合的是组的内容，若是没有分组，则默认一组</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">    SELECT COUNT(*) FROM employee; # 计数，id最常用</span><br><span class="line">    SELECT COUNT(*) FROM employee WHERE depart_id&#x3D;1;</span><br><span class="line">    SELECT MAX(salary) FROM employee;</span><br><span class="line">    SELECT MIN(salary) FROM employee;</span><br><span class="line">    SELECT AVG(salary) FROM employee;</span><br><span class="line">    SELECT SUM(salary) FROM employee;</span><br><span class="line">    SELECT SUM(salary) FROM employee WHERE depart_id&#x3D;3;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 关键字where 和 group by同时出现的时候group by必须在where 后面</span><br><span class="line">where 先对整体数据进行过滤之后再分组操作</span><br><span class="line">where 筛选条件不能使用聚合函数</span><br><span class="line">select id,name,age from employee where max(salary) &gt; 3000;</span><br><span class="line"></span><br><span class="line">select max(salary) from emp;</span><br><span class="line"></span><br><span class="line"># 统计各部门年龄在30岁以上的员工平均薪资</span><br><span class="line">select post, AVG(salary),group_concat(name) from employee where age &gt; 30 group by post;</span><br></pre></td></tr></table></figure>

<h5 id="HAVING过滤-分组之后的筛选条件"><a href="#HAVING过滤-分组之后的筛选条件" class="headerlink" title="HAVING过滤,分组之后的筛选条件"></a><strong>HAVING过滤</strong>,分组之后的筛选条件</h5><p>“””</p>
<p>Having 的语法和where 是一致的</p>
<p>只不过having是在分组之后进行的过滤操作</p>
<p>即having是可以直接使用聚合函数的</p>
<p>“””</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 统计各部门年龄在30以上的平均工资并且保留平均薪资大于10000的部门</span><br><span class="line">select post,avg(salary) from employee where age&gt;30 group by psot having avg(salary) &gt; 10000;</span><br></pre></td></tr></table></figure>

<h5 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct 去重"></a>distinct 去重</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">一定要注意 必须是完全一样的数据才可以去重！！！</span><br><span class="line">一定不要将主键忽视，有主键的情况下，是不可能去重复的；</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123;&#39;id&#39;:1,&#39;name&#39;:&#39;Jason&#39;,&#39;age&#39;:18&#125;,</span><br><span class="line">  &#123;&#39;id&#39;:2,&#39;name&#39;:&#39;Jason&#39;,&#39;age&#39;:18&#125;,</span><br><span class="line">  &#123;&#39;id&#39;:3,&#39;name&#39;:&#39;Egon&#39;,&#39;age&#39;:18&#125;,</span><br><span class="line">]</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">select distinct id,age from employee;</span><br><span class="line">select distinct age from employee;</span><br></pre></td></tr></table></figure>

<p><strong>查询排序:ORDER BY</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 按单列排序</span><br><span class="line">    SELECT * FROM employee ORDER BY salary;</span><br><span class="line">    SELECT * FROM employee ORDER BY salary ASC;</span><br><span class="line">    SELECT * FROM employee ORDER BY salary DESC;</span><br><span class="line"></span><br><span class="line"># 按多列排序:先按照age降序排序，如果年纪相同，则按照薪资排序(升序)</span><br><span class="line">    SELECT * from employee</span><br><span class="line">        ORDER BY age,</span><br><span class="line">        salary DESC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 统计各部门年龄唉10岁以上的员工平均工资并且保留平均薪资大于1000的部门，然后对平均工资进行降序。</span><br><span class="line">select post,avg(salary) from employee where age&gt;10 group by post Having avg(salary)&gt;10000 order by avg(salary) Desc;</span><br></pre></td></tr></table></figure>

<p><strong>限制查询的记录数:LIMIT</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line">    SELECT * FROM employee ORDER BY salary DESC </span><br><span class="line">        LIMIT 3;                    #默认初始位置为0 </span><br><span class="line">    </span><br><span class="line">    SELECT * FROM employee ORDER BY salary DESC</span><br><span class="line">        LIMIT 0,5; #从第0开始，即先查询出第一条，然后包含这一条在内往后查5条</span><br><span class="line"></span><br><span class="line">    SELECT * FROM employee ORDER BY salary DESC</span><br><span class="line">        LIMIT 5,5; #从第5开始，即先查询出第6条，然后包含这一条在内往后查5条</span><br></pre></td></tr></table></figure>

<p><strong>正则</strong>（REGEXP）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM employee WHERE name REGEXP &#39;^ale&#39;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM employee WHERE name REGEXP &#39;on$&#39;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM employee WHERE name REGEXP &#39;m&#123;2&#125;&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">小结：对字符串匹配的方式</span><br><span class="line">WHERE name &#x3D; &#39;egon&#39;;</span><br><span class="line">WHERE name LIKE &#39;yua%&#39;;</span><br><span class="line">WHERE name REGEXP &#39;on$&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">正则表达式：</span><br><span class="line">      用一些特殊符号的组合去字符串中筛选出符合条件的数据。</span><br><span class="line"></span><br><span class="line">1. re模块常用方法</span><br><span class="line">          match: 从头开始匹配</span><br><span class="line">          search: 从整体匹配</span><br><span class="line">          findall: 分组优先展示</span><br><span class="line">                   ^j.*(n|y)$</span><br><span class="line">                   不会展示所有正则表达式匹配到的内容</span><br><span class="line">                   而仅仅展示括号内的正则表达式匹配到的内容</span><br><span class="line">2. 贪婪非贪婪</span><br><span class="line">   正则表达式都是贪婪匹配的，</span><br><span class="line">   将贪婪变成非贪婪职业需要在正则表达式后面加？</span><br><span class="line">   .*  贪婪</span><br><span class="line">   .*? 非贪婪</span><br></pre></td></tr></table></figure>



<h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><h4 id="连表操作-连表查询-子查询"><a href="#连表操作-连表查询-子查询" class="headerlink" title="连表操作(连表查询+子查询)"></a>连表操作(连表查询+子查询)</h4><p>连表查询</p>
<pre><code>#重点：外链接语法

SELECT 字段列表
    FROM 表1 INNER|LEFT|RIGHT JOIN 表2
    ON 表1.字段 = 表2.字段;


1、inner join：只取两张表有对应关系的部分(共有的数据部分)
select * from emp inner join dep
    on emp.dep_id = dep.id
    ;
2、left join:在inner join的基础上保留左表中的记录(没有则NULL顶着)
select * from emp left join dep
    on emp.dep_id = dep.id
    ;

3、right join:在inner join的基础上保留右表中的记录(没有则NULL顶着)
select * from emp right join dep
    on emp.dep_id = dep.id
    ;

4、full join：在内连接的基础上左右两边的记录都保留
select * from emp left join dep on emp.dep_id = dep.id
union
select * from emp right join dep on emp.dep_id = dep.id
    ;</code></pre>
<h4 id="知识点补充"><a href="#知识点补充" class="headerlink" title="知识点补充"></a>知识点补充</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询平均年龄在25岁以上的部门名</span><br><span class="line"></span><br><span class="line">只要是多表查询，就有两种思路； 连表  和  子查询</span><br><span class="line"># 连表操作</span><br><span class="line">  1 先拿到部门和员工表 拼接之后结果</span><br><span class="line">  2 需要分组</span><br><span class="line">select department.name from employee inner join department </span><br><span class="line">    on employee.dep_id&#x3D;department.id </span><br><span class="line">    group by department.name </span><br><span class="line">    having avg(age)&gt;25 ;</span><br><span class="line"># 子查询</span><br><span class="line">select name from department where id in (select dep_id from employee group by dep_id having avg(age)&gt;25);</span><br></pre></td></tr></table></figure>





<h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1：子查询是将一个查询语句嵌套在另一个查询语句中。</span><br><span class="line">#2：内层查询语句的查询结果，可以为外层查询语句提供查询条件。</span><br><span class="line">#3：子查询中可以包含：IN、NOT IN、ANY、ALL、EXISTS 和 NOT EXISTS等关键字</span><br><span class="line">#4：还可以包含比较运算符：&#x3D; 、 !&#x3D;、&gt; 、&lt;等</span><br></pre></td></tr></table></figure>

<p><strong>1 带IN关键字的子查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询平均年龄在25岁以上的部门名</span><br><span class="line">select id,name from department</span><br><span class="line">    where id in </span><br><span class="line">        (select dep_id from employee group by dep_id having avg(age) &gt; 25);</span><br><span class="line"></span><br><span class="line">#查看技术部员工姓名</span><br><span class="line">select name from employee</span><br><span class="line">    where dep_id in </span><br><span class="line">        (select id from department where name&#x3D;&#39;技术&#39;);</span><br><span class="line"></span><br><span class="line">#查看不足1人的部门名(子查询得到的是有人的部门id)</span><br><span class="line">select name from department where id not in (select distinct dep_id from employee);</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 注意not in </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">not in 无法处理null的值，即子查询中如果存在null的值，not in将无法处理，如下</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from emp;</span><br><span class="line">+----+------------+--------+------+--------+</span><br><span class="line">| id | name | sex | age | dep_id |</span><br><span class="line">+----+------------+--------+------+--------+</span><br><span class="line">| 1 | egon | male | 18 | 200 |</span><br><span class="line">| 2 | alex | female | 48 | 201 |</span><br><span class="line">| 3 | wupeiqi | male | 38 | 201 |</span><br><span class="line">| 4 | yuanhao | female | 28 | 202 |</span><br><span class="line">| 5 | liwenzhou | male | 18 | 200 |</span><br><span class="line">| 6 | jingliyang | female | 18 | 204 |</span><br><span class="line">| 7 | xxx | male | 19 | NULL |</span><br><span class="line">+----+------------+--------+------+--------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from dep;</span><br><span class="line">+------+--------------+</span><br><span class="line">| id | name |</span><br><span class="line">+------+--------------+</span><br><span class="line">| 200 | 技术 |</span><br><span class="line">| 201 | 人力资源 |</span><br><span class="line">| 202 | 销售 |</span><br><span class="line">| 203 | 运营 |</span><br><span class="line">+------+--------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 子查询中存在null</span><br><span class="line">mysql&gt; select * from dep where id not in (select distinct dep_id from emp);</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 解决方案如下</span><br><span class="line">mysql&gt; select * from dep where id not in (select distinct dep_id from emp where dep_id is not null);</span><br><span class="line">+------+--------+</span><br><span class="line">| id | name |</span><br><span class="line">+------+--------+</span><br><span class="line">| 203 | 运营 |</span><br><span class="line">+------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line"></span><br><span class="line">！！！注意not in</span><br></pre></td></tr></table></figure>

<p><strong>2 带ANY关键字的子查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在 SQL 中 ANY 和 SOME 是同义词，SOME 的用法和功能和 ANY 一模一样。</span><br><span class="line"></span><br><span class="line"># ANY 和 IN 运算符不同之处1</span><br><span class="line">ANY 必须和其他的比较运算符共同使用，而且ANY必须将比较运算符放在 ANY 关键字之前，所比较的值需要匹配子查询中的任意一个值，这也就是 ANY 在英文中所表示的意义</span><br><span class="line"></span><br><span class="line">例如：使用 IN 和使用 ANY运算符得到的结果是一致的</span><br><span class="line">select * from employee where salary &#x3D; any (</span><br><span class="line">select max(salary) from employee group by depart_id);</span><br><span class="line"></span><br><span class="line">select * from employee where salary in (</span><br><span class="line">select max(salary) from employee group by depart_id);</span><br><span class="line"></span><br><span class="line">结论：也就是说“&#x3D;ANY”等价于 IN 运算符，而“&lt;&gt;ANY”则等价于 NOT IN 运算符</span><br><span class="line"></span><br><span class="line"># ANY和 IN 运算符不同之处2</span><br><span class="line">ANY 运算符不能与固定的集合相匹配，比如下面的 SQL 语句是错误的</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">T_Book</span><br><span class="line">WHERE</span><br><span class="line">FYearPublished &lt; ANY (2001, 2003, 2005)</span><br></pre></td></tr></table></figure>

<p><strong>3 带ALL关键字的子查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># all同any类似，只不过all表示的是所有，any表示任一</span><br><span class="line">查询出那些薪资比所有部门的平均薪资都高的员工&#x3D;》薪资在所有部门平均线以上的狗币资本家</span><br><span class="line">select * from employee where salary &gt; all (</span><br><span class="line">select avg(salary) from employee group by depart_id);</span><br><span class="line">查询出那些薪资比所有部门的平均薪资都低的员工&#x3D;》薪资在所有部门平均线以下的无产阶级劳苦大众</span><br><span class="line">select * from employee where salary &lt; all (</span><br><span class="line">select avg(salary) from employee group by depart_id);</span><br><span class="line"></span><br><span class="line">查询出那些薪资比任意一个部门的平均薪资低的员工&#x3D;》薪资在任一部门平均线以下的员工select * from employee where salary &lt; any ( select avg(salary) from employee group by depart_id); </span><br><span class="line">查询出那些薪资比任意一个部门的平均薪资高的员工&#x3D;》薪资在任一部门平均线以上的员工</span><br><span class="line">select * from employee where salary &gt; any (</span><br><span class="line">select avg(salary) from employee group by depart_id);</span><br></pre></td></tr></table></figure>

<p><strong>4 带比较运算符的子查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#比较运算符：&#x3D;、!&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、&lt;&gt;</span><br><span class="line">#查询大于所有人平均年龄的员工名与年龄</span><br><span class="line">mysql&gt; select name,age from emp where age &gt; (select avg(age) from emp);</span><br><span class="line">+---------+------+</span><br><span class="line">| name | age |</span><br><span class="line">+---------+------+</span><br><span class="line">| alex | 48 |</span><br><span class="line">| wupeiqi | 38 |</span><br><span class="line">+---------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查询大于部门内平均年龄的员工名、年龄</span><br><span class="line">select t1.name,t1.age from emp t1</span><br><span class="line">inner join </span><br><span class="line">(select dep_id,avg(age) avg_age from emp group by dep_id) t2</span><br><span class="line">on t1.dep_id &#x3D; t2.dep_id</span><br><span class="line">where t1.age &gt; t2.avg_age;</span><br></pre></td></tr></table></figure>

<p><strong>5 带EXISTS关键字的子查询</strong></p>
<p>EXISTS关字键字表示存在。在使用EXISTS关键字时，内层查询语句不返回查询的记录。<br>而是返回一个真假值。True或False<br>当返回<strong>True</strong>时，<strong>外层查询语句将进行查询</strong>；当返回值为<strong>False</strong>时，<strong>外层查询语句不进行查询</strong>;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#department表中存在dept_id&#x3D;203，Ture</span><br><span class="line">mysql&gt; select * from employee</span><br><span class="line">    -&gt;     where exists</span><br><span class="line">    -&gt;         (select id from department where id&#x3D;200);</span><br><span class="line">+----+------------+--------+------+--------+</span><br><span class="line">| id | name       | sex    | age  | dep_id |</span><br><span class="line">+----+------------+--------+------+--------+</span><br><span class="line">|  1 | egon       | male   |   18 |    200 |</span><br><span class="line">|  2 | alex       | female |   48 |    201 |</span><br><span class="line">|  3 | wupeiqi    | male   |   38 |    201 |</span><br><span class="line">|  4 | yuanhao    | female |   28 |    202 |</span><br><span class="line">|  5 | liwenzhou  | male   |   18 |    200 |</span><br><span class="line">|  6 | jingliyang | female |   18 |    204 |</span><br><span class="line">+----+------------+--------+------+--------+</span><br><span class="line"></span><br><span class="line">#department表中存在dept_id&#x3D;205，False</span><br><span class="line">mysql&gt; select * from employee</span><br><span class="line">    -&gt;     where exists</span><br><span class="line">    -&gt;         (select id from department where id&#x3D;204);</span><br><span class="line">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>5.1 in与exists</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">！！！！！！当in和exists在查询效率上比较时，in查询的效率快于exists的查询效率！！！！！！</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;exists&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># exists</span><br><span class="line">exists后面一般都是子查询，后面的子查询被称做相关子查询（即与主语句相关），当子查询返回行数时，exists条件返回true，</span><br><span class="line">否则返回false，exists是不返回列表的值的，exists只在乎括号里的数据能不能查找出来，是否存在这样的记录。</span><br><span class="line"></span><br><span class="line"># 例</span><br><span class="line">查询出那些班级里有学生的班级</span><br><span class="line">select * from class where exists (select * from stu where stu.cid&#x3D;class.id)</span><br><span class="line"></span><br><span class="line"># exists的执行原理为：</span><br><span class="line">1、依次执行外部查询：即select * from class </span><br><span class="line">2、然后为外部查询返回的每一行分别执行一次子查询：即(select * from stu where stu.cid&#x3D;class.cid)</span><br><span class="line">3、子查询如果返回行，则exists条件成立，条件成立则输出外部查询取出的那条记录</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;in&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># in</span><br><span class="line">in后跟的都是子查询，in()后面的子查询 是返回结果集的</span><br><span class="line"></span><br><span class="line"># 例</span><br><span class="line">查询和所有女生年龄相同的男生</span><br><span class="line">select * from stu where sex&#x3D;&#39;男&#39; and age in(select age from stu where sex&#x3D;&#39;女&#39;)</span><br><span class="line"></span><br><span class="line"># in的执行原理为：</span><br><span class="line">in()的执行次序和exists()不一样,in()的子查询会先产生结果集,</span><br><span class="line">然后主查询再去结果集里去找符合要求的字段列表去.符合要求的输出,反之则不输出.</span><br></pre></td></tr></table></figure>

<p><strong>5.2 not in与 not exists</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!!!!!!not exists查询的效率远远高与not in查询的效率。!!!!!!</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;not in&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">not in()子查询的执行顺序是：</span><br><span class="line">为了证明not in成立，即找不到，需要一条一条地查询表，符合要求才返回子查询的结果集，不符合的就继续查询下一条记录，直到把表中的记录查询完，只能查询全部记录才能证明，并没有用到索引。</span><br><span class="line">                </span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;not exists&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">not exists：</span><br><span class="line">如果主查询表中记录少，子查询表中记录多，并有索引。</span><br><span class="line">例如:查询那些班级中没有学生的班级</span><br><span class="line">select * from class</span><br><span class="line"></span><br><span class="line">where not exists</span><br><span class="line"></span><br><span class="line">(select * from student where student.cid &#x3D; class.cid)</span><br><span class="line"></span><br><span class="line">not exists的执行顺序是：</span><br><span class="line">在表中查询，是根据索引查询的，如果存在就返回true，如果不存在就返回false，不会每条记录都去查询。</span><br></pre></td></tr></table></figure>











<p>示例1：找出年龄大于25岁的员工以及员工所在的部门</p>
<pre><code>select emp.name,dep.name from emp inner join dep
    on emp.dep_id = dep.id
    where age &gt; 25
    ;</code></pre>
<p>示例1：找出平均年龄&gt;=20的部门名</p>
<pre><code>select dep.name,avg(age) from emp inner join dep
    on emp.dep_id = dep.id
    group by dep.name
    having avg(age) &gt;= 20;


    select name from dep where id in
    (select  dep_id from emp group by dep_id having avg(age) &gt;= 20);



    select * from emp inner join dep
    on emp.dep_id = dep.id
    where dep.name = &#39;销售&#39;;


    select * from emp where dep_id =
    (select id from dep where name =&#39;销售&#39;);



    select * from t2 inner join

    (select * from emp inner join dep
    on emp.dep_id = dep.id) as t1

    on t2.xx = t1.yy


    练习：查询每个部门最新入职的那位员工</code></pre>
<p>select t1.name,t1.hire_date,t1.post,t2.post,t2.max_date from emp as t1<br>inner join<br>(select post,max(hire_date) as max_date from emp group by post) as t2<br>on t1.post = t2.post<br>where t1.hire_date = t2.max_date<br>;</p>
<h2 id="pymysql模块"><a href="#pymysql模块" class="headerlink" title="pymysql模块"></a>pymysql模块</h2><h3 id="一-链接、执行sql、关闭（游标）"><a href="#一-链接、执行sql、关闭（游标）" class="headerlink" title="一 链接、执行sql、关闭（游标）"></a><strong>一 链接、执行sql、关闭（游标）</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">user=input(<span class="string">&#x27;用户名: &#x27;</span>).strip()</span><br><span class="line">pwd=input(<span class="string">&#x27;密码: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"><span class="comment">#链接</span></span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment">#游标</span></span><br><span class="line">cursor=conn.cursor() <span class="comment">#执行完毕返回的结果集默认以元组显示</span></span><br><span class="line">cursor=conn.cursor(cursor=pymysql.cursors.DictCursor) 以字典的方式返回</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行sql语句</span></span><br><span class="line">sql=<span class="string">&#x27;select * from userinfo where name=&quot;%s&quot; and password=&quot;%s&quot;&#x27;</span> %(user,pwd) <span class="comment">#注意%s需要加引号</span></span><br><span class="line">print(sql)</span><br><span class="line">res=cursor.execute(sql) <span class="comment">#执行sql语句，返回sql查询成功的记录数目</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    print(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;登录失败&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="二-execute-之sql注入"><a href="#二-execute-之sql注入" class="headerlink" title="二 execute()之sql注入"></a><strong>二 execute()之sql注入</strong></h3><p>注意：符号–会注释掉它之后的sql，正确的语法：–后至少有一个任意字符</p>
<p>根本原理：就根据程序的字符串拼接name=’%s’，我们输入一个<strong>xxx’ – haha</strong>,用我们输入的xxx加’在程序中拼接成一个判断条件name=<strong>‘xxx’ – haha’</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最后那一个空格，在一条sql语句中如果遇到select * from t1 where id &gt; 3 -- and name&#x3D;&#39;egon&#39;;则--之后的条件被注释掉了</span><br><span class="line"></span><br><span class="line">#1、sql注入之：用户存在，绕过密码</span><br><span class="line">egon&#39; -- 任意字符</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">select * from user where name&#x3D;&#39;jason&#39; -- asdsad&#39; and password&#x3D;&#39;&#39;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">#2、sql注入之：用户不存在，绕过用户与密码</span><br><span class="line">xxx&#39; or 1&#x3D;1 -- 任意字符</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">select * from user where name&#x3D;&#39;xxx&#39; or 1&#x3D;1 -- asdsadsad&#39; and password&#x3D;&#39;&#39;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>![image-20210426172311389](/Users/waylonyan/Library/Application Support/typora-user-images/image-20210426172311389.png)</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210426172326630.png" alt="image-20210426172326630"></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210426172403230.png" alt="image-20210426172403230"></p>
<p>解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如何解决上述问题？</span><br><span class="line">  日常软件在获取用户输入内容之后，都会限制一些特殊符号的输入；</span><br><span class="line">  所有敏感信息不要靠自己去做拼接操作，交互固定的模块帮你去过滤数据防止SQL注入。</span><br><span class="line">  在pymysql中 excute就能够帮你过滤</span><br><span class="line"></span><br><span class="line"># 原来是我们对sql进行字符串拼接</span><br><span class="line"># sql&#x3D;&quot;select * from userinfo where name&#x3D;&#39;%s&#39; and password&#x3D;&#39;%s&#39;&quot; %(user,pwd)</span><br><span class="line"># print(sql)</span><br><span class="line"># res&#x3D;cursor.execute(sql)</span><br><span class="line"></span><br><span class="line">#改写为（execute帮我们做字符串拼接，我们无需且一定不能再为%s加引号了,pymysql自动识别%s后面元祖里面数据进行替换）</span><br><span class="line">sql&#x3D;&quot;select * from userinfo where name&#x3D;%s and password&#x3D;%s&quot; #！！！注意%s需要去掉引号，因为pymysql会自动为我们加上</span><br><span class="line">res&#x3D;cursor.execute(sql,[user,pwd]) #pymysql模块自动帮我们解决sql注入的问题，只要我们按照pymysql的规矩来。</span><br></pre></td></tr></table></figure>

<h3 id="三-增、删、改：conn-commit"><a href="#三-增、删、改：conn-commit" class="headerlink" title="三 增、删、改：conn.commit()"></a><strong>三 增、删、改：conn.commit()</strong></h3><blockquote>
<p>重点是多行数据提交</p>
</blockquote>
<blockquote>
<p>可以直接设置autocommit =True</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#链接</span></span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="comment">#游标</span></span><br><span class="line">cursor=conn.cursor(pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行sql语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part1</span></span><br><span class="line">sql=<span class="string">&#x27;insert into userinfo(name,password) values(%s,%s);&#x27;</span></span><br><span class="line">res=cursor.execute(sql,(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>)) <span class="comment">#执行sql语句，返回sql影响成功的行数</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 增加多条数据 （列表套元祖的形式）</span></span><br><span class="line">sql=<span class="string">&#x27;insert into userinfo(name,password) values(%s,%s);&#x27;</span></span><br><span class="line">res=cursor.executemany(sql,[(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>),(<span class="string">&quot;lhf&quot;</span>,<span class="string">&quot;12356&quot;</span>),(<span class="string">&quot;eee&quot;</span>,<span class="string">&quot;156&quot;</span>)]) <span class="comment">#执行sql语句，返回sql影响成功的行数</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part3   更新数据</span></span><br><span class="line">sql=<span class="string">&#x27;update user set name=&quot;jason111&quot; where id=1&#x27;</span></span><br><span class="line">rows = cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment">#part4   删除数据</span></span><br><span class="line">sql = <span class="string">&#x27;delete from user where id=1&#x27;</span></span><br><span class="line">rows = cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn.commit() <span class="comment">#提交后才发现表中插入记录成功</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>



<h3 id="四-查：fetchone，fetchmany，fetchall"><a href="#四-查：fetchone，fetchmany，fetchall" class="headerlink" title="四 查：fetchone，fetchmany，fetchall"></a><strong>四 查：fetchone，fetchmany，fetchall</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#链接</span></span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"><span class="comment">#游标</span></span><br><span class="line">cursor=conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行sql语句</span></span><br><span class="line">sql=<span class="string">&#x27;select * from userinfo;&#x27;</span></span><br><span class="line">rows=cursor.execute(sql) <span class="comment">#执行sql语句，返回sql影响成功的行数rows,将结果放入一个集合，等待被查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cursor.scroll(3,mode=&#x27;absolute&#x27;) # 相对开头位置移动，</span></span><br><span class="line"><span class="comment"># cursor.scroll(3,mode=&#x27;relative&#x27;) # 相对当前位置移动</span></span><br><span class="line">res1=cursor.fetchone() <span class="comment"># 返回字典</span></span><br><span class="line">res2=cursor.fetchone()</span><br><span class="line">res3=cursor.fetchone()</span><br><span class="line">res4=cursor.fetchmany(<span class="number">2</span>)</span><br><span class="line">res5=cursor.fetchall() <span class="comment"># 列表套字典</span></span><br><span class="line">print(res1)</span><br><span class="line">print(res2)</span><br><span class="line">print(res3)</span><br><span class="line">print(res4)</span><br><span class="line">print(res5)</span><br><span class="line">print(<span class="string">&#x27;%s rows in set (0.00 sec)&#x27;</span> %rows)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn.commit() <span class="comment">#提交后才发现表中插入记录成功</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(1, &#x27;root&#x27;, &#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">(2, &#x27;root&#x27;, &#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">(3, &#x27;root&#x27;, &#x27;123456&#x27;)</span></span><br><span class="line"><span class="string">((4, &#x27;root&#x27;, &#x27;123456&#x27;), (5, &#x27;root&#x27;, &#x27;123456&#x27;))</span></span><br><span class="line"><span class="string">((6, &#x27;root&#x27;, &#x27;123456&#x27;), (7, &#x27;lhf&#x27;, &#x27;12356&#x27;), (8, &#x27;eee&#x27;, &#x27;156&#x27;))</span></span><br><span class="line"><span class="string">rows in set (0.00 sec)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="五-获取插入的最后一条数据的自增ID"><a href="#五-获取插入的最后一条数据的自增ID" class="headerlink" title="五 获取插入的最后一条数据的自增ID"></a><strong>五 获取插入的最后一条数据的自增ID</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">conn=pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line">cursor=conn.cursor()</span><br><span class="line"></span><br><span class="line">sql=<span class="string">&#x27;insert into userinfo(name,password) values(&quot;xxx&quot;,&quot;123&quot;);&#x27;</span></span><br><span class="line">rows=cursor.execute(sql)</span><br><span class="line">print(cursor.lastrowid) <span class="comment">#在插入语句后查看</span></span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>



<h2 id="视图-触发器-事务-存储过程-内置函数-流程控制-索引理论"><a href="#视图-触发器-事务-存储过程-内置函数-流程控制-索引理论" class="headerlink" title="视图 触发器 事务 存储过程 内置函数 流程控制 索引理论"></a>视图 触发器 事务 存储过程 内置函数 流程控制 索引理论</h2><h3 id="一-视图"><a href="#一-视图" class="headerlink" title="一. 视图"></a>一. 视图</h3><p>视图是一个虚拟表（非真实存在），其本质是【根据SQL语句获取动态的数据集，并为其命名】，用户使用时只需使用【名称】即可获取结果集，可以将该结果集当做表来使用。</p>
<p>使用视图我们可以把查询过程中的临时表摘出来，用视图去实现，这样以后再想操作该临时表的数据时就无需重写复杂的sql了，直接去视图中查找即可，但视图有明显地效率问题，并且视图是存放在数据库中的，如果我们程序中使用的sql过分依赖数据库中的视图，即强耦合，那就意味着扩展sql极为不便，因此并不推荐使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#两张有关系的表</span><br><span class="line">mysql&gt; select * from course;</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">| cid | cname  | teacher_id |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">|   1 | 生物   |          1 |</span><br><span class="line">|   2 | 物理   |          2 |</span><br><span class="line">|   3 | 体育   |          3 |</span><br><span class="line">|   4 | 美术   |          2 |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from teacher;</span><br><span class="line">+-----+-----------------+</span><br><span class="line">| tid | tname           |</span><br><span class="line">+-----+-----------------+</span><br><span class="line">|   1 | 张磊老师        |</span><br><span class="line">|   2 | 李平老师        |</span><br><span class="line">|   3 | 刘海燕老师      |</span><br><span class="line">|   4 | 朱云海老师      |</span><br><span class="line">|   5 | 李杰老师        |</span><br><span class="line">+-----+-----------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#查询李平老师教授的课程名</span><br><span class="line">mysql&gt; select cname from course where teacher_id &#x3D; (select tid from teacher where tname&#x3D;&#39;李平老师&#39;);</span><br><span class="line">+--------+</span><br><span class="line">| cname  |</span><br><span class="line">+--------+</span><br><span class="line">| 物理   |</span><br><span class="line">| 美术   |</span><br><span class="line">+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#子查询出临时表，作为teacher_id等判断依据</span><br><span class="line">select tid from teacher where tname&#x3D;&#39;李平老师&#39;</span><br></pre></td></tr></table></figure>

<h4 id="一-创建视图"><a href="#一-创建视图" class="headerlink" title="一 创建视图"></a><strong>一 创建视图</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语法：CREATE VIEW 视图名称 AS  SQL语句</span><br><span class="line">create view teacher_view as select tid from teacher where tname&#x3D;&#39;李平老师&#39;;</span><br><span class="line"></span><br><span class="line">#于是查询李平老师教授的课程名的sql可以改写为</span><br><span class="line">mysql&gt; select cname from course where teacher_id &#x3D; (select tid from teacher_view);</span><br><span class="line">+--------+</span><br><span class="line">| cname  |</span><br><span class="line">+--------+</span><br><span class="line">| 物理   |</span><br><span class="line">| 美术   |</span><br><span class="line">+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#！！！注意注意注意：</span><br><span class="line">#1. 使用视图以后就无需每次都重写子查询的sql，但是这么效率并不高，还不如我们写子查询的效率高</span><br><span class="line"></span><br><span class="line">#2. 而且有一个致命的问题：视图是存放到数据库里的，如果我们程序中的sql过分依赖于数据库中存放的视图，那么意味着，一旦sql需要修改且涉及到视图的部分，则必须去数据库中进行修改，而通常在公司中数据库有专门的DBA负责，你要想完成修改，必须付出大量的沟通成本DBA可能才会帮你完成修改，极其地不方便</span><br></pre></td></tr></table></figure>

<h4 id="二-使用视图"><a href="#二-使用视图" class="headerlink" title="二 使用视图"></a><strong>二 使用视图</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#修改视图，原始表也跟着改</span><br><span class="line">mysql&gt; select * from course;</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">| cid | cname  | teacher_id |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">|   1 | 生物   |          1 |</span><br><span class="line">|   2 | 物理   |          2 |</span><br><span class="line">|   3 | 体育   |          3 |</span><br><span class="line">|   4 | 美术   |          2 |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create view course_view as select * from course; #创建表course的视图</span><br><span class="line">Query OK, 0 rows affected (0.52 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from course_view;</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">| cid | cname  | teacher_id |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">|   1 | 生物   |          1 |</span><br><span class="line">|   2 | 物理   |          2 |</span><br><span class="line">|   3 | 体育   |          3 |</span><br><span class="line">|   4 | 美术   |          2 |</span><br><span class="line">+-----+--------+------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; update course_view set cname&#x3D;&#39;xxx&#39;; #更新视图中的数据</span><br><span class="line">Query OK, 4 rows affected (0.04 sec)</span><br><span class="line">Rows matched: 4  Changed: 4  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into course_view values(5,&#39;yyy&#39;,2); #往视图中插入数据</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from course; #发现原始表的记录也跟着修改了</span><br><span class="line">+-----+-------+------------+</span><br><span class="line">| cid | cname | teacher_id |</span><br><span class="line">+-----+-------+------------+</span><br><span class="line">|   1 | xxx   |          1 |</span><br><span class="line">|   2 | xxx   |          2 |</span><br><span class="line">|   3 | xxx   |          3 |</span><br><span class="line">|   4 | xxx   |          2 |</span><br><span class="line">|   5 | yyy   |          2 |</span><br><span class="line">+-----+-------+------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>我们不应该修改视图中的记录，而且在涉及多个表的情况下是根本无法修改视图中的记录的，如下图</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210426204949545.png" alt="image-20210426204949545"></p>
<h4 id="三-修改视图"><a href="#三-修改视图" class="headerlink" title="三 修改视图"></a><strong>三 修改视图</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：ALTER VIEW 视图名称 AS SQL语句</span><br><span class="line">mysql&gt; alter view teacher_view as select * from course where cid&gt;3;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from teacher_view;</span><br><span class="line">+-----+-------+------------+</span><br><span class="line">| cid | cname | teacher_id |</span><br><span class="line">+-----+-------+------------+</span><br><span class="line">|   4 | xxx   |          2 |</span><br><span class="line">|   5 | yyy   |          2 |</span><br><span class="line">+-----+-------+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="四-删除视图"><a href="#四-删除视图" class="headerlink" title="四 删除视图"></a><strong>四 删除视图</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：DROP VIEW 视图名称</span><br><span class="line"></span><br><span class="line">DROP VIEW teacher_view</span><br></pre></td></tr></table></figure>



<h3 id="二-触发器"><a href="#二-触发器" class="headerlink" title="二. 触发器"></a>二. 触发器</h3><p>使用触发器可以定制用户对表进行【增、删、改】操作时前后的行为，自动触发的功能。注意：没有查询</p>
<blockquote>
<p><strong>使用触发器可以 协助实现监控，日志.</strong>…..</p>
</blockquote>
<blockquote>
<p>触发器可以在六种情况下自动触发  <strong>增前/后 删前/后 改前/后</strong></p>
</blockquote>
<h4 id="0-基本语法结构"><a href="#0-基本语法结构" class="headerlink" title="0. 基本语法结构"></a>0. 基本语法结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger 触发器的名字 before&#x2F;after insert&#x2F;update&#x2F;delete on 表名 for each row </span><br><span class="line">begin</span><br><span class="line">     sql语句</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"># 具体使用，针对触发器的名字  见名知意</span><br></pre></td></tr></table></figure>

<p>ps : 修改MySQL默认的语句结束符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 只作用于当前窗口</span><br><span class="line">delimiter $$ 将默认的分号； 改为$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h4 id="一-创建触发器"><a href="#一-创建触发器" class="headerlink" title="一 创建触发器"></a><strong>一 创建触发器</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 插入前</span><br><span class="line">CREATE TRIGGER tri_before_insert_tb1 BEFORE INSERT ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"># 插入后</span><br><span class="line">CREATE TRIGGER tri_after_insert_tb1 AFTER INSERT ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"># 删除前</span><br><span class="line">CREATE TRIGGER tri_before_delete_tb1 BEFORE DELETE ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"># 删除后</span><br><span class="line">CREATE TRIGGER tri_after_delete_tb1 AFTER DELETE ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"># 更新前</span><br><span class="line">CREATE TRIGGER tri_before_update_tb1 BEFORE UPDATE ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"># 更新后</span><br><span class="line">CREATE TRIGGER tri_after_update_tb1 AFTER UPDATE ON tb1 FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    ...</span><br><span class="line">END</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>插入触发器后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#准备表</span><br><span class="line">CREATE TABLE cmd (</span><br><span class="line">    id INT PRIMARY KEY auto_increment,</span><br><span class="line">    USER CHAR (32),</span><br><span class="line">    priv CHAR (10),</span><br><span class="line">    cmd CHAR (64),</span><br><span class="line">    sub_time datetime, #提交时间</span><br><span class="line">    success enum (&#39;yes&#39;, &#39;no&#39;) #0代表执行失败</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE errlog (</span><br><span class="line">    id INT PRIMARY KEY auto_increment,</span><br><span class="line">    err_cmd CHAR (64),</span><br><span class="line">    err_time datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">当cmd表中的记录success字段是no；那么就触发trigger的执行去errlog表中插入数据。</span><br><span class="line">NEW指代的就是一条条的数据对象</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#创建触发器</span><br><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">CREATE TRIGGER tri_after_insert_cmd AFTER INSERT ON cmd FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    IF NEW.success &#x3D; &#39;no&#39; THEN #等值判断只有一个等号</span><br><span class="line">            INSERT INTO errlog(err_cmd, err_time) VALUES(NEW.cmd, NEW.sub_time) ; #必须加分号</span><br><span class="line">      END IF ; #必须加分号</span><br><span class="line">END&#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#往表cmd中插入记录，触发触发器，根据IF的条件决定是否插入错误日志</span><br><span class="line">INSERT INTO cmd (</span><br><span class="line">    USER,</span><br><span class="line">    priv,</span><br><span class="line">    cmd,</span><br><span class="line">    sub_time,</span><br><span class="line">    success</span><br><span class="line">)</span><br><span class="line">VALUES</span><br><span class="line">    (&#39;egon&#39;,&#39;0755&#39;,&#39;ls -l &#x2F;etc&#39;,NOW(),&#39;yes&#39;),</span><br><span class="line">    (&#39;egon&#39;,&#39;0755&#39;,&#39;cat &#x2F;etc&#x2F;passwd&#39;,NOW(),&#39;no&#39;),</span><br><span class="line">    (&#39;egon&#39;,&#39;0755&#39;,&#39;useradd xxx&#39;,NOW(),&#39;no&#39;),</span><br><span class="line">    (&#39;egon&#39;,&#39;0755&#39;,&#39;ps aux&#39;,NOW(),&#39;yes&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查询错误日志，发现有两条</span><br><span class="line">mysql&gt; select * from errlog;</span><br><span class="line">+----+-----------------+---------------------+</span><br><span class="line">| id | err_cmd         | err_time            |</span><br><span class="line">+----+-----------------+---------------------+</span><br><span class="line">|  1 | cat &#x2F;etc&#x2F;passwd | 2017-09-14 22:18:48 |</span><br><span class="line">|  2 | useradd xxx     | 2017-09-14 22:18:48 |</span><br><span class="line">+----+-----------------+---------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>特别的：<font color="red">NEW</font>表示即将插入的数据行对象（new.success 就能拿到对象里面的值），<font color="red">OLD</font>表示即将删除的数据行。</strong></p>
<h4 id="二-使用触发器"><a href="#二-使用触发器" class="headerlink" title="二 使用触发器"></a><strong>二 使用触发器</strong></h4><p>触发器无法由用户直接调用，而知由于对表的【增/删/改】操作被动引发的。</p>
<h4 id="三-删除触发器"><a href="#三-删除触发器" class="headerlink" title="三 删除触发器"></a><strong>三 删除触发器</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop trigger tri_after_insert_cmd;</span><br></pre></td></tr></table></figure>

<h3 id="三-事务"><a href="#三-事务" class="headerlink" title="三 事务"></a>三 事务</h3><p>事务用于将某些操作的多个SQL作为原子性操作，一旦有某一个出现错误，即可回滚到原来的状态。</p>
<p>开启一个事务可以包含多条sql语句，包含诸多操作，要么都成功，要么同时失败。</p>
<blockquote>
<p> 这个特点称之为<strong>事务的原子性</strong></p>
</blockquote>
<p><strong>事务作用</strong>：<font color="red">从而保证数据库数据完整性和操作的安全性。</font></p>
<p><strong>事务的四大特性</strong>：**<font color="red">ACID</font>**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A: 原子性</span><br><span class="line">   一个事务是一个不可分割的单位，事务中包含了诸多操作，要么同时成功，要么同时失败。</span><br><span class="line">   </span><br><span class="line">C: 一致性</span><br><span class="line">   事务必须是使数据库从一个一致性的状态变到另外一个一致性的状态。一致性和原子性是密切相关的。</span><br><span class="line">   </span><br><span class="line">I: 隔离性</span><br><span class="line">   一个事务的执行不能被其他事务干扰，其一个事务内部的操作及其使用到的数据对并发的其他事务是隔离的，并发执行的事务之间也是互不干扰的。</span><br><span class="line">   </span><br><span class="line">D: 持久性</span><br><span class="line">    也叫”永久性“。</span><br><span class="line">    一个事务一旦提交成功执行成功，那么它对数据库中数据的修改应该是永久的。</span><br><span class="line">    接下来的其他操作或者故障不应该改对其他有任何的影响。</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>开启事务</strong>：<strong>start transaction;</strong></p>
</li>
<li><p><strong>回滚(回到事务执行之前的状态): rollback</strong> </p>
</li>
<li><p><strong>确认(确认后无法回滚了)**：</strong>commit**</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name char(32),</span><br><span class="line">balance int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into user(name,balance)</span><br><span class="line">values</span><br><span class="line">(&#39;wsb&#39;,1000),</span><br><span class="line">(&#39;egon&#39;,1000),</span><br><span class="line">(&#39;ysb&#39;,1000);</span><br><span class="line"></span><br><span class="line">#原子操作，开启事务</span><br><span class="line">start transaction;</span><br><span class="line"></span><br><span class="line"># 修改操作</span><br><span class="line">update user set balance&#x3D;900 where name&#x3D;&#39;wsb&#39;; #买支付100元</span><br><span class="line">update user set balance&#x3D;1010 where name&#x3D;&#39;egon&#39;; #中介拿走10元</span><br><span class="line">update user set balance&#x3D;1090 where name&#x3D;&#39;ysb&#39;; #卖家拿到90元</span><br><span class="line"># 确认</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">#出现异常，回滚到初始状态</span><br><span class="line">start transaction;</span><br><span class="line">update user set balance&#x3D;900 where name&#x3D;&#39;wsb&#39;; #买支付100元</span><br><span class="line">update user set balance&#x3D;1010 where name&#x3D;&#39;egon&#39;; #中介拿走10元</span><br><span class="line">update user set balance&#x3D;1090 where name&#x3D;&#39;ysb&#39;; #卖家拿到90元,出现异常没有拿到</span><br><span class="line">rollback;</span><br><span class="line">commit;</span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+---------+</span><br><span class="line">| id | name | balance |</span><br><span class="line">+----+------+---------+</span><br><span class="line">|  1 | wsb  |    1000 |</span><br><span class="line">|  2 | egon |    1000 |</span><br><span class="line">|  3 | ysb  |    1000 |</span><br><span class="line">+----+------+---------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="四-存储过程"><a href="#四-存储过程" class="headerlink" title="四 存储过程"></a>四 存储过程</h3><h4 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一 介绍"></a><strong>一 介绍</strong></h4><p>类似于python中的函数。</p>
<p>存储过程包含了一系列可执行的sql语句，存储过程存放于MySQL中，通过调用它的名字可以执行其内部的一堆sql</p>
<p>使用存储过程的优点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. 用于替代程序写的SQL语句，实现程序与sql解耦</span><br><span class="line"></span><br><span class="line">#2. 基于网络传输，传别名的数据量小，而直接传sql数据量大</span><br></pre></td></tr></table></figure>

<p>使用存储过程的缺点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. 程序员扩展功能不方便</span><br></pre></td></tr></table></figure>

<p>补充：<strong>程序与数据库结合使用的三种方式</strong></p>
<blockquote>
<p>第一种基本不用。一般都是第三种，出现效率问题再动手写SQL</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方式一：</span><br><span class="line">    MySQL：存储过程</span><br><span class="line">    程序：调用存储过程</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line">    MySQL：</span><br><span class="line">    程序：纯SQL语句</span><br><span class="line"></span><br><span class="line">#方式三：</span><br><span class="line">    MySQL:</span><br><span class="line">    程序：类和对象，即ORM（本质还是纯SQL语句）</span><br></pre></td></tr></table></figure>

<h4 id="二-创建简单存储过程（无参）"><a href="#二-创建简单存储过程（无参）" class="headerlink" title="二 创建简单存储过程（无参）"></a><strong>二 创建简单存储过程（无参）</strong></h4><p><code>create procedure 存储过程名字()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">create procedure p1()</span><br><span class="line">BEGIN</span><br><span class="line">    select * from blog;</span><br><span class="line">    INSERT into blog(name,sub_time) values(&quot;xxx&quot;,now());</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">#在mysql中调用</span><br><span class="line">call p1() </span><br><span class="line"></span><br><span class="line">#在python中基于pymysql调用</span><br><span class="line">cursor.callproc(&#39;p1&#39;) </span><br><span class="line">print(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<h4 id="三-创建存储过程（有参）"><a href="#三-创建存储过程（有参）" class="headerlink" title="三 创建存储过程（有参）"></a><strong>三 创建存储过程（有参）</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于存储过程，可以接收参数，其参数有三类：</span><br><span class="line"></span><br><span class="line">#in          仅用于传入参数用</span><br><span class="line">#out        仅用于返回值用</span><br><span class="line">#inout     既可以传入又可以当作返回值</span><br></pre></td></tr></table></figure>

<p>in:传入参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">create procedure p2(</span><br><span class="line">    in n1 int,</span><br><span class="line">    in n2 int</span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line">    </span><br><span class="line">    select * from blog where id &gt; n1;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">#在mysql中调用</span><br><span class="line">call p2(3,2)</span><br><span class="line"></span><br><span class="line">#在python中基于pymysql调用</span><br><span class="line">cursor.callproc(&#39;p2&#39;,(3,2))</span><br><span class="line">print(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<p>out：返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">create procedure p3(</span><br><span class="line">    in n1 int,</span><br><span class="line">    out res int</span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line">    select * from blog where id &gt; n1;</span><br><span class="line">    set res &#x3D; 1;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">#在mysql中调用</span><br><span class="line">set @res&#x3D;0; #0代表假（执行失败），1代表真（执行成功）</span><br><span class="line">call p3(3,@res);</span><br><span class="line">select @res;</span><br><span class="line"></span><br><span class="line">#在python中基于pymysql调用</span><br><span class="line">cursor.callproc(&#39;p3&#39;,(3,0)) #0相当于set @res&#x3D;0</span><br><span class="line">print(cursor.fetchall()) #查询select的查询结果</span><br><span class="line"></span><br><span class="line">cursor.execute(&#39;select @_p3_0,@_p3_1;&#39;) #@p3_0代表第一个参数，@p3_1代表第二个参数，即返回值</span><br><span class="line">print(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<p>inout:既可以传入又可以返回</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">create procedure p4(</span><br><span class="line">    inout n1 int</span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line">    select * from blog where id &gt; n1;</span><br><span class="line">    set n1 &#x3D; 1;</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">#在mysql中调用</span><br><span class="line">set @x&#x3D;3;</span><br><span class="line">call p4(@x);</span><br><span class="line">select @x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#在python中基于pymysql调用</span><br><span class="line">cursor.callproc(&#39;p4&#39;,(3,))</span><br><span class="line">print(cursor.fetchall()) #查询select的查询结果</span><br><span class="line"></span><br><span class="line">cursor.execute(&#39;select @_p4_0;&#39;) </span><br><span class="line">print(cursor.fetchall())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>事务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#介绍</span><br><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">            create procedure p4(</span><br><span class="line">                out status int</span><br><span class="line">            )</span><br><span class="line">            BEGIN</span><br><span class="line">                1. 声明如果出现异常则执行&#123;</span><br><span class="line">                    set status &#x3D; 1;</span><br><span class="line">                    rollback;</span><br><span class="line">                &#125;</span><br><span class="line">                   </span><br><span class="line">                开始事务</span><br><span class="line">                    -- 由秦兵账户减去100</span><br><span class="line">                    -- 方少伟账户加90</span><br><span class="line">                    -- 张根账户加10</span><br><span class="line">                    commit;</span><br><span class="line">                结束</span><br><span class="line">                </span><br><span class="line">                set status &#x3D; 2;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">            END &#x2F;&#x2F;</span><br><span class="line">            delimiter ;</span><br><span class="line"></span><br><span class="line">#实现</span><br><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">create PROCEDURE p5(</span><br><span class="line">    OUT p_return_code tinyint</span><br><span class="line">)</span><br><span class="line">BEGIN </span><br><span class="line">    DECLARE exit handler for sqlexception </span><br><span class="line">    BEGIN </span><br><span class="line">        -- ERROR </span><br><span class="line">        set p_return_code &#x3D; 1; </span><br><span class="line">        rollback; </span><br><span class="line">    END; </span><br><span class="line"></span><br><span class="line">    DECLARE exit handler for sqlwarning </span><br><span class="line">    BEGIN </span><br><span class="line">        -- WARNING </span><br><span class="line">        set p_return_code &#x3D; 2; </span><br><span class="line">        rollback; </span><br><span class="line">    END; </span><br><span class="line"></span><br><span class="line">    START TRANSACTION; </span><br><span class="line">        DELETE from tb1; #执行失败</span><br><span class="line">        insert into blog(name,sub_time) values(&#39;yyy&#39;,now());</span><br><span class="line">    COMMIT; </span><br><span class="line"></span><br><span class="line">    -- SUCCESS </span><br><span class="line">    set p_return_code &#x3D; 0; #0代表执行成功</span><br><span class="line"></span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">#在mysql中调用存储过程</span><br><span class="line">set @res&#x3D;123;</span><br><span class="line">call p5(@res);</span><br><span class="line">select @res;</span><br><span class="line"></span><br><span class="line">#在python中基于pymysql调用存储过程</span><br><span class="line">cursor.callproc(&#39;p5&#39;,(123,))</span><br><span class="line">print(cursor.fetchall()) #查询select的查询结果</span><br><span class="line"></span><br><span class="line">cursor.execute(&#39;select @_p5_0;&#39;)</span><br><span class="line">print(cursor.fetchall())</span><br></pre></td></tr></table></figure>

<h4 id="四-执行存储过程"><a href="#四-执行存储过程" class="headerlink" title="四 执行存储过程"></a><strong>四 执行存储过程</strong></h4><p>在MySQL<strong>中执行存储过程</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 无参数</span><br><span class="line">call proc_name()</span><br><span class="line"></span><br><span class="line">-- 有参数，全in</span><br><span class="line">call proc_name(1,2)</span><br><span class="line"></span><br><span class="line">-- 有参数，有in，out，inout</span><br><span class="line">set @t1&#x3D;0;</span><br><span class="line">set @t2&#x3D;3;</span><br><span class="line">call proc_name(1,2,@t1,@t2)</span><br><span class="line"></span><br><span class="line">执行存储过程</span><br></pre></td></tr></table></figure>

<p>在python中基于pymysql执行存储过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;123&#x27;</span>, db=<span class="string">&#x27;t1&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment"># 执行存储过程</span></span><br><span class="line">cursor.callproc(<span class="string">&#x27;p1&#x27;</span>, args=(<span class="number">1</span>, <span class="number">22</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment"># 获取执行完存储的参数</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select @_p1_0,@_p1_1,@_p1_2,@_p1_3&quot;</span>)</span><br><span class="line">result = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h4 id="五-删除存储过程"><a href="#五-删除存储过程" class="headerlink" title="五 删除存储过程"></a><strong>五 删除存储过程</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop procedure proc_name;</span><br></pre></td></tr></table></figure>



<h3 id="五-函数"><a href="#五-函数" class="headerlink" title="五 函数"></a>五 函数</h3><p>MySQL中提供了许多内置函数，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一、数学函数</span><br><span class="line">    ROUND(x,y)</span><br><span class="line">        返回参数x的四舍五入的有y位小数的值</span><br><span class="line">        </span><br><span class="line">    RAND()</span><br><span class="line">        返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</span><br><span class="line"></span><br><span class="line">二、聚合函数(常用于GROUP BY从句的SELECT查询中)</span><br><span class="line">    AVG(col)返回指定列的平均值</span><br><span class="line">    COUNT(col)返回指定列中非NULL值的个数</span><br><span class="line">    MIN(col)返回指定列的最小值</span><br><span class="line">    MAX(col)返回指定列的最大值</span><br><span class="line">    SUM(col)返回指定列的所有值之和</span><br><span class="line">    GROUP_CONCAT(col) 返回由属于一组的列值连接组合而成的结果    </span><br><span class="line">    </span><br><span class="line">三、字符串函数</span><br><span class="line"></span><br><span class="line">    CHAR_LENGTH(str)</span><br><span class="line">        返回值为字符串str 的长度，长度的单位为字符。一个多字节字符算作一个单字符。</span><br><span class="line">    CONCAT(str1,str2,...)</span><br><span class="line">        字符串拼接</span><br><span class="line">        如有任何一个参数为NULL ，则返回值为 NULL。</span><br><span class="line">    CONCAT_WS(separator,str1,str2,...)</span><br><span class="line">        字符串拼接（自定义连接符）</span><br><span class="line">        CONCAT_WS()不会忽略任何空字符串。 (然而会忽略所有的 NULL）。</span><br><span class="line"></span><br><span class="line">    CONV(N,from_base,to_base)</span><br><span class="line">        进制转换</span><br><span class="line">        例如：</span><br><span class="line">            SELECT CONV(&#39;a&#39;,16,2); 表示将 a 由16进制转换为2进制字符串表示</span><br><span class="line"></span><br><span class="line">    FORMAT(X,D)</span><br><span class="line">        将数字X 的格式写为&#39;#,###,###.##&#39;,以四舍五入的方式保留小数点后 D 位， 并将结果以字符串的形式返回。若  D 为 0, 则返回结果不带有小数点，或不含小数部分。</span><br><span class="line">        例如：</span><br><span class="line">            SELECT FORMAT(12332.1,4); 结果为： &#39;12,332.1000&#39;</span><br><span class="line">    INSERT(str,pos,len,newstr)</span><br><span class="line">        在str的指定位置插入字符串</span><br><span class="line">            pos：要替换位置其实位置</span><br><span class="line">            len：替换的长度</span><br><span class="line">            newstr：新字符串</span><br><span class="line">        特别的：</span><br><span class="line">            如果pos超过原字符串长度，则返回原字符串</span><br><span class="line">            如果len超过原字符串长度，则由新字符串完全替换</span><br><span class="line">    INSTR(str,substr)</span><br><span class="line">        返回字符串 str 中子字符串的第一个出现位置。</span><br><span class="line"></span><br><span class="line">    LEFT(str,len)</span><br><span class="line">        返回字符串str 从开始的len位置的子序列字符。</span><br><span class="line"></span><br><span class="line">    LOWER(str)</span><br><span class="line">        变小写</span><br><span class="line"></span><br><span class="line">    UPPER(str)</span><br><span class="line">        变大写</span><br><span class="line">   </span><br><span class="line">    REVERSE(str)</span><br><span class="line">        返回字符串 str ，顺序和字符顺序相反。</span><br><span class="line">        </span><br><span class="line">    SUBSTRING(str,pos) , SUBSTRING(str FROM pos) SUBSTRING(str,pos,len) , SUBSTRING(str FROM pos FOR len)</span><br><span class="line">        不带有len 参数的格式从字符串str返回一个子字符串，起始于位置 pos。带有len参数的格式从字符串str返回一个长度同len字符相同的子字符串，起始于位置 pos。 使用 FROM的格式为标准 SQL 语法。也可能对pos使用一个负值。假若这样，则子字符串的位置起始于字符串结尾的pos 字符，而不是字符串的开头位置。在以下格式的函数中可以对pos 使用一个负值。</span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(&#39;Quadratically&#39;,5);</span><br><span class="line">            -&gt; &#39;ratically&#39;</span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(&#39;foobarbar&#39; FROM 4);</span><br><span class="line">            -&gt; &#39;barbar&#39;</span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(&#39;Quadratically&#39;,5,6);</span><br><span class="line">            -&gt; &#39;ratica&#39;</span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(&#39;Sakila&#39;, -3);</span><br><span class="line">            -&gt; &#39;ila&#39;</span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(&#39;Sakila&#39;, -5, 3);</span><br><span class="line">            -&gt; &#39;aki&#39;</span><br><span class="line"></span><br><span class="line">        mysql&gt; SELECT SUBSTRING(&#39;Sakila&#39; FROM -4 FOR 2);</span><br><span class="line">            -&gt; &#39;ki&#39;</span><br><span class="line">            </span><br><span class="line">四、日期和时间函数</span><br><span class="line">    CURDATE()或CURRENT_DATE() 返回当前的日期</span><br><span class="line">    CURTIME()或CURRENT_TIME() 返回当前的时间</span><br><span class="line">    DAYOFWEEK(date)   返回date所代表的一星期中的第几天(1~7)</span><br><span class="line">    DAYOFMONTH(date)  返回date是一个月的第几天(1~31)</span><br><span class="line">    DAYOFYEAR(date)   返回date是一年的第几天(1~366)</span><br><span class="line">    DAYNAME(date)   返回date的星期名，如：SELECT DAYNAME(CURRENT_DATE);</span><br><span class="line">    FROM_UNIXTIME(ts,fmt)  根据指定的fmt格式，格式化UNIX时间戳ts</span><br><span class="line">    HOUR(time)   返回time的小时值(0~23)</span><br><span class="line">    MINUTE(time)   返回time的分钟值(0~59)</span><br><span class="line">    MONTH(date)   返回date的月份值(1~12)</span><br><span class="line">    MONTHNAME(date)   返回date的月份名，如：SELECT MONTHNAME(CURRENT_DATE);</span><br><span class="line">    NOW()    返回当前的日期和时间</span><br><span class="line">    QUARTER(date)   返回date在一年中的季度(1~4)，如SELECT QUARTER(CURRENT_DATE);</span><br><span class="line">    WEEK(date)   返回日期date为一年中第几周(0~53)</span><br><span class="line">    YEAR(date)   返回日期date的年份(1000~9999)</span><br><span class="line">    </span><br><span class="line">    重点:</span><br><span class="line">    DATE_FORMAT(date,format) 根据format字符串格式化date值</span><br><span class="line"></span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(&#39;2009-10-04 22:23:00&#39;, &#39;%W %M %Y&#39;);</span><br><span class="line">        -&gt; &#39;Sunday October 2009&#39;</span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(&#39;2007-10-04 22:23:00&#39;, &#39;%H:%i:%s&#39;);</span><br><span class="line">        -&gt; &#39;22:23:00&#39;</span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(&#39;1900-10-04 22:23:00&#39;,</span><br><span class="line">        -&gt;                 &#39;%D %y %a %d %m %b %j&#39;);</span><br><span class="line">        -&gt; &#39;4th 00 Thu 04 10 Oct 277&#39;</span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(&#39;1997-10-04 22:23:00&#39;,</span><br><span class="line">        -&gt;                 &#39;%H %k %I %r %T %S %w&#39;);</span><br><span class="line">        -&gt; &#39;22 22 10 10:23:00 PM 22:23:00 00 6&#39;</span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(&#39;1999-01-01&#39;, &#39;%X %V&#39;);</span><br><span class="line">        -&gt; &#39;1998 52&#39;</span><br><span class="line">       mysql&gt; SELECT DATE_FORMAT(&#39;2006-06-00&#39;, &#39;%d&#39;);</span><br><span class="line">        -&gt; &#39;00&#39;</span><br><span class="line">        </span><br><span class="line">五、加密函数</span><br><span class="line">    MD5()    </span><br><span class="line">        计算字符串str的MD5校验和</span><br><span class="line">    PASSWORD(str)   </span><br><span class="line">        返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。</span><br><span class="line">        </span><br><span class="line">六、控制流函数            </span><br><span class="line">    CASE WHEN[test1] THEN [result1]...ELSE [default] END</span><br><span class="line">        如果testN是真，则返回resultN，否则返回default</span><br><span class="line">    CASE [test] WHEN[val1] THEN [result]...ELSE [default]END  </span><br><span class="line">        如果test和valN相等，则返回resultN，否则返回default</span><br><span class="line"></span><br><span class="line">    IF(test,t,f)   </span><br><span class="line">        如果test是真，返回t；否则返回f</span><br><span class="line"></span><br><span class="line">    IFNULL(arg1,arg2) </span><br><span class="line">        如果arg1不是空，返回arg1，否则返回arg2</span><br><span class="line"></span><br><span class="line">    NULLIF(arg1,arg2) </span><br><span class="line">        如果arg1&#x3D;arg2返回NULL；否则返回arg1        </span><br><span class="line">        </span><br><span class="line">七、控制流函数小练习</span><br><span class="line">#7.1、准备表</span><br><span class="line">&#x2F;*</span><br><span class="line">Navicat MySQL Data Transfer</span><br><span class="line"></span><br><span class="line">Source Server         : localhost_3306</span><br><span class="line">Source Server Version : 50720</span><br><span class="line">Source Host           : localhost:3306</span><br><span class="line">Source Database       : student</span><br><span class="line"></span><br><span class="line">Target Server Type    : MYSQL</span><br><span class="line">Target Server Version : 50720</span><br><span class="line">File Encoding         : 65001</span><br><span class="line"></span><br><span class="line">Date: 2018-01-02 12:05:30</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS&#x3D;0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for course</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;course&#96;;</span><br><span class="line">CREATE TABLE &#96;course&#96; (</span><br><span class="line">  &#96;c_id&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;c_name&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;t_id&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;c_id&#96;),</span><br><span class="line">  KEY &#96;t_id&#96; (&#96;t_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of course</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;course&#96; VALUES (&#39;1&#39;, &#39;python&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;course&#96; VALUES (&#39;2&#39;, &#39;java&#39;, &#39;2&#39;);</span><br><span class="line">INSERT INTO &#96;course&#96; VALUES (&#39;3&#39;, &#39;linux&#39;, &#39;3&#39;);</span><br><span class="line">INSERT INTO &#96;course&#96; VALUES (&#39;4&#39;, &#39;web&#39;, &#39;2&#39;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for score</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;score&#96;;</span><br><span class="line">CREATE TABLE &#96;score&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;s_id&#96; int(10) DEFAULT NULL,</span><br><span class="line">  &#96;c_id&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;num&#96; double DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;12 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of score</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;1&#39;, &#39;1&#39;, &#39;1&#39;, &#39;79&#39;);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;2&#39;, &#39;1&#39;, &#39;2&#39;, &#39;78&#39;);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;3&#39;, &#39;1&#39;, &#39;3&#39;, &#39;35&#39;);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;4&#39;, &#39;2&#39;, &#39;2&#39;, &#39;32&#39;);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;5&#39;, &#39;3&#39;, &#39;1&#39;, &#39;66&#39;);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;6&#39;, &#39;4&#39;, &#39;2&#39;, &#39;77&#39;);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;7&#39;, &#39;4&#39;, &#39;1&#39;, &#39;68&#39;);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;8&#39;, &#39;5&#39;, &#39;1&#39;, &#39;66&#39;);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;9&#39;, &#39;2&#39;, &#39;1&#39;, &#39;69&#39;);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;10&#39;, &#39;4&#39;, &#39;4&#39;, &#39;75&#39;);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (&#39;11&#39;, &#39;5&#39;, &#39;4&#39;, &#39;66.7&#39;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for student</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;student&#96;;</span><br><span class="line">CREATE TABLE &#96;student&#96; (</span><br><span class="line">  &#96;s_id&#96; varchar(20) NOT NULL,</span><br><span class="line">  &#96;s_name&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;s_age&#96; int(10) DEFAULT NULL,</span><br><span class="line">  &#96;s_sex&#96; char(1) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;s_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of student</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (&#39;1&#39;, &#39;鲁班&#39;, &#39;12&#39;, &#39;男&#39;);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (&#39;2&#39;, &#39;貂蝉&#39;, &#39;20&#39;, &#39;女&#39;);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (&#39;3&#39;, &#39;刘备&#39;, &#39;35&#39;, &#39;男&#39;);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (&#39;4&#39;, &#39;关羽&#39;, &#39;34&#39;, &#39;男&#39;);</span><br><span class="line">INSERT INTO &#96;student&#96; VALUES (&#39;5&#39;, &#39;张飞&#39;, &#39;33&#39;, &#39;女&#39;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for teacher</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;teacher&#96;;</span><br><span class="line">CREATE TABLE &#96;teacher&#96; (</span><br><span class="line">  &#96;t_id&#96; int(10) NOT NULL,</span><br><span class="line">  &#96;t_name&#96; varchar(50) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;t_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of teacher</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;teacher&#96; VALUES (&#39;1&#39;, &#39;大王&#39;);</span><br><span class="line">INSERT INTO &#96;teacher&#96; VALUES (&#39;2&#39;, &#39;alex&#39;);</span><br><span class="line">INSERT INTO &#96;teacher&#96; VALUES (&#39;3&#39;, &#39;egon&#39;);</span><br><span class="line">INSERT INTO &#96;teacher&#96; VALUES (&#39;4&#39;, &#39;peiqi&#39;);</span><br><span class="line"></span><br><span class="line">#7.2、统计各科各分数段人数.显示格式:课程ID,课程名称,[100-85],[85-70],[70-60],[ &lt;60]</span><br><span class="line"></span><br><span class="line">select  score.c_id,</span><br><span class="line">          course.c_name, </span><br><span class="line">      sum(CASE WHEN num BETWEEN 85 and 100 THEN 1 ELSE 0 END) as &#39;[100-85]&#39;,</span><br><span class="line">      sum(CASE WHEN num BETWEEN 70 and 85 THEN 1 ELSE 0 END) as &#39;[85-70]&#39;,</span><br><span class="line">      sum(CASE WHEN num BETWEEN 60 and 70 THEN 1 ELSE 0 END) as &#39;[70-60]&#39;,</span><br><span class="line">      sum(CASE WHEN num &lt; 60 THEN 1 ELSE 0 END) as &#39;[ &lt;60]&#39;</span><br><span class="line">from score,course where score.c_id&#x3D;course.c_id GROUP BY score.c_id; </span><br></pre></td></tr></table></figure>

<p>需要掌握函数：date_format</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1 基本使用</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&#39;2009-10-04 22:23:00&#39;, &#39;%W %M %Y&#39;);</span><br><span class="line">        -&gt; &#39;Sunday October 2009&#39;</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&#39;2007-10-04 22:23:00&#39;, &#39;%H:%i:%s&#39;);</span><br><span class="line">        -&gt; &#39;22:23:00&#39;</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&#39;1900-10-04 22:23:00&#39;,</span><br><span class="line">    -&gt;                 &#39;%D %y %a %d %m %b %j&#39;);</span><br><span class="line">        -&gt; &#39;4th 00 Thu 04 10 Oct 277&#39;</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&#39;1997-10-04 22:23:00&#39;,</span><br><span class="line">    -&gt;                 &#39;%H %k %I %r %T %S %w&#39;);</span><br><span class="line">        -&gt; &#39;22 22 10 10:23:00 PM 22:23:00 00 6&#39;</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&#39;1999-01-01&#39;, &#39;%X %V&#39;);</span><br><span class="line">        -&gt; &#39;1998 52&#39;</span><br><span class="line">mysql&gt; SELECT DATE_FORMAT(&#39;2006-06-00&#39;, &#39;%d&#39;);</span><br><span class="line">        -&gt; &#39;00&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2 准备表和记录</span><br><span class="line">CREATE TABLE blog (</span><br><span class="line">    id INT PRIMARY KEY auto_increment,</span><br><span class="line">    NAME CHAR (32),</span><br><span class="line">    sub_time datetime</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO blog (NAME, sub_time)</span><br><span class="line">VALUES</span><br><span class="line">    (&#39;第1篇&#39;,&#39;2015-03-01 11:31:21&#39;),</span><br><span class="line">    (&#39;第2篇&#39;,&#39;2015-03-11 16:31:21&#39;),</span><br><span class="line">    (&#39;第3篇&#39;,&#39;2016-07-01 10:21:31&#39;),</span><br><span class="line">    (&#39;第4篇&#39;,&#39;2016-07-22 09:23:21&#39;),</span><br><span class="line">    (&#39;第5篇&#39;,&#39;2016-07-23 10:11:11&#39;),</span><br><span class="line">    (&#39;第6篇&#39;,&#39;2016-07-25 11:21:31&#39;),</span><br><span class="line">    (&#39;第7篇&#39;,&#39;2017-03-01 15:33:21&#39;),</span><br><span class="line">    (&#39;第8篇&#39;,&#39;2017-03-01 17:32:21&#39;),</span><br><span class="line">    (&#39;第9篇&#39;,&#39;2017-03-01 18:31:21&#39;);</span><br><span class="line"></span><br><span class="line">#3. 提取sub_time字段的值，按照格式后的结果即&quot;年月&quot;来分组</span><br><span class="line">SELECT DATE_FORMAT(sub_time,&#39;%Y-%m&#39;),COUNT(id) FROM blog GROUP BY DATE_FORMAT(sub_time,&#39;%Y-%m&#39;);</span><br><span class="line"></span><br><span class="line">#结果</span><br><span class="line">+-------------------------------+----------+</span><br><span class="line">| DATE_FORMAT(sub_time,&#39;%Y-%m&#39;) | COUNT(1) |</span><br><span class="line">+-------------------------------+----------+</span><br><span class="line">| 2015-03                       |        2 |</span><br><span class="line">| 2016-07                       |        4 |</span><br><span class="line">| 2017-03                       |        3 |</span><br><span class="line">+-------------------------------+----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>更多函数：<a href="http://doc.mysql.cn/mysql5/refman-5.1-zh.html-chapter/functions.html#encryption-functions">中文猛击这里</a> OR <a href="https://dev.mysql.com/doc/refman/5.7/en/functions.html">官方猛击这里</a></p>
<h4 id="一-自定义函数"><a href="#一-自定义函数" class="headerlink" title="一 自定义函数"></a><strong>一 自定义函数</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#！！！注意！！！</span><br><span class="line">#函数中不要写sql语句（否则会报错），函数仅仅只是一个功能，是一个在sql中被应用的功能</span><br><span class="line">#若要想在begin...end...中写sql，请用存储过程</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">create function f1(</span><br><span class="line">    i1 int,</span><br><span class="line">    i2 int)</span><br><span class="line">returns int</span><br><span class="line">BEGIN</span><br><span class="line">    declare num int;</span><br><span class="line">    set num &#x3D; i1 + i2;</span><br><span class="line">    return(num);</span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">create function f5(</span><br><span class="line">    i int</span><br><span class="line">)</span><br><span class="line">returns int</span><br><span class="line">begin</span><br><span class="line">    declare res int default 0;</span><br><span class="line">    if i &#x3D; 10 then</span><br><span class="line">        set res&#x3D;100;</span><br><span class="line">    elseif i &#x3D; 20 then</span><br><span class="line">        set res&#x3D;200;</span><br><span class="line">    elseif i &#x3D; 30 then</span><br><span class="line">        set res&#x3D;300;</span><br><span class="line">    else</span><br><span class="line">        set res&#x3D;400;</span><br><span class="line">    end if;</span><br><span class="line">    return res;</span><br><span class="line">end &#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h4 id="二-删除函数"><a href="#二-删除函数" class="headerlink" title="二 删除函数"></a><strong>二 删除函数</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop function func_name;</span><br></pre></td></tr></table></figure>

<h4 id="三-执行函数"><a href="#三-执行函数" class="headerlink" title="三 执行函数"></a><strong>三 执行函数</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取返回值</span><br><span class="line">select UPPER(&#39;egon&#39;) into @res;</span><br><span class="line">SELECT @res;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 在查询中使用</span><br><span class="line">select f1(11,nid) ,name from tb2;</span><br></pre></td></tr></table></figure>



<h3 id="六-流程控制"><a href="#六-流程控制" class="headerlink" title="六 流程控制"></a>六 流程控制</h3><h4 id="一-条件语句"><a href="#一-条件语句" class="headerlink" title="一 条件语句"></a><strong>一 条件语句</strong></h4><p>If 条件语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">CREATE PROCEDURE proc_if ()</span><br><span class="line">BEGIN</span><br><span class="line">    </span><br><span class="line">    declare i int default 0;</span><br><span class="line">    if i &#x3D; 1 THEN</span><br><span class="line">        SELECT 1;</span><br><span class="line">    ELSEIF i &#x3D; 2 THEN</span><br><span class="line">        SELECT 2;</span><br><span class="line">    ELSE</span><br><span class="line">        SELECT 7;</span><br><span class="line">    END IF;</span><br><span class="line"></span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<h4 id="二-循环语句"><a href="#二-循环语句" class="headerlink" title="二 循环语句"></a><strong>二 循环语句</strong></h4><p>while循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">CREATE PROCEDURE proc_while ()</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">    DECLARE num INT ;</span><br><span class="line">    SET num &#x3D; 0 ;</span><br><span class="line">    WHILE num &lt; 10 DO</span><br><span class="line">        SELECT</span><br><span class="line">            num ;</span><br><span class="line">        SET num &#x3D; num + 1 ;</span><br><span class="line">    END WHILE ;</span><br><span class="line"></span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<p>repeat循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter &#x2F;&#x2F;</span><br><span class="line">CREATE PROCEDURE proc_repeat ()</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">    DECLARE i INT ;</span><br><span class="line">    SET i &#x3D; 0 ;</span><br><span class="line">    repeat</span><br><span class="line">        select i;</span><br><span class="line">        set i &#x3D; i + 1;</span><br><span class="line">        until i &gt;&#x3D; 5</span><br><span class="line">    end repeat;</span><br><span class="line"></span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<p>loop循环</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">    </span><br><span class="line">    declare i int default 0;</span><br><span class="line">    loop_label: loop</span><br><span class="line">        </span><br><span class="line">        set i&#x3D;i+1;</span><br><span class="line">        if i&lt;8 then</span><br><span class="line">            iterate loop_label;</span><br><span class="line">        end if;</span><br><span class="line">        if i&gt;&#x3D;10 then</span><br><span class="line">            leave loop_label;</span><br><span class="line">        end if;</span><br><span class="line">        select i;</span><br><span class="line">    end loop loop_label;</span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure>



<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="一-介绍-1"><a href="#一-介绍-1" class="headerlink" title="一 介绍"></a>一 介绍</h3><p><strong>为何要有索引?</strong></p>
<p><em>一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，在生产环境中，我们遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，因此对查询语句的优化显然是重中之重。说起加速查询，就不得不提到索引了。</em></p>
<p><strong>什么是索引？</strong></p>
<p><em>索引在MySQL中也叫做“键”，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能</em><br><em>非常关键，尤其是当表中的数据量越来越大时，索引对于性能的影响愈发重要。</em></p>
<p><em>索引优化应该是对查询性能优化最有效的手段了。索引能够轻易将查询性能提高好几个数量级。</em><br><em>索引相当于字典的音序表，如果要查某个字，如果不使用音序表，则需要从几百页中逐页去查。</em></p>
<p><strong>你是否对索引存在误解？</strong></p>
<p>索引是应用程序设计和开发的一个重要方面。若索引太多，应用程序的性能可能会受到影响。而索引太少，对查询性能又会产生影响，要找到一个平衡点，这对应用程序的性能至关重要。</p>
<h3 id="二-索引的原理"><a href="#二-索引的原理" class="headerlink" title="二 索引的原理"></a><strong>二 索引的原理</strong></h3><p><strong>一 索引原理</strong></p>
<p>索引的目的在于提高查询效率，与我们查阅图书所用的目录是一个道理：先定位到章，然后定位到该章下的一个小节，然后找到页数。相似的例子还有：查字典，查火车车次，飞机航班等</p>
<p><font color="red"><strong>本质都是：通过不断地缩小想要获取数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是说，有了这种索引机制，我们可以总是用同一种查找方式来锁定数据。</strong></font></p>
<p>数据库也是一样，但显然要复杂的多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的。而数据库实现比较复杂，一方面数据是保存在磁盘上的，另外一方面为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p>
<p><strong>二 磁盘IO与预读</strong></p>
<p>前面提到了访问磁盘，那么这里先简单介绍一下磁盘IO和预读，磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为寻道时间、旋转延迟、传输时间三个部分，寻道时间指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms以下；旋转延迟就是我们经常听说的磁盘转速，比如一个磁盘7200转，表示每分钟能转7200次，也就是说1秒钟能转120次，旋转延迟就是1/120/2 = 4.17ms；传输时间指的是从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计。那么访问一次磁盘的时间，即一次磁盘IO的时间约等于5+4.17 = 9ms左右，听起来还挺不错的，但要知道一台500 -MIPS（Million Instructions Per Second）的机器每秒可以执行5亿条指令，因为指令依靠的是电的性质，换句话说执行一次IO的时间可以执行约450万条指令，数据库动辄十万百万乃至千万级数据，每次9毫秒的时间，显然是个灾难。下图是计算机硬件延迟的对比图，供大家参考：</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427141010739.png" alt="image-20210427141010739"></p>
<p>考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，<font color="red"><strong>当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内</strong></font>，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。</p>
<h3 id="三-索引的数据结构"><a href="#三-索引的数据结构" class="headerlink" title="三 索引的数据结构"></a>三 索引的数据结构</h3><p>前面讲了索引的基本原理，数据库的复杂性，又讲了操作系统的相关知识，目的就是让大家了解，任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生（B+树是通过二叉查找树，再由平衡二叉树，B树演化而来）。</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427141424527.png" alt="image-20210427141424527"></p>
<p>如上图，是一颗b+树，关于b+树的定义可以参见<a href="http://zh.wikipedia.org/wiki/B%2B%E6%A0%91">B+树</a>，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p>
<h4 id="b-树的查找过程"><a href="#b-树的查找过程" class="headerlink" title="b+树的查找过程"></a>b+树的查找过程</h4><p>如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高</p>
<h4 id="b-树性质"><a href="#b-树性质" class="headerlink" title="b+树性质"></a>b+树性质</h4><p>1.<strong><font color="red">索引字段要尽量的小</font>&gt;**：通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。<br>2.<font color="red">**索引的最左匹配特性</font></strong>：当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p>
<ol start="3">
<li>为什么主键愿意用id int </li>
</ol>
<p>对于同一个磁盘块 int 比 varchar能存取的更多，这样B+tree 树层越少</p>
<h3 id="四-聚集索引与辅助索引"><a href="#四-聚集索引与辅助索引" class="headerlink" title="四 聚集索引与辅助索引"></a><strong>四 聚集索引与辅助索引</strong></h3><p><strong>在数据库中，B+树的高度一般都在2<del>4层，这也就是说查找某一个键值的行记录时最多只需要2到4次IO，这倒不错。因为当前一般的机械硬盘每秒至少可以做100次IO，2</del>4次的IO意味着查询时间只需要0.02~0.04秒。</strong></p>
<p><strong>数据库中的B+树索引可以分为聚集索引（clustered index）和辅助索引（secondary index），</strong></p>
<p><strong>聚集索引与辅助索引相同的是：不管是聚集索引还是辅助索引，其内部都是B+树的形式，即高度是平衡的，叶子结点存放着所有的数据。</strong></p>
<p><strong>聚集索引与辅助索引不同的是：叶子结点存放的是否是一整行的信息</strong></p>
<p><font color="red"><strong>小总结</strong></font>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">聚集索引</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">聚集索引指的就是主键</span><br><span class="line">Innodb 只有两个文件 直接将主键存放在了ibd表中</span><br><span class="line">MyIsam 三个文件，单独将索引存一个文件</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">辅助索引</span><br><span class="line"># 主键之外的都叫辅助索引</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">查询数据的时候不可能一直使用到主键，也有可能会用到name,password 等其他字段。</span><br><span class="line">那么这个时候你是没有办法利用聚集索引，这个时候你就可以根据情况给其他字段设置辅助索引。</span><br><span class="line"></span><br><span class="line">辅助索引也是（B+树）</span><br><span class="line">&quot;&quot;</span><br><span class="line"></span><br><span class="line">覆盖索引</span><br><span class="line">在辅助索引的叶子节点就已经拿到了需要的数据</span><br><span class="line"># 给name设置辅助索引</span><br><span class="line">&#96;select name from user where name&#x3D;&#39;jason&#39;&#96;</span><br><span class="line">答: 想要用户名，用户名已经是辅助索引了，不需要去主键去找了。直接就能够拿到数据。这种现象就叫覆盖索引。</span><br><span class="line">&#96;select age from user where name&#x3D;&#39;jason&#39;&#96;  </span><br><span class="line">答：要的数据并不在辅助索引上，这种现象叫非附加索引。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>叶子节点存放的是数据对应的主键值<ul>
<li>先按照辅助索引拿到数据的主键值</li>
<li>之后还是需要去主键的聚集索引里面查询数据</li>
</ul>
</li>
</ul>
<p><strong>1、聚集索引</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#InnoDB存储引擎表示索引组织表，即表中数据按照主键顺序存放。而聚集索引（clustered index）就是按照每张表的主键构造一棵B+树，同时叶子结点存放的即为整张表的行记录数据，也将聚集索引的叶子结点称为数据页。聚集索引的这个特性决定了索引组织表中数据也是索引的一部分。同B+树数据结构一样，每个数据页都通过一个双向链表来进行链接。</span><br><span class="line">    </span><br><span class="line">#如果未定义主键，MySQL取第一个唯一索引（unique）而且只含非空列（NOT NULL）作为主键，InnoDB使用它作为聚簇索引。</span><br><span class="line">    </span><br><span class="line">#如果没有这样的列，InnoDB就自己产生一个这样的ID值，它有六个字节，而且是隐藏的，使其作为聚簇索引。</span><br><span class="line"></span><br><span class="line">#由于实际的数据页只能按照一棵B+树进行排序，因此每张表只能拥有一个聚集索引。在多少情况下，查询优化器倾向于采用聚集索引。因为聚集索引能够在B+树索引的叶子节点上直接找到数据。此外由于定义了数据的逻辑顺序，聚集索引能够特别快地访问针对范围值得查询。</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427142509739.png" alt="image-20210427142509739"></p>
<p><strong><font color="red">聚集索引的好处之一：它对主键的排序查找和范围查找速度非常快，叶子节点的数据就是用户所要查询的数据。如用户需要查找一张表，查询最后的10位用户信息，由于B+树索引是双向链表，所以用户可以快速找到最后一个数据页，并取出10条记录</font></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#参照第六小结测试索引的准备阶段来创建出表s1</span><br><span class="line">mysql&gt; desc s1; #最开始没有主键</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| id     | int(11)     | NO   |     | NULL    |       |</span><br><span class="line">| name   | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| gender | char(6)     | YES  |     | NULL    |       |</span><br><span class="line">| email  | varchar(50) | YES  |     | NULL    |       |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from s1 order by id desc limit 10; #Using filesort，需要二次排序</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+----------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows    | filtered | Extra          |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+----------------+</span><br><span class="line">|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 2633472 |   100.00 | Using filesort |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+----------------+</span><br><span class="line">1 row in set, 1 warning (0.11 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table s1 add primary key(id); #添加主键</span><br><span class="line">Query OK, 0 rows affected (13.37 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from s1 order by id desc limit 10; #基于主键的聚集索引在创建完毕后就已经完成了排序，无需二次排序</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | s1    | NULL       | index | NULL          | PRIMARY | 4       | NULL |   10 |   100.00 | NULL  |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------+</span><br><span class="line">1 row in set, 1 warning (0.04 sec)</span><br></pre></td></tr></table></figure>



<p><font color="red"><strong>聚集索引的好处之二：范围查询（range query），即如果要查找主键某一范围内的数据，通过叶子节点的上层中间节点就可以得到页的范围，之后直接读取数据页即可</strong></font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table s1 drop primary key;</span><br><span class="line">Query OK, 2699998 rows affected (24.23 sec)</span><br><span class="line">Records: 2699998  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc s1;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| id     | int(11)     | NO   |     | NULL    |       |</span><br><span class="line">| name   | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| gender | char(6)     | YES  |     | NULL    |       |</span><br><span class="line">| email  | varchar(50) | YES  |     | NULL    |       |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.12 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from s1 where id &gt; 1 and id &lt; 1000000; #没有聚集索引，预估需要检索的rows数如下</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows    | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 2690100 |    11.11 | Using where |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table s1 add primary key(id);</span><br><span class="line">Query OK, 0 rows affected (16.25 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from s1 where id &gt; 1 and id &lt; 1000000; #有聚集索引，预估需要检索的rows数如下</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+---------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows    | filtered | Extra       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+---------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | s1    | NULL       | range | PRIMARY       | PRIMARY | 4       | NULL | 1343355 |   100.00 | Using where |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+---------+---------+------+---------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.09 sec)</span><br></pre></td></tr></table></figure>

<p><strong>2、辅助索引</strong></p>
<p>表中除了聚集索引外其他索引都是辅助索引（Secondary Index，也称为非聚集索引），与聚集索引的区别是：辅助索引的叶子节点不包含行记录的全部数据。</p>
<p>叶子节点除了包含键值以外，每个叶子节点中的索引行中还包含一个书签（bookmark）。该书签用来告诉InnoDB存储引擎去哪里可以找到与索引相对应的行数据。</p>
<p>由于InnoDB存储引擎是索引组织表，因此InnoDB存储引擎的辅助索引的书签就是相应行数据的聚集索引键。如下图</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427151345317.png" alt="image-20210427151345317"></p>
<p>辅助索引的存在并不影响数据在聚集索引中的组织，因此每张表上可以有多个辅助索引，但只能有一个聚集索引。当通过辅助索引来寻找数据时，InnoDB存储引擎会遍历辅助索引并通过叶子级别的指针获得只想主键索引的主键，然后再通过主键索引来找到一个完整的行记录。</p>
<p>举例来说，如果在一棵高度为3的辅助索引树种查找数据，那需要对这个辅助索引树遍历3次找到指定主键，如果聚集索引树的高度同样为3，那么还需要对聚集索引树进行3次查找，最终找到一个完整的行数据所在的页，因此一共需要6次逻辑IO访问才能得到最终的一个数据页。</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427151423480.png" alt="image-20210427151423480"></p>
<h3 id="五-MySQL索引管理"><a href="#五-MySQL索引管理" class="headerlink" title="五 MySQL索引管理"></a><strong>五 MySQL索引管理</strong></h3><p><strong>一 功能</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. 索引的功能就是加速查找</span><br><span class="line">#2. mysql中的primary key，unique，联合唯一也都是索引，这些索引除了加速查找以外，还有约束的功能</span><br></pre></td></tr></table></figure>

<p><strong>二 MySQL常用的索引</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">普通索引INDEX：加速查找</span><br><span class="line"></span><br><span class="line">唯一索引：</span><br><span class="line">    -主键索引PRIMARY KEY：加速查找+约束（不为空、不能重复）</span><br><span class="line">    -唯一索引UNIQUE:加速查找+约束（不能重复）</span><br><span class="line"></span><br><span class="line">联合索引：</span><br><span class="line">    -PRIMARY KEY(id,name):联合主键索引</span><br><span class="line">    -UNIQUE(id,name):联合唯一索引</span><br><span class="line">    -INDEX(id,name):联合普通索引</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">举个例子来说，比如你在为某商场做一个会员卡的系统。</span><br><span class="line"></span><br><span class="line">这个系统有一个会员表</span><br><span class="line">有下列字段：</span><br><span class="line">会员编号 INT</span><br><span class="line">会员姓名 VARCHAR(10)</span><br><span class="line">会员身份证号码 VARCHAR(18)</span><br><span class="line">会员电话 VARCHAR(10)</span><br><span class="line">会员住址 VARCHAR(50)</span><br><span class="line">会员备注信息 TEXT</span><br><span class="line"></span><br><span class="line">那么这个 会员编号，作为主键，使用 PRIMARY</span><br><span class="line">会员姓名 如果要建索引的话，那么就是普通的 INDEX</span><br><span class="line">会员身份证号码 如果要建索引的话，那么可以选择 UNIQUE （唯一的，不允许重复）</span><br><span class="line"></span><br><span class="line">#除此之外还有全文索引，即FULLTEXT</span><br><span class="line">会员备注信息 ， 如果需要建索引的话，可以选择全文搜索。</span><br><span class="line">用于搜索很长一篇文章的时候，效果最好。</span><br><span class="line">用在比较短的文本，如果就一两行字的，普通的 INDEX 也可以。</span><br><span class="line">但其实对于全文搜索，我们并不会使用MySQL自带的该索引，而是会选择第三方软件如Sphinx，专门来做全文搜索。</span><br><span class="line"></span><br><span class="line">#其他的如空间索引SPATIAL，了解即可，几乎不用</span><br></pre></td></tr></table></figure>

<p><strong>三 索引的两大类型hash与btree</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#我们可以在创建上述索引的时候，为其指定索引类型，分两类</span><br><span class="line">hash类型的索引：查询单条快，范围查询慢</span><br><span class="line">btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</span><br><span class="line"></span><br><span class="line">#不同的存储引擎支持的索引类型也不一样</span><br><span class="line">InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；</span><br><span class="line">Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；</span><br><span class="line">NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；</span><br><span class="line">Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</span><br></pre></td></tr></table></figure>

<p><strong>四 创建/删除索引的语法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方法一：创建表时</span><br><span class="line">    　　CREATE TABLE 表名 (</span><br><span class="line">                字段名1  数据类型 [完整性约束条件…],</span><br><span class="line">                字段名2  数据类型 [完整性约束条件…],</span><br><span class="line">                [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY</span><br><span class="line">                [索引名]  (字段名[(长度)]  [ASC |DESC]) </span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法二：CREATE在已存在的表上创建索引</span><br><span class="line">        CREATE  [UNIQUE | FULLTEXT | SPATIAL ]  INDEX  索引名 </span><br><span class="line">                     ON 表名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法三：ALTER TABLE在已存在的表上创建索引</span><br><span class="line">        ALTER TABLE 表名 ADD  [UNIQUE | FULLTEXT | SPATIAL ] INDEX</span><br><span class="line">                             索引名 (字段名[(长度)]  [ASC |DESC]) ;</span><br><span class="line">                             </span><br><span class="line">#删除索引：DROP INDEX 索引名 ON 表名字;</span><br></pre></td></tr></table></figure>

<p>示范</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方式一</span><br><span class="line">create table t1(</span><br><span class="line">    id int,</span><br><span class="line">    name char,</span><br><span class="line">    age int,</span><br><span class="line">    sex enum(&#39;male&#39;,&#39;female&#39;),</span><br><span class="line">    unique key uni_id(id),</span><br><span class="line">    index ix_name(name) #index没有key</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方式二</span><br><span class="line">create index ix_age on t1(age);</span><br><span class="line"></span><br><span class="line">#方式三</span><br><span class="line">alter table t1 add index ix_sex(sex);</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">mysql&gt; show create table t1;</span><br><span class="line">| t1    | CREATE TABLE &#96;t1&#96; (</span><br><span class="line">  &#96;id&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;name&#96; char(1) DEFAULT NULL,</span><br><span class="line">  &#96;age&#96; int(11) DEFAULT NULL,</span><br><span class="line">  &#96;sex&#96; enum(&#39;male&#39;,&#39;female&#39;) DEFAULT NULL,</span><br><span class="line">  UNIQUE KEY &#96;uni_id&#96; (&#96;id&#96;),</span><br><span class="line">  KEY &#96;ix_name&#96; (&#96;name&#96;),</span><br><span class="line">  KEY &#96;ix_age&#96; (&#96;age&#96;),</span><br><span class="line">  KEY &#96;ix_sex&#96; (&#96;sex&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;latin1</span><br></pre></td></tr></table></figure>

<h3 id="六-测试索引"><a href="#六-测试索引" class="headerlink" title="六 测试索引"></a><strong>六 测试索引</strong></h3><p><strong>一 准备</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. 准备表</span><br><span class="line">create table s1(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20),</span><br><span class="line">gender char(6),</span><br><span class="line">email varchar(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#2. 创建存储过程，实现批量插入记录</span><br><span class="line">delimiter $$ #声明存储过程的结束符号为$$</span><br><span class="line">create procedure auto_insert1()</span><br><span class="line">BEGIN</span><br><span class="line">    declare i int default 1;</span><br><span class="line">    while(i&lt;3000000)do</span><br><span class="line">        insert into s1 values(i,&#39;egon&#39;,&#39;male&#39;,concat(&#39;egon&#39;,i,&#39;@oldboy&#39;));</span><br><span class="line">        set i&#x3D;i+1;</span><br><span class="line">    end while;</span><br><span class="line">END$$ #$$结束</span><br><span class="line">delimiter ; #重新声明分号为结束符号</span><br><span class="line"></span><br><span class="line">#3. 查看存储过程</span><br><span class="line">show create procedure auto_insert1\G </span><br><span class="line"></span><br><span class="line">#4. 调用存储过程</span><br><span class="line">call auto_insert1();</span><br></pre></td></tr></table></figure>

<p><strong>二 在没有索引的前提下测试查询速度</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#无索引：mysql根本就不知道到底是否存在id等于333333333的记录，只能把数据表从头到尾扫描一遍，此时有多少个磁盘块就需要进行多少IO操作，所以查询速度很慢</span><br><span class="line">mysql&gt; select * from s1 where id&#x3D;333333333;</span><br><span class="line">Empty set (0.33 sec)</span><br></pre></td></tr></table></figure>

<p><strong>三 在表中已经存在大量数据的前提下，为某个字段段建立索引，建立速度会很慢</strong></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427153849792.png" alt="image-20210427153849792"></p>
<p><strong>四 在索引建立完毕后，以该字段为查询条件时，查询速度提升明显</strong></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427153904565.png" alt="image-20210427153904565"></p>
<p><strong>PS：</strong></p>
<p><strong>1. mysql先去索引表里根据b+树的搜索原理很快搜索到id等于333333333的记录不存在，IO大大降低，因而速度明显提升</strong></p>
<p><strong>2. 我们可以去mysql的data目录下找到该表，可以看到占用的硬盘空间多了</strong></p>
<p><strong>3. 需要注意，如下图</strong></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427153925816.png" alt="image-20210427153925816"></p>
<p><strong>五 总结</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. 一定是为搜索条件的字段创建索引，比如select * from s1 where id &#x3D; 333;就需要为id加上索引</span><br><span class="line"></span><br><span class="line">#2. 在表中已经有大量数据的情况下，建索引会很慢，且占用硬盘空间，建完后查询速度加快</span><br><span class="line">比如create index idx on s1(id);会扫描表中所有的数据，然后以id为数据项，创建索引结构，存放于硬盘的表中。</span><br><span class="line">建完以后，再查询就会很快了。</span><br><span class="line"></span><br><span class="line">#3. 需要注意的是：innodb表的索引会存放于s1.ibd文件中，而myisam表的索引则会有单独的索引文件table1.MYI</span><br><span class="line"></span><br><span class="line">MySAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址。而在innodb中，表数据文件本身就是按照B+Tree（BTree即Balance True）组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此innodb表数据文件本身就是主索引。</span><br><span class="line">因为inndob的数据文件要按照主键聚集，所以innodb要求表必须要有主键（Myisam可以没有），如果没有显式定义，则mysql系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则mysql会自动为innodb表生成一个隐含字段作为主键，这字段的长度为6个字节，类型为长整型.</span><br></pre></td></tr></table></figure>

<h3 id="七-正确使用索引"><a href="#七-正确使用索引" class="headerlink" title="七 正确使用索引"></a>七 正确使用索引</h3><p><strong>一 索引未命中</strong></p>
<p><strong><em>\</em>并不是说我们创建了索引就一定会加快查询速度，*****</strong>*若想利用索引达到预想的提高查询速度的效果，我们在添加索引时，必须遵循以下问题****</p>
<p><font color="green"><strong>1 范围问题，或者说条件不明确，条件中出现这些符号或关键字：</strong>&gt;、&gt;=、&lt;、&lt;=、!= 、between…and…、like、大于号、小于号**</font></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427155426561.png" alt="image-20210427155426561"></p>
<p>不等于！=</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427155455897.png" alt="image-20210427155455897"></p>
<p>between …and…</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427155530459.png" alt="image-20210427155530459"></p>
<p>like</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427155615794.png" alt="image-20210427155615794"></p>
<p><font color="green"><strong>2 尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</strong></font>&gt;</p>
<p>#先把表中的索引都删除，让我们专心研究区分度的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#先把表中的索引都删除，让我们专心研究区分度的问题</span><br><span class="line">mysql&gt; desc s1;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| id     | int(11)     | YES  | MUL | NULL    |       |</span><br><span class="line">| name   | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| gender | char(5)     | YES  |     | NULL    |       |</span><br><span class="line">| email  | varchar(50) | YES  | MUL | NULL    |       |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; drop index a on s1;</span><br><span class="line">Query OK, 0 rows affected (0.20 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; drop index d on s1;</span><br><span class="line">Query OK, 0 rows affected (0.18 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; desc s1;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| id     | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name   | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| gender | char(5)     | YES  |     | NULL    |       |</span><br><span class="line">| email  | varchar(50) | YES  |     | NULL    |       |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427155933728.png" alt="image-20210427155933728"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们编写存储过程为表s1批量添加记录，name字段的值均为egon，也就是说name这个字段的区分度很低（gender字段也是一样的，我们稍后再搭理它）</span><br><span class="line"></span><br><span class="line">回忆b+树的结构，查询的速度与树的高度成反比，要想将树的高低控制的很低，需要保证：在某一层内数据项均是按照从左到右，从小到大的顺序依次排开，即左1&lt;左2&lt;左3&lt;...</span><br><span class="line"></span><br><span class="line">而对于区分度低的字段，无法找到大小关系，因为值都是相等的，毫无疑问，还想要用b+树存放这些等值的数据，只能增加树的高度，字段的区分度越低，则树的高度越高。极端的情况，索引字段的值都一样，那么b+树几乎成了一根棍。本例中就是这种极端的情况，name字段所有的值均为&#39;egon&#39;</span><br><span class="line"></span><br><span class="line">#现在我们得出一个结论：为区分度低的字段建立索引，索引树的高度会很高，然而这具体会带来什么影响呢？？？</span><br><span class="line"></span><br><span class="line">#1：如果条件是name&#x3D;&#39;xxxx&#39;,那么肯定是可以第一时间判断出&#39;xxxx&#39;是不在索引树中的（因为树中所有的值均为&#39;egon’），所以查询速度很快</span><br><span class="line"></span><br><span class="line">#2：如果条件正好是name&#x3D;&#39;egon&#39;,查询时，我们永远无法从树的某个位置得到一个明确的范围，只能往下找，往下找，往下找。。。这与全表扫描的IO次数没有多大区别，所以速度很慢</span><br></pre></td></tr></table></figure>

<p><font color="green"><strong>3 =和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</strong></font>&gt;</p>
<p><font color="green"><strong>4 索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’)</strong></font></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427160127287.png" alt="image-20210427160127287"></p>
<p><strong>5 and/or</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、and与or的逻辑</span><br><span class="line">    条件1 and 条件2:所有条件都成立才算成立，但凡要有一个条件不成立则最终结果不成立</span><br><span class="line">    条件1 or 条件2:只要有一个条件成立则最终结果就成立</span><br><span class="line"></span><br><span class="line">#2、and的工作原理</span><br><span class="line">    条件：</span><br><span class="line">        a &#x3D; 10 and b &#x3D; &#39;xxx&#39; and c &gt; 3 and d &#x3D;4</span><br><span class="line">    索引：</span><br><span class="line">        制作联合索引(d,a,b,c)</span><br><span class="line">    工作原理:</span><br><span class="line">        对于连续多个and：mysql会按照联合索引，从左到右的顺序找一个区分度高的索引字段(这样便可以快速锁定很小的范围)，加速查询，即按照d—&gt;a-&gt;b-&gt;c的顺序</span><br><span class="line"></span><br><span class="line">#3、or的工作原理</span><br><span class="line">    条件：</span><br><span class="line">        a &#x3D; 10 or b &#x3D; &#39;xxx&#39; or c &gt; 3 or d &#x3D;4</span><br><span class="line">    索引：</span><br><span class="line">        制作联合索引(d,a,b,c)</span><br><span class="line">        </span><br><span class="line">    工作原理:</span><br><span class="line">        对于连续多个or：mysql会按照条件的顺序，从左到右依次判断，即a-&gt;b-&gt;c-&gt;d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427160152591.png" alt="image-20210427160152591"></p>
<p>在左边条件成立但是索引字段的区分度低的情况下（name与gender均属于这种情况），会依次往右找到一个区分度高的索引字段，加速查询</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427160219952.png" alt="image-20210427160219952"></p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427160235665.png" alt="image-20210427160235665"></p>
<p>经过分析，在条件为name=’egon’ and gender=’male’ and id&gt;333 and email=’xxx’的情况下，我们完全没必要为前三个条件的字段加索引，因为只能用上email字段的索引，前三个字段的索引反而会降低我们的查询效率</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427160306004.png" alt="image-20210427160306004"></p>
<p><font color="green"><strong>6 最左前缀匹配原则（详见第八小节），非常重要的原则，对于组合索引mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配(指的是范围大了，有索引速度也慢)，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</strong></font>&gt;</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427160338243.png" alt="image-20210427160338243"></p>
<p><strong>7 其他情况</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 使用函数</span><br><span class="line">    select * from tb1 where reverse(email) &#x3D; &#39;egon&#39;;</span><br><span class="line">            </span><br><span class="line">- 类型不一致</span><br><span class="line">    如果列是字符串类型，传入条件是必须用引号引起来，不然...</span><br><span class="line">    select * from tb1 where email &#x3D; 999;</span><br><span class="line">    </span><br><span class="line">#排序条件为索引，则select字段必须也是索引字段，否则无法命中</span><br><span class="line">- order by</span><br><span class="line">    select name from s1 order by email desc;</span><br><span class="line">    当根据索引排序时候，select查询的字段如果不是索引，则速度仍然很慢</span><br><span class="line">    select email from s1 order by email desc;</span><br><span class="line">    特别的：如果对主键排序，则还是速度很快：</span><br><span class="line">        select * from tb1 order by nid desc;</span><br><span class="line"> </span><br><span class="line">- 组合索引最左前缀</span><br><span class="line">    如果组合索引为：(name,email)</span><br><span class="line">    name and email       -- 命中索引</span><br><span class="line">    name                 -- 命中索引</span><br><span class="line">    email                -- 未命中索引</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- count(1)或count(列)代替count(*)在mysql中没有差别了</span><br><span class="line"></span><br><span class="line">- create index xxxx  on tb(title(19)) #text类型，必须制定长度</span><br></pre></td></tr></table></figure>

<p><strong>二 其他注意事项</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 避免使用select *</span><br><span class="line">- count(1)或count(列) 代替 count(*)</span><br><span class="line">- 创建表时尽量时 char 代替 varchar</span><br><span class="line">- 表的字段顺序固定长度的字段优先</span><br><span class="line">- 组合索引代替多个单列索引（经常使用多个条件查询时）</span><br><span class="line">- 尽量使用短索引</span><br><span class="line">- 使用连接（JOIN）来代替子查询(Sub-Queries)</span><br><span class="line">- 连表时注意条件类型需一致</span><br><span class="line">- 索引散列值（重复少）不适合建索引，例：性别不适合</span><br></pre></td></tr></table></figure>

<h3 id="八-联合索引与覆盖索引"><a href="#八-联合索引与覆盖索引" class="headerlink" title="八 联合索引与覆盖索引"></a>八 联合索引与覆盖索引</h3><p><strong>一 联合索引</strong></p>
<p>联合索引时指对表上的多个列合起来做一个索引。联合索引的创建方法与单个索引的创建方法一样，不同之处在仅在于有多个索引列，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table t(</span><br><span class="line">    -&gt; a int,</span><br><span class="line">    -&gt; b int,</span><br><span class="line">    -&gt; primary key(a),</span><br><span class="line">    -&gt; key idx_a_b(a,b)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.11 sec)</span><br></pre></td></tr></table></figure>

<p>那么何时需要使用联合索引呢？在讨论这个问题之前，先来看一下联合索引内部的结果。从本质上来说，联合索引就是一棵B+树，不同的是联合索引的键值得数量不是1，而是&gt;=2。接着来讨论两个整型列组成的联合索引，假定两个键值得名称分别为a、b如图</p>
<p><img src="https://gitee.com/waylon1006/blog_pic/raw/master/pic/image-20210427160449998.png" alt="image-20210427160449998"></p>
<p>可以看到这与我们之前看到的单个键的B+树并没有什么不同，键值都是排序的，通过叶子结点可以逻辑上顺序地读出所有数据，就上面的例子来说，即（1,1），（1,2），（2,1），（2,4），（3,1），（3,2），数据按（a,b）的顺序进行了存放。</p>
<p>因此，对于查询select * from table where a=xxx and b=xxx, 显然是可以使用(a,b) 这个联合索引的，对于单个列a的查询select * from table where a=xxx,也是可以使用（a,b）这个索引的。</p>
<p>但对于b列的查询select * from table where b=xxx,则不可以使用（a,b） 索引，其实你不难发现原因，叶子节点上b的值为1、2、1、4、1、2显然不是排序的，因此对于b列的查询使用不到(a,b) 索引</p>
<p><strong>联合索引的第二个好处是在第一个键相同的情况下，已经对第二个键进行了排序处理</strong>，例如在很多情况下应用程序都需要查询某个用户的购物情况，并按照时间进行排序，最后取出最近三次的购买记录，这时使用联合索引可以帮我们避免多一次的排序操作，因为索引本身在叶子节点已经排序了，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;准备表&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">create table buy_log(</span><br><span class="line">    userid int unsigned not null,</span><br><span class="line">    buy_date date</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into buy_log values</span><br><span class="line">(1,&#39;2009-01-01&#39;),</span><br><span class="line">(2,&#39;2009-01-01&#39;),</span><br><span class="line">(3,&#39;2009-01-01&#39;),</span><br><span class="line">(1,&#39;2009-02-01&#39;),</span><br><span class="line">(3,&#39;2009-02-01&#39;),</span><br><span class="line">(1,&#39;2009-03-01&#39;),</span><br><span class="line">(1,&#39;2009-04-01&#39;);</span><br><span class="line"></span><br><span class="line">alter table buy_log add key(userid);</span><br><span class="line">alter table buy_log add key(userid,buy_date);</span><br><span class="line"></span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;验证&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">mysql&gt; show create table buy_log;</span><br><span class="line">| buy_log | CREATE TABLE &#96;buy_log&#96; (</span><br><span class="line">  &#96;userid&#96; int(10) unsigned NOT NULL,</span><br><span class="line">  &#96;buy_date&#96; date DEFAULT NULL,</span><br><span class="line">  KEY &#96;userid&#96; (&#96;userid&#96;),</span><br><span class="line">  KEY &#96;userid_2&#96; (&#96;userid&#96;,&#96;buy_date&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 |</span><br><span class="line"></span><br><span class="line">#可以看到possible_keys在这里有两个索引可以用，分别是单个索引userid与联合索引userid_2,但是优化器最终选择了使用的key是userid因为该索引的叶子节点包含单个键值，所以理论上一个页能存放的记录应该更多</span><br><span class="line">mysql&gt; explain select * from buy_log where userid&#x3D;2;</span><br><span class="line">+----+-------------+---------+------+-----------------+--------+---------+-------+------+-------+</span><br><span class="line">| id | select_type | table   | type | possible_keys   | key    | key_len | ref   | rows | Extra |</span><br><span class="line">+----+-------------+---------+------+-----------------+--------+---------+-------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | buy_log | ref  | userid,userid_2 | userid | 4       | const |    1 |       |</span><br><span class="line">+----+-------------+---------+------+-----------------+--------+---------+-------+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#接着假定要取出userid为1的最近3次的购买记录，用的就是联合索引userid_2了，因为在这个索引中，在userid&#x3D;1的情况下，buy_date都已经排序好了</span><br><span class="line">mysql&gt; explain select * from buy_log where userid&#x3D;1 order by buy_date desc limit 3;</span><br><span class="line">+----+-------------+---------+------+-----------------+----------+---------+-------+------+--------------------------+</span><br><span class="line">| id | select_type | table   | type | possible_keys   | key      | key_len | ref   | rows | Extra                    |</span><br><span class="line">+----+-------------+---------+------+-----------------+----------+---------+-------+------+--------------------------+</span><br><span class="line">|  1 | SIMPLE      | buy_log | ref  | userid,userid_2 | userid_2 | 4       | const |    4 | Using where; Using index |</span><br><span class="line">+----+-------------+---------+------+-----------------+----------+---------+-------+------+--------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#ps：如果extra的排序显示是Using filesort，则意味着在查出数据后需要二次排序(如下查询语句，没有先用where userid&#x3D;3先定位范围，于是即便命中索引也没用，需要二次排序)</span><br><span class="line">mysql&gt; explain select * from buy_log order by buy_date desc limit 3;</span><br><span class="line">+----+-------------+---------+-------+---------------+----------+---------+------+------+-----------------------------+</span><br><span class="line">| id | select_type | table   | type  | possible_keys | key      | key_len | ref  | rows | Extra                       |</span><br><span class="line">+----+-------------+---------+-------+---------------+----------+---------+------+------+-----------------------------+</span><br><span class="line">|  1 | SIMPLE      | buy_log | index | NULL          | userid_2 | 8       | NULL |    7 | Using index; Using filesort |</span><br><span class="line">+----+-------------+---------+-------+---------------+----------+---------+------+------+-----------------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#对于联合索引（a,b）,下述语句可以直接使用该索引，无需二次排序</span><br><span class="line">select ... from table where a&#x3D;xxx order by b;</span><br><span class="line"></span><br><span class="line">#然后对于联合索引(a,b,c)来首，下列语句同样可以直接通过索引得到结果</span><br><span class="line">select ... from table where a&#x3D;xxx order by b;</span><br><span class="line">select ... from table where a&#x3D;xxx and b&#x3D;xxx order by c;</span><br><span class="line"></span><br><span class="line">#但是对于联合索引(a,b,c)，下列语句不能通过索引直接得到结果，还需要自己执行一次filesort操作，因为索引（a，c)并未排序</span><br><span class="line">select ... from table where a&#x3D;xxx order by c;</span><br></pre></td></tr></table></figure>

<p><strong>二 覆盖索引</strong></p>
<p><font color="red"><strong>InnoDB存储引擎支持覆盖索引（covering index，或称索引覆盖），即从辅助索引中就可以得到查询记录，而不需要查询聚集索引中的记录。</strong></font></p>
<p>使用覆盖索引的一个好处是：辅助索引不包含整行记录的所有信息，故其大小要远小于聚集索引，因此可以减少大量的IO操作</p>
<hr>
<p> 注意：覆盖索引技术最早是在InnoDB Plugin中完成并实现，这意味着对于InnoDB版本小于1.0的，或者MySQL数据库版本为5.0以下的，InnoDB存储引擎不支持覆盖索引特性</p>
<hr>
<p>对于InnoDB存储引擎的辅助索引而言，由于其包含了主键信息，因此其叶子节点存放的数据为（primary key1，priamey key2，…,key1，key2，…）。例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select age from s1 where id&#x3D;123 and name &#x3D; &#39;egon&#39;; #id字段有索引，但是name字段没有索引,该sql命中了索引，但未覆盖，需要去聚集索引中再查找详细信息。</span><br><span class="line">最牛逼的情况是，索引字段覆盖了所有，那全程通过索引来加速查询以及获取结果就ok了</span><br><span class="line">mysql&gt; desc s1;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| id | int(11) | NO | | NULL | |</span><br><span class="line">| name | varchar(20) | YES | | NULL | |</span><br><span class="line">| gender | char(6) | YES | | NULL | |</span><br><span class="line">| email | varchar(50) | YES | | NULL | |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">4 rows in set (0.21 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select name from s1 where id&#x3D;1000; #没有任何索引</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+</span><br><span class="line">| 1 | SIMPLE | s1 | NULL | ALL | NULL | NULL | NULL | NULL | 2688336 | 10.00 | Using where |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create index idx_id on s1(id); #创建索引</span><br><span class="line">Query OK, 0 rows affected (4.16 sec)</span><br><span class="line">Records: 0 Duplicates: 0 Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select name from s1 where id&#x3D;1000; #命中辅助索引，但是未覆盖索引，还需要从聚集索引中查找name</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+-------+------+----------+-------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+-------+------+----------+-------+</span><br><span class="line">| 1 | SIMPLE | s1 | NULL | ref | idx_id | idx_id | 4 | const | 1 | 100.00 | NULL |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+-------+------+----------+-------+</span><br><span class="line">1 row in set, 1 warning (0.08 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select id from s1 where id&#x3D;1000; #在辅助索引中就找到了全部信息，Using index代表覆盖索引</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+-------+------+----------+-------------+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+-------+------+----------+-------------+</span><br><span class="line">| 1 | SIMPLE | s1 | NULL | ref | idx_id | idx_id | 4 | const | 1 | 100.00 | Using index |</span><br><span class="line">+----+-------------+-------+------------+------+---------------+--------+---------+-------+------+----------+-------------+</span><br><span class="line">1 row in set, 1 warning (0.03 sec)</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>覆盖索引的另外一个好处是对某些统计问题而言的。基于上一小结创建的表buy_log,查询计划如下</strong></font>&gt;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select count(*) from buy_log;</span><br><span class="line">+----+-------------+---------+-------+---------------+--------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table   | type  | possible_keys | key    | key_len | ref  | rows | Extra       |</span><br><span class="line">+----+-------------+---------+-------+---------------+--------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | buy_log | index | NULL          | userid | 4       | NULL |    7 | Using index |</span><br><span class="line">+----+-------------+---------+-------+---------------+--------+---------+------+------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>innodb存储引擎并不会选择通过查询聚集索引来进行统计。由于buy_log表有辅助索引，而辅助索引远小于聚集索引，选择辅助索引可以减少IO操作，故优化器的选择如上key为userid辅助索引</p>
<p><font color="red"><strong>对于（a,b）形式的联合索引，一般是不可以选择b中所谓的查询条件。但如果是统计操作，并且是覆盖索引，则优化器还是会选择使用该索引，如下</strong></font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#联合索引userid_2（userid,buy_date）,一般情况，我们按照buy_date是无法使用该索引的，但特殊情况下：查询语句是统计操作，且是覆盖索引，则按照buy_date当做查询条件时，也可以使用该联合索引</span><br><span class="line">mysql&gt; explain select count(*) from buy_log where buy_date &gt;&#x3D; &#39;2011-01-01&#39; and buy_date &lt; &#39;2011-02-01&#39;;</span><br><span class="line">+----+-------------+---------+-------+---------------+----------+---------+------+------+--------------------------+</span><br><span class="line">| id | select_type | table   | type  | possible_keys | key      | key_len | ref  | rows | Extra                    |</span><br><span class="line">+----+-------------+---------+-------+---------------+----------+---------+------+------+--------------------------+</span><br><span class="line">|  1 | SIMPLE      | buy_log | index | NULL          | userid_2 | 8       | NULL |    7 | Using where; Using index |</span><br><span class="line">+----+-------------+---------+-------+---------------+----------+---------+------+------+--------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="九-查询优化神器-explain"><a href="#九-查询优化神器-explain" class="headerlink" title="九 查询优化神器-explain"></a><strong>九 查询优化神器-explain</strong></h3><p><strong>关于explain命令相信大家并不陌生，具体用法和字段含义可以参考官网<a href="http://dev.mysql.com/doc/refman/5.5/en/explain-output.html">explain-output</a>，这里需要强调rows是核心指标，绝大部分rows小的语句执行一定很快（有例外，下面会讲到）。所以优化语句基本上都是在优化rows。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行计划：让mysql预估执行操作(一般正确)</span><br><span class="line">    all &lt; index &lt; range &lt; index_merge &lt; ref_or_null &lt; ref &lt; eq_ref &lt; system&#x2F;const</span><br><span class="line">    id,email</span><br><span class="line">    </span><br><span class="line">    慢：</span><br><span class="line">        select * from userinfo3 where name&#x3D;&#39;alex&#39;</span><br><span class="line">        </span><br><span class="line">        explain select * from userinfo3 where name&#x3D;&#39;alex&#39;</span><br><span class="line">        type: ALL(全表扫描)</span><br><span class="line">            select * from userinfo3 limit 1;</span><br><span class="line">    快：</span><br><span class="line">        select * from userinfo3 where email&#x3D;&#39;alex&#39;</span><br><span class="line">        type: const(走索引)</span><br></pre></td></tr></table></figure>

<p><strong><a href="http://blog.itpub.net/29773961/viewspace-1767044/">http://blog.itpub.net/29773961/viewspace-1767044/</a></strong></p>
<h3 id="十-慢查询优化的基本步骤"><a href="#十-慢查询优化的基本步骤" class="headerlink" title="十 慢查询优化的基本步骤"></a><strong>十 慢查询优化的基本步骤</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.先运行看看是否真的很慢，注意设置SQL_NO_CACHE</span><br><span class="line">1.where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高</span><br><span class="line">2.explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）</span><br><span class="line">3.order by limit 形式的sql语句让排序的表优先查</span><br><span class="line">4.了解业务方使用场景</span><br><span class="line">5.加索引时参照建索引的几大原则</span><br><span class="line">6.观察结果，不符合预期继续从0分析</span><br></pre></td></tr></table></figure>

<h3 id="十一-慢日志管理"><a href="#十一-慢日志管理" class="headerlink" title="十一 慢日志管理"></a>十一 慢日志管理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">慢日志</span><br><span class="line">    - 执行时间 &gt; 10</span><br><span class="line">    - 未命中索引</span><br><span class="line">    - 日志文件路径</span><br><span class="line">    </span><br><span class="line">配置：</span><br><span class="line">    - 内存</span><br><span class="line">        show variables like &#39;%query%&#39;;</span><br><span class="line">        show variables like &#39;%queries%&#39;;</span><br><span class="line">        set global 变量名 &#x3D; 值</span><br><span class="line">    - 配置文件</span><br><span class="line">        mysqld --defaults-file&#x3D;&#39;E:\wupeiqi\mysql-5.7.16-winx64\mysql-5.7.16-winx64\my-default.ini&#39;</span><br><span class="line">        </span><br><span class="line">        my.conf内容：</span><br><span class="line">            slow_query_log &#x3D; ON</span><br><span class="line">            slow_query_log_file &#x3D; D:&#x2F;....</span><br><span class="line">            </span><br><span class="line">        注意：修改配置文件之后，需要重启服务</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>日志管理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL日志管理</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">错误日志: 记录 MySQL 服务器启动、关闭及运行错误等信息</span><br><span class="line">二进制日志: 又称binlog日志，以二进制文件的方式记录数据库中除 SELECT 以外的操作</span><br><span class="line">查询日志: 记录查询的信息</span><br><span class="line">慢查询日志: 记录执行时间超过指定时间的操作</span><br><span class="line">中继日志： 备库将主库的二进制日志复制到自己的中继日志中，从而在本地进行重放</span><br><span class="line">通用日志： 审计哪个账号、在哪个时段、做了哪些事件</span><br><span class="line">事务日志或称redo日志： 记录Innodb事务相关的如事务执行时间、检查点等</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">一、bin-log</span><br><span class="line">1. 启用</span><br><span class="line"># vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">log-bin[&#x3D;dir\[filename]]</span><br><span class="line"># service mysqld restart</span><br><span class="line">2. 暂停</span><br><span class="line">&#x2F;&#x2F;仅当前会话</span><br><span class="line">SET SQL_LOG_BIN&#x3D;0;</span><br><span class="line">SET SQL_LOG_BIN&#x3D;1;</span><br><span class="line">3. 查看</span><br><span class="line">查看全部：</span><br><span class="line"># mysqlbinlog mysql.000002</span><br><span class="line">按时间：</span><br><span class="line"># mysqlbinlog mysql.000002 --start-datetime&#x3D;&quot;2012-12-05 10:02:56&quot;</span><br><span class="line"># mysqlbinlog mysql.000002 --stop-datetime&#x3D;&quot;2012-12-05 11:02:54&quot;</span><br><span class="line"># mysqlbinlog mysql.000002 --start-datetime&#x3D;&quot;2012-12-05 10:02:56&quot; --stop-datetime&#x3D;&quot;2012-12-05 11:02:54&quot; </span><br><span class="line"></span><br><span class="line">按字节数：</span><br><span class="line"># mysqlbinlog mysql.000002 --start-position&#x3D;260</span><br><span class="line"># mysqlbinlog mysql.000002 --stop-position&#x3D;260</span><br><span class="line"># mysqlbinlog mysql.000002 --start-position&#x3D;260 --stop-position&#x3D;930</span><br><span class="line">4. 截断bin-log（产生新的bin-log文件）</span><br><span class="line">a. 重启mysql服务器</span><br><span class="line">b. # mysql -uroot -p123 -e &#39;flush logs&#39;</span><br><span class="line">5. 删除bin-log文件</span><br><span class="line"># mysql -uroot -p123 -e &#39;reset master&#39; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二、查询日志</span><br><span class="line">启用通用查询日志</span><br><span class="line"># vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">log[&#x3D;dir\[filename]]</span><br><span class="line"># service mysqld restart</span><br><span class="line"></span><br><span class="line">三、慢查询日志</span><br><span class="line">启用慢查询日志</span><br><span class="line"># vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">log-slow-queries[&#x3D;dir\[filename]]</span><br><span class="line">long_query_time&#x3D;n</span><br><span class="line"># service mysqld restart</span><br><span class="line">MySQL 5.6:</span><br><span class="line">slow-query-log&#x3D;1</span><br><span class="line">slow-query-log-file&#x3D;slow.log</span><br><span class="line">long_query_time&#x3D;3</span><br><span class="line">查看慢查询日志</span><br><span class="line">测试:BENCHMARK(count,expr)</span><br><span class="line">SELECT BENCHMARK(50000000,2*3);</span><br></pre></td></tr></table></figure>



<h3 id="十三-索引类型"><a href="#十三-索引类型" class="headerlink" title="十三 索引类型"></a>十三 索引类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引</span><br><span class="line"></span><br><span class="line">主键索引</span><br><span class="line">   其值唯一标识表中的每一行。该列称为表的主键,和业务无关，是唯一键索引的特定类型</span><br><span class="line">普通索引</span><br><span class="line">   create index index_name on test(name);</span><br><span class="line">   alter table test add index index_name(name);</span><br><span class="line">   在where条添加字后面的列建立索引才会加快查询速度</span><br><span class="line">   select id,name from test where state&#x3D;1 order by id group by name;</span><br><span class="line">唯一索引</span><br><span class="line">   如果在employee表中职员的姓(lname)上创建了唯一索引，则任何两个员工都不能同姓。</span><br><span class="line">前缀索引</span><br><span class="line">   根据字段的前N个字符建立索引;create index index_name on test(name(8));</span><br><span class="line">联合索引</span><br><span class="line">   多个字段建立一个索引</span><br></pre></td></tr></table></figure>

<h3 id="十四-不走索引的情况"><a href="#十四-不走索引的情况" class="headerlink" title="十四. 不走索引的情况"></a>十四. 不走索引的情况</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引</span><br><span class="line"></span><br><span class="line">主键索引</span><br><span class="line">   其值唯一标识表中的每一行。该列称为表的主键,和业务无关，是唯一键索引的特定类型</span><br><span class="line">普通索引</span><br><span class="line">   create index index_name on test(name);</span><br><span class="line">   alter table test add index index_name(name);</span><br><span class="line">   在where条添加字后面的列建立索引才会加快查询速度</span><br><span class="line">   select id,name from test where state&#x3D;1 order by id group by name;</span><br><span class="line">唯一索引</span><br><span class="line">   如果在employee表中职员的姓(lname)上创建了唯一索引，则任何两个员工都不能同姓。</span><br><span class="line">前缀索引</span><br><span class="line">   根据字段的前N个字符建立索引;create index index_name on test(name(8));</span><br><span class="line">联合索引</span><br><span class="line">   多个字段建立一个索引</span><br><span class="line">1、select没有用where 没有查询条件，或者查询条件没有建立索引   没有where的</span><br><span class="line">2、将来结果集的条目占总数据量的30%的时候。优化器觉得走全表扫描更好，</span><br><span class="line">3、索引本身失效，统计数据不真实   (比如表里面内容频繁发生改变，索引更新没跟上，索引就失效了)索引有自我维护的能力。   删除重建索引</span><br><span class="line">4、隐式转换导致索引失效.这一点应当引起重视.也是开发中经常会犯的错误.</span><br><span class="line">5、查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，*，&#x2F;，! 等) </span><br><span class="line">6、&lt;&gt; 不等于 ，not in 不走索引</span><br><span class="line">7、like &quot;%_&quot; 百分号在最前面不走</span><br></pre></td></tr></table></figure>

<h3 id="十五-索引性能排序"><a href="#十五-索引性能排序" class="headerlink" title="十五. 索引性能排序"></a>十五. 索引性能排序</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引性能排序</span><br><span class="line">1、index：Full Index Scan，index与ALL区别为index类型只遍历索引树</span><br><span class="line">2、range:索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行。 where条件后  &gt; &lt; &gt;&#x3D; &lt;&#x3D; in or between and</span><br><span class="line">3、ref：使用非唯一索引扫描或者唯一索引的前缀扫描，返回匹配某个单独值的记录行</span><br><span class="line">4、eq_ref：类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</span><br><span class="line">5、const、system：当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。</span><br><span class="line">如将主键置于where列表中，MySQL就能将该查询转换为一个常量</span><br><span class="line">6、NULL：找一个不存在的值</span><br><span class="line">7、Extra: </span><br></pre></td></tr></table></figure>



<h3 id="十六-生产案例"><a href="#十六-生产案例" class="headerlink" title="十六. 生产案例"></a>十六. 生产案例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一、发现sql语句慢</span><br><span class="line">   select name from country where name like &quot;C%&quot; limit 10;</span><br><span class="line">二、desc country ----&gt; 看表结构发现没有创建索引</span><br><span class="line">三、看执行计划    possible_keys key Extra 都是null 没有索引或者没走索引</span><br><span class="line">   explain select name from country where name like &quot;C%&quot; limit 10;</span><br><span class="line">四、发现没走索引 创建索引 适不适合？     看唯一值多不多，多就可以（也可以建立联合索引-让唯一值更多）</span><br><span class="line">   select count(*) from country;  ---239</span><br><span class="line">   select count(distinct name) from country; ---239</span><br><span class="line">五、建立索引</span><br><span class="line">   alter table country add index name_idx(name);</span><br><span class="line">六、验证</span><br><span class="line">   explain select name from country where name like &quot;C%&quot; limit 10;</span><br></pre></td></tr></table></figure>



<h3 id="十七-建立索引规范"><a href="#十七-建立索引规范" class="headerlink" title="十七. 建立索引规范"></a>十七. 建立索引规范</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.选择唯一性索引 注意：如果重复值较多，可以考虑采用联合索引</span><br><span class="line">2.为经常需要排序、分组和联合操作的字段建立索引</span><br><span class="line">3.为常作为查询条件的字段建立索引    经常where的</span><br><span class="line">4.尽量使用前缀来索引</span><br><span class="line">5.限制索引的数目</span><br><span class="line">6.删除不再使用或者很少使用的索引</span><br></pre></td></tr></table></figure>

<h3 id="十八-备份相关"><a href="#十八-备份相关" class="headerlink" title="十八. 备份相关"></a>十八. 备份相关</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">热备</span><br><span class="line">在数据库正常业务是，备份数据，并且能够一致性恢复 </span><br><span class="line">冷备 </span><br><span class="line">关闭数据库业务，数据库没有任何变更的情况下，进行备份数据. </span><br><span class="line">温备 </span><br><span class="line">锁表备份，只能查询不能修改</span><br><span class="line"></span><br><span class="line">逻辑备份: </span><br><span class="line">基于SQL语句进行备份: mysqldump mysqlbinlog</span><br><span class="line">物理备份: </span><br><span class="line">基于磁盘文件备份: cp xtrabackup(XBK)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1）-A 全备参数</span><br><span class="line">mysqldump -uroot -p -A &gt;&#x2F;backup&#x2F;full.sql</span><br><span class="line">2）-B db1 db2 db3 备份多个单库</span><br><span class="line">mysqldump -uroot -p -B oldboy world &gt;&#x2F;backup&#x2F;bak.sql</span><br><span class="line">3）备份单个或多个表</span><br><span class="line">mysqldump -uroot -p world city country &gt;&#x2F;backup&#x2F;bak1.sql</span><br><span class="line">）-F 在备份开始时，刷新一个新binlog日志</span><br><span class="line"></span><br><span class="line">4）--master-data&#x3D;2 以注释的形式，保存备份开始时间点的binlog的状态信息 </span><br><span class="line">5）加上--single-transaction ，对innodb可以不锁表热备，对非innodb表可以实现自动锁表功能</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p -A -R --triggers --master-data&#x3D;2 --single-transaction &gt;&#x2F;backup&#x2F;full$(date +%F).sql</span><br><span class="line">(1)以注释的形式，保存备份开始时间点的binlog的状态信息  --master-data&#x3D;2 </span><br><span class="line">(2)对innodb可以不锁表热备  --single-transaction</span><br><span class="line">(3)对非innodb表可以实现自动锁表功能 --single-transaction</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
</search>
