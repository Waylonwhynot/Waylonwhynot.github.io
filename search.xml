<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mysql-01</title>
    <url>/2021/01/10/mysql-01/</url>
    <content><![CDATA[<p>sql 库表操作</p>
<a id="more"></a>
<h2 id="1-基本库表语句"><a href="#1-基本库表语句" class="headerlink" title="1. 基本库表语句"></a>1. 基本库表语句</h2><p>1、mysql是什么？<br>    mysql本质就是一个c/s架构的套接字软件</p>
<p>2、数据库基本概念<br>    数据库服务器： 运行有数据库管理软件的计算机<br>    数据库管理软件：mysql<br>    库：文件夹<br>    表：文件<br>    记录：文件中的一行的内容</p>
<p>3、针对库、表、记录的操作<br>    文件夹：<br>        增<br>            create database db12 charset utf8;<br>        改<br>            alter database db12 charset gbk;<br>        查<br>            show databases;<br>            show create database db12;<br>        删<br>            drop database db12;</p>
<pre><code>文件：
    use db1; # 切换文件夹

    增
        create table t1(id int,name char(16));
    改
        alter table db1.t1 modify name char(15);
        alter table db1.t1 change name NAME char(10);
    查
        show tables;
        show create table t1;
        desc t1;
        desc db1.t1;

    删
        drop table db1.t1;


文件中一行行内容
    增
        insert into db1.t1(id,name) values
        (1,&#39;egon&#39;),
        (2,&#39;alexdsb&#39;),
        (3,&#39;wxxsb&#39;);

        insert into db1.t1(name) values
        (&#39;egon&#39;),
        (&#39;alexdsb&#39;),
        (&#39;wxxsb&#39;);



    改
        update db1.t1 set name=&#39;SB&#39; where id=3;
    查
        select id,name from db1.t1;

    删
        delete from db1.t1 where id &gt;= 2;

        # delete 只能用于删除符合条件的某几条记录，不能用于清空表
        delete from t1;

        # 清空表应该使用truncate,不仅删除所有记录，而且将自增字段的值归0
        truncate t1;</code></pre>
<h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><p>建表的完整语法：<br>    create table 表名(<br>    字段名1 类型[(宽度) 约束条件],<br>    字段名2 类型[(宽度) 约束条件],<br>    字段名3 类型[(宽度) 约束条件]<br>    );<br>注意：建表时最后一个字段后一定不要加逗号</p>
<p>1、存储引擎<br>    存储引擎就是表的类型<br>    不同的类型会对应不同处理机制</p>
<pre><code>create table t3(id int)engine=&#39;innodb&#39;;
create table t4(id int)engine=&#39;myisam&#39;;
create table t5(id int)engine=&#39;blackhole&#39;;
create table t6(id int)engine=&#39;memory&#39;;

insert into t3 values(1);
insert into t4 values(1);
insert into t5 values(1);
insert into t6 values(1);</code></pre>
<p>2、数据类型<br>    设置sql模式为严格模式<br>        set global sql_mode=”strict_trans_tables”;<br>        需要重启客户端，会重新加载sql_mode</p>
<pre><code>1. 数字类型：整型（默认有符号），浮点型
    1.1 整型
        强调：对于整型类型来说，数据类型的宽度限制的是显示宽度而非存储宽度
        create table t7(id tinyint);
        insert into t7 values(-1);

        create table t8(id tinyint unsigned);


        create table t9(id int unsigned);
        insert into t9 values(4294967295);

        create table t10(id int(3) unsigned);

    1.2 浮点型（数的宽度-包含小数，小数位)

        create table t14(x float(255,30)); 整数位就是225
        create table t15(x double(255,30));
        create table t16(x decimal(65,30));

        insert into t14 values(1.111111111111111111111111111111);
        insert into t15 values(1.111111111111111111111111111111);
        insert into t16 values(1.111111111111111111111111111111);

2、字符类型：char，varchar</code></pre>
<blockquote>
<p>varchar不一定更省内存，当存储额数据刚好到达限制的时候,varchar刚好大一个头部信息1-2bytes    varchar(4) char(4) 存储’abcd’<br>        char(5)<br>            相同点：最大能存放5个字符<br>            不同点：char 定长<br>                传入3个字符，那么用空格补全两个空格</p>
</blockquote>
<pre><code>    varchar(5)
        相同点:最大能存放5个字符
        不同点：
            varchar变长
            传入3个字符，就存3个字符


    create table t22(x char(5));
    create table t23(x varchar(5));

    insert into t22 values(&#39;a&#39;);
    insert into t23 values(&#39;a&#39;);


    select char_length(x) from t22;
    select char_length(x) from t23;
    注意：
    1、
        针对char类型，在存放时会将字符补全为5个，然后在查询时又会将末尾补全的空格去掉，如果不想让mysql
        去掉末尾的空格，应该修改sql模式
        set global sql_mode=&quot;strict_trans_tables,PAD_CHAR_TO_FULL_LENGTH&quot;

    2、
        查询语句中where  字段=“值    ”，会将值右面的空格去掉后再做比较



    egon
    alex
    lxx

    char(5)
    egon |alex |lxx  |

    varchar(5)
    1bytes+egon|1bytes+alex|1bytes+lxx|





3、日期类型：time，date，datetime，timestamp，year，
    create table student(
        id int primary key auto_increment,
        name char(16),
        born_year year,
        class_time time,
        birth date,
        reg_time datetime
    );

    insert into student(name,born_year,class_time,birth,reg_time) values
    (&#39;egon1&#39;,now(),now(),now(),now());



    create table t17(x datetime);
    create table t18(x timestamp);
    create table t19(x datetime not null default now());

4、枚举类型enum与集合类型set
    enum:多选一
    set：多选多

    create table emp(
        id int primary key auto_increment,
        name char(16),
        sex enum(&#39;male&#39;,&#39;female&#39;,&#39;unknow&#39;),
        hobbies set(&#39;play&#39;,&#39;read&#39;,&#39;sleep&#39;)
    );


    insert into emp(name,sex,hobbies) values
    (&#39;egon&#39;,&#39;male&#39;,&#39;play,read&#39;);</code></pre>
<h3 id="3-表操作之约束条件"><a href="#3-表操作之约束条件" class="headerlink" title="3.表操作之约束条件"></a>3.表操作之约束条件</h3><h1 id="约束条件：约束条件是在类型之外为字段附加的限制"><a href="#约束条件：约束条件是在类型之外为字段附加的限制" class="headerlink" title="约束条件：约束条件是在类型之外为字段附加的限制"></a>约束条件：约束条件是在类型之外为字段附加的限制</h1><p>强调：<br>如果表的类型为innodb存储引擎，那么在创建表时，必须定义一个主键<br>如果不指定，innodb存储 引擎会自上而下寻找一个不为空且唯一的字段当做主键<br>如果不指定并且也没有not null+unique的字段，那么innodb存储引擎会生成一个隐藏的字段<br>当做主键</p>
<p>#1、primary key<br>    单从约束角度去看，主键的约束效果就是not null + unique<br>    但其实innodb存储引擎会以主键为准创建聚集索引</p>
<pre><code>结论：
    如果表的类型为innodb，那么在建立表时，应该有一个id字段
    并且
    id int primary key auto_increment,
原因:
    为什么一定要有主键,因为MySQL考虑到,你以后要查询的时候会用到。总需要有一个字段作为依据，这个字段就是主键,以这个字段为基础，建立B+tree索引结构，意义是按照主键字段查询的时候可以加速查询。Innodb存储引擎建表的时候一定要有主键，Mysql就会以ID字段为基准造索引，以ID字段查的时候就会用到。</code></pre>
<p>#2、unique key<br>create table t25(x char(5) unique);<br>create table t26(<br>    x int,<br>    y char(5),<br>    constraint uni_x unique key(x)<br>);</p>
<p>create table services(<br>    id int,<br>    name char(16),<br>    ip char(15),<br>    port int,<br>    unique key(ip,port)<br>);</p>
<p>not null unqiue</p>
<p>#3、foreign key<br>    寻找两张表之间关系的步骤；employee    department<br>        1、先站在左表的角度，去找左表employee的多条记录是否可以对应右表department的一条记录<br>            翻译结果即：多个员工能否属于一个部门<br>            如果可以则左表多对一右面的关系找成功，还没有结束，需继续<br>        2、在站在右表的角度，去找右表department的多条记录是否可以对应左表employee的一条记录<br>            翻译结果即：多个部门能否包含一个员工<br>            如果不可以，则右表多对一左面的关系找失败</p>
<pre><code>        最终只剩下左表employee多对一右表department的关系成立，如何建立该关系
        在左表employee中增加一个字段dep_id,该字段的值来自于department，并且该字段的值可以重复




    建立外键时需要注意的问题有：
        1、被关联的字段必须是一个key
        2、在创建表示，应该先建被关联表，再创建关联的表
        3、在插入记录时，应该先往被关联表中插入记录，再往关联的表中插入记录

    create table dep(
        id int primary key auto_increment,
        dname varchar(20),
        comment varchar(50)
    );

    create table emp(
        id int primary key auto_increment,
        name varchar(15),
        sex enum(&#39;male&#39;,&#39;female&#39;),
        salary float(10,2),
        dep_id int,
        foreign key(dep_id) references dep(id)
        on delete cascade
        on update cascade
    );


    insert into dep(dname,comment) values
    (&#39;IT&#39;,&#39;技术能力有限部门&#39;),
    (&#39;Sale&#39;,&#39;销售能力不足部门&#39;),
    (&#39;HR&#39;,&#39;招不到人部门&#39;);

    insert into emp(name,sex,salary,dep_id) values
    (&#39;egon&#39;,&#39;male&#39;,3.1,1),
    (&#39;alex&#39;,&#39;male&#39;,3.3,2),
    (&#39;lxxdsb&#39;,&#39;female&#39;,3.4,1),
    (&#39;wxx&#39;,&#39;male&#39;,2.3,3),
    (&#39;cxx&#39;,&#39;male&#39;,4.3,3)
    ;



多对一：单向的多对一
多对多：双向的多对一
一对一：</code></pre>
<h3 id="4-单表查询"><a href="#4-单表查询" class="headerlink" title="4.单表查询"></a>4.单表查询</h3><p>单表查询语法:<br>    select distinct 字段1,字段2,字段3,… from 表名<br>        where 条件<br>        group by 分组的字段<br>        having 条件<br>        order by 排序字段<br>        limit 限制显示的条数;</p>
<p>执行优先级<br>def from():<br>    pass</p>
<p>def where():<br>    pass</p>
<p>def group():<br>    pass</p>
<p>def having():<br>    pass</p>
<p>def distinct():<br>    pass</p>
<p>def order():<br>    pass</p>
<p>def limit():<br>    pass</p>
<p>def select():<br>    f=from()<br>    vt1=where(f,条件)<br>    vt2=group(v1,分组字段)<br>    vt3=having(vt2,条件)<br>    vt4=distinct(vt3)<br>    vt5=order(vt4,排序的字段)<br>    vt6=limit(vt5,限制显示的条数)<br>    print(vt6)</p>
<p>select * from db1.t1</p>
<p>名字:egon     薪资：7300</p>
<p>select concat(‘名字: ‘,name,’sb’),concat(‘薪资：’,salary) from db2.emp;</p>
<p>select concat(name,’:’,salary) info from emp;<br>select concat_ws(‘:’,name,salary,age) info from emp;</p>
<p>select<br>(<br>    case<br>        when name = ‘egon’ then<br>            concat(name,’_nb’)<br>        when name = ‘alex’ then<br>            concat(name,’_dsb’)<br>        else<br>            concat(name,’_sb’)<br>    end<br>) as new_name</p>
<p>from emp;</p>
<blockquote>
<p>查出每个部门年龄在三十岁以上的人员的平均工资<br>select post,avg(salary) from emp<br>    where age &gt;= 30<br>    group by post</p>
</blockquote>
<blockquote>
<p>查出平均薪资在10000以上部门<br>select post,avg(salary) from emp<br>    group by post<br>    having avg(salary) &gt; 10000;</p>
</blockquote>
<blockquote>
<p>查出30岁以上员工的平均薪资在10000以上部门<br>select post,avg(salary) from emp<br>    where age &gt;= 30<br>    group by post<br>    having avg(salary) &gt; 10000;</p>
</blockquote>
<p>select * from emp where name regexp ‘^jin.*(g|n)$’;</p>
<h3 id="5-连表操作"><a href="#5-连表操作" class="headerlink" title="5.连表操作"></a>5.连表操作</h3><p>连表操作：</p>
<pre><code>1、inner join：只取两张表有对应关系的部分
select * from emp inner join dep
    on emp.dep_id = dep.id
    ;


2、left join:在inner join的基础上保留左表中的记录
select * from emp left join dep
    on emp.dep_id = dep.id
    ;

3、right join:在inner join的基础上保留右表中的记录
select * from emp right join dep
    on emp.dep_id = dep.id
    ;

4、full join：在内连接的基础上左右两边的记录都保留
select * from emp left join dep on emp.dep_id = dep.id
union
select * from emp right join dep on emp.dep_id = dep.id
    ;</code></pre>
<p>#示例1：找出年龄大于25岁的员工以及员工所在的部门</p>
<pre><code>select emp.name,dep.name from emp inner join dep
    on emp.dep_id = dep.id
    where age &gt; 25
    ;</code></pre>
<p>#示例1：找出平均年龄&gt;=20的部门名<br>    select dep.name,avg(age) from emp inner join dep<br>        on emp.dep_id = dep.id<br>        group by dep.name<br>        having avg(age) &gt;= 20;</p>
<pre><code>    select name from dep where id in
    (select  dep_id from emp group by dep_id having avg(age) &gt;= 20);



    select * from emp inner join dep
    on emp.dep_id = dep.id
    where dep.name = &#39;销售&#39;;


    select * from emp where dep_id =
    (select id from dep where name =&#39;销售&#39;);



    select * from t2 inner join

    (select * from emp inner join dep
    on emp.dep_id = dep.id) as t1

    on t2.xx = t1.yy


    练习：查询每个部门最新入职的那位员工</code></pre>
<p>select t1.name,t1.hire_date,t1.post,t2.post,t2.max_date from emp as t1<br>inner join<br>(select post,max(hire_date) as max_date from emp group by post) as t2<br>on t1.post = t2.post<br>where t1.hire_date = t2.max_date<br>;</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus相关</title>
    <url>/2021/04/18/prometheus%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>Prometheus 进阶</p>
<a id="more"></a>

<ol>
<li>什么是时序<br>指标名称{标签} + 时间戳<br>不断的打点 , 按照时间依次生成值</li>
</ol>
<ol start="2">
<li><p>日志转时序<br>哪个机器 路径 匹配正则  计数、关键字<br>metrics timestamp 3</p>
</li>
<li><p>psm 服务树  gpa</p>
</li>
<li><p>promethues 高基数<br>理解为 以metric 为查询 条件，组合成的结果序列较多，就称为高基数 ， 是旨在 查询和告警条件下</p>
</li>
<li><p>grafana 设置成row<br>懒加载，防止一次请求过多；做隔离的</p>
</li>
</ol>
]]></content>
      <categories>
        <category>prometheus</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-cmdb</title>
    <url>/2020/11/15/py-cmdb/</url>
    <content><![CDATA[<p>cmdb</p>
<a id="more"></a>

<h4 id="一-为什么要做cmdb？"><a href="#一-为什么要做cmdb？" class="headerlink" title="一. 为什么要做cmdb？"></a>一. 为什么要做cmdb？</h4><pre><code>1. 项目上线的流程： 
    调研需求分析 ---》 开会确定日期 ---》 开发程序 ---》 项目测试人员 ---》代码上线（运维来负责）

    传统上线方式：
        直接代码解压 ，启服务， 访问项目， 进行测试

        弊端：

            - 手工上线  运维来干预 
            - 加机器， 需要重复进行代码的部署

        优化策略：
            代码上线系统 

            必要条件：需要知道服务器的信息 （服务器的主机名， 硬盘大小。。。）

2. 一个公司即将上市， 审查公司的资产 

    传统方式,统计公司服务器资产的方式：
        excel表格 
            最后信息会变得不准确
            导致年底进行审计的时候，资产变得无法进行准确的统计</code></pre>
<p>​<br>    CMDB：</p>
<pre><code>    配置管理数据库      
    记录服务器的资产信息（包括 机架位置， 主机名，硬盘， 网卡， 产品线， 管理员等）的      
    位置：
        是自动化运维的基石</code></pre>
<p>​            </p>
<h4 id="二-cmdb实现的方案："><a href="#二-cmdb实现的方案：" class="headerlink" title="二. cmdb实现的方案："></a>二. cmdb实现的方案：</h4><pre><code> 核心的代码：</code></pre>
<ul>
<li><ol>
<li>linux相关的命令   megacli </li>
</ol>
</li>
<li><ol start="2">
<li>Python的代码执行linux命令， 得到结果返回给服务端<br>​            </li>
</ol>
</li>
<li><p>业内：</p>
<ul>
<li>agent方案<ul>
<li>优点：速度快</li>
<li>缺点：每一台机器都需要部署，维护</li>
</ul>
</li>
<li>ssh类方案<ul>
<li>优点：只需要在中控机上部署</li>
<li>缺点：速度慢</li>
</ul>
</li>
<li>salt方案<br>  使用场景：公司正在使用saltstack</li>
</ul>
</li>
<li><p>目标：    </p>
<pre><code>  写一份代码， 通过改变配置实现三套方案       
  客户端的采集</code></pre>
</li>
</ul>
<h4 id="三-代码实现："><a href="#三-代码实现：" class="headerlink" title="三. 代码实现："></a>三. 代码实现：</h4><ul>
<li>开发过程中遇到的问题<br>  解决的方案：<pre><code>  - 采用的是高内聚低耦合的思想，对代码进行高度的封装和抽离
  - 集成了默认的全局配置文件以及自定制配置文件
  - Django 中间件的写法，对插件进行可插拔式的采集23</code></pre>
</li>
</ul>
<p>目录结构：<br>    bin  ： 核心的启动文件  start.py<br>    conf : 配置文件夹<br>    lib  ：库文件<br>    log  : 不建议将日志文件夹放在项目中   /var/log  mkidr /logs/cmdb/<br>    src  : 核心的源代码目录<br>    test : 开发的过程中， 需要进行代码的调试<br>​            </p>
<ol>
<li>高级配置文件的实现 ： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    django的配置：</span><br><span class="line">        <span class="keyword">from</span> django.conf <span class="keyword">import</span> global_settings, settings</span><br><span class="line">        settings.TIME_ZONE</span><br><span class="line">    ```    </span><br><span class="line">        将自定制的配置和全局的配置集成在一个对象上， 之后想要使用任何属性的时候， 直接可以通过此对象获得</span><br><span class="line">    </span><br><span class="line">    技术要点：</span><br><span class="line">        getattr : 反射获取 对应的值</span><br><span class="line">        setattr : 反射设置</span><br><span class="line">​        </span><br><span class="line"><span class="number">2.</span> 编程思想：</span><br><span class="line">    </span><br><span class="line">高内聚低耦合</span><br><span class="line">    </span><br><span class="line">写一个类或者一个函数的时候， 我们需要明确一下次函数或者此类主要负责干啥的</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>():</span></span><br><span class="line">    <span class="comment">#### 和用户相关的一些逻辑</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getUserInfo</span>():</span></span><br><span class="line">        <span class="comment">#### 获取用户的信息</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">### 处理订单相关的业务逻辑</span></span><br><span class="line">        </span><br><span class="line">​            </span><br><span class="line">可插拔式的配置：</span><br><span class="line">```python</span><br><span class="line">settings.py:</span><br><span class="line">    PLUGINS_DICT = &#123;</span><br><span class="line">        <span class="string">&quot;basic&quot;</span> : <span class="string">&#x27;src.plugins.basic.Basic&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;disk&quot;</span> : <span class="string">&#x27;src.plugins.disk.Disk&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;memory&quot;</span> : <span class="string">&#x27;src.plugins.memory.Memory&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;nic&quot;</span> : <span class="string">&#x27;src.plugins.nic.Nic&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;cpu&quot;</span> : <span class="string">&#x27;src.plugins.cpu.Cpu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    参考django的中间件</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.plugins_dict.items():</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            k: basic </span></span><br><span class="line"><span class="string">            v: src.plugins.basic.Basic  字符串</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            module_path, cls_name = v.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">            module = importlib.import_module(module_path)  <span class="comment">#### 导入路径</span></span><br><span class="line">            cls = getattr(module, cls_name)   <span class="comment">##### 获取对应的类名</span></span><br><span class="line">            cls().process()    <span class="comment">#### 执行该类对应的方法</span></span><br></pre></td></tr></table></figure>
插件的代码：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;memory&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>​<br>​<br>3. 插件代码重复：</p>
<ul>
<li>解决的方法：<ul>
<li><ol>
<li>base.py 写一个基类， 所有的插件继承这个基类， 只需要执行该基类中的方法</li>
</ol>
</li>
<li><ol start="2">
<li>cmd_func 抽离出去，当做参数传给execute函数</li>
</ol>
</li>
</ul>
</li>
</ul>
<ol start="4">
<li>并发采集服务器信息(agent方式不需要考虑，ssh方式需要考虑)</li>
</ol>
<ul>
<li>并发采集<ul>
<li>并发采集，采用线程池<ul>
<li>Python2：线程池 无；进程池 有；</li>
<li>Python3：线程池 有；进程池 有；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>from concurrent.futures import ThreadPoolExecutor，ProcessPoolExecutor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">### 线程池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor，ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">i</span>):</span></span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = ThreadPoolExecutor(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># run(i)</span></span><br><span class="line">    p.submit(run, i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>遇到的问题</p>
<ul>
<li>唯一标识的问题<ul>
<li>需要选出一个唯一的字段，作为唯一标识来进行区分服务器信息</li>
</ul>
</li>
<li>解决<ul>
<li>sn 主板序列号</li>
<li>问题，虚拟机和物理机一个sn号，导致服务器信息采集不完整</li>
<li>hostname</li>
<li>规范</li>
<li><ol start="0">
<li>1000台服务器，需要唯一的主机名</li>
</ol>
</li>
<li><ol>
<li>将服务器主机名，录入到后台管理数据库中（登记服务器）</li>
</ol>
</li>
<li><ol start="2">
<li>再分配给技术之前，需要运行一下采集的程序，此时收集上来的数据都是最原始的。可以将原始数据中过的hostname保存到一个文件当中，以后，我们再向后端post数据的时候，以文件中的hostname为一个标准<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Agent</span>(<span class="params">Base</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collect</span>(<span class="params">self</span>):</span></span><br><span class="line">        res = PluginsManager().execute()</span><br><span class="line">        <span class="comment">###唯一标识的问题</span></span><br><span class="line">        hostname = res[<span class="string">&#x27;basic&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;hostname&#x27;</span>]</span><br><span class="line">        info = open(os.path.join(settings.BASEDIR, <span class="string">&#x27;conf/cert&#x27;</span>), <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">        <span class="comment">###第一次运行，需要将原始的主机名写入到文件中</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> info.strip():</span><br><span class="line">            <span class="keyword">with</span> open(os.path.join(settings.BASEDIR, <span class="string">&#x27;conf/cert&#x27;</span>), <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                fp.write(hostname)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[<span class="string">&#x27;basic&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;hostname&#x27;</span>] = info</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> res.items():</span><br><span class="line">            print(k, v)</span><br><span class="line">        self.postInfo(res)</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>API验证</p>
</li>
</ol>
<ul>
<li><p>自定义的验证</p>
</li>
<li><p>对称加密</p>
<ul>
<li>缺点：key是明文传输的<ul>
<li>解决方法：发过去的key加密</li>
<li>要求每次加密的key都是动态的</li>
</ul>
</li>
</ul>
</li>
<li><p>非对称加密</p>
</li>
</ul>
<p>第一种方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对称加密</span><br><span class="line">client</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;asdasdasd&#x27;</span></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://127.0.0.1:8000/testapi&#x27;</span>, headers=&#123;<span class="string">&#x27;key&#x27;</span>:key&#125;)</span><br><span class="line">print(res.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">server_key = <span class="string">&#x27;asdasdasds&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testapi</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        clent_key = request.META[<span class="string">&#x27;HTTP_KEY&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> server_key != clent_key:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;非法请求&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.body)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二种方式，堆成加密，密文（1.时间，2.加密出错）<br>3.连接redis，设置key的过期时间 20s</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib,time</span><br><span class="line">client_time = time.time()</span><br><span class="line">tmp = <span class="string">&quot;%s|%s&quot;</span> %(key, client_time)</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(bytes(tmp, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">res = m.hexdigest()</span><br><span class="line">print(res)</span><br><span class="line">info = <span class="string">&quot;%s|%s&quot;</span> %(res, client_time)</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://127.0.0.1:8000/testapi&#x27;</span>, headers=&#123;<span class="string">&#x27;key&#x27;</span>:info&#125;)</span><br><span class="line">print(res.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib,time</span><br><span class="line">server_key = <span class="string">&#x27;asdasdasd&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testapi</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        client_key = request.META.get(<span class="string">&#x27;HTTP_KEY&#x27;</span>)</span><br><span class="line">        print(client_key)</span><br><span class="line">        client_md5_key, client_time = client_key.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        server_time = time.time()</span><br><span class="line">        client_time = float(client_time)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> server_time - client_time &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;第一关，时间失效&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        tmp = <span class="string">&quot;%s|%s&quot;</span> % (server_key, client_time)</span><br><span class="line"></span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        m.update(bytes(tmp, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        server_md5_key = m.hexdigest()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> server_md5_key != client_md5_key:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;第二关，加密出错&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.body)</span><br></pre></td></tr></table></figure>



<ul>
<li>JWT</li>
</ul>
<ol start="7">
<li>数据入库<br>新的数据：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#39;0&#39;: &#123;&#39;slot&#39;: &#39;0&#39;, &#39;pd_type&#39;: &#39;SAS&#39;, &#39;capacity&#39;: &#39;279.396&#39;, &#39;model&#39;: &#39;SEAGATE ST300MM0006     LS08S0K2B5NV&#39;&#125;, </span><br><span class="line">    &#39;1&#39;: &#123;&#39;slot&#39;: &#39;1&#39;, &#39;pd_type&#39;: &#39;SAS&#39;, &#39;capacity&#39;: &#39;279.396&#39;, &#39;model&#39;: &#39;SEAGATE ST300MM0006     LS08S0K2B5AH&#39;&#125;, &#39;2&#39;: &#123;&#39;slot&#39;: &#39;2&#39;, &#39;pd_type&#39;: &#39;SATA&#39;, &#39;capacity&#39;: &#39;476.939&#39;, &#39;model&#39;: &#39;S1SZNSAFA01085L     Samsung SSD 850 PRO 512GB               EXM01B6Q&#39;&#125;, </span><br><span class="line">    &#39;3&#39;: &#123;&#39;slot&#39;: &#39;3&#39;, &#39;pd_type&#39;: &#39;SATA&#39;, &#39;capacity&#39;: &#39;476.939&#39;, &#39;model&#39;: &#39;S1AXNSAF912433K     Samsung SSD 840 PRO Series              DXM06B0Q&#39;&#125;, </span><br><span class="line">    &#39;4&#39;: &#123;&#39;slot&#39;: &#39;4&#39;, &#39;pd_type&#39;: &#39;SATA&#39;, &#39;capacity&#39;: &#39;476.939&#39;, &#39;model&#39;: &#39;S1AXNSAF303909M     Samsung SSD 840 PRO Series              DXM05B0Q&#39;&#125;, </span><br><span class="line">    &#39;5&#39;: &#123;&#39;slot&#39;: &#39;5&#39;, &#39;pd_type&#39;: &#39;SATA&#39;, &#39;capacity&#39;: &#39;476.939&#39;, &#39;model&#39;: &#39;S1AXNSAFB00549A     Samsung SSD 840 PRO Series              DXM06B0Q&#39;&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>老数据：<br>    数据库中获取</p>
<ol start="8">
<li>页面展示</li>
</ol>
<ul>
<li><p>分为两大块：<br>前后端不分离<br>  后端的程序和前端的Html页面全部放在一个项目之下</p>
<p>  两种方式：</p>
<pre><code>  - 纯粹的去手写html页面  加入Bootstrap美化页面
  - 用别人写好的第三方框架
      - layui
      - xadmin admin的加强版</code></pre>
<p>  图表：</p>
<pre><code>  PC时代：
      highcharts               
      Echarts  
  移动端：
      antv</code></pre>
<p>  前后端分离</p>
<pre><code>  前端： vue、react、angular js
      - vueAdmin-template
      - iview-admin
  后端：
      - DRF </code></pre>
</li>
<li><p>redis：</p>
<ol start="0">
<li><p>非关系型数据库<br> mongodb memcache</p>
<p> 国内用redis比较多的公司是：weibo</p>
</li>
<li><p>5大数据类型 </p>
<p> 字符串类型<br> 列表<br> 集合<br> 有序集合<br> 哈希</p>
</li>
<li><p>python操作redis</p>
<ul>
<li>django连接redis</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>问题：<br>业务线调整，变换主机名，我需要提前注册到数据库里吗？<br>如果没有提前注册，数据库中没有我的这个hostname，就不会接收我的消息</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>cmdb</tag>
      </tags>
  </entry>
  <entry>
    <title>py_day01</title>
    <url>/2020/08/09/py-day01/</url>
    <content><![CDATA[<p>python基础<br>变量·字符串·常用操作</p>
<a id="more"></a>
<h5 id="1-编译型语言和解释型语言的区别"><a href="#1-编译型语言和解释型语言的区别" class="headerlink" title="1. 编译型语言和解释型语言的区别"></a>1. 编译型语言和解释型语言的区别</h5><p>编译型语言(强类型语言) :  一次编译，到处运行 例：c, c++, java等<br>解释型语言(弱类型语言)：不需要编译，直接调用解释器执行 例：php，python， shell</p>
<p>解释型语言修改完后，不需要编译，执行流程是从上到下依次解释执行。shell</p>
<h6 id="1-1-python的优势和劣势"><a href="#1-1-python的优势和劣势" class="headerlink" title="1.1 python的优势和劣势"></a>1.1 python的优势和劣势</h6><p>优势：</p>
<ul>
<li>简单易上手</li>
<li>大量的第三方的安装包  jekins, k8s api包  胶水语言</li>
</ul>
<p>劣势：</p>
<ul>
<li>速度慢 和c, c++, java比</li>
</ul>
<h5 id="2-演示python的安装和pycharm安装"><a href="#2-演示python的安装和pycharm安装" class="headerlink" title="2. 演示python的安装和pycharm安装"></a>2. 演示python的安装和pycharm安装</h5><h5 id="3-python的入门程序"><a href="#3-python的入门程序" class="headerlink" title="3. python的入门程序"></a>3. python的入门程序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;hellowrold!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>执行原理：</p>
<blockquote>
<p>右键执行的时候，会自动调用python解释器从上到下依次执行python代码。类比 shell。</p>
</blockquote>
<p>ps: 交互式命令行的执行方式  python3  —-》 ipython</p>
<p>编辑器和命令行式的写法的区别和应用场景：</p>
<blockquote>
<p>编辑器适用于大型的项目，命令行适用于小的测试</p>
</blockquote>
<h5 id="4-python的变量"><a href="#4-python的变量" class="headerlink" title="4. python的变量"></a>4. python的变量</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>  </span><br><span class="line">y = x*<span class="number">5</span> + <span class="number">6</span></span><br><span class="line">z = y*<span class="number">7</span></span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量就是将中间的结果暂存到内存,以便后续程序调用</p>
</blockquote>
<p>类比shell， 和shell中的变量的定义是一致的。<br>但是和shell中不一样的地方的是：shell的等号两边不允许有空格，但是python等号两边也可以没有空格。那为啥必须要有空格？</p>
<ul>
<li>从视觉上会好看一些，调试代码比较舒服</li>
<li>写代码，需要遵循 PEP8 规范  <ul>
<li>变量的等号两边必须是有空格的，各大公司code review</li>
<li><strong>变量名必须要有意义</strong> shell</li>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名建议不使用拼音和中文</li>
<li>变量的要具有意义</li>
<li>变量名不要过长</li>
</ul>
</li>
</ul>
<p><strong>编程语言的三种风格</strong></p>
<ul>
<li><p>大驼峰法    单词的首字母一定是大写的。</p>
<blockquote>
<p>UserName,   GetInfo, 等</p>
</blockquote>
</li>
<li><p>小驼峰法   单词的首字母小写，其余大写 </p>
<blockquote>
<p>userName </p>
</blockquote>
</li>
<li><p>下划线法  单词和单词之间使用下划线拼接</p>
<blockquote>
<p>user_name</p>
</blockquote>
</li>
</ul>
<p>在代码 code review (代码评审) , 我们要求三种风格你可以随便选择一种你喜欢的风格，但是大家在选择完成之后，一定要主要的是，千万别中途换风格。</p>
<h5 id="5-python的基础数据类型"><a href="#5-python的基础数据类型" class="headerlink" title="5. python的基础数据类型"></a>5. python的基础数据类型</h5><ul>
<li>数字</li>
</ul>
<p>整型int</p>
<blockquote>
<p>表示一个整数的<br>  定义：age=10 #age=int(10)<br>  用于标识：年龄，等级，身份证号，qq号，个数<br>浮点型</p>
</blockquote>
<p>float浮点型</p>
<blockquote>
<p>定义：salary=3.1 #salary=float(3.1)<br>用于标识：工资，身高，体重，</p>
</blockquote>
<ul>
<li>字符串<blockquote>
<p> 字符串会嵌套<br>name = “dj’sa’b”  ## 外层双引号，内层要求是单引号<br>name2 = ‘ds”ad”sa’ ## 外层单引号，内层要求是双引号<br>hhh = “dvshavhhhhhhhhhhhhhhh” \</p>
<pre><code>&quot;dsadsadsadsa&quot;</code></pre>
<p>使用三引号<br>kkk = ‘’’<br>dnsajndsandjansdnas<br>曾老师<br>boduo老师<br>‘’’<br>print(kkk, type(kkk))</p>
</blockquote>
</li>
</ul>
<blockquote>
<blockquote>
<p>单引号、双引号、多引号没有区别，多行字符串必须用多引号</p>
</blockquote>
</blockquote>
<p>字符串拼接（只能在字符串之间进行，且只能相加或相乘）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#数字可以进行加减乘除等运算，字符串呢？让我大声告诉你，也能？what ?是的，但只能进行&quot;相加&quot;和&quot;相乘&quot;运算。</span><br><span class="line">&gt;&gt;&gt; name&#x3D;&#39;egon&#39;</span><br><span class="line">&gt;&gt;&gt; age&#x3D;&#39;18&#39;</span><br><span class="line">&gt;&gt;&gt; name+age #相加其实就是简单拼接</span><br><span class="line">&#39;egon18&#39;</span><br><span class="line">&gt;&gt;&gt; name*5 </span><br><span class="line">&#39;egonegonegonegonegon&#39;</span><br><span class="line"></span><br><span class="line">#注意1：字符串相加的效率不高</span><br><span class="line">字符串1+字符串3，并不会在字符串1的基础上加字符串2，而是申请一个全新的内存空间存入字符串1和字符串3，相当字符串1与字符串3的空间被复制了一次，</span><br><span class="line"></span><br><span class="line">#注意2：只能字符串加字符串，不能字符串加其他类型</span><br></pre></td></tr></table></figure>

<ul>
<li><p>布尔</p>
<blockquote>
<p>隐式的布尔值</p>
<blockquote>
<p>所有类型的数据都可以当做隐式的布尔值<br>0、None、空它们三类隐藏的布尔值都是False,除此以外都是True</p>
</blockquote>
</blockquote>
</li>
<li><p>列表<br>在[]内用逗号分隔，可以存放n个任意类型的值.</p>
</li>
</ul>
<h6 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### : python 注释，unix的注释方式</span><br><span class="line">&#x2F;&#x2F;  : java， c, c++ 的注释方式</span><br><span class="line">&#39;&#39;&#39;&#39;&#39;&#39;&#39;: python多行注释</span><br><span class="line">&#x2F;*</span><br><span class="line">这是多行注释</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<h5 id="6-输入"><a href="#6-输入" class="headerlink" title="6. 输入"></a>6. 输入</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###交互程序</span></span><br><span class="line"><span class="comment"># name = input(&quot;请输入名字：&quot;) ### 输入的值的类型是字符串类型的，input程序交互获取到的内容是字符串</span></span><br><span class="line"></span><br><span class="line">num = input(<span class="string">&#x27;请输入数字:&#x27;</span>)</span><br><span class="line">print(type(num)) <span class="comment">### &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">print(int(num) + <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>int(‘12’) : 会将字符串类型的整肃转换成整型</p>
<h4 id="7-流程控制"><a href="#7-流程控制" class="headerlink" title="7. 流程控制"></a>7. 流程控制</h4><h5 id="7-1-分支"><a href="#7-1-分支" class="headerlink" title="7. 1 分支"></a>7. 1 分支</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">    开始写逻辑代码  <span class="comment">### 必须要4个空格</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">123</span>:</span><br><span class="line">    print(<span class="string">&#x27;dsadsa&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;kkkkkk&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意： if.. else的语句只能执行一个</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### if elif else   只要满足一个条件，那就会立即执行相应的代码，执行完毕之后立即退出</span></span><br><span class="line"></span><br><span class="line">num = input(<span class="string">&#x27;请输入要比较的数字:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> int(num) &gt;= <span class="number">22</span>:</span><br><span class="line">    print(<span class="string">&#x27;可以扯证了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> int(num) &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;成年了,可以干一些成年的事了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> int(num) &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;还是小屁孩&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>只要满足一个条件，那就会立即执行相应的代码，执行完毕之后立即退出</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">&#x27;请输入名字:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;meet&#x27;</span>:</span><br><span class="line">    age = input(<span class="string">&#x27;请输入年龄:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> int(age) == <span class="number">18</span>:</span><br><span class="line">        print(<span class="string">&#x27;输入全部正确&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> int(age) &gt;= <span class="number">22</span>:</span><br><span class="line">        print(<span class="string">&#x27;xxxxxxxx&#x27;</span>)   </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;年龄输入错误!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;名字输入错误!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>if else 我们只能写一个，而elif可以写多个条件表达</strong></p>
<h5 id="7-2-循环控制"><a href="#7-2-循环控制" class="headerlink" title="7.2 循环控制"></a>7.2 循环控制</h5><ul>
<li>while 循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 基本款</span></span><br><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    <span class="comment"># 循环体</span></span><br><span class="line">    <span class="comment"># 如果条件为真，那么循环则执行</span></span><br><span class="line">    <span class="comment"># 如果条件为假，那么循环不执行</span></span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">num = int(input(<span class="string">&#x27;请输入数字:&#x27;</span>))  <span class="comment">## 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>: <span class="comment">### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line">    print(<span class="string">&#x27;dsadsadasdsasa&#x27;</span>)</span><br><span class="line">    num = num - <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:   <span class="comment">#### 循环退出之后，都会执行else中的代码</span></span><br><span class="line">    print(<span class="string">&#x27;last line.....&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>两大关键字：<br>break 和 continue：</p>
<ul>
<li>break：    退出整个循环，循环已经退出</li>
<li>continue:  跳出本次循环， 循环并没有退出</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### break ： 当警察抓到犯人的时候，后面即便有人，也不会做任何操作，直接退出</span></span><br><span class="line"><span class="comment"># num = int(input(&#x27;请输入数字:&#x27;))  ## 12</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># while num &gt; 0: ### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line"><span class="comment">#     num = num - 1  ## 第一次：num=11 第二次：num=10 第三次：num=9，，当num=5</span></span><br><span class="line"><span class="comment">#     if num == 5:</span></span><br><span class="line"><span class="comment">#         break   ### 退出整个循环</span></span><br><span class="line"><span class="comment">#     print(&#x27;后续代码...&#x27;) ## 第一次打印，第二次打印，第三次打印，。。。。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### continue ： 警察查身份证，</span></span><br><span class="line">num = int(input(<span class="string">&#x27;请输入数字:&#x27;</span>))  <span class="comment">## 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:  <span class="comment">### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line">    num = num - <span class="number">1</span>  <span class="comment">## 第一次：num=11 第二次：num=10 第三次：num=9，，当num=5</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment">### 跳出当前循环， 循环并没与退出</span></span><br><span class="line">    print(<span class="string">&#x27;后续代码...&#x27;</span>)  <span class="comment">## 第一次打印，第二次打印，第三次打印，。。。。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>for 循环<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### kkk 代表的是每一次循环的时候，目标对象s中的每一个元素</span></span><br><span class="line"><span class="comment">### 当循环到最后一个元素的时候，会自动退出</span></span><br><span class="line">s = <span class="string">&#x27;pounds&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> kkk <span class="keyword">in</span> s:</span><br><span class="line">    print(kkk)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>总结：任何语言无外乎三大流程控制结构</strong></p>
<ul>
<li>顺序</li>
<li>分支</li>
<li>循环</li>
</ul>
<p>是 姚期智 提出的</p>
<p>能够触类旁通，意思就是python学完之后， 在学go的时候，应该是没没任何压力的。</p>
<hr>
<h5 id="8-格式化输出"><a href="#8-格式化输出" class="headerlink" title="8. 格式化输出"></a>8. 格式化输出</h5><p>% , format</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 第一种写法：字符串使用+ 不断的进行拼接</span></span><br><span class="line"><span class="comment"># name = input(&#x27;请输入姓名:&#x27;)</span></span><br><span class="line"><span class="comment"># age = input(&#x27;请输入年龄:&#x27;)</span></span><br><span class="line"><span class="comment"># job = input(&#x27;请输入职业:&#x27;)</span></span><br><span class="line"><span class="comment"># hobby = input(&#x27;请输入爱好:&#x27;)</span></span><br><span class="line"><span class="comment"># a = &#x27;------------ info of 51devops ----------&#x27;</span></span><br><span class="line"><span class="comment"># b = &#x27;Name:&#x27;</span></span><br><span class="line"><span class="comment"># c = &#x27;Age:&#x27;</span></span><br><span class="line"><span class="comment"># d = &#x27;Job:&#x27;</span></span><br><span class="line"><span class="comment"># e = &#x27;Hobby:&#x27;</span></span><br><span class="line"><span class="comment"># f = &#x27;------------- end ----------------&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(a+&#x27;\n&#x27;+b+name+&#x27;\n&#x27;+c+age+&#x27;\n&#x27;+d+job+&#x27;\n&#x27;+e+hobby+&#x27;\n&#x27;+f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 第二种方法, 也有人用，用的还挺多。但是要求格式化传入的值和占位符的值需要一一对应</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name = input(&#x27;请输入姓名:&#x27;)</span></span><br><span class="line"><span class="comment"># age = input(&#x27;请输入年龄:&#x27;)</span></span><br><span class="line"><span class="comment"># job = input(&#x27;请输入职业:&#x27;)</span></span><br><span class="line"><span class="comment"># hobby = input(&#x27;请输入爱好:&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># msg = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ------------ info of 51devops ----------</span></span><br><span class="line"><span class="comment"># Name  : %s</span></span><br><span class="line"><span class="comment"># Age   : %s</span></span><br><span class="line"><span class="comment"># job   : %s</span></span><br><span class="line"><span class="comment"># Hobbie: %s</span></span><br><span class="line"><span class="comment"># ------------- end ----------------</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ### % 格式化的  而msg中的%s叫字符串占位符，</span></span><br><span class="line"><span class="comment"># print(msg % (age, name, job, hobby))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 第三种方法， 使用format函数来进行格式化</span></span><br><span class="line">name = input(<span class="string">&#x27;请输入姓名:&#x27;</span>)</span><br><span class="line">age = input(<span class="string">&#x27;请输入年龄:&#x27;</span>)</span><br><span class="line">job = input(<span class="string">&#x27;请输入职业:&#x27;</span>)</span><br><span class="line">hobby = input(<span class="string">&#x27;请输入爱好:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">------------ info of 51devops ----------</span></span><br><span class="line"><span class="string">Name  : &#123;name1&#125;</span></span><br><span class="line"><span class="string">Age   : &#123;age1&#125;</span></span><br><span class="line"><span class="string">job   : &#123;job1&#125;</span></span><br><span class="line"><span class="string">Hobbie: &#123;hobby1&#125;</span></span><br><span class="line"><span class="string">------------- end ----------------</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">print(msg.format(age1=age, name1=name, job1=job, hobby1=hobby))</span><br></pre></td></tr></table></figure>

<h5 id="9-运算符"><a href="#9-运算符" class="headerlink" title="9. 运算符"></a>9. 运算符</h5><ul>
<li><p>算数运算</p>
<img src="/2020/08/09/py-day01/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6.png" class title="py-day01">
</li>
<li><p>比较运算</p>
<img src="/2020/08/09/py-day01/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.png" class title="py-day01">
</li>
<li><p>赋值运算</p>
<img src="/2020/08/09/py-day01/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6.png" class title="py-day01">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.变量的赋值</span><br><span class="line">2.增量赋值</span><br><span class="line">age +&#x3D; 1</span><br><span class="line">3.链式赋值</span><br><span class="line">x,y,z &#x3D; 10</span><br><span class="line">4.交叉赋值</span><br><span class="line">m&#x3D;10</span><br><span class="line">n&#x3D;20</span><br><span class="line">m,n &#x3D; n,m</span><br><span class="line">5.解压赋值</span><br><span class="line">salaries &#x3D; [111,222,333,444,555]</span><br><span class="line">mon0,mon1,mon2,mon3,mon4 &#x3D; salaries </span><br><span class="line"># 对应的变量名少一个不行，多一个也不行</span><br><span class="line">解决办法</span><br><span class="line"># 取前三个值</span><br><span class="line">mon0,mon1,mon2,*_ &#x3D; salaries</span><br><span class="line"># 取后三个值</span><br><span class="line">*_,mon4,mon5 &#x3D; salaries</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑运算</p>
<img src="/2020/08/09/py-day01/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.png" class title="py-day01">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">not: 把紧跟其后的条件取反</span><br><span class="line">ps: 其后的添件作为一个不可分割的整体</span><br><span class="line"></span><br><span class="line">and: 用来连接左右两个条件，同时为True才为True</span><br><span class="line">True and 10 &gt; 3</span><br><span class="line"></span><br><span class="line">or: 两个条件但凡有一个为真都为真</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、三者的优先级关系：not&gt;and&gt;or，同一优先级默认从左往右计算。</span><br><span class="line">&gt;&gt;&gt; 3&gt;4 and 4&gt;3 or 1&#x3D;&#x3D;3 and &#39;x&#39; &#x3D;&#x3D; &#39;x&#39; or 3 &gt;3</span><br><span class="line">False</span><br><span class="line"></span><br><span class="line">#2、最好使用括号来区别优先级，其实意义与上面的一样</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">原理为：</span><br><span class="line">(1) not的优先级最高，就是把紧跟其后的那个条件结果取反，所以not与紧跟其后的条件不可分割</span><br><span class="line">3&gt;4 and not 4&gt;3 or 1&#x3D;&#x3D;3 and &#39;x&#39; &#x3D;&#x3D; &#39;x&#39; or 3&gt;3</span><br><span class="line">3&gt;4 and (not 4&gt;3) or 1&#x3D;&#x3D;3 and &#39;x&#39; &#x3D;&#x3D; &#39;x&#39; or 3&gt;3</span><br><span class="line"></span><br><span class="line">(3&gt;4 and (not 4&gt;3)) or (1&#x3D;&#x3D;3 and &#39;x&#39; &#x3D;&#x3D; &#39;x&#39;) or 3&gt;3</span><br><span class="line">(2) 如果语句中全部是用and连接，或者全部用or连接，那么按照从左到右的顺序依次计算即可</span><br><span class="line"></span><br><span class="line">(3) 如果语句中既有and也有or，那么先用括号把and的左右两个条件给括起来，然后再进行运算</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt;&gt;&gt; (3&gt;4 and 4&gt;3) or (1&#x3D;&#x3D;3 and &#39;x&#39; &#x3D;&#x3D; &#39;x&#39;) or 3 &gt;3</span><br><span class="line">False </span><br><span class="line"></span><br><span class="line">#3、短路运算：逻辑运算的结果一旦可以确定，那么就以当前处计算到的值作为最终结果返回</span><br><span class="line">&gt;&gt;&gt; 10 and 0 or &#39;&#39; and 0 or &#39;abc&#39; or &#39;egon&#39; &#x3D;&#x3D; &#39;dsb&#39; and 333 or 10 &gt; 4</span><br><span class="line">我们用括号来明确一下优先级</span><br><span class="line">&gt;&gt;&gt; (10 and 0) or (&#39;&#39; and 0) or &#39;abc&#39; or (&#39;egon&#39; &#x3D;&#x3D; &#39;dsb&#39; and 333) or 10 &gt; 4</span><br><span class="line">短路：       0      &#39;&#39;            &#39;abc&#39;                    </span><br><span class="line">            假     假              真</span><br><span class="line"></span><br><span class="line">返回：                            &#39;abc&#39;</span><br><span class="line"></span><br><span class="line">#4、短路运算面试题：偷懒原则，偷懒到哪个位置，就把当前位置的值返回</span><br><span class="line">&gt;&gt;&gt; 1 or 3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 1 and 3</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 0 and 2 and 1</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; 0 and 2 or 1</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 0 and 2 or 1 or 4</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 0 or False and 1</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
</li>
<li><p>成员运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># in</span><br><span class="line">print(&quot;egon&quot; in &quot;hello egon&quot;) # 判断字符串是否在一个大字符串当中</span><br><span class="line">print(&quot;e&quot; in &quot;hello egon&quot;) # 判断字符串是否在一个大字符串当中</span><br><span class="line">print(111 in [111,222,333]) # 判断元素是否在列表中</span><br><span class="line">print(&quot;k1&quot; in &#123;&quot;k1&quot;:111, &quot;k2&quot;:222&#125;) #判断key这是否在字典中</span><br><span class="line"></span><br><span class="line"># not in</span><br><span class="line">print(&quot;egon&quot; not in &quot;hello egon&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>身份运算符</p>
<blockquote>
<p>is # 判断id是否相等</p>
</blockquote>
</li>
</ul>
<h5 id="10-索引"><a href="#10-索引" class="headerlink" title="10. 索引"></a>10. 索引</h5><p>提到索引，立马想到的一个概念是：索引都是从 0 开始计数的的</p>
<p>10.1索引的取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">print(name[<span class="number">0</span>])  <span class="comment">### h</span></span><br><span class="line"><span class="comment"># print(name[6])  ### 报错</span></span><br><span class="line">print(name[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<p>10.2 切片 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name = &#x27;h e l l o w o r l d&#x27;</span></span><br><span class="line"><span class="comment">#         0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">name = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line">print(name[<span class="number">4</span>:<span class="number">7</span>]) <span class="comment">### 前包后不包， 或者叫 左闭右开</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># name = &#x27;h e l l o w o r l d&#x27;</span></span><br><span class="line"><span class="string">#         0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="string">                       -3 -2 -1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="comment"># print(name[4:7]) ### 前包后不包， 或者叫 左闭右开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(name[:]) ### 从头切到尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(name[:5])  ### hello  从开始切刀5</span></span><br><span class="line"><span class="comment"># print(name[2:])  ### 从2开始切刀最后</span></span><br><span class="line"></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>字典</li>
<li>列表</li>
<li>集合</li>
</ul>
<ol start="11">
<li>深浅copy</li>
</ol>
<ul>
<li><p>list2 = list1 #不叫拷贝<br>二者分割不开，list2变化list1也跟着变化，指向同一内存地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; &#123;1: [1,2,3]&#125;</span><br><span class="line">b &#x3D; a</span><br></pre></td></tr></table></figure>
<img src="/2020/08/09/py-day01/%E6%B7%B1%E6%B5%85copy1.png" class title="py-day01">
</li>
<li><p>需求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.拷贝一下原列表产生一个新列表</span><br><span class="line">2.想让两个列表完全独立开，针对的是改操作</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>如何copy列表</p>
</li>
<li><p>浅copy:是把原列表的第一层的内存地址完全copy一份给新列表；第一层元素中子元素不独立</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;a &#x3D; &#123;1: [1,2,3]&#125;</span><br><span class="line">&gt;&gt;&gt; b &#x3D; a.copy()</span><br><span class="line">&gt;&gt;&gt; a, b</span><br><span class="line">(&#123;1: [1, 2, 3]&#125;, &#123;1: [1, 2, 3]&#125;)</span><br><span class="line">&gt;&gt;&gt; a[1].append(4)</span><br><span class="line">&gt;&gt;&gt; a, b</span><br><span class="line">(&#123;1: [1, 2, 3, 4]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2020/08/09/py-day01/%E6%B7%B1%E6%B5%85copy2.png" class title="py-day01">
</li>
<li><p>深copy: 想要两个列表改操作完全独立开，必须有一种可以区分开可变类型和不可变类型的copy机制，这就是深copy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;import copy</span><br><span class="line">&gt;&gt;&gt; c &#x3D; copy.deepcopy(a)</span><br><span class="line">&gt;&gt;&gt; a, c</span><br><span class="line">(&#123;1: [1, 2, 3, 4]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br><span class="line">&gt;&gt;&gt; a[1].append(5)</span><br><span class="line">&gt;&gt;&gt; a, c</span><br><span class="line">(&#123;1: [1, 2, 3, 4, 5]&#125;, &#123;1: [1, 2, 3, 4]&#125;)</span><br></pre></td></tr></table></figure>
<img src="/2020/08/09/py-day01/%E6%B7%B1%E6%B5%85copy3.png" class title="py-day01">

</li>
</ul>
<p>以下实例是使用 copy 模块的 copy.copy（ 浅拷贝 ）和（copy.deepcopy ）:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]] <span class="comment">#原始对象</span></span><br><span class="line"> </span><br><span class="line">b = a                       <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)            <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)        <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"> </span><br><span class="line">a.append(<span class="number">5</span>)                 <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">&#x27;c&#x27;</span>)            <span class="comment">#修改对象a中的[&#x27;a&#x27;, &#x27;b&#x27;]数组对象</span></span><br><span class="line"> </span><br><span class="line">print( <span class="string">&#x27;a = &#x27;</span>, a )</span><br><span class="line">print( <span class="string">&#x27;b = &#x27;</span>, b )</span><br><span class="line">print( <span class="string">&#x27;c = &#x27;</span>, c )</span><br><span class="line">print( <span class="string">&#x27;d = &#x27;</span>, d )</span><br></pre></td></tr></table></figure>



<p>给数据结构和算法<br><a href="https://www.bilibili.com/video/BV1HA411b7ik">https://www.bilibili.com/video/BV1HA411b7ik</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py_day02_exercise</title>
    <url>/2020/08/09/py-day02-exercise/</url>
    <content><![CDATA[<p>温故知新</p>
<a id="more"></a>
<h3 id="1-根据需求写代码"><a href="#1-根据需求写代码" class="headerlink" title="1.根据需求写代码"></a>1.根据需求写代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;k3&quot;</span>: [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请在字典中添加一个键值对，&quot;k4&quot;: &quot;v4&quot;，输出添加后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k4&#x27;</span>] = <span class="string">&#x27;v4&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 请在修改字典中 &quot;k1&quot; 对应的值为 &quot;alex&quot;，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k1&#x27;</span>] = <span class="string">&#x27;alex&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 请在k3对应的值中追加一个元素 44，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].append(<span class="number">44</span>)</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 请在k3对应的值的第 1 个位置插入个元素 18，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].insert(<span class="number">0</span>,<span class="number">18</span>)</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure>

<h3 id="2-根据需求写代码"><a href="#2-根据需求写代码" class="headerlink" title="2.根据需求写代码"></a>2.根据需求写代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;</span><br><span class="line"> <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;pounds&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line"> <span class="string">&#x27;job&#x27;</span>:<span class="string">&#x27;teacher&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;51devops&#x27;</span>:&#123;<span class="string">&#x27;szk&#x27;</span>:[<span class="string">&#x27;python1&#x27;</span>,<span class="string">&#x27;python2&#x27;</span>,<span class="number">100</span>]&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1，将name对应的列表追加⼀个元素’xxx’。</span></span><br><span class="line">dic1[<span class="string">&#x27;name&#x27;</span>].append(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 2，将name对应的列表中的 pounds ⾸字⺟⼤写。</span></span><br><span class="line">(<span class="number">1</span>)转成大写后upadte</span><br><span class="line">new_words = dic1[<span class="string">&#x27;name&#x27;</span>][<span class="number">0</span>].capitalize()</span><br><span class="line">dic1.update(&#123;<span class="string">&#x27;name&#x27;</span>:[new_words,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]&#125;)</span><br><span class="line">(<span class="number">2</span>)直接赋值更改</span><br><span class="line">dic1[<span class="string">&#x27;name&#x27;</span>][<span class="number">0</span>] = <span class="string">&#x27;Pounds&#x27;</span></span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 3，51devops 对应的字典加⼀个键值对 ’haoda’,’linux’。</span></span><br><span class="line">dic1[<span class="string">&#x27;51devops&#x27;</span>][<span class="string">&#x27;haoda&#x27;</span>] = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 4，将51devops对应的字典中的szk对应的列表中的python2删除</span></span><br><span class="line">dic1[<span class="string">&#x27;51devops&#x27;</span>][<span class="string">&#x27;szk&#x27;</span>].remove(<span class="string">&#x27;python2&#x27;</span>)</span><br><span class="line">print(dic1)</span><br></pre></td></tr></table></figure>

<h3 id="3-判断以下值那个能做字典的key-？那个能做集合的元素？"><a href="#3-判断以下值那个能做字典的key-？那个能做集合的元素？" class="headerlink" title="3.判断以下值那个能做字典的key ？那个能做集合的元素？"></a>3.判断以下值那个能做字典的key ？那个能做集合的元素？</h3><ul>
<li>1       ✅</li>
<li>-1      ✅</li>
<li>“”      ✅</li>
<li>None    ✅</li>
<li>[1,2]   ❌</li>
<li>(1,)    ✅</li>
<li>{11,22,33,4} ❌</li>
<li>{‘name’:’szk’,’age’:18} ❌</li>
</ul>
<h3 id="4-将字典的键和值分别追加到-key-list-和-value-list-两个列表中，如："><a href="#4-将字典的键和值分别追加到-key-list-和-value-list-两个列表中，如：" class="headerlink" title="4.将字典的键和值分别追加到 key_list 和 value_list 两个列表中，如："></a>4.将字典的键和值分别追加到 key_list 和 value_list 两个列表中，如：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key_list = []</span><br><span class="line">value_list = []</span><br><span class="line">info = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    key_list.append(k)</span><br><span class="line">    value_list.append(v)</span><br><span class="line">print(key_list)</span><br><span class="line">print(value_list)</span><br></pre></td></tr></table></figure>

<h3 id="5-字典dic-‘k1’-“v1”-“k2”-“v2”-“k3”-11-22-33"><a href="#5-字典dic-‘k1’-“v1”-“k2”-“v2”-“k3”-11-22-33" class="headerlink" title="5.字典dic = {‘k1’: “v1”, “k2”: “v2”, “k3”: [11,22,33]}"></a>5.字典dic = {‘k1’: “v1”, “k2”: “v2”, “k3”: [11,22,33]}</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;k3&quot;</span>: [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]&#125;</span><br><span class="line"><span class="comment"># a. 请循环输出所有的key</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic.keys():</span><br><span class="line">    print(k)</span><br><span class="line"><span class="comment"># b. 请循环输出所有的value</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> dic.values():</span><br><span class="line">    print(v)</span><br><span class="line"><span class="comment"># c. 请循环输出所有的key和value</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">    print(k,v)</span><br><span class="line"><span class="comment"># d. 请在字典中添加一个键值对，&quot;k4&quot;: &quot;v4&quot;，输出添加后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k4&#x27;</span>] = <span class="string">&#x27;v4&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># e. 请在修改字典中 &quot;k1&quot; 对应的值为 &quot;szk&quot;，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k1&#x27;</span>] = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># f. 请在k3对应的值中追加一个元素 44，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].append(<span class="number">44</span>)</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># g. 请在k3对应的值的第 1 个位置插入个元素 18，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].insert(<span class="number">0</span>,<span class="number">18</span>)</span><br><span class="line">print(dic)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-请循环打印k2对应的值中的每个元素。"><a href="#6-请循环打印k2对应的值中的每个元素。" class="headerlink" title="6.请循环打印k2对应的值中的每个元素。"></a>6.请循环打印k2对应的值中的每个元素。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k2&#x27;</span>:[(<span class="string">&#x27;pounds&#x27;</span>),(<span class="string">&#x27;szk&#x27;</span>),(<span class="string">&#x27;51devops&#x27;</span>)],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> values <span class="keyword">in</span> info[<span class="string">&#x27;k2&#x27;</span>]:</span><br><span class="line">    print(values)</span><br></pre></td></tr></table></figure>

<h3 id="7-输出商品列表，用户输入序号，显示用户选中的商品"><a href="#7-输出商品列表，用户输入序号，显示用户选中的商品" class="headerlink" title="7.输出商品列表，用户输入序号，显示用户选中的商品"></a>7.输出商品列表，用户输入序号，显示用户选中的商品</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = <span class="literal">True</span></span><br><span class="line"><span class="comment">#购物车</span></span><br><span class="line">bag = []</span><br><span class="line"><span class="comment">#购物车商品总价格</span></span><br><span class="line">bag_price = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> tag:</span><br><span class="line">    <span class="keyword">for</span> inx,value <span class="keyword">in</span> enumerate(goods):</span><br><span class="line">          print(inx,value[<span class="string">&#x27;name&#x27;</span>],value[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line">    choice = input(<span class="string">&quot;请输入商品编号(退出输入Q/q):&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&#x27;q&#x27;</span> <span class="keyword">or</span> choice == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">        print(<span class="string">&quot;您购买的商品列表:%s,一共消费:%s&quot;</span> %(bag,bag_price))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>  choice.isdigit():</span><br><span class="line">        choice = int(choice)</span><br><span class="line">        <span class="keyword">if</span> choice &gt;= <span class="number">0</span> <span class="keyword">and</span> choice &lt; len(goods):</span><br><span class="line">            print(<span class="string">&#x27;商品:%s  价格:%s&#x27;</span> % (goods[choice][<span class="string">&#x27;name&#x27;</span>], goods[choice][<span class="string">&#x27;price&#x27;</span>]))</span><br><span class="line">            bag.append(goods[choice][<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">            bag_price += goods[choice][<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;输入的编号不存在，请重新输入&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;请输入正确的产品编号&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>python_exercise</category>
      </categories>
      <tags>
        <tag>python_exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day03-字符编码</title>
    <url>/2021/03/24/py-day03-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>字符编码</p>
<a id="more"></a>

<h4 id="1-文本编辑器存取文件的原理（nodepad-，pycharm，word）"><a href="#1-文本编辑器存取文件的原理（nodepad-，pycharm，word）" class="headerlink" title="1.文本编辑器存取文件的原理（nodepad++，pycharm，word）"></a>1.文本编辑器存取文件的原理（nodepad++，pycharm，word）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、打开编辑器就打开了启动了一个进程，是在内存中的，所以，用编辑器编写的内容也都是存放与内存中的，断电后数据丢失</span><br><span class="line"></span><br><span class="line">#2、要想永久保存，需要点击保存按钮：编辑器把内存的数据刷到了硬盘上。</span><br><span class="line"></span><br><span class="line">#3、在我们编写一个py文件（没有执行），跟编写其他文件没有任何区别，都只是在编写一堆字符而已。</span><br></pre></td></tr></table></figure>

<h4 id="2-python解释器执行py文件的原理-，例如python-test-py"><a href="#2-python解释器执行py文件的原理-，例如python-test-py" class="headerlink" title="2.python解释器执行py文件的原理 ，例如python test.py"></a>2.python解释器执行py文件的原理 ，例如python test.py</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#第一阶段：python解释器启动，此时就相当于启动了一个文本编辑器</span><br><span class="line"></span><br><span class="line">#第二阶段：python解释器相当于文本编辑器，去打开test.py文件，从硬盘上将test.py的文件内容读入到内存中(小复习：pyhon的解释性，决定了解释器只关心文件内容，不关心文件后缀名)</span><br><span class="line">此时，python解释器会读取test.py的第一行内容，#coding:utf-8，来决定以什么编码格式来读入内存，这一行就是来设定python解释器这个软件的编码使用的编码格式这个编码，</span><br><span class="line">可以用sys.getdefaultencoding()查看，如果不在python文件指定头信息＃-*-coding:utf-8-*-,那就使用默认的</span><br><span class="line"></span><br><span class="line">python2中默认使用ascii，python3中默认使用utf-8 </span><br><span class="line"></span><br><span class="line">#第三阶段：python解释器解释执行刚刚加载到内存中test.py的代码( ps：在该阶段，即真正执行代码时，才会识别python的语法，执行文件内代码，当执行到name&#x3D;&quot;egon&quot;时,会开辟内存空间存放字符串&quot;egon&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="3-总结python解释器与文件本编辑的异同"><a href="#3-总结python解释器与文件本编辑的异同" class="headerlink" title="3.总结python解释器与文件本编辑的异同"></a>3.总结python解释器与文件本编辑的异同</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、相同点：python解释器是解释执行文件内容的，因而python解释器具备读py文件的功能，这一点与文本编辑器一样</span><br><span class="line"></span><br><span class="line">#2、不同点：文本编辑器将文件内容读入内存后，是为了显示或者编辑，根本不去理会python的语法，而python解释器将文件内容读入内存后，可不是为了给你瞅一眼python代码写的啥，而是为了执行python代码、会识别python语法。</span><br></pre></td></tr></table></figure>



<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符--------（翻译过程）-------&gt;数字 </span><br><span class="line">这个过程实际就是一个字符如何对应一个特定数字的标准，这个标准称之为字符编码</span><br></pre></td></tr></table></figure>

<h4 id="1-以下两个场景下涉及到字符编码的问题："><a href="#1-以下两个场景下涉及到字符编码的问题：" class="headerlink" title="1.以下两个场景下涉及到字符编码的问题："></a>1.以下两个场景下涉及到字符编码的问题：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、一个python文件中的内容是由一堆字符组成的，存取均涉及到字符编码问题（python文件并未执行，前两个阶段均属于该范畴）</span><br><span class="line"></span><br><span class="line">#2、python中的数据类型字符串是由一串字符组成的（python文件执行时，即第三个阶段）</span><br></pre></td></tr></table></figure>


<h4 id="2-字符编码的发展史"><a href="#2-字符编码的发展史" class="headerlink" title="2.字符编码的发展史"></a>2.字符编码的发展史</h4><p>Unicode（内存中统一使用unicode）统一用2Bytes代表一个字符<br>UTF-8 对英文字符只用1Bytes表示，对中文字符用3Bytes</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#阶段一：现代计算机起源于美国，最早诞生也是基于英文考虑的ASCII</span><br><span class="line">ASCII:8位二进制数&#x3D;1个Bytes代表一个字符（英文字符&#x2F;键盘上的所有其他字符），1Bytes&#x3D;8bit，8bit可以表示0-2**8-1种变化，即可以表示256个字符</span><br><span class="line"></span><br><span class="line">ASCII最初只用了后七位，127个数字，已经完全能够代表键盘上所有的字符了（英文字符&#x2F;键盘的所有其他字符），后来为了将拉丁文也编码进了ASCII表，将最高位也占用了</span><br><span class="line"></span><br><span class="line">#阶段二:为了满足中文和英文，中国人定制了GBK</span><br><span class="line">GBK:2Bytes代表一个中文字符，1Bytes表示一个英文字符</span><br><span class="line">为了满足其他国家，各个国家纷纷定制了自己的编码</span><br><span class="line">日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里</span><br><span class="line"></span><br><span class="line">#阶段三：各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。如何解决这个问题呢？？？</span><br><span class="line"></span><br><span class="line">#！！！！！！！！！！！！非常重要！！！！！！！！！！！！</span><br><span class="line">说白了乱码问题的本质就是不统一，如果我们能统一全世界，规定全世界只能使用一种文字符号，然后统一使用一种编码，那么乱码问题将不复存在，</span><br><span class="line">ps：就像当年秦始皇统一中国一样，书同文车同轨，所有的麻烦事全部解决</span><br><span class="line">很明显，上述的假设是不可能成立的。很多地方或老的系统、应用软件仍会采用各种各样的编码，这是历史遗留问题。于是我们必须找出一种解决方案或者说编码方案，需要同时满足：</span><br><span class="line">#1、能够兼容万国字符</span><br><span class="line">#2、与全世界所有的字符编码都有映射关系，这样就可以转换成任意国家的字符编码</span><br><span class="line"></span><br><span class="line">这就是unicode（定长），　统一用2Bytes代表一个字符，　虽然2**16-1&#x3D;65535，但unicode却可以存放100w+个字符，因为unicode存放了与其他编码的映射关系，准确地说unicode并不是一种严格意义上的字符编码表，下载pdf来查看unicode的详情：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1dEV3RYp</span><br><span class="line"></span><br><span class="line">很明显对于通篇都是英文的文本来说，unicode的式无疑是多了一倍的存储空间（二进制最终都是以电或者磁的方式存储到存储介质中的）</span><br><span class="line"></span><br><span class="line">于是产生了UTF-8（可变长，全称Unicode Transformation Format），对英文字符只用1Bytes表示，对中文字符用3Bytes，对其他生僻字用更多的Bytes去存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#总结：内存中统一采用unicode，浪费空间来换取可以转换成任意编码（不乱码），硬盘可以采用各种编码，如utf-8，保证存放于硬盘或者基于网络传输的数据量很小，提高传输效率与稳定性。</span><br><span class="line"></span><br><span class="line">！！！重点！！！</span><br></pre></td></tr></table></figure>


<img src="/2021/03/24/py-day03-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2.png" class title="编码解码">
<h4 id="3-结论"><a href="#3-结论" class="headerlink" title="3.结论"></a>3.结论</h4><ol>
<li><p>内存固定使用Unicode，我们可以改变的是存入硬盘的编码格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">英文+汉字 -&gt; Unicode -&gt; gbk</span><br><span class="line">英文+日文 -&gt; unicode -&gt; shift-jis</span><br><span class="line">万国软件  -&gt; Unicode -&gt; utf-8</span><br></pre></td></tr></table></figure>
</li>
<li><p>文本文件存取乱码问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">存乱了：编码格式应该设置成支持文件内容字符串的格式</span><br><span class="line">取乱了: 解决方法是，文件是以什么编码格式存硬盘的，就以什么格式取</span><br></pre></td></tr></table></figure></li>
<li><p>解释器默认读文件的编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3： 默认读文件的编码utf-8</span><br><span class="line">python2： ASCII</span><br><span class="line"></span><br><span class="line">指定文件头，修改默认的编码：</span><br><span class="line"># coding:gbk</span><br></pre></td></tr></table></figure></li>
<li><p>保证python程序前两个阶段不乱码的核心法则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定文件头</span><br><span class="line"># coding:文件当初存入硬盘时的编码格式</span><br></pre></td></tr></table></figure></li>
<li><p>执行阶段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 的str类型默认直接存成Unicode格式，无论如何都不会乱码</span><br><span class="line">保证python2 的str类型不乱码</span><br><span class="line">    x &#x3D; u&#39;上&#39;  将字符串存成Unicode</span><br></pre></td></tr></table></figure>
</li>
<li><p>python2有两种类型字符串：str unicode<br>x = ‘dfs’<br>x = u’dfsdf’</p>
</li>
<li><p>编码解码</p>
<img src="/2021/03/24/py-day03-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81.png" class title="编码解码">
<p>unicode—–&gt;encode——–&gt;utf-8<br>utf-8——–&gt;decode———-&gt;unicode</p>
</li>
</ol>
<h4 id="4-使用如何解决乱码问题"><a href="#4-使用如何解决乱码问题" class="headerlink" title="4.使用如何解决乱码问题"></a>4.使用如何解决乱码问题</h4><ol>
<li><p>如何解决python2乱码问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前两个阶段: 1.读文件  文件头  # coding: utf-8  与文件存储的编码格式一致</span><br><span class="line">          2.加载到内存 字符串 x &#x3D; u&#39;sad&#39;</span><br></pre></td></tr></table></figure></li>
<li><p>如何解决python3乱码问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.读文件  文件头  # coding: utf-8  与文件存储的编码格式一致</span><br></pre></td></tr></table></figure>
</li>
<li><p>编码解码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line">x&#x3D;&#39;上&#39; # str类型被存成unicode</span><br><span class="line">print(x) --&gt; 内存地址 ，应该是数字--&gt;print功能中间做了转换(unicode转成了字符)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="需要记住"><a href="#需要记住" class="headerlink" title="需要记住"></a>需要记住</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.内存的编码使用unicode，不代表内存中全都是unicode，</span><br><span class="line">2.字符类型</span><br><span class="line">python2 字符串类型 str 和 unicode</span><br><span class="line">当python解释器执行到产生字符串的代码时（例如x&#x3D;&#39;上&#39;），会申请新的内存地址，然后将&#39;上&#39;编码成文件开头指定的编码格式</span><br><span class="line">如果不指定表头，默认以ASCII码存，存汉字则会报错。</span><br><span class="line">##########</span><br><span class="line">所以python2 一般以u(&#39;xxx&#39;) unicode方式存</span><br><span class="line">##########</span><br><span class="line"></span><br><span class="line">python3 中也有两种字符串类型str和bytes</span><br><span class="line">str是unicode方式存</span><br><span class="line">#coding:gbk</span><br><span class="line">x&#x3D;&#39;上&#39; #当程序执行时，无需加u，&#39;上&#39;也会被以unicode形式保存新的内存空间中,</span><br><span class="line">print(type(x)) #&lt;class &#39;str&#39;&gt;</span><br><span class="line"></span><br><span class="line">#x可以直接encode成任意编码格式</span><br><span class="line">print(x.encode(&#39;gbk&#39;)) #b&#39;\xc9\xcf&#39;</span><br><span class="line">print(type(x.encode(&#39;gbk&#39;))) #&lt;class &#39;bytes&#39;&gt;</span><br></pre></td></tr></table></figure>

<p>很重要的一点是：看到python3中x.encode(‘gbk’) 的结果\xc9\xcf正是python2中的str类型的值,而在python3是bytes类型，在python2中则是str类型</p>
<p>pycharm的终端编码格式是utf-8</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day08</title>
    <url>/2020/09/27/py-day08/</url>
    <content><![CDATA[<p>前端基础基础回顾<br>class(html、css、jQuery)</p>
<a id="more"></a>


<h5 id="js的讲解"><a href="#js的讲解" class="headerlink" title="js的讲解"></a>js的讲解</h5><p>1.js的介绍</p>
<p>2.js的基本用法</p>
<blockquote>
<p><code>script</code></p>
</blockquote>
<p>3.js的变量</p>
<p>4.js的数据类型   bool， 整型，字符串(split, join, contact)</p>
<p>5.js的函数  (first class)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> abc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;dsadsa&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;()</span><br></pre></td></tr></table></figure>

<p>6.this的用法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span> 类似于python中的self，谁调用改函数或者变量，则<span class="built_in">this</span>就指向谁</span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span>  <span class="comment">// window.a = 100</span></span><br><span class="line">b = <span class="number">200</span>  <span class="comment">// window.b = 200</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">  <span class="built_in">console</span>.log(a, b); <span class="comment">// 10, 20</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a, <span class="built_in">this</span>.b) <span class="comment">// 100, 200</span></span><br><span class="line">&#125;</span><br><span class="line">test() <span class="comment">// window.test() ---&gt; window === this</span></span><br><span class="line"></span><br><span class="line">DOM操作：</span><br><span class="line">i1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// this指代当前元素 i1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;dsadsa&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>DOM —》 用户和网页交互的根本</p>
<blockquote>
<p>DOM: 文档对象模型</p>
</blockquote>
<p>document.getElementByID, </p>
<p>Document.getElementsByTagName</p>
<p>DOcument.getElementsByClassName</p>
<p>innerText, innerHtml</p>
<p>Jquery —&gt; 就是对DOM的封装</p>
<h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><h4 id="BootStrap的组件讲解"><a href="#BootStrap的组件讲解" class="headerlink" title="BootStrap的组件讲解"></a>BootStrap的组件讲解</h4><blockquote>
<p>twitter开源的前端组件框架，非常适合于后端工程师写前端代码</p>
<p>网站：<a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></p>
</blockquote>
<p>使用方法：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bootstrap@3.3.7&#x2F;dist&#x2F;css&#x2F;bootstrap.min.css&quot; integrity&#x3D;&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz&#x2F;K68vbdEjh4u&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>1.CSS部分：</p>
<p>总结：常用的如表格，表单，按钮，图片，辅助类，需要注意</p>
<p>2.图标和字体库： <a href="http://www.fontawesome.com.cn/">http://www.fontawesome.com.cn/</a></p>
<p>3.JS插件中的模态框</p>
<h4 id="常见的模板套用"><a href="#常见的模板套用" class="headerlink" title="常见的模板套用"></a>常见的模板套用</h4><h4 id="AdminLTE"><a href="#AdminLTE" class="headerlink" title="AdminLTE"></a>AdminLTE</h4><blockquote>
<p>实际项目中常用的一个比较经典的后台管理模板</p>
<p>缺点：国外的，中文文档比较少</p>
</blockquote>
<h4 id="LayUI"><a href="#LayUI" class="headerlink" title="LayUI"></a>LayUI</h4><blockquote>
<p><a href="https://www.layui.com/doc/">https://www.layui.com/doc/</a>   国内比较不错的一个后台管理模板</p>
</blockquote>
<p>重点关注：表格，表单，按钮，模态框</p>
<h4 id="SimpleUI-基于DjangoAdmin，-里边用的是Vue和ElementUI等组件"><a href="#SimpleUI-基于DjangoAdmin，-里边用的是Vue和ElementUI等组件" class="headerlink" title="SimpleUI 基于DjangoAdmin， 里边用的是Vue和ElementUI等组件"></a>SimpleUI 基于DjangoAdmin， 里边用的是Vue和ElementUI等组件</h4><p>目标：给你一个页面，能够进行修改，看懂</p>
<h4 id="Python的常见三大web框架"><a href="#Python的常见三大web框架" class="headerlink" title="Python的常见三大web框架"></a>Python的常见三大web框架</h4><ol>
<li>Django   大而全的框架</li>
<li>Flask   </li>
<li>Tornado  性能好</li>
</ol>
<p>Django有点像普通车，啥都有。</p>
<p>Tornado有点像保时捷，跑车的发动机好。 select poll epoll(nginx)</p>
<h4 id="Django的安装"><a href="#Django的安装" class="headerlink" title="Django的安装"></a>Django的安装</h4><ol>
<li><p><code>pip3 install Django</code></p>
</li>
<li><p>使用pycharm安装</p>
</li>
</ol>
<h4 id="Django的创建"><a href="#Django的创建" class="headerlink" title="Django的创建"></a>Django的创建</h4><ol>
<li><p>使用Pycharm进行创建  推荐</p>
</li>
<li><h5 id="使用命令行创建项目"><a href="#使用命令行创建项目" class="headerlink" title="使用命令行创建项目"></a>使用命令行创建项目</h5><blockquote>
<p>django-admin startproject 项目名称</p>
</blockquote>
</li>
</ol>
<h4 id="Django的启动"><a href="#Django的启动" class="headerlink" title="Django的启动"></a>Django的启动</h4><ol>
<li>使用Pycharm的启动</li>
<li>使用命令行启动    推荐，要求多配一个显示屏</li>
<li><img src="/Users/shangzekai/Library/Application Support/typora-user-images/image-20200926153346790.png" alt="image-20200926153346790" style="zoom:50%;">

</li>
</ol>
<p>注意：当修改完代码的时候，Django会自动的帮我们启动，无需手动启动</p>
<h4 id="Django的生成文件的具体介绍"><a href="#Django的生成文件的具体介绍" class="headerlink" title="Django的生成文件的具体介绍"></a>Django的生成文件的具体介绍</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">|---mysite <span class="comment"># 项目的/目录 </span></span><br><span class="line">  |---mysite <span class="comment"># 项目目录 </span></span><br><span class="line">      |---__init__.py </span><br><span class="line">      |---settings.py <span class="comment"># 配置文件 </span></span><br><span class="line">      |---urls.py <span class="comment"># 路由系统 ===&gt; url与视图的对应关系 </span></span><br><span class="line">      |---wsgi.py <span class="comment"># runserver命令就使用wsgiref模块做简单的web server </span></span><br><span class="line">|---manage.py <span class="comment"># 管理文件</span></span><br></pre></td></tr></table></figure>

<h4 id="Django创建app"><a href="#Django创建app" class="headerlink" title="Django创建app"></a>Django创建app</h4><ol>
<li>pycharm创建app</li>
<li>使用命令行方式创建   <ol>
<li>python3 manage.py startapp app01</li>
<li><img src="/Users/shangzekai/Library/Application Support/typora-user-images/image-20200926155642676.png" alt="image-20200926155642676" style="zoom:50%;">

</li>
</ol>
</li>
</ol>
<p>如果，后续我们还想再新添加新的app，我们就必须使用第二种方式添加了。第一种方式只适合在项目刚创建的时候创建app</p>
<h4 id="app中的目录结构"><a href="#app中的目录结构" class="headerlink" title="app中的目录结构"></a>app中的目录结构</h4><blockquote>
<p>app中主要写业务逻辑</p>
</blockquote>
<img src="https://www.runoob.com/wp-content/uploads/2015/01/Django-env10.png" alt="aa" style="zoom:60%;">

<h4 id="Django的初体验"><a href="#Django的初体验" class="headerlink" title="Django的初体验"></a>Django的初体验</h4><h4 id="Web框架-Django-的简单执行流程"><a href="#Web框架-Django-的简单执行流程" class="headerlink" title="Web框架(Django)的简单执行流程"></a>Web框架(Django)的简单执行流程</h4><h5 id="Django的路由"><a href="#Django的路由" class="headerlink" title="Django的路由"></a><img src="/Users/shangzekai/Library/Application Support/typora-user-images/image-20200926161845127.png" alt="image-20200926161845127" style="zoom:50%;">Django的路由</h5><p>1.django的路由匹配部分不同的版本可能会不一致</p>
<p>2.path 和 repath 的区别</p>
<p>3.解决重复定义的问题：</p>
<p>​        起别名，避免重复</p>
<img src="/Users/shangzekai/Library/Application Support/typora-user-images/image-20200926165408414.png" alt="image-20200926165408414" style="zoom:50%;">

<p>​        路由分发 （重要）</p>
<p>​        使用include来进行路由的分发</p>
<p>4.反向解析</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&#123;% url &#39;mylogin&#39; %&#125;&quot; method&#x3D;&quot;get&quot;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="Django的视图"><a href="#Django的视图" class="headerlink" title="Django的视图"></a>Django的视图</h5><blockquote>
<p>用来处理业务逻辑相关的</p>
</blockquote>
<p>视图层中有两个重要的对象：请求对象(HttpRequest)与响应对象(HttpResponse)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##### request.GET 用来获取get请求发送到额数据</span><br><span class="line"># print(request.GET)  ### &lt;QueryDict: &#123;&#39;name&#39;: [&#39;szk&#39;], &#39;age&#39;: [&#39;12&#39;]&#125;&gt;</span><br><span class="line"># print(request.GET.get(&#39;name&#39;))</span><br><span class="line"># print(request.GET.get(&#39;age&#39;))</span><br><span class="line"></span><br><span class="line">#### request.POST 用来获取post请求发送到额数据  Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">print(request.POST) ## QueryDict: &lt; &#123;&#39;username&#39;: [&#39;szk&#39;], &#39;passwd&#39;: [&#39;123qwe&#39;]&#125;&gt;</span><br><span class="line">print(request.POST.get(&#39;name&#39;))</span><br></pre></td></tr></table></figure>

<img src="/Users/shangzekai/Library/Application Support/typora-user-images/image-20200926174408729.png" alt="image-20200926174408729" style="zoom:50%;">

<p>如下非常重要</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### request.POST 用来获取post请求发送到额数据  Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">print(request.body) ### b&#39;username&#x3D;szk&amp;passwd&#x3D;123qwe&#39;</span><br><span class="line">print(request.POST) ## QueryDict: &lt; &#123;&#39;username&#39;: [&#39;szk&#39;], &#39;passwd&#39;: [&#39;123qwe&#39;]&#125;&gt;</span><br><span class="line">print(request.POST.get(&#39;username&#39;))</span><br><span class="line"></span><br><span class="line">### 当用户发送post请求的时候，请求体中的数据先到request.body中，</span><br><span class="line">### 然后接下来判断用户的请求体： Content-Type: application&#x2F;x-www-form-urlencoded，</span><br><span class="line">### 那此时django会将request.body中的数据赋值给request.POST</span><br><span class="line">### 因为有的时候，用户发送的虽然是post请求， 但是用户的请求体是: Content-Type: application&#x2F;json，那此时request.POST中没有值</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">    requests.post(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;app01&#x2F;&#39;)</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>



<h5 id="Django的模板"><a href="#Django的模板" class="headerlink" title="Django的模板"></a>Django的模板</h5><h5 id="Django的数据库部分"><a href="#Django的数据库部分" class="headerlink" title="Django的数据库部分"></a>Django的数据库部分</h5><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day08-02</title>
    <url>/2020/09/27/py-day08-02/</url>
    <content><![CDATA[<p>Django day-01</p>
<a id="more"></a>
<h2 id="第十九章-Django的路由和视图"><a href="#第十九章-Django的路由和视图" class="headerlink" title="第十九章 Django的路由和视图"></a>第十九章 Django的路由和视图</h2><h3 id="Django的路由"><a href="#Django的路由" class="headerlink" title="Django的路由"></a>Django的路由</h3><p>路由简单的来说就是根据用户请求的 URL 链接来判断对应的处理程序，并返回处理结果，也就是 URL 与 Django 的视图建立映射关系。</p>
<p>Django 路由在 urls.py 配置，urls.py 中的每一条配置对应相应的处理方法。</p>
<p>Django 不同版本 urls.py 配置有点不一样：</p>
<h4 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h4><ul>
<li>Django1.1.x 版本</li>
</ul>
<p>url() 方法：普通路径和正则路径均可使用，需要自己手动添加正则首位限制符号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url <span class="comment"># 用 url 需要引入 </span></span><br><span class="line"></span><br><span class="line">urlpatterns = [ </span><br><span class="line">    url(<span class="string">r&#x27;^admin/$&#x27;</span>, admin.site.urls), </span><br><span class="line">    url(<span class="string">r&#x27;^index/$&#x27;</span>, views.index), <span class="comment"># 普通路径 </span></span><br><span class="line">    url(<span class="string">r&#x27;^articles/([0-9]&#123;4&#125;)/$&#x27;</span>, views.articles), <span class="comment"># 正则路径 </span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ul>
<li>Django 2.2.x 之后的版本</li>
</ul>
<p>path：用于普通路径<br>re_path：用于正则路径，需要自己手动添加正则首位限制符号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path <span class="comment"># 用re_path 需要引入 </span></span><br><span class="line">urlpatterns = [ </span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls), </span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index), <span class="comment"># 普通路径 </span></span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/([0-9]&#123;4&#125;)/$&#x27;</span>, views.articles), <span class="comment"># 正则路径 </span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：Django1.1.x 版本中的 url 和 Django 2.2.x 版本中的 re_path 用法相同。</p>
</blockquote>
<h4 id="路由分发"><a href="#路由分发" class="headerlink" title="路由分发"></a>路由分发</h4><p>存在问题：Django 项目里多个app目录共用一个 urls 容易造成混淆，后期维护也不方便。<br>解决：使用路由分发（include），让每个app目录都单独拥有自己的 urls。</p>
<p>步骤：<br>1、在每个 app 目录里都创建一个 urls.py 文件。<br>2、在项目名称目录下的 urls 文件里，统一将路径分发给各个 app 目录。</p>
<p>例子：<br>在总路由中配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,include <span class="comment"># 从 django.urls 引入 include </span></span><br><span class="line">urlpatterns = [ </span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls), </span><br><span class="line">    path(<span class="string">&quot;app01/&quot;</span>, include(<span class="string">&quot;app01.urls&quot;</span>)), </span><br><span class="line">    path(<span class="string">&quot;app02/&quot;</span>, include(<span class="string">&quot;app02.urls&quot;</span>)), </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在各自 app 目录下，写自己的 urls.py 文件，进行路径跳转。</p>
<p>app01 目录:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path </span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views <span class="comment"># 从自己的 app 目录引入 views </span></span><br><span class="line">urlpatterns = [ </span><br><span class="line">    re_path(<span class="string">r&#x27;^test/&#x27;</span>, views.index, ),</span><br><span class="line">] </span><br></pre></td></tr></table></figure>
<p>app02 目录:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path,re_path</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views <span class="comment"># 从自己的 app 目录引入views </span></span><br><span class="line">urlpatterns = [ </span><br><span class="line">    re_path(<span class="string">&quot;^test/&quot;</span>, views.xxx), </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><img src="https://www.runoob.com/wp-content/uploads/2020/05/Django-env4.png" alt="aa"></p>
<p>在各自 app 目录下的 views.py 文件中写各自的视图函数。</p>
<h4 id="反向解析"><a href="#反向解析" class="headerlink" title="反向解析"></a>反向解析</h4><p>随着功能的增加，路由层的 url 发生变化，就需要去更改对应的视图层和模板层的 url，非常麻烦，不便维护。</p>
<p>这时我们可以利用反向解析，当路由层 url 发生改变，在视图层和模板层动态反向解析出更改后的 url，免去修改的操作。</p>
<p>反向解析一般用在模板中的超链接。</p>
<p>例子2：</p>
<p>在模板 templates 中的 HTML 文件中，利用 <code>&#123;% url "路由别名" %&#125;</code> 反向解析。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&#123;% url &#x27;test&#x27; %&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt; </span><br></pre></td></tr></table></figure>
<p><img src="https://www.runoob.com/wp-content/uploads/2020/05/Django-env8.png" alt="aa"></p>
<h3 id="Django的视图"><a href="#Django的视图" class="headerlink" title="Django的视图"></a>Django的视图</h3><p>一个视图函数，简称视图，是一个简单的 Python 函数，它接受 Web 请求并且返回 Web 响应。</p>
<p>响应可以是一个 HTML 页面、一个 404 错误页面、重定向页面、XML 文档、或者一张图片…</p>
<p>无论视图本身包含什么逻辑，都要返回响应。代码写在哪里都可以，只要在 Python 目录下面，一般放在项目的 views.py 文件中。</p>
<p>每个视图函数都负责返回一个 HttpResponse 对象，对象中包含生成的响应。</p>
<p>视图层中有两个重要的对象：请求对象(request)与响应对象(HttpResponse)。</p>
<h4 id="请求对象-HttpRequest-对象（简称-request-对象）"><a href="#请求对象-HttpRequest-对象（简称-request-对象）" class="headerlink" title="请求对象: HttpRequest 对象（简称 request 对象）"></a>请求对象: HttpRequest 对象（简称 request 对象）</h4><p>以下介绍几个常用的 request 属性。</p>
<h5 id="1、GET"><a href="#1、GET" class="headerlink" title="1、GET"></a>1、GET</h5><p>数据类型是 QueryDict，一个类似于字典的对象，包含 HTTP GET 的所有参数。<br>有相同的键，就把所有的值放到对应的列表里。<br>取值格式：对象.方法。</p>
<blockquote>
<p>get()：返回字符串，如果该键对应有多个值，取出该键的最后一个值。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.GET.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;姓名：&#123;&#125;&#x27;</span>.format(name))</span><br></pre></td></tr></table></figure>

<h5 id="2、POST"><a href="#2、POST" class="headerlink" title="2、POST"></a>2、POST</h5><p>数据类型是 QueryDict，一个类似于字典的对象，包含 HTTP POST 的所有参数。</p>
<p>常用于 form 表单，form 表单里的标签 name 属性对应参数的键，value 属性对应参数的值。</p>
<p>取值格式： 对象.方法。</p>
<blockquote>
<p>get()：返回字符串，如果该键对应有多个值，取出该键的最后一个值。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.POST.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;姓名：&#123;&#125;&#x27;</span>.format(name))</span><br></pre></td></tr></table></figure>

<h5 id="3、body"><a href="#3、body" class="headerlink" title="3、body"></a>3、body</h5><p>数据类型是二进制字节流，是原生请求体里的参数内容，在 HTTP 中用于 POST，因为 GET 没有请求体。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.body</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;51aiops&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="4、method"><a href="#4、method" class="headerlink" title="4、method"></a>4、method</h5><p>获取当前请求的方式，数据类型是字符串，且结果为大写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.method</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;51aiops&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="响应对象：HttpResponse-对象"><a href="#响应对象：HttpResponse-对象" class="headerlink" title="响应对象：HttpResponse 对象"></a>响应对象：HttpResponse 对象</h4><p>响应对象主要形式：HttpResponse()、render()</p>
<p>HttpResponse(): 返回文本，参数为字符串，字符串中写文本内容。如果参数为字符串里含有 html 标签，也可以渲染。</p>
<p>render(): 返回文本，第一个参数为 request，第二个参数为字符串（页面名称），第三个参数为字典（可选参数，向页面传递的参数：键为页面参数名，值为views参数名）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name =<span class="string">&quot;test&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;aaa.html&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:name&#125;)</span><br></pre></td></tr></table></figure>

<p>JsonResponse对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前后端真正能够分离的关键</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">  dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;  <span class="comment"># 等价于用json转json.dumps(),再发送！</span></span><br><span class="line">  <span class="comment"># import json</span></span><br><span class="line">  <span class="comment"># return HttpResponse(json.dumps(dic))</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 如果不是字典类型，会报错,看源码需要指定safe=False</span></span><br><span class="line">  <span class="comment"># l1 = [1,2,3]</span></span><br><span class="line">  <span class="comment"># return JsonResponse(l1,safe=False)</span></span><br><span class="line">  <span class="keyword">return</span> JsonResponse(dic)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编码问题  jason在序列话数据的时候默认以ascill码编码中文数据</span></span><br><span class="line">    <span class="comment"># res = &#123;&#x27;name&#x27;:&#x27;元少&#x27;&#125;</span></span><br><span class="line">    <span class="comment"># ret = json.dumps(res)         ### 中文被编码</span></span><br><span class="line">    <span class="comment"># ret = json.dumps(res,ensure_ascill=False)</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(dic,json_dumps_params=&#123;<span class="string">&#x27;ensure_ascill&#x27;</span>:<span class="literal">False</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="FBV-与-CBV"><a href="#FBV-与-CBV" class="headerlink" title="FBV 与 CBV"></a>FBV 与 CBV</h4><p>FBV（function base views） 基于函数的视图，就是在视图里使用函数处理请求。<br>CBV（class base views） 基于类的视图，就是在视图里使用类处理请求。</p>
<p>FBV</p>
<p>基于函数的视图其实我们前面章节一直在使用，就是使用了函数来处理用户的请求，查看以下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 方法&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;test&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法1&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>CBV</p>
<blockquote>
<p>基于类的视图，就是使用了类来处理用户的请求，不同的请求我们可以在类中使用不同方法来处理，这样大大的提高了代码的可读性。</p>
</blockquote>
<p>定义的类要继承父类 View，所以需要先引入库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br></pre></td></tr></table></figure>

<p>执行对应请求的方法前会优先执行 dispatch 方法(在get/post/put…方法前执行)，dispatch() 方法会根据请求的不同调用相应的方法来处理。</p>
<p>其实，在我们前面学到的知识都知道 Django 的 url 是将一个请求分配给可调用的函数的，而不是一个类，那是如何实现基于类的视图的呢？ 主要还是通过父类 View 提供的一个静态方法 as_view() ，as_view 方法是基于类的外部接口， 他返回一个视图函数，调用后请求会传递给 dispatch 方法，dispatch 方法再根据不同请求来处理不同的方法。</p>
<p>路由配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;login/&quot;</span>, views.Login.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>views文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;test&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法 1&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&#123;% url &#x27;test&#x27; %&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt; </span><br></pre></td></tr></table></figure>
<p><img src="https://www.runoob.com/wp-content/uploads/2020/05/Django-env8.png" alt="aa"></p>
<h3 id="Django的视图-1"><a href="#Django的视图-1" class="headerlink" title="Django的视图"></a>Django的视图</h3><p>一个视图函数，简称视图，是一个简单的 Python 函数，它接受 Web 请求并且返回 Web 响应。</p>
<p>响应可以是一个 HTML 页面、一个 404 错误页面、重定向页面、XML 文档、或者一张图片…</p>
<p>无论视图本身包含什么逻辑，都要返回响应。代码写在哪里都可以，只要在 Python 目录下面，一般放在项目的 views.py 文件中。</p>
<p>每个视图函数都负责返回一个 HttpResponse 对象，对象中包含生成的响应。</p>
<p>视图层中有两个重要的对象：请求对象(request)与响应对象(HttpResponse)。</p>
<h4 id="请求对象-HttpRequest-对象（简称-request-对象）-1"><a href="#请求对象-HttpRequest-对象（简称-request-对象）-1" class="headerlink" title="请求对象: HttpRequest 对象（简称 request 对象）"></a>请求对象: HttpRequest 对象（简称 request 对象）</h4><p>以下介绍几个常用的 request 属性。</p>
<h5 id="1、GET-1"><a href="#1、GET-1" class="headerlink" title="1、GET"></a>1、GET</h5><p>数据类型是 QueryDict，一个类似于字典的对象，包含 HTTP GET 的所有参数。<br>有相同的键，就把所有的值放到对应的列表里。<br>取值格式：对象.方法。</p>
<blockquote>
<p>get()：返回字符串，如果该键对应有多个值，取出该键的最后一个值。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.GET.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;姓名：&#123;&#125;&#x27;</span>.format(name))</span><br></pre></td></tr></table></figure>

<h5 id="2、POST-1"><a href="#2、POST-1" class="headerlink" title="2、POST"></a>2、POST</h5><p>数据类型是 QueryDict，一个类似于字典的对象，包含 HTTP POST 的所有参数。</p>
<p>常用于 form 表单，form 表单里的标签 name 属性对应参数的键，value 属性对应参数的值。</p>
<p>取值格式： 对象.方法。</p>
<blockquote>
<p>get()：返回字符串，如果该键对应有多个值，取出该键的最后一个值。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.POST.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;姓名：&#123;&#125;&#x27;</span>.format(name))</span><br></pre></td></tr></table></figure>

<h5 id="3、body-1"><a href="#3、body-1" class="headerlink" title="3、body"></a>3、body</h5><p>数据类型是二进制字节流，是原生请求体里的参数内容，在 HTTP 中用于 POST，因为 GET 没有请求体。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.body</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;51aiops&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="4、method-1"><a href="#4、method-1" class="headerlink" title="4、method"></a>4、method</h5><p>获取当前请求的方式，数据类型是字符串，且结果为大写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = request.method</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;51aiops&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="响应对象：HttpResponse-对象-1"><a href="#响应对象：HttpResponse-对象-1" class="headerlink" title="响应对象：HttpResponse 对象"></a>响应对象：HttpResponse 对象</h4><p>响应对象主要形式：HttpResponse()、render()</p>
<p>HttpResponse(): 返回文本，参数为字符串，字符串中写文本内容。如果参数为字符串里含有 html 标签，也可以渲染。</p>
<p>render(): 返回文本，第一个参数为 request，第二个参数为字符串（页面名称），第三个参数为字典（可选参数，向页面传递的参数：键为页面参数名，值为views参数名）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    name =<span class="string">&quot;test&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;aaa.html&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:name&#125;)</span><br></pre></td></tr></table></figure>

<p>JsonResponse对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前后端真正能够分离的关键</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">  dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jason&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;  <span class="comment"># 等价于用json转json.dumps(),再发送！</span></span><br><span class="line">  <span class="comment"># import json</span></span><br><span class="line">  <span class="comment"># return HttpResponse(json.dumps(dic))</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 如果不是字典类型，会报错,看源码需要指定safe=False</span></span><br><span class="line">  <span class="comment"># l1 = [1,2,3]</span></span><br><span class="line">  <span class="comment"># return JsonResponse(l1,safe=False)</span></span><br><span class="line">  <span class="keyword">return</span> JsonResponse(dic)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编码问题  jason在序列话数据的时候默认以ascill码编码中文数据</span></span><br><span class="line">    <span class="comment"># res = &#123;&#x27;name&#x27;:&#x27;元少&#x27;&#125;</span></span><br><span class="line">    <span class="comment"># ret = json.dumps(res)         ### 中文被编码</span></span><br><span class="line">    <span class="comment"># ret = json.dumps(res,ensure_ascill=False)</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(dic,json_dumps_params=&#123;<span class="string">&#x27;ensure_ascill&#x27;</span>:<span class="literal">False</span>&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="FBV-与-CBV-1"><a href="#FBV-与-CBV-1" class="headerlink" title="FBV 与 CBV"></a>FBV 与 CBV</h4><p>FBV（function base views） 基于函数的视图，就是在视图里使用函数处理请求。<br>CBV（class base views） 基于类的视图，就是在视图里使用类处理请求。</p>
<p>FBV</p>
<p>基于函数的视图其实我们前面章节一直在使用，就是使用了函数来处理用户的请求，查看以下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 方法&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;test&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法1&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>CBV</p>
<blockquote>
<p>基于类的视图，就是使用了类来处理用户的请求，不同的请求我们可以在类中使用不同方法来处理，这样大大的提高了代码的可读性。</p>
</blockquote>
<p>定义的类要继承父类 View，所以需要先引入库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br></pre></td></tr></table></figure>

<p>执行对应请求的方法前会优先执行 dispatch 方法(在get/post/put…方法前执行)，dispatch() 方法会根据请求的不同调用相应的方法来处理。</p>
<p>其实，在我们前面学到的知识都知道 Django 的 url 是将一个请求分配给可调用的函数的，而不是一个类，那是如何实现基于类的视图的呢？ 主要还是通过父类 View 提供的一个静态方法 as_view() ，as_view 方法是基于类的外部接口， 他返回一个视图函数，调用后请求会传递给 dispatch 方法，dispatch 方法再根据不同请求来处理不同的方法。</p>
<p>路由配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;login/&quot;</span>, views.Login.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>views文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET 方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        user = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;test&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST 方法 1&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### 1. 获取请求参数 QueryDict 是一个类似于字典格式的数据</span></span><br><span class="line">    <span class="comment">##### request.GET 用来获取get请求发送到额数据</span></span><br><span class="line">    <span class="comment"># print(request.GET)  ### &lt;QueryDict: &#123;&#x27;name&#x27;: [&#x27;szk&#x27;], &#x27;age&#x27;: [&#x27;12&#x27;]&#125;&gt;</span></span><br><span class="line">    <span class="comment"># print(request.GET.get(&#x27;name&#x27;))</span></span><br><span class="line">    <span class="comment"># print(request.GET.get(&#x27;age&#x27;))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#### request.POST 用来获取post请求发送到额数据  Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line">    print(request.body) <span class="comment">### b&#x27;username=szk&amp;passwd=123qwe&#x27;</span></span><br><span class="line">    print(request.POST) <span class="comment">## QueryDict: &lt; &#123;&#x27;username&#x27;: [&#x27;szk&#x27;], &#x27;passwd&#x27;: [&#x27;123qwe&#x27;]&#125;&gt;</span></span><br><span class="line">    print(request.POST.get(<span class="string">&#x27;username&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">### 当用户发送post请求的时候，请求体中的数据先到request.body中，</span></span><br><span class="line">    <span class="comment">### 然后接下来判断用户的请求体： Content-Type: application/x-www-form-urlencoded，</span></span><br><span class="line">    <span class="comment">### 那此时django会将request.body中的数据赋值给request.POST</span></span><br><span class="line">    <span class="comment">### 因为有的时候，用户发送的虽然是post请求， 但是用户的请求体是: Content-Type: application/json，那此时request.POST中没有值</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        requests.post(&#x27;http://127.0.0.1:8000/app01/&#x27;)</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>get post请求数据<ul>
<li>QueryDict 格式，DJango封装的类似于字典的格式</li>
<li>有get方法</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-drf-02</title>
    <url>/2020/12/28/py-drf-02/</url>
    <content><![CDATA[<p>DRF-day02</p>
<a id="more"></a>
<h2 id="1-复习"><a href="#1-复习" class="headerlink" title="1. 复习"></a>1. 复习</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.Serializer类，需要序列化什么，必须要写一个继承，想序列化什么字段，就在里面写字段，source的作用（很多字段类）</span></span><br><span class="line"><span class="comment"># 2.序列化queryset(列表)对象和真正的对象，many=True的作用，instance=要序列化的对象</span></span><br><span class="line"><span class="comment"># 3.反序列化，instance要序列化的对象，data=request.data</span></span><br><span class="line"><span class="comment"># 4.字段验证，序列化类中，给字段加属性，局部和全局钩子函数，字段属性的validators=[check_author]</span></span><br><span class="line"><span class="comment"># 5.当在视图中调用序列化对象.is_valid() boo_ser.is_valid(raise_exception=True)，只要验证不通过，直接抛异常</span></span><br><span class="line"><span class="comment"># 6.修改保存-&gt;调用序列化对象.save()，重写Serializer类的update方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># instance是book这个对象</span></span><br><span class="line">        <span class="comment"># validated_data是校验后的数据</span></span><br><span class="line">        instance.name = validated_data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        instance.price = validated_data.get(<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line">        instance.author = validated_data.get(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">        instance.publish = validated_data.get(<span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">        instance.save()  <span class="comment"># book.save() django的orm提供的</span></span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"><span class="comment"># 7.序列化得到字典，序列化对象.data</span></span><br><span class="line"><span class="comment"># 8.自定义了Response对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myresponse</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.status = <span class="number">100</span></span><br><span class="line">        self.msg = <span class="string">&#x27;成功&#x27;</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dict</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__dict__</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    res = Myresponse()</span><br><span class="line">    res.status = <span class="number">101</span></span><br><span class="line">    res.msg = <span class="string">&#x27;失败&#x27;</span></span><br><span class="line">    res.data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lqz&#x27;</span>&#125;</span><br><span class="line">    print(res.get_dict)</span><br><span class="line"><span class="comment"># 9.反序列化的新增 序列化类(data=request.data),序列化对象.save(),如果只传了data，当调用 序列化对象.save()，会触发序列化类的craete方法执行;当传了instance和data，当调用 序列化对象.save()，会触发序列化类的update方法执行;当</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.重写create方法(可以很复杂)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        instance = Book.objects.create(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"><span class="comment"># 11.ModelSerializer 跟model模型对应</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_price</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    publish=seriliazers.CharField(source=<span class="string">&#x27;publish.name&#x27;</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book  <span class="comment"># 对应上model.py中的模型</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        <span class="comment"># fields = (&#x27;name&#x27;,&#x27;price&#x27;,&#x27;publish&#x27;) # 只序列化指定的字段</span></span><br><span class="line">        <span class="comment"># exclude = (&#x27;name&#x27;,) #跟fields不能都写，写谁，就表示排除谁</span></span><br><span class="line">        <span class="comment"># read_only_fields = (&#x27;id&#x27;, )    #</span></span><br><span class="line">        <span class="comment"># write_only_fields = (&#x27;price&#x27;)  # 弃用了，extra_kwargs</span></span><br><span class="line">        extra_kwargs = &#123; <span class="comment"># 类似于这种形式  name = serializers.CharField(max_length=16,min_length=4)</span></span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">False</span>,max_length:<span class="number">16</span>,min_length:<span class="number">4</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># 12 如果在ModelSerializer中写一个局部钩子或者全局钩子，如何写？</span></span><br><span class="line">     - 跟之前一模一样</span><br><span class="line"><span class="comment"># 13 many=True 能够序列化多条的原因---&gt; __new__是在__init__之前执行的，造出一个空对象</span></span><br><span class="line"><span class="comment"># 14, 接口：统一子类的行为</span></span><br></pre></td></tr></table></figure>

<h2 id="2-今日内容"><a href="#2-今日内容" class="headerlink" title="2.今日内容"></a>2.今日内容</h2><h3 id="1-请求和响应"><a href="#1-请求和响应" class="headerlink" title="1. 请求和响应"></a>1. 请求和响应</h3><h4 id="1-1-请求"><a href="#1-1-请求" class="headerlink" title="1.1. 请求"></a>1.1. 请求</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from rest_framework.request import Request </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, request, parsers=None, authenticators=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 negotiator=None, parser_context=None</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> isinstance(request, HttpRequest), (</span><br><span class="line">            <span class="string">&#x27;The `request` argument must be an instance of &#x27;</span></span><br><span class="line">            <span class="string">&#x27;`django.http.HttpRequest`, not `&#123;&#125;.&#123;&#125;`.&#x27;</span></span><br><span class="line">            .format(request.__class__.__module__, request.__class__.__name__)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 二次封装request，将原生作为drf request对象的_request 属性</span></span><br><span class="line">        self._request = request</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self._request, item)</span><br><span class="line"><span class="comment"># 请求对象.data: 前端以三种编码方式传入的数据，都可以取出来</span></span><br><span class="line"><span class="comment"># request.query_params与Django标准的request.GET相同，只是更换了更正确的名称而已。</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-响应"><a href="#1-2-响应" class="headerlink" title="1.2. 响应"></a>1.2. 响应</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># from rest_framework.response import Response</span><br><span class="line">def __init__(self, data&#x3D;None, status&#x3D;None,</span><br><span class="line">                template_name&#x3D;None, headers&#x3D;None,</span><br><span class="line">                exception&#x3D;False, content_type&#x3D;None):</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-xadmin</title>
    <url>/2020/11/20/py-xadmin/</url>
    <content><![CDATA[<p>Django-xadmin</p>
<a id="more"></a>

<div id="title">Django-xadmin的介绍</div>

<blockquote>
<p><code>Django</code>是<code>python</code>的重量级web框架,写得少,做得多,非常适合后端开发,它很大的一个亮点是,自带后台管理模块,但它自带的后台管理有点丑,而<code>Xadmin</code>是基于<code>bootstrap</code>开发的一套后台管理框架,界面非常美观,只需几步就可以替换自带的<code>Django_admin</code></p>
</blockquote>
<div id="title">具体的安装步骤</div>

<ol>
<li>xadmin在python2.x时代的安装方法</li>
</ol>
<p>在python2.x时代，安装xadmin是通过如下命令</p>
<blockquote>
<p>pip install xadmin </p>
</blockquote>
<p>2.<code>xadmin</code>在<code>python3.6.x</code>时代的安装方法</p>
<p><strong>需要安装如下的包</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install django-<span class="keyword">import</span>-export</span><br><span class="line">pip3 install django-reversion</span><br><span class="line">pip3 install django-formtools==<span class="number">2.1</span></span><br><span class="line">pip3 install future</span><br><span class="line">pip3 install httplib2</span><br><span class="line">pip3 install six</span><br><span class="line">pip3 install django-crispy-forms</span><br></pre></td></tr></table></figure>

<p>2.1 下载<code>xadmin</code></p>
<blockquote>
<p><a href="https://github.com/sshwsfc/xadmin">https://github.com/sshwsfc/xadmin</a></p>
</blockquote>
<p>2.2、解压缩，得到<code>xadmin</code>文件夹，复制到项目的<code>extra_apps</code>,解压缩，得到<code>xadmin</code>文件夹, 如下图所示：</p>
<p><img src="https://i.loli.net/2019/06/20/5d0b41759655b82871.jpg" alt="xadmin.jpg"></p>
<p>2.3、在django中的根目录下创建<code>Python Package</code>，命名为<code>extra_apps</code>（如果不存在此文件夹则创建, 然后 鼠标右键<code>extra_app</code> 随后 <code>mark as sources root</code>）<br>（<code>Python Package</code>是带<code>init</code>文件的，跟普通<code>Package</code>不同）</p>
<p>创建完<code>extra_apps</code>，需要在<code>settings</code>中配置一下<code>extra_apps</code>。设置为可搜索的路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.join(BASE_DIR, <span class="string">&#x27;extra_apps&#x27;</span>)) <span class="comment"># 把extra_apps文件夹添加到搜索目录中</span></span><br></pre></td></tr></table></figure>

<p>2.4、把<code>xadmin</code>文件夹复制到<code>extra_apps</code></p>
<p>2.5、<code>xadmin</code>的配置</p>
<p><strong>配置到 INSTALLED_APPS</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 显示中文</span></span><br><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"><span class="comment"># LANGUAGE_CODE = &#x27;en-us&#x27;</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># TIME_ZONE = &#x27;UTC&#x27;</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;xadmin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;crispy_forms&#x27;</span>, <span class="comment"># 注意crispy_forms之间是下划线隔开，不是横线</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>2.6、修改<code>urls.py</code>的<code>admin</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># url(&#x27;admin/&#x27;, admin.site.urls),</span></span><br><span class="line">    url(<span class="string">r&#x27;^xadmin/&#x27;</span>, xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>2.7、迁移文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure>

<p><strong>迁移完成后，我们看到数据库多了几张表</strong></p>
<p><img src="https://i.loli.net/2019/06/20/5d0b43084942d52028.jpg" alt="xadmintable.jpg"></p>
<p>2.8、<code>pycharm</code>创建<code>superuser</code> 用户</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure>

<p>至此完成。</p>
<p>如果报错，请先把原先旧的<code>app</code>里面<code>admin.py</code>里面的注册代码去掉，再试试</p>
<p>运行一下项目，访问</p>
<blockquote>
<p><a href="http://127.0.0.1:8000/xadmin/">http://127.0.0.1:8000/xadmin/</a></p>
</blockquote>
<h4 id="xadmin的使用"><a href="#xadmin的使用" class="headerlink" title="xadmin的使用"></a><div id="title">xadmin的使用</div></h4><p>1.需要在<code>app</code>中创建<code>adminx.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> repository <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> xadmin <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfileAdmin</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="comment">### 显示的字段名称</span></span><br><span class="line">    list_display = [<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span> ,<span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>,<span class="string">&#x27;mobile&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 搜索时可输入的字段内容</span></span><br><span class="line">    search_fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 点击id可进入详细界面进行编辑（默认的）</span></span><br><span class="line">    list_display_links = (<span class="string">&#x27;id&#x27;</span>,)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">## 可编辑的列名</span></span><br><span class="line">    list_editable = [<span class="string">&#x27;name&#x27;</span> ,<span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>,<span class="string">&#x27;mobile&#x27;</span>]</span><br><span class="line">    <span class="comment"># list_filter = [&#x27;name&#x27; ,&#x27;email&#x27;,&#x27;phone&#x27;,&#x27;mobile&#x27;]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每页显示多少条</span></span><br><span class="line">    list_per_page = <span class="number">20</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#根据id排序 </span></span><br><span class="line">    ordering = (<span class="string">&#x27;id&#x27;</span>,)　</span><br><span class="line">    　</span><br><span class="line">    <span class="comment">#设置只读字段　</span></span><br><span class="line">    readonly_fields = (<span class="string">&#x27;user_email&#x27;</span>,) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#显示本条数据的所有信息</span></span><br><span class="line">    show_detail_fields = [<span class="string">&#x27;asset_name&#x27;</span>] </span><br><span class="line"></span><br><span class="line">xadmin.site.register(models.UserProfile,UserProfileAdmin)</span><br></pre></td></tr></table></figure>


<p>3.数据导出<br>如果想要导出<code>Excel</code>数据，需要安装<code>xlwt</code>。</p>
<p>默认情况下，<code>xadmin</code>会提供<code>Excel</code>，<code>CSV</code>,<code>XML</code>，<code>json</code>四种格式的数据导出，可以通过设置<code>OptionClass</code>的<code>list_export</code>属性来指定使用哪些导出格式（四种格式分别用<code>xls</code>，<code>csv</code>，<code>xml</code>，<code>json</code>表示）或是将<code>list_export</code>设置为<code>None</code>来禁用数据导出功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_export = (<span class="string">&#x27;xls&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;json&#x27;</span>)</span><br><span class="line">list_export_fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;title&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p>4.设置全局的配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局修改，固定写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GlobalSettings</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="comment"># 修改title</span></span><br><span class="line">    site_title = <span class="string">&#x27;xxx后台管理界面&#x27;</span></span><br><span class="line">    <span class="comment"># 修改footer</span></span><br><span class="line">    site_footer = <span class="string">&#x27;xxx的公司&#x27;</span></span><br><span class="line">    <span class="comment"># 收起菜单</span></span><br><span class="line">    menu_style = <span class="string">&#x27;accordion&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置 models图标</span></span><br><span class="line">    <span class="comment"># https://v3.bootcss.com/components/</span></span><br><span class="line">    <span class="comment"># http://www.yeahzan.com/fa/facss.html</span></span><br><span class="line">    global_search_models = [models.Disk, models.Server]</span><br><span class="line">    global_models_icon = &#123;</span><br><span class="line">        <span class="comment"># Server: &quot;glyphicon glyphicon-tree-conifer&quot;, Pool: &quot;fa fa-cloud&quot;</span></span><br><span class="line">        models.Server: <span class="string">&quot;fa fa-linux&quot;</span>, models.Disk: <span class="string">&quot;fa fa-cloud&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将title和footer信息进行注册</span></span><br><span class="line">xadmin.site.register(views.CommAdminView,GlobalSettings)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>图表显示</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_charts = &#123;</span><br><span class="line">        <span class="string">&quot;host_service_type_counts&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;部门机器使用情况&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;x-field&#x27;</span>: <span class="string">&quot;business_unit&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;y-field&#x27;</span>: (<span class="string">&quot;business_unit&quot;</span>),</span><br><span class="line">            <span class="string">&#x27;option&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;series&quot;</span>: &#123;<span class="string">&quot;bars&quot;</span>: &#123;<span class="string">&quot;align&quot;</span>: <span class="string">&quot;center&quot;</span>, <span class="string">&quot;barWidth&quot;</span>: <span class="number">0.8</span>, <span class="string">&quot;show&quot;</span>: <span class="literal">True</span>&#125;&#125;,</span><br><span class="line">                <span class="string">&quot;xaxis&quot;</span>: &#123;<span class="string">&quot;aggregate&quot;</span>: <span class="string">&quot;count&quot;</span>, <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;categories&quot;</span>&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;host_idc_counts&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;机房统计&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;x-field&#x27;</span>: <span class="string">&quot;idc&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;y-field&#x27;</span>: (<span class="string">&quot;idc&quot;</span>,),</span><br><span class="line">            <span class="string">&#x27;option&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;series&quot;</span>: &#123;<span class="string">&quot;bars&quot;</span>: &#123;<span class="string">&quot;align&quot;</span>: <span class="string">&quot;center&quot;</span>, <span class="string">&quot;barWidth&quot;</span>: <span class="number">0.3</span>, <span class="string">&quot;show&quot;</span>: <span class="literal">True</span>&#125;&#125;,</span><br><span class="line">                <span class="string">&quot;xaxis&quot;</span>: &#123;<span class="string">&quot;aggregate&quot;</span>: <span class="string">&quot;count&quot;</span>, <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;categories&quot;</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>注册模型与对应的管理类</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xadmin.site.register(models.Disk, DiskAdmin)</span><br><span class="line">xadmin.site.register(models.Server, ServerAdmin)</span><br><span class="line">xadmin.site.register(models.IDC, IDCAdmin)</span><br><span class="line">xadmin.site.register(models.UserProfile, UserProfileAdmin)</span><br><span class="line">xadmin.site.register(models.UserGroup, UserGroupAdmin)</span><br></pre></td></tr></table></figure>



<p>​    </p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm使用</title>
    <url>/2020/10/25/pycharm%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Pycharm使用</p>
<a id="more"></a>

<p>Evernote Export    body, td { font-family: 微软雅黑; font-size: 10pt; }  </p>
<p>Pycharm基本使用</p>
<ol start="2">
<li>Pycharm的基本使用<ul>
<li>在Pycharm下为你的Python项目配置Python解释器<ol>
<li>Project:当前项目名&gt;Project Interpreter&gt;add Local</li>
</ol>
</li>
<li>在Pycharm下创建Python文件、Python模块<ol>
<li>File&gt;New&gt;Python File</li>
<li>File&gt;New&gt;Python Package</li>
</ol>
</li>
<li>使用Pycharm安装Python第三方模块<ol>
<li>Project:当前项目名&gt;Project Interpreter&gt;点击右侧绿色小加号</li>
</ol>
</li>
<li>Pycharm基本设置，例如不使用tab、tab=4空格、字体、字体颜色、主题、脚本头设置、显示行号等。如何导出和导入自定义设置。<ol>
<li>不使用tab、tab=4空格：Editor&gt;Code Style&gt;Python</li>
<li>字体、字体颜色：Edit&gt;Colors &amp; Fonts&gt;Python</li>
<li>关闭自动更新：Appearance &amp; Behavior&gt;System Settings&gt;Updates</li>
<li>脚本头设置：Edit&gt;File and Code Templates&gt;Python Script 注：其他类似</li>
<li>显示行号：Edit&gt;General&gt;Appearance&gt;Show line numbers 注：2016.2默认显示行号</li>
<li>右侧竖线是PEP8的代码规范，提示一行不要超过120个字符</li>
<li>导出、导入你自定义的配置： File&gt;Export Settings、Import Settings</li>
</ol>
</li>
<li>常用快捷键，例如复制当前行、删除当前行、批量注释、缩进、查找和替换。<ol>
<li>常用快捷键的查询和配置：Keymap<ol>
<li>Ctrl + D：复制当前行</li>
<li>Ctrl + E：删除当前行</li>
<li>Shift + Enter：快速换行</li>
<li>Ctrl + /：快速注释（选中多行后可以批量注释）</li>
<li>Tab：缩进当前行（选中多行后可以批量缩进）</li>
<li>Shift + Tab：取消缩进（选中多行后可以批量取消缩进）</li>
<li>Ctrl + F：查找</li>
<li>Ctrl + H：替换</li>
</ol>
</li>
</ol>
</li>
<li>Pycharm安装插件，例如Markdown support、数据库支持插件等。<ol>
<li>Plugins&gt;Browse repositories（下方三个按钮中间那个）&gt;搜索‘markdown support’&gt;install</li>
<li>右上角View有三个选项可选，一般我们都用中间那个左侧编写，右侧实时预览</li>
</ol>
</li>
<li>Git配置？<ol>
<li>需要本地安装好Git</li>
<li>Version Control&gt;Git</li>
<li>配置了Git等版本控制系统之后，可以很方便的diff查看文件的不用</li>
</ol>
</li>
<li>常用操作指南。例如复制文件路径、在文件管理器中打开、快速定位、查看模块结构视图、tab批量换space、TODO的使用、Debug的使用。<ol>
<li>复制文件路径：左侧文件列表右键选中的文件&gt;Copy Path</li>
<li>在文件管理器中打开：右键选中的文件&gt;往下找到Show In Explorer</li>
<li>快速定位：Ctrl + 某些内建模块之后，点击在源文件中展开</li>
<li>查看结构：IDE左侧边栏Structure 查看当前项目的结构</li>
<li>tab批量换space：Edit&gt;Convert Indents</li>
<li>TODO的使用：# TODO 要记录的事情</li>
<li>Debug设置断点，直接点击行号与代码之间的空白处即可设置断点（视频里忘了说）</li>
<li>Tab页上右键&gt;Move Right（Down），把当前Tab页移到窗口右边（下边），方便对比</li>
<li>文件中右键&gt;Local History能够查看文件修改前后的对比</li>
<li>IDE右下角能看到一些有用的信息，光标当前在第几行的第几个字符、当前回车换行、当前编码类型、当前Git分支</li>
<li>IDE右侧边栏&gt;Database</li>
</ol>
</li>
<li>如何去掉烦人的波浪线？PEP8又是什么？<ol>
<li>单独一行的注释：#+1空格+注释内容</li>
<li>代码后跟着的注释：2空格+#+1空格+注释内容</li>
</ol>
</li>
<li>SSH Terminal： Default encoding:UTF-8<ol>
<li>Settings&gt;Tools&gt;SSH Terminal&gt;最后一行Default encoding:选择UTF-82.  善用搜索！善用搜索！善用搜索！</li>
</ol>
<ul>
<li>遇到不懂问题，先自己搜索。这样才记得更牢！2.  推荐使用sogou英文搜索<a href="http://english.sogou.com/">http://english.sogou.com/</a></li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>socket网络编程</title>
    <url>/2021/04/15/socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>socket 网络编程</p>
<a id="more"></a>
<hr>
<h3 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h3><p><strong>网络号</strong>: （ip与掩码位运算）标明是否在同一个局域网<br><strong>ARP协议</strong>: 二层交换机工作所在层级，IP –&gt; MAC 地址的映射关系<br>三层为路由协议（公网）<br>网卡（工作在2层）<br><strong>帧</strong>：头16字节(源地址mac + 目标地址mac) + 数据部分 1500MTU 一次最多接受1500字节<br><strong>包</strong>: 源ip + 目的ip<br><strong>段</strong>: 源端口+ 目的端口</p>
<ul>
<li>交换机只有两种情况广播:<ul>
<li>目标mac FF.FF.FF.FF</li>
<li>目标mac不在mac地址表中</li>
</ul>
</li>
</ul>
<p><strong>socket五元组</strong><br>源ip 目的ip 源端口 目的端口 协议</p>
<h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>tcp/udp 基于端口<br>端口范围 0-65535  0-1023 系统保留</p>
<p>基于tcp协议通信: 必须建立一个双向通信的链接<br>C&lt;————-&gt;S<br>三次握手建立 双向通路</p>
<h5 id="三次握手建立连接"><a href="#三次握手建立连接" class="headerlink" title="三次握手建立连接"></a><strong>三次握手建立连接</strong></h5><img src="/2021/04/15/socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" class title="三次握手四次挥手">

<ul>
<li>tcp 为什么可靠？<br>是因为每发一个数据，服务端回应信息说收到，客户端才会把自己的数据清理掉(内存)，才算完成；一定时间之内 服务端没回应信息，认为这个数据包丢了，客户端会重新发一份给服务端，保证服务端必须收到数据。<br>双向通路只是用来发数据的。</li>
</ul>
<p>一般 服务端会 主动发起断开连接，以支持其他客户端连接请求。</p>
<p><strong>服务端处于timewait状态，意味着正在经历高并发。</strong></p>
<ul>
<li>udp为什么不可靠？<br>速度优先 选择udp协议<br>不需要建立双向连接，udp传输数据不需要对方确认，发过去就清理掉了。<br>qq udp通信</li>
</ul>
<h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>可以自定义协议 ==&gt; 头部+数据部分<br>自定义协议需要注意的问题:</p>
<ol>
<li>两大组成部分=头部+数据部门<ul>
<li>头部：放对数据的描述信息<ul>
<li>比如:数据要发给谁，数据的类型，数据的长度</li>
</ul>
</li>
<li>数据部分: 想要发的数据</li>
</ul>
</li>
<li>头部长度必须固定<br> 因为接收端要通过头部活动区所接收的数据的详细信息</li>
</ol>
<p>http https  ftp</p>
<h3 id="socket介绍"><a href="#socket介绍" class="headerlink" title="socket介绍"></a>socket介绍</h3><p>传输层以下归套接字socket管理</p>
<p>我们知道两个进程如果需要进行通讯最基本的一个前提能能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道IP层的ip地址可以唯一标示主机，而TCP层协议和端口号可以唯一标示主机的一个进程，这样我们可以利用ip地址＋协议＋端口号唯一标示网络中的一个进程。</p>
<p>能够唯一标示网络中的进程后，它们就可以利用socket进行通信了，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。</p>
<blockquote>
<p>总结：套接字是什么，位于应用层与传输层之间，用来把传输层以下的协议封装好，提供好简单的接口；但凡编写基于网络通信的cs架构的软件，基于套接字去写就可以了。遵循套接字简单的接口规范，写出来的程序自然是遵循tcp/udp协议的了。</p>
</blockquote>
<blockquote>
<p><strong>也有人将socket说成ip+port，ip是用来标识互联网中的一台主机的位置，而port是用来标识这台机器上的一个应用程序，ip地址是配置到网卡上的，而port是应用程序开启的，ip与port的绑定就标识了互联网中独一无二的一个应用程序;而程序的pid是同一台机器上不同进程或者线程的标识</strong></p>
</blockquote>


<p>socket起源于UNIX，在Unix一切皆文件哲学的思想下，socket是一种”打开—读/写—关闭”模式的实现，服务器和客户端各自维护一个”文件”，在建立连接打开后，可以向自己文件写入内容供对方读取或者读取对方内容，通讯结束时关闭文件。</p>
<ul>
<li>套接字工作流程

</li>
</ul>
<p>套接字之所以简单是因为：客户端只需要调connect接口，服务端调accept接口；客户端干了什么：发syn，服务端回ack+syn，客户端再回ack； connect和accept接口把三次握手细节全部封装好了。</p>
<p>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="comment"># 流式协议 =&gt; tcp协议</span></span><br><span class="line"></span><br><span class="line">phone.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8080</span>))</span><br><span class="line">phone.listen(<span class="number">5</span>)   <span class="comment"># 半链接池</span></span><br><span class="line"></span><br><span class="line">conn, client_addr = phone.accept()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;客户端的ip和端口&#x27;</span>, client_addr)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = conn.recv(<span class="number">1024</span>) <span class="comment">#  收到的是bytes类型</span></span><br><span class="line">        <span class="keyword">if</span> len(data) == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 在unix系统中，一旦data收到是空</span></span><br><span class="line">            <span class="comment"># 意味着是一种异常的行为: 客户度阿女非法断开了链接</span></span><br><span class="line">             <span class="keyword">break</span></span><br><span class="line">        print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        conn.send(data.upper())</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># phone.close()</span></span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">phone = socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="comment"># 流式协议 =&gt; tcp协议</span></span><br><span class="line"></span><br><span class="line">phone.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = input(<span class="string">&#x27;输入要发送的消息&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(msg) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    phone.send(msg.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    data = phone.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">phone.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h4 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h4><p>TCP独有（流式协议）<br><strong>原因</strong>:<br>tcp是流式协议,数据像水流一样发出去；TCP协议nagle算法会把时间间隔较短，数据量较小的数据粘到一起，没有任何边界区分,基于网络发出去。<strong>收数据没收干净</strong>,会和下一次结果混合在一起。</p>
<p><strong>解决方案</strong>: 收数据的时候收干净就好了</p>
<ul>
<li><p>基于tcp协议实现远程执行命令</p>
</li>
<li><p>终极粘包解决方案<br>服务端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端应该满足两个特点</span></span><br><span class="line"><span class="comment"># 1. 一直对外提供服务</span></span><br><span class="line"><span class="comment"># 2. 并发的实现多个客户端</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">server = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">server.setsockopt(SOL_SOCKET, SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端应该做两件事</span></span><br><span class="line"><span class="comment"># 第一件事: 循环地从半连接池中去除链接请求与其建立双向链接，拿到链接对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, client_addr = server.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二件事: 拿到链接对象，与其进行通信循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = conn.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> len(cmd) == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            obj = subprocess.Popen(cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">                                   shell=<span class="literal">True</span>,</span><br><span class="line">                                   stdout=subprocess.PIPE,</span><br><span class="line">                                   stderr=subprocess.PIPE</span><br><span class="line">                                   )</span><br><span class="line">            stdout_res = obj.stdout.read()</span><br><span class="line">            stderr_res = obj.stderr.read()</span><br><span class="line">            total_size = len(stdout_res) + len(stderr_res)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 1.制作头</span></span><br><span class="line">            header_dic = &#123;</span><br><span class="line">                <span class="string">&quot;filename&quot;</span>: <span class="string">&quot;a.txt&quot;</span>,</span><br><span class="line">                <span class="string">&quot;total_size&quot;</span>: total_size,</span><br><span class="line">                <span class="string">&quot;md5&quot;</span>: <span class="string">&quot;asdasdasd&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            json_str = json.dumps(header_dic)</span><br><span class="line">            json_str_bytes = json_str.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2. 先发数据的头长度发过去</span></span><br><span class="line">            <span class="comment"># int --&gt; 固定长度的bytes</span></span><br><span class="line">            header_length_x = struct.pack(<span class="string">&#x27;i&#x27;</span>, len(json_str_bytes))</span><br><span class="line">            conn.send(header_length_x)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 发头信息</span></span><br><span class="line">            conn.send(json_str_bytes)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 4. 再发真实的数据</span></span><br><span class="line">            conn.send(stderr_res)</span><br><span class="line">            conn.send(stdout_res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">client = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">&#x27;请输入命令&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(cmd) == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">    client.send(cmd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收端</span></span><br><span class="line">    <span class="comment"># 1.先收4个字节，从中提取接下来要收的头的长度</span></span><br><span class="line">    header_length_x = client.recv(<span class="number">4</span>)</span><br><span class="line">    header_length = struct.unpack(<span class="string">&#x27;i&#x27;</span>, header_length_x)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 2. 接收头,并解析</span></span><br><span class="line">    json_str_bytes = client.recv(header_length)</span><br><span class="line">    json_str = json_str_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    header_dic = json.loads(json_str)</span><br><span class="line">    print(header_dic)</span><br><span class="line">    total_size = header_dic[<span class="string">&quot;total_size&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.接收真是数据</span></span><br><span class="line">    recv_size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">        recv_data = client.recv(<span class="number">1024</span>)</span><br><span class="line">        recv_size += len(recv_data)</span><br><span class="line">        print(recv_data.decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="socketserver实现并发"><a href="#socketserver实现并发" class="headerlink" title="socketserver实现并发"></a>socketserver实现并发</h4><ul>
<li>基于tcp实现并发<br>服务端<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequestHandle</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">         <span class="comment"># 如果是tcp协议，self.request =&gt; conn</span></span><br><span class="line">        print(self.client_address)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cmd = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> len(cmd) == <span class="number">0</span>:<span class="keyword">break</span></span><br><span class="line">                self.request.send(cmd.upper())</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端应该做两件事</span></span><br><span class="line"><span class="comment"># 第一件事: 循环地从半连接池中去除链接请求与其建立双向链接，拿到链接对象</span></span><br><span class="line">s = socketserver.ThreadingTCPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8888</span>),MyRequestHandle)</span><br><span class="line">s.serve_forever()</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"><span class="comment"># while True:</span></span><br><span class="line"><span class="comment">#     启动一个线程conn,client_addr = server.accept()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二件事: 拿到链接对象，与其进行通信循环 ===&gt; handle</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8888</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">&#x27;请输入命令&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(cmd) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    client.send(cmd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解决粘包问题思路:</span></span><br><span class="line">    <span class="comment"># 1.拿到数据总大小</span></span><br><span class="line">    <span class="comment"># 2.revc_size = 0,循环接收,每收到一次，recv+=接收的长度</span></span><br><span class="line">    <span class="comment"># 3.直到revc_size = total_size 结束循环</span></span><br><span class="line">    cmd_res = client.recv(<span class="number">1024</span>)  <span class="comment"># 本次接收，最大接收1024bytes</span></span><br><span class="line">    print(cmd_res.decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>


<ul>
<li>基于UDP实现并发<br>服务端<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequestHandle</span>(<span class="params">socketserver.BaseRequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self</span>):</span></span><br><span class="line">        client_data = self.request[<span class="number">0</span>]</span><br><span class="line">        server = self.request[<span class="number">1</span>]</span><br><span class="line">        client_address = self.client_address</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;客户端发来的数据%s&#x27;</span> %client_data)</span><br><span class="line">        server.sendto(client_data.upper(), client_address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端应该做两件事</span></span><br><span class="line"><span class="comment"># 第一件事: 循环地从半连接池中去除链接请求与其建立双向链接，拿到链接对象</span></span><br><span class="line">s = socketserver.ThreadingUDPServer((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8888</span>),MyRequestHandle)</span><br><span class="line">s.serve_forever()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">client = socket(AF_INET,SOCK_DGRAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8888</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    cmd = input(<span class="string">&#x27;请输入命令&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> len(cmd) == <span class="number">0</span>:<span class="keyword">continue</span></span><br><span class="line">    client.send(cmd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解决粘包问题思路:</span></span><br><span class="line">    <span class="comment"># 1.拿到数据总大小</span></span><br><span class="line">    <span class="comment"># 2.revc_size = 0,循环接收,每收到一次，recv+=接收的长度</span></span><br><span class="line">    <span class="comment"># 3.直到revc_size = total_size 结束循环</span></span><br><span class="line">    cmd_res = client.recv(<span class="number">1024</span>)  <span class="comment"># 本次接收，最大接收1024bytes</span></span><br><span class="line">    print(cmd_res.decode(<span class="string">&#x27;utf-8&#x27;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-介绍</title>
    <url>/2020/11/20/vue-%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>vue简介</p>
<a id="more"></a>

<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p> 1、Vue.js目前最火的的一个前端框架，三大主流前端框架之一。<br> 2、Vue.js是一套构建用户界面的框架（一套完整的解决方案，对项目侵入性大，中途需要跟换框架则需要重构整个项目），只关注视图层，易上手，有配套的第三方类库。<br> 3、提高开发效率，帮助减少不必要的dom操作；双向数据绑定，通过框架提供的指令，前端只需要关注业务逻辑，不再关心dom如何渲染。</p>
<h4 id="作者：尤雨熙"><a href="#作者：尤雨熙" class="headerlink" title="作者：尤雨熙"></a>作者：尤雨熙</h4><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><blockquote>
<p><a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p>
</blockquote>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 导入vue的包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将来的Vue实例会控制这个元素中所有内容 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- V（View），Vue实例所控制的这个元素区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>   </span><br><span class="line">            <span class="comment">&lt;!-- 通过Vue提供的指令，很方便就能把data里的数据渲染到页面，不用手动操作dom了</span></span><br><span class="line"><span class="comment">           （前端Vue之类的框架，不提倡去手动操作dom） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//导入包,就有Vue的构造函数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//VM,这个new出来的vm对象,就是调度者</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;   <span class="comment">//&#123;&#125;配置对象</span></span></span><br><span class="line"><span class="javascript">                el:<span class="string">&#x27;#app&#x27;</span>,   <span class="comment">//element,这个Vue实例要控制页面上的哪个区域</span></span></span><br><span class="line"><span class="javascript">                data:&#123;   <span class="comment">//M,data就是用来保存当前页面数据的</span></span></span><br><span class="line"><span class="javascript">                    msg:<span class="string">&#x27;欢迎学习Vue&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="el的作用范围"><a href="#el的作用范围" class="headerlink" title="el的作用范围"></a>el的作用范围</h3><h4 id="选择器一定是id选择器吗？"><a href="#选择器一定是id选择器吗？" class="headerlink" title="选择器一定是id选择器吗？"></a>选择器一定是id选择器吗？</h4><blockquote>
<p>不一定是，可以是id选择器或者类选择器以及标签选择器</p>
</blockquote>
<h4 id="可以使用其他标签吗？"><a href="#可以使用其他标签吗？" class="headerlink" title="可以使用其他标签吗？"></a>可以使用其他标签吗？</h4><blockquote>
<p>只能是双标签中的内容，除了body和html</p>
</blockquote>
<h4 id="作用的范围是哪里？"><a href="#作用的范围是哪里？" class="headerlink" title="作用的范围是哪里？"></a>作用的范围是哪里？</h4><blockquote>
<p>命中的元素以及后代子孙元素</p>
</blockquote>
<h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><blockquote>
<p>创建Vue实例的时候，el(挂载点)，data(数据)，methods(设置方法)</p>
</blockquote>
<h2 id="vue中常见的指令"><a href="#vue中常见的指令" class="headerlink" title="vue中常见的指令"></a>vue中常见的指令</h2><h3 id="v-text的用法："><a href="#v-text的用法：" class="headerlink" title="v-text的用法："></a>v-text的用法：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;test&quot;&gt;</span><br><span class="line">    &lt;h2 v-text&#x3D;&quot;message&quot;&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h3 v-text&#x3D;&quot;info&quot;&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var app2 &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#test&#39;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message: &quot;this is test&quot;,</span><br><span class="line">            info: &quot;this is info&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="v-html的使用"><a href="#v-html的使用" class="headerlink" title="v-html的使用"></a>v-html的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;test&quot;&gt;</span><br><span class="line">   &lt;h4 v-html&#x3D;&quot;myhtml&quot;&gt;&lt;&#x2F;h4&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line">    var app2 &#x3D; new Vue(&#123;</span><br><span class="line">       el: &#39;#test&#39;,</span><br><span class="line">       data:&#123;</span><br><span class="line">           myhtml: &quot;&lt;a href&#x3D;&#39;http:&#x2F;&#x2F;wwww.baidu.com&#39;&gt;this is myhtml&lt;&#x2F;a&gt;&quot;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="v-on的使用"><a href="#v-on的使用" class="headerlink" title="v-on的使用"></a>v-on的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&#39;test&#39;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;点击&quot; v-on:click&#x3D;&quot;testclick&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;点击&quot; @click&#x3D;&quot;testclick&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;点击&quot; @click&#x3D;&quot;getfood&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app2 &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#test&#39;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            food: &quot;xxxxxxx&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods :&#123;</span><br><span class="line">            testclick:function()&#123;</span><br><span class="line">              console.log(&#39;dsadas&#39;);</span><br><span class="line">            &#125;,</span><br><span class="line">            getfood:function () &#123;</span><br><span class="line">                console.log(this.food);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="v-show的使用"><a href="#v-show的使用" class="headerlink" title="v-show的使用"></a>v-show的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">   &lt;h2 v-show&#x3D;&quot;isShow&quot;&gt;hello,h2&lt;&#x2F;h2&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   var app &#x3D; new Vue(&#123;</span><br><span class="line">     el: &quot;#app&quot;,</span><br><span class="line">     data:&#123;</span><br><span class="line">         num : 0,</span><br><span class="line">         isShow: false</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;   </span><br></pre></td></tr></table></figure>

<p>简单的例子：</p>
<p>![image-20201114162743590](/Users/waylonyan/Library/Application Support/typora-user-images/image-20201114162743590.png)</p>
<h3 id="v-bind的使用"><a href="#v-bind的使用" class="headerlink" title="v-bind的使用"></a>v-bind的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;!--    &lt;h2 v-show&#x3D;&quot;isShow&quot;&gt;hello,h2&lt;&#x2F;h2&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;img v-bind:src&#x3D;&quot;imgSrc&quot; alt&#x3D;&quot;&quot;&gt;--&gt;</span><br><span class="line">    &lt;img :src&#x3D;&quot;imgSrc&quot; :alt&#x3D;&quot;imgAlt&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">      el: &quot;#app&quot;,</span><br><span class="line">      data:&#123;</span><br><span class="line">          imgSrc: &quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;img&#x2F;PC_803382a656108089122dc9a79d2729e8.png&quot;,</span><br><span class="line">          imgAlt : &quot;baidu&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="v-for的使用"><a href="#v-for的使用" class="headerlink" title="v-for的使用"></a>v-for的使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">     &lt;li v-for&#x3D;&quot;item in arr&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;&#x2F;ul&gt;</span><br><span class="line">   &lt;ul&gt;</span><br><span class="line">     &lt;li v-for&#x3D;&quot;(item, index) in objArr&quot;&gt;</span><br><span class="line">       &#123;&#123;item.name&#125;&#125;</span><br><span class="line">     &lt;&#x2F;li&gt;</span><br><span class="line">   &lt;&#x2F;ul&gt;</span><br><span class="line"></span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   var app &#x3D; new Vue(&#123;</span><br><span class="line">     el: &quot;#app&quot;,</span><br><span class="line">     data:&#123;</span><br><span class="line">         arr: [1,2,3,4],</span><br><span class="line">         objArr: [</span><br><span class="line">             &#123;&quot;name&quot;:&quot;szk&quot;&#125;,</span><br><span class="line">             &#123;&quot;name&quot;:&quot;zhangsan&quot;&#125;</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="v-model的使用"><a href="#v-model的使用" class="headerlink" title="v-model的使用"></a>v-model的使用</h4><blockquote>
<p>获取和设置表单元素的值（双向数据绑定）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&#39;app&#39;&gt; </span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;</span><br><span class="line">  &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            &quot;message&quot;: &quot;helloworld&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="案例：简单记事本的实现"><a href="#案例：简单记事本的实现" class="headerlink" title="案例：简单记事本的实现"></a>案例：简单记事本的实现</h3><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><ul>
<li>生成列表结构(v-for 数组)</li>
<li>获取用户的输入(v-model)</li>
<li>回车，实现新增数据(v-on, enter添加数据)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;todoapp&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;inputValue&quot;&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;添加&quot; @click&#x3D;&quot;addTodo&quot;&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;item in todolist&quot;&gt;</span><br><span class="line">      &#123;&#123;item&#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">  总共数据是&#123;&#123;todolist.length&#125;&#125;个</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var app &#x3D; new Vue(&#123;</span><br><span class="line">      el: &quot;#todoapp&quot;,</span><br><span class="line">      data: &#123;</span><br><span class="line">          todolist: [&quot;吃饭&quot;, &quot;睡觉&quot;, &quot;打豆豆&quot;],</span><br><span class="line">          inputValue:&quot;&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">          addTodo: function () &#123;</span><br><span class="line">              this.todolist.push(this.inputValue)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="axios的使用"><a href="#axios的使用" class="headerlink" title="axios的使用"></a>axios的使用</h3><blockquote>
<p><a href="http://www.axios-js.com/zh-cn/docs/">http://www.axios-js.com/zh-cn/docs/</a></p>
</blockquote>
<p>中文文档已经说的非常的详细了，大家可以参考中文文档！</p>
<p>需要掌握：</p>
<h3 id="跨域的问题："><a href="#跨域的问题：" class="headerlink" title="跨域的问题："></a>跨域的问题：</h3><h4 id="一、为什么会出现跨域问题"><a href="#一、为什么会出现跨域问题" class="headerlink" title="一、为什么会出现跨域问题"></a>一、为什么会出现跨域问题</h4><p>出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）</p>
<h4 id="二、什么是跨域"><a href="#二、什么是跨域" class="headerlink" title="二、什么是跨域"></a>二、什么是跨域</h4><p>当一个请求url的<strong>协议、域名、端口</strong>三者之间任意一个与当前页面url不同即为跨域</p>
<table>
<thead>
<tr>
<th><strong>当前页面url</strong></th>
<th><strong>被请求页面url</strong></th>
<th><strong>是否跨域</strong></th>
<th><strong>原因</strong></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.test.com/">http://www.test.com/</a></td>
<td><a href="http://www.test.com/index.html">http://www.test.com/index.html</a></td>
<td>否</td>
<td>同源（协议、域名、端口号相同）</td>
</tr>
<tr>
<td><a href="http://www.test.com/">http://www.test.com/</a></td>
<td><a href="https://www.test.com/index.html">https://www.test.com/index.html</a></td>
<td>跨域</td>
<td>协议不同（http/https）</td>
</tr>
<tr>
<td><a href="http://www.test.com/">http://www.test.com/</a></td>
<td><a href="http://www.baidu.com/">http://www.baidu.com/</a></td>
<td>跨域</td>
<td>主域名不同（test/baidu）</td>
</tr>
<tr>
<td><a href="http://www.test.com/">http://www.test.com/</a></td>
<td><a href="http://blog.test.com/">http://blog.test.com/</a></td>
<td>跨域</td>
<td>子域名不同（www/blog）</td>
</tr>
<tr>
<td><a href="http://www.test.com:8080/">http://www.test.com:8080/</a></td>
<td><a href="http://www.test.com:7001/">http://www.test.com:7001/</a></td>
<td>跨域</td>
<td>端口号不同（8080/7001）</td>
</tr>
</tbody></table>
<p>参考：<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
<p><strong>面试题会问，简单的介绍下跨域是啥？怎么解决的？</strong></p>
<ul>
<li>Jsonp 解决</li>
<li>django中使用开源的组件，django-cors-headers</li>
</ul>
<h4 id="三、Django解决跨域问题"><a href="#三、Django解决跨域问题" class="headerlink" title="三、Django解决跨域问题"></a>三、Django解决跨域问题</h4><blockquote>
<p><a href="https://github.com/adamchainz/django-cors-headers">https://github.com/adamchainz/django-cors-headers</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跨域设置</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">CORS_ALLOW_HEADERS = list(default_headers) + [</span><br><span class="line">    <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X_FILENAME&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept-encoding&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;authorization&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dnt&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-csrftoken&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-requested-with&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;TOKEN&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>






<p>#####<br>用户访问 index.html –&gt;加载main.js,创建了vue的对象，vue对象在index.html中圈了一块地，那里就可以用vue的语法了—&gt; main.js中的component挂载组件，挂载了APP组件，就是最外层的全局大组件—&gt;加载了App.vue —&gt; App.vue中配置vue-router–&gt;路由到了helloword组件</p>
<p>App.vue如何加载到了helloword组件，通过vue-router路由匹配组件；哪里写了router-view就往哪里仍</p>
<p>import Router from ‘vue-router’ // export default {功能} 抛出 才能引入</p>
<p>export default new Router({<br>  routes: [<br>    {<br>      path: ‘/‘,<br>      name: ‘HelloWorld’,<br>      component: HelloWorld<br>    }<br>  ]<br>})</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>发布方式对比</title>
    <url>/2020/08/13/%E5%8F%91%E5%B8%83%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>灰度、蓝绿、ABtest发布等部署方案对比</p>
<a id="more"></a>
<h2 id="蓝绿发布（Blue-Green-Deployment）"><a href="#蓝绿发布（Blue-Green-Deployment）" class="headerlink" title="蓝绿发布（Blue/Green Deployment）"></a>蓝绿发布（Blue/Green Deployment）</h2><ol>
<li>定义</li>
</ol>
<p>蓝绿部署是不停老版本，部署新版本然后进行测试。确认OK后将流量切到新版本，然后老版本同时也升级到新版本。</p>
<ol start="2">
<li>特点</li>
</ol>
<p>蓝绿部署无需停机，并且风险较小。</p>
<ol start="3">
<li>部署过程</li>
</ol>
<p>部署版本 1 的应用（初始的状态）<br>所有外部请求的流量都打到这个版本上。<br>部署版本 2 的应用<br>版本 2 的代码与版本 1 不同(新功能、Bug修复等)。</p>
<p>将流量从版本 1 切换到版本 2。<br>如版本 2 测试正常，就删除版本 1 正在使用的资源（例如实例），从此正式用版本 2。<br>4. 小结</p>
<p>从过程不难发现，在部署的过程中，我们的应用始终在线。并且新版本上线的过程中，并没有修改老版本的任何内容，在部署期间，老版本的状态不受影响，这样风险很小。并且只要老版本的资源不被删除，理论上，我们可以在任何时间回滚到老版本。</p>
<ol start="5">
<li>蓝绿发布的注意事项</li>
</ol>
<p>当你切换到蓝色环境时，需要妥当处理未完成的业务和新的业务。如果你的数据库后端无法处理，会是一个比较麻烦的问题。</p>
<p>可能会出现需要同时处理微服务架构应用和传统架构应用的情况，如果在蓝绿部署中协调不好这两者，还是有可能会导致服务停止。<br>需要提前考虑数据库与应用部署同步迁移/回滚的问题。<br>蓝绿部署需要有基础设施支持。<br>在非隔离基础架构（ VM 、 Docker 等）上执行蓝绿部署，蓝色环境和绿色环境有被摧毁的风险。<br>6. 优势和不足</p>
<p>优势<br>升级切换和回退速度非常快。</p>
<p>不足<br>切换是全量的，如果 V2 版本有问题，则对用户体验有直接影响。</p>
<p>需要两倍机器资源。</p>
<ol start="7">
<li>适用场合</li>
</ol>
<p>对用户体验有一定容忍度的场景。<br>机器资源有富余或者可以按需分配（AWS 云，或自建容器云）。</p>
<h2 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h2><ol>
<li>定义</li>
</ol>
<p>灰度发布是指在黑与白之间，能够平滑过渡的一种发布方式。AB Test 就是一种灰度发布方式，让一部分用户继续用 A，一部分用户开始用 B，如果用户对 B 没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到 B 上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</p>
<ol start="2">
<li><p>A/B Testing<br>A/B 测试是用来测试应用功能表现的方法，例如可用性、受欢迎程度、可见性等等。 A/B 测试通常用在应用的前端上，不过当然需要后端来支持。<br>A/B 测试与蓝绿部署的区别在于， A/B 测试目的在于通过科学的实验设计、采样样本代表性、流量分割与小流量测试等方式来获得具有代表性的实验结论，并确信该结论在推广到全部流量可信；蓝绿部署的目的是安全稳定地发布新版本应用，并在必要时回滚。</p>
</li>
<li><p>金丝雀发布</p>
</li>
</ol>
<p>我们平常所说的金丝雀部署也是灰度发布的一种方式，在原有版本可用的情况下，同时部署一个新版本应用作为「金丝雀」服务器来测试新版本的性能和表现，以保障整体系统稳定的情况下，尽早发现、调整问题。</p>
<blockquote>
<p>矿井中的金丝雀：17 世纪，英国矿井工人发现，金丝雀对瓦斯这种气体十分敏感。空气中哪怕有极其微量的瓦斯，金丝雀也会停止歌唱；当瓦斯含量超过一定限度时，虽然鲁钝的人类毫无察觉，金丝雀却早已毒发身亡。当时在采矿设备相对简陋的条件下，工人们每次下井都会带上一只金丝雀作为瓦斯检测指标，以便在危险状况下紧急撤离。</p>
</blockquote>
<p>灰度发布／金丝雀发布由以下几个步骤组成：</p>
<p>准备好部署各个阶段的工件，包括：构建工件，测试脚本，配置文件和部署清单文件。<br>从负载均衡列表中移除掉「金丝雀」服务器。<br>升级「金丝雀」应用（排掉原有流量并进行部署）。<br>对应用进行自动化测试。<br>将「金丝雀」服务器重新添加到负载均衡列表中（连通性和健康检查）。<br>如果「金丝雀」在线使用测试成功，升级剩余的其他服务器（否则就回滚）。<br>除此之外灰度发布还可以设置路由权重，动态调整不同的权重来进行新老版本的验证。</p>
<ol start="4">
<li>优势和不足</li>
</ol>
<p>优势<br>用户体验影响小，灰度发布过程出现问题只影响少量用户。</p>
<p>不足<br>发布自动化程度不够，发布期间可引发服务中断。</p>
<h2 id="滚动发布（Rolling-Update-Deployment）"><a href="#滚动发布（Rolling-Update-Deployment）" class="headerlink" title="滚动发布（Rolling Update Deployment）"></a>滚动发布（Rolling Update Deployment）</h2><p>在金丝雀发布基础上的进一步优化改进，是一种自动化程度较高的发布方式，用户体验比较平滑，是目前成熟型技术组织所采用的主流发布方式。</p>
<ol>
<li>定义</li>
</ol>
<p>滚动发布：一般是取出一个或者多个服务器停止服务，执行更新，并重新将其投入使用。周而复始，直到集群中所有的实例都更新成新版本。</p>
<ol start="2">
<li>特点</li>
</ol>
<p>这种部署方式相对于蓝绿部署，更加节约资源——它不需要运行两个集群、两倍的实例数。我们可以部分部署，例如每次只取出集群的 20% 进行升级。</p>
<ol start="3">
<li>部署过程</li>
</ol>
<p>滚动式发布一般先发 1 台，或者一个小比例，如 2% 服务器，主要做流量验证用，类似金丝雀 (Canary) 测试。<br>滚动式发布需要比较复杂的发布工具和智能 LB，支持平滑的版本替换和流量拉入拉出。<br>每次发布时，先将老版本 V1 流量从 LB 上摘除，然后清除老版本，发新版本 V2，再将 LB 流量接入新版本。这样可以尽量保证用户体验不受影响。<br>一次滚动式发布一般由若干个发布批次组成，每批的数量一般是可以配置的（可以通过发布模板定义）。例如第一批 1 台（金丝雀），第二批 10%，第三批 50%，第四批 100%。每个批次之间留观察间隔，通过手工验证或监控反馈确保没有问题再发下一批次，所以总体上滚动式发布过程是比较缓慢的 (其中金丝雀的时间一般会比后续批次更长，比如金丝雀 10 分钟，后续间隔 2 分钟)。<br>回退是发布的逆过程，将新版本流量从 LB 上摘除，清除新版本，发老版本，再将 LB 流量接入老版本。和发布过程一样，回退过程一般也比较慢的。<br>4. 优势和不足</p>
<p>优势<br>用户体验影响小，体验较平滑。</p>
<p>不足<br>发布和回退时间比较缓慢。</p>
<p>发布工具比较复杂，LB 需要平滑的流量摘除和拉入能力。</p>
<h2 id="其它发布方式"><a href="#其它发布方式" class="headerlink" title="其它发布方式"></a>其它发布方式</h2><p>上述都是偏传统的发布方式，能覆盖大部分应用发布场景。针对一些关键新功能的上线发布，或者一些特定的场景，还有一些特殊的发布方式。</p>
<p>功能开关发布</p>
<p>利用代码中的功能开关（Feature Flag/Toggle/Switch）来控制发布逻辑，一般不需要复杂的发布工具和智能 LB 配合，是一种相对比较低成本和简单的发布方式。这种方式也是支持现代 DevOps 理念，研发人员可以灵活定制和自助完成的发布方式。功能开关的原理如下图所示：</p>
<ol>
<li>部署过程</li>
</ol>
<p>功能开关发布需要一个配置中心或者开关中心这样的服务支持，例如携程的 Apollo 配置中心或者开源的 FF4J，这些都支持开关发布。业界还有专门的功能开关 SaaS 服务，例如 LaunchDarkly。通过配置中心，运维或研发人员可以在运行期动态配置功能开关的值。当然，功能开关发布只是配置中心的一种使用场景，配置中心还能支持其它很多动态配置场景。<br>功能开关服务一般提供客户端 SDK，方便开发人员集成。在运行期，客户端 SDK 会同步最新的开关值，技术实现有推方式 (push)，也有拉方式 (pull)，或者推拉结合方式。<br>新功能（V2 new feature）和老功能（V1 old feature）住在同一套代码中，新功能隐藏在开关后面，如果开关没有打开，则走老代码逻辑，如果开关打开，则走新代码逻辑。技术实现上可以理解为一个简单的 if/else 逻辑。<br>应用上线后，开关先不打开，然后运维或研发人员通过开关中心打开新功能，经过流量验证新功能没有问题，则发布完成；如果有问题，则随时可以通过开关中心切回老功能逻辑。<br>2. 优势和不足</p>
<p>优势<br>升级切换和回退速度非常快。</p>
<p>相对于复杂的发布工具，实施比较简单，成本相对低廉。</p>
<p>研发能够灵活定制发布逻辑，支持 DevOps 自助发布。</p>
<p>不足<br>切换是全量的，如果 V2 版本有问题，则对用户体验有直接影响。</p>
<p>对代码有侵入，代码逻辑会变复杂，需要定期清理老版本逻辑，维护成本变高。</p>
]]></content>
      <categories>
        <category>ops</category>
      </categories>
      <tags>
        <tag>deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程</title>
    <url>/2021/04/18/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>并发编程-进程-线程 multiprocess </p>
<a id="more"></a>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>面试问题复习</title>
    <url>/2020/09/13/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>TCP三次握手四次挥手</p>
<a id="more"></a>
<p>TCP三次握手四次挥手面试题：<br><a href="https://www.cnblogs.com/Qing-840/p/9283367.html">https://www.cnblogs.com/Qing-840/p/9283367.html</a></p>
<ol>
<li><p>C/S B/S<br> client————–server<br> browser————-server</p>
<p> 其中server端应该注意问题：</p>
<pre><code> 1、服务端应该保证稳定运行，并且最好是开启之后就一直运行到世界末日
 2、服务端要支持并发
 3、服务端要绑定唯一的地址</code></pre>
</li>
<li><p>什么是网络<br> 网络=物理连接介质+互联网通信协议</p>
<p> 而互联网通信协议就是计算机界的英语</p>
</li>
</ol>
<ol start="3">
<li>定位对方在哪的地址是<br> ip+port可以定位到全世界范围内独一无二的一个网络应用程序<br> arp协议会自动将ip解析成mac地址</li>
</ol>
<ul>
<li><p>数据链路层<br>arp协议功能：广播的方式发送数据包，获取目标主机的mac地址<br>IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>
</li>
<li><p>网络层<br>一个个彼此隔离的小的局域网组成的，那么如果所有的通信都采用以太网的广播方式，那么一台机器发送的包全世界都会收到，</p>
</li>
</ul>
<p>这就不仅仅是效率低的问题了，这会是一种灾难<br>须找出一种方法来区分哪些计算机属于同一广播域，哪些不是，如果是就采用广播的方式发送，如果不是，</p>
<p>就采用路由的方式（向不同广播域／子网分发数据包），mac地址是无法区分的，它只跟厂商有关</p>
<p>网络层功能：引入一套新的地址用来区分不同的广播域／子网，这套地址即网络地址</p>
<p>网络层由来：有了ethernet、mac地址、广播的发送方式，世界上的计算机就可以彼此通信了，问题是世界范围的互联网是由</p>
<ul>
<li>传输层<br>传输层的由来：网络层的ip帮我们区分子网，以太网层的mac帮我们找到主机，然后大家使用的都是应用程序，你的电脑上可能同时开启qq，暴风影音，等多个应用程序，</li>
</ul>
<p>那么我们通过ip和mac找到了一台特定的主机，<strong>如何标识这台主机上的应用程序，答案就是端口，端口即应用程序与网卡关联的编号。</strong></p>
<p>传输层功能：建立端口到端口的通信</p>
<p>补充：端口范围0-65535，0-1023为系统占用端口</p>
<p>tcp协议：</p>
<p>可靠传输，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>
<p>以太网头    ip 头                  tcp头                  数据                                                    </p>
<p>udp协议：</p>
<p>不可靠传输，”报头”部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p>
<p>以太网头    ip头                         udp头                               数据                                           </p>
<img src="/2020/09/13/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%A4%8D%E4%B9%A0/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" class title="三次握手四次挥手">

<p><strong>高并发的情况下会存在大量的timewait，timewait过高会占用大量内存和cpu使用率</strong></p>
<ul>
<li>优化timewait方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发现系统存在大量TIME_WAIT状态的连接，通过调整linux内核参数解决，</span><br><span class="line">vi &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line"></span><br><span class="line">编辑文件，加入以下内容：</span><br><span class="line">net.ipv4.tcp_syncookies &#x3D; 1</span><br><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1</span><br><span class="line">net.ipv4.tcp_tw_recycle &#x3D; 1</span><br><span class="line">net.ipv4.tcp_fin_timeout &#x3D; 30</span><br><span class="line"></span><br><span class="line">然后执行 &#x2F;sbin&#x2F;sysctl -p 让参数生效。</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_syncookies &#x3D; 1 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭；</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_recycle &#x3D; 1 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_fin_timeout 修改系統默认的 TIMEOUT 时间</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>如果机器上存在大量SYN_RCVD状态，证明遭遇泛洪攻击</strong></p>
<ul>
<li>优化建议（待补充）</li>
</ul>
<ul>
<li>应用层<br>应用层由来：用户使用的都是应用程序，均工作于应用层，互联网是开发的，大家都可以开发自己的应用程序，数据多种多样，必须规定好数据的组织形式 </li>
</ul>
<p>应用层功能：规定应用程序的数据格式。</p>
<p>例：TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。</p>
<ul>
<li>socket<br>我们知道两个进程如果需要进行通讯最基本的一个前提能能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道IP层的ip地址可以唯一标示主机，而TCP层协议和端口号可以唯一标示主机的一个进程，这样我们可以利用ip地址＋协议＋端口号唯一标示网络中的一个进程。</li>
</ul>
<p>能够唯一标示网络中的进程后，它们就可以利用socket进行通信了，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。</p>
<blockquote>
<p>总结：套接字是什么，位于应用层与传输层之间，用来把传输层以下的协议封装好，提供好简单的接口；但凡编写基于网络通信的cs架构的软件，基于套接字去写就可以了。遵循套接字简单的接口规范，写出来的程序自然是遵循tcp/udp协议的了。</p>
</blockquote>
<blockquote>
<p><strong>也有人将socket说成ip+port，ip是用来标识互联网中的一台主机的位置，而port是用来标识这台机器上的一个应用程序，ip地址是配置到网卡上的，而port是应用程序开启的，ip与port的绑定就标识了互联网中独一无二的一个应用程序;而程序的pid是同一台机器上不同进程或者线程的标识</strong></p>
</blockquote>
<img src="/2020/09/13/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%A4%8D%E4%B9%A0/socket%E5%A5%97%E6%8E%A5%E5%AD%97.png" class title="套接字">

<p>socket起源于UNIX，在Unix一切皆文件哲学的思想下，socket是一种”打开—读/写—关闭”模式的实现，服务器和客户端各自维护一个”文件”，在建立连接打开后，可以向自己文件写入内容供对方读取或者读取对方内容，通讯结束时关闭文件。</p>
<ul>
<li>套接字工作流程<img src="/2020/09/13/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%A4%8D%E4%B9%A0/%E5%A5%97%E6%8E%A5%E5%AD%97%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg" class title="套接字">

</li>
</ul>
<p>套接字之所以简单是因为：客户端只需要调connect接口，服务端调accept接口；客户端干了什么：发syn，服务端回ack+syn，客户端再回ack； connect和accept接口把三次握手细节全部封装好了。</p>
<p>粘包问题<br>TCP独有（流式协议）<br>把数据像水流一样发出去；TCP协议nagle算法会把时间间隔较短，数据量较小的数据粘到一起，基于网络发出去。<br>解决方案：收数据的时候收干净就好了</p>
]]></content>
  </entry>
  <entry>
    <title>kubernetes网络通信原理</title>
    <url>/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>了解通信原理</p>
<a id="more"></a>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>1、网络的命名空间：Linux在网络栈中引入网络命名空间，将独立的网络协议栈隔离到不同的命令空间中，彼此间无法通信；docker利用这一特性，实现不容器间的网络隔离。</p>
<p>2、Veth设备对：也叫虚拟网络接口对。Veth设备对的引入是为了实现在不同网络命名空间的通信。</p>
<p>3、Iptables/Netfilter：Netfilter负责在内核中执行各种挂接的规则(过滤、修改、丢弃等)，运行在内核 模式中；Iptables模式是在用户模式下运行的进程，负责协助维护内核中Netfilter的各种规则表；通过二者的配合来实现整个Linux网络协议栈中灵活的数据包处理机制。</p>
<p>4、网桥：网桥是一个二层网络设备,通过网桥可以将linux支持的不同的端口连接起来,并实现类似交换机那样的多对多的通信。</p>
<p>5、路由：Linux系统包含一个完整的路由功能，当IP层在处理数据发送或转发的时候，会使用路由表来决定发往哪里。</p>
<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>Kubernetes对集群内部的网络进行了重新抽象，以实现整个集群网络扁平化。我们可以理解网络模型时，可以完全抽离物理节点去理解，我们用图说话，先有基本印象。</p>
<img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/kubernetes-proxy-model.jpg" class title="kubernetes网络通信原理">

<h3 id="一个Service"><a href="#一个Service" class="headerlink" title="一个Service"></a>一个Service</h3><p>Service是Kubernetes为为屏蔽这些后端实例（Pod）的动态变化和对多实例的负载均衡而引入的资源对象。Service通常与deployment绑定，定义了服务的访问入口地址，应用(Pod)可以通过这个入口地址访问其背后的一组由Pod副本组成的集群实例。Service与其后端Pod副本集群之间则是通过Label Selector来实现映射。</p>
<p>Service的类型(Type)决定了Service如何对外提供服务，根据类型不同，服务可以只在Kubernetes cluster中可见，也可以暴露到集群外部。Service有三种类型，ClusterIP，NodePort和LoadBalancer。具体的使用场景会在下文中进行阐述。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc --selector app&#x3D;nginx</span><br><span class="line">NAME   TYPE     CLUSTER-IP  EXTERNAL-IP PORT(S) AGE</span><br><span class="line">nginx ClusterIP 172.19.0.166   &lt;none&gt;    80&#x2F;TCP  1m</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">describe</span> <span class="string">svc</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">Namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">Labels:</span> <span class="string">app=nginx</span></span><br><span class="line"><span class="attr">Annotations:</span> <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">Selector:</span> <span class="string">app=nginx</span></span><br><span class="line"><span class="attr">Type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">IP:</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.166</span></span><br><span class="line"><span class="attr">Port:</span> <span class="string">&lt;unset&gt;</span> <span class="number">80</span><span class="string">/TCP</span></span><br><span class="line"><span class="attr">TargetPort:</span> <span class="number">80</span><span class="string">/TCP</span></span><br><span class="line"><span class="attr">Endpoints:</span> <span class="number">172.16</span><span class="number">.2</span><span class="number">.125</span><span class="string">:80,172.16.2.229:80</span></span><br><span class="line"><span class="attr">Session Affinity:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">Events:</span> <span class="string">&lt;none&gt;</span></span><br></pre></td></tr></table></figure>
<p>该svc后端代理了2个Pod实例:172.16.2.125:80,172.16.2.229:80</p>
<h3 id="三个IP"><a href="#三个IP" class="headerlink" title="三个IP"></a>三个IP</h3><p>Kubernetes为描述其网络模型的IP对象，抽象出Cluster IP和Pod IP的概念。</p>
<p>PodIP是Kubernetes集群中每个Pod的IP地址。它是Docker Engine 根据docker0网桥的IP地址段进行分配的，是一个虚拟的二层网络。Kubernetes中Pod间能够彼此直接通讯，Pod里的容器访问另外一个Pod里的容器，是通过Pod IP所在进行通信。</p>
<p>Cluster IP仅作用于Service，其没有实体对象所对应，因此Cluster IP无法被ping通。它的作用是为Service后端的实例提供统一的访问入口。当访问ClusterIP时，请求将被转发到后端的实例上，默认是轮询方式。Cluster IP和Service一样由kube-proxy组件维护，其实现方式主要有两种，<strong>iptables</strong>和<strong>IPVS</strong>。在<strong>1.8版本后kubeproxy开始支持IPVS方式</strong>。在上例中，SVC的信息中包含了Cluster IP。</p>
<p>这里未列出nodeip概念，由于其本身是物理机的网卡IP。因此可理解为nodeip就是物理机IP。</p>
<h3 id="三个Port"><a href="#三个Port" class="headerlink" title="三个Port"></a>三个Port</h3><p>在Kubernetes中，涉及容器，Pod，Service，集群各等多个层级的对象间的通信，为在网络模型中区分各层级的通信端口，这里对Port进行了抽象。</p>
<h4 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h4><p>该Port非一般意义上的TCP/IP中的Port概念，它是特指Kubernetes中Service的port，是Service间的访问端口，例如Mysql的Service默认3306端口。它仅对进群内容器提供访问权限，而无法从集群外部通过该端口访问服务。</p>
<h4 id="nodePort"><a href="#nodePort" class="headerlink" title="nodePort"></a>nodePort</h4><p>nodePort为外部机器提供了访问集群内服务的方式。比如一个Web应用需要被其他用户访问，那么需要配置type=NodePort，而且配置nodePort=30001，那么其他机器就可以通过浏览器访问scheme://node:30001访问到该服务，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;node:30001</span><br></pre></td></tr></table></figure>
<h4 id="targetPort"><a href="#targetPort" class="headerlink" title="targetPort"></a>targetPort</h4><p>targetPort是容器的端口（最根本的端口入口），与制作容器时暴露的端口一致（DockerFile中EXPOSE），例如<a href="http://docker.io官方的nginx暴露的是80端口./">http://docker.io官方的nginx暴露的是80端口。</a></p>
<p>eg:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mallh5-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">abcdocker</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">  <span class="attr">app:</span> <span class="string">mallh5web</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">     <span class="attr">port:</span> <span class="number">3017</span></span><br><span class="line">     <span class="attr">targetPort:</span> <span class="number">5003</span></span><br><span class="line">     <span class="attr">nodePort:</span> <span class="number">31122</span></span><br></pre></td></tr></table></figure>
<p>举出了一个service的yaml，其部署在abcdocker的namespace中。这里配置了nodePort，因此其类型Type就是NodePort，注意大小写。若没有配置nodePort，那这里需要填写ClusterIP，即表示只支持集群内部服务访问。</p>
<h2 id="集群内部通信"><a href="#集群内部通信" class="headerlink" title="集群内部通信"></a>集群内部通信</h2><h3 id="单节点通信"><a href="#单节点通信" class="headerlink" title="单节点通信"></a>单节点通信</h3><p>集群单节点内的通信，主要包括两种情况，同一个pod内的多容器间通信以及同一节点不同pod间的通信。由于不涉及跨节点访问，因此流量不会经过物理网卡进行转发。</p>
<p>查看路由表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@node-1:&#x2F;opt&#x2F;bin# route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination Gateway Genmask Flags Metric Ref Use Iface</span><br><span class="line">0.0.0.0 172.23.100.1 0.0.0.0 UG 0 0 0 eth0</span><br><span class="line">10.1.0.0 0.0.0.0 255.255.0.0 U 0 0 0 flannel.1 #flannel 网络内跨节点的通信会交给 flannel.1 处理</span><br><span class="line">10.1.1.0 0.0.0.0 255.255.255.0 U 0 0 0 docker0 #flannel 网络内节点内的通信会走 docker0</span><br></pre></td></tr></table></figure>

<h3 id="1-Pod内通信"><a href="#1-Pod内通信" class="headerlink" title="1 Pod内通信"></a>1 Pod内通信</h3><img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/pod%E5%86%85%E9%80%9A%E4%BF%A1.jpg" class title="kubernetes网络通信原理">
<p>同一个pod内共享网络命名空间，容器之间通过访问127.0.0.1:（端口）即可。图中的veth<em>即指veth对的一端（另一端未标注，但实际上是成对出现），该veth对是由Docker Daemon挂载在docker0网桥上，另一端添加到容器所属的网络命名空间，图上显示是容器中的eth0。<br>图中演示了bridge模式下的容器间通信。docker1向docker2发送请求，docker1，docker2均与docker0建立了veth对进行通讯。<br>当请求经过docker0时，由于容器和docker0同属于一个子网，因此请求经过docker2与docker0的veth</em>对，转发到docker2，该过程并未跨节点，因此不经过eth0。</p>
<p>总结：同一个pod内的多个容器间的通信，通过lo即可实现；</p>
<h3 id="Pod间通信"><a href="#Pod间通信" class="headerlink" title="Pod间通信"></a>Pod间通信</h3><p>同节点pod间通信<br>由于Pod内共享网络命名空间（由pause容器创建），所以本质上也是同节点容器间的通信。同时，同一Node中Pod的默认路由都是docker0的地址，由于它们关联在同一个docker0网桥上，地址网段相同，所有它们之间应当是能直接通信的。来看看实际上这一过程如何实现。如上图，Pod1中容器1和容器2共享网络命名空间，因此对pod外的请求通过pod1和Docker0网桥的veth对（图中挂在eth0和ethx上）实现。</p>
<p>总结：<br>同一Node中Pod的默认路由都是docker0的地址<br>pod ip &lt;—&gt; pod ip，pod和pod之间要不经过任何转换即可通信；</p>
<img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/%E5%90%8C%E8%8A%82%E7%82%B9pod%E9%97%B4%E9%80%9A%E4%BF%A1.jpg" class title="kubernetes网络通信原理">

<h3 id="pod和service通信"><a href="#pod和service通信" class="headerlink" title="pod和service通信"></a>pod和service通信</h3><p>pod ip &lt;—-&gt; cluster ip（即service ip）&lt;—-&gt;pod ip，他们通过iptables或ipvs实现通信，另外大家要注意ipvs取代不了iptables，因为ipvs只能做负载均衡，而做不了nat转换；</p>
<h3 id="跨节点通信"><a href="#跨节点通信" class="headerlink" title="跨节点通信"></a>跨节点通信</h3><h4 id="CNI：容器网络接口"><a href="#CNI：容器网络接口" class="headerlink" title="CNI：容器网络接口"></a>CNI：容器网络接口</h4><p>CNI 是一种标准，它旨在为容器平台提供网络的标准化。不同的容器平台（比如目前的 kubernetes、mesos 和 rkt）能够通过相同的接口调用不同的网络组件。</p>
<p>目前kubernetes支持的CNI组件种类很多，例如：flannel，callco，canel，kube-router。</p>
<p>flanel只支持网络通讯，但是不支持网络策略。<br>callco网络通讯和网络策略都支持。<br>canel：flanel+callco合起来的功能。</p>
<p>主流的跨主机通信方案主要有一下几种：<br>1）基于隧道的overlay网络：按隧道类型来说，不同的公司或者组织有不同的实现方案。docker原生的overlay网络就是基于vxlan隧道实现的。ovn则需要通过geneve或者stt隧道来实现的。flannel最新版本也开始默认基于vxlan实现overlay网络。</p>
<p>2）基于包封装的overlay网络：基于UDP封装等数据包包装方式，在docker集群上实现跨主机网络。典型实现方案有weave、flannel的早期版本。</p>
<p>3）基于三层实现SDN网络：基于三层协议和路由，直接在三层上实现跨主机网络，并且通过iptables实现网络的安全隔离。典型的方案为Project Calico。同时对不支持三层路由的环境，Project Calico还提供了基于IPIP封装的跨主机网络实现</p>
<p>总结：<br>    1）虚拟网桥，虚拟网卡，多个容器共用一个虚拟网卡进行通信；<br>    2）多路复用：MacVLAN，多个容器共用一个物理网卡进行通信；<br>    3）硬件交换：SR-LOV，一个物理网卡可以虚拟出多个接口，这个性能最好。</p>
<h4 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h4><img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/flannel1.jpg" class title="kubernetes网络通信原理">
<p>集群内跨节点通信涉及到不同的子网间通信，仅靠docker0无法实现，这里需要借助CNI网络插件来实现。图中展示了使用flannel实现跨节点通信的方式。</p>
<p>简单说来，flannel的用户态进程flanneld会为每个node节点创建一个flannel.1的网桥，根据etcd或apiserver的全局统一的集群信息为每个node分配全局唯一的网段，避免地址冲突。同时会为docker0和flannel.1创建veth对，docker0将报文丢给flannel.1,。</p>
<p>Flanneld维护了一份全局node的网络表，通过flannel.1接收到请求后，根据node表，将请求二次封装为UDP包，扔给eth0，由eth0出口进入物理网路发送给目的node。</p>
<p>在另一端以相反的流程。Flanneld解包并发往docker0，进而发往目的Pod中的容器</p>
<p>两个节点上的pod可以借助flannel隧道进行通信。默认使用的VxLAN协议，因为它有额外开销，所以性能有点低。</p>
<p>flannel第二种协议叫host-gw(host gateway)，即Node节点把自己的网络接口当做pod的网关使用，从而使不同节点上的node进行通信，这个性能比VxLAN高，因为它没有额外开销。不过他有个缺点， 就是各node节点必须在同一个网段中 。</p>
<p>另外，如果两个pod所在节点在同一个网段中 ，可以让VxLAN也支持host-gw的功能， 即直接通过物理网卡的网关路由转发，而不用隧道flannel叠加，从而提高了VxLAN的性能，这种flannel的功能叫directrouting。<br>flannel支持多种后端：<br>    1.Vxlan<br>        1.1 vxlan<br>        1.2 Dirextrouting<br>    2.host-gw：Host Gateway  #不推荐，只能在二层网络中，不支持跨网络，如果有成千上万的Pod，容易产生广播风暴<br>    3.UDP：性能差</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                             READY     STATUS             RESTARTS   AGE       IP             NODE</span><br><span class="line">myapp-deploy-69b47bc96d-79fqh    1/1       Running            4          7d        10.244.1.97    node1</span><br><span class="line">myapp-deploy-69b47bc96d-tc54k    1/1       Running            4          7d        10.244.2.88    node2</span><br><span class="line">[root@master ~]<span class="comment"># kubectl exec -it myapp-deploy-69b47bc96d-79fqh -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># ping 10.244.2.88 #ping对方Node上容器的ip</span></span><br><span class="line">PING 10.244.2.88 (10.244.2.88): 56 data bytes</span><br><span class="line">64 bytes from 10.244.2.88: seq=0 ttl=62 time=0.459 ms</span><br><span class="line">64 bytes from 10.244.2.88: seq=0 ttl=62 time=0.377 ms</span><br><span class="line">64 bytes from 10.244.2.88: seq=1 ttl=62 time=0.252 ms</span><br><span class="line">64 bytes from 10.244.2.88: seq=2 ttl=62 time=0.261 ms</span><br></pre></td></tr></table></figure>
<p>在其他节点上抓包，发现根本就在ens192上抓不到包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># tcpdump -i ens192 -nn icmp</span></span><br><span class="line">[root@master ~]<span class="comment"># yum install bridge-utils -y</span></span><br><span class="line">[root@master ~]<span class="comment"># brctl show docker0</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.024283f8b8ffno</span><br><span class="line">[root@master ~]<span class="comment"># brctl show cni0</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">cni08000.0a580af40001noveth6ec94aab</span><br><span class="line">vethf703483a</span><br><span class="line">vethff579703</span><br></pre></td></tr></table></figure>
<p> 可以看到veth这些接口都是桥接到cni0上的。</p>
<pre><code>brctl show表示查看已有网桥。</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;[root@node1 ~]<span class="comment">#  tcpdump -i cni0 -nn icmp</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on cni0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">23:40:11.370754 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 96, length 64</span><br><span class="line">23:40:11.370988 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 96, length 64</span><br><span class="line">23:40:12.370888 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 97, length 64</span><br><span class="line">23:40:12.371090 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 97, length 64</span><br><span class="line">^X23:40:13.371015 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 98, length 64</span><br><span class="line">23:40:13.371239 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 98, length 64</span><br><span class="line">23:40:14.371128 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 99, length 64</span><br></pre></td></tr></table></figure>
<p>可以看到，在node节点，可以在cni0端口上抓到容器里面的Ping时的包。</p>
<pre><code>其实，上面ping时的数据流是先从cni0进来，然后从flannel.1出去，最后借助物理网卡ens32发出去。所以，我们在flannel.1上也能抓到包：</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment">#  tcpdump -i flannel.1 -nn icmp</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on flannel.1, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">03:12:36.823315 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 12840, length 64</span><br><span class="line">03:12:36.823496 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 12840, length 64</span><br><span class="line">03:12:37.823490 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 12841, length 64</span><br><span class="line">03:12:37.823634 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 12841, length 64</span><br></pre></td></tr></table></figure>
<p>同样，在ens192物理网卡上也能抓到包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># tcpdump -i ens192 -nn host 172.16.1.102  #172.16.1.102是node2的物理ip</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">10:59:24.234174 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 0, length 64</span><br><span class="line">10:59:24.234434 IP 172.16.1.102.54894 &gt; 172.16.1.101.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 7168, seq 0, length 64</span><br><span class="line">10:59:25.234301 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 1, length 64</span><br><span class="line">10:59:25.234469 IP 172.16.1.102.54894 &gt; 172.16.1.101.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 7168, seq 1, length 64</span><br><span class="line">10:59:26.234415 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 2, length 64</span><br><span class="line">10:59:26.234592 IP 172.16.1.102.54894 &gt; 172.16.1.101.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 7168, seq 2, length 64</span><br><span class="line">10:59:27.234528 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 3, length 64</span><br></pre></td></tr></table></figure>
<pre><code>下面我们把flannel的通信模式改成directrouting的方式</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master flannel]<span class="comment"># cd /root/manifests/flannel</span></span><br><span class="line">[root@master flannel]<span class="comment"># kubectl edit configmap kube-flannel-cfg -n kube-system</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.244.0.0/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Directrouting&quot;</span>: <span class="literal">true</span> <span class="comment">#加一行这个</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">[root@master flannel]<span class="comment"># ip route show</span></span><br><span class="line">default via 172.16.1.254 dev ens192 proto static metric 100 </span><br><span class="line">10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1 <span class="comment">#访问10.244.0.0/24要通过10.244.0.1</span></span><br><span class="line">10.244.1.0/24 via 10.244.1.0 dev flannel.1 onlink <span class="comment">#10.244.1.0是配置在flannel上的地址，表示访问10.244.1.0/24通过本机flannel.1上的10.244.1.0送出去，下同</span></span><br><span class="line">10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink  <span class="comment">#10.244.2.0是配置在flannel上的地址</span></span><br><span class="line">172.16.1.0/24 dev ens192 proto kernel scope link src 172.16.1.100 metric 100</span><br><span class="line"></span><br><span class="line">[root@master flannel]<span class="comment"># kubectl get configmap kube-flannel-cfg -o json -n kube-system</span></span><br><span class="line">　　　　　　<span class="string">&quot;net-conf.json&quot;</span>: <span class="string">&quot;&#123;\n \&quot;Network\&quot;: \&quot;10.244.0.0/16\&quot;,\n \&quot;Backend\&quot;: &#123;\n \&quot;Type\&quot;: \&quot;vxlan\&quot;,\n \&quot;Directrouting\&quot;: true\n &#125;\n&#125;\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>看到有Directrouting，说明生效了。</p>
<pre><code>重启整个k8s，然后再看：</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># ip route show</span></span><br><span class="line">default via 172.16.1.254 dev ens192 proto static metric 100 </span><br><span class="line">10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1 <span class="comment">#访问本机直接在本机直接转发，而不需要其他接口，这就是directrouting</span></span><br><span class="line">10.244.1.0/24 via 172.16.1.101 dev ens192 <span class="comment">#看到现在访问10.244.1.0，通过本地物理网卡ens192上的172.16.1.101送出去，即通过物理网卡通信了，而不再通过隧道flannel通信。</span></span><br><span class="line">10.244.2.0/24 via 172.16.1.102 dev ens192 </span><br><span class="line">172.16.1.0/24 dev ens192 proto kernel scope link src 172.16.1.100 metric 100 </span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1</span><br><span class="line">继续登录到一个pod中进行ping测试：</span><br><span class="line"></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                             READY     STATUS             RESTARTS   AGE       IP             NODE</span><br><span class="line">myapp-deploy-69b47bc96d-75g2b    1/1       Running            0          12m       10.244.1.124   node1</span><br><span class="line">myapp-deploy-69b47bc96d-jwgwm    1/1       Running            0          3s        10.244.2.100   node2</span><br><span class="line">[root@master ~]<span class="comment"># kubectl exec  -it myapp-deploy-69b47bc96d-75g2b -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># ping 10.244.2.100</span></span><br><span class="line">PING 10.244.2.100 (10.244.2.100): 56 data bytes</span><br><span class="line">64 bytes from 10.244.2.100: seq=0 ttl=62 time=0.536 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=1 ttl=62 time=0.206 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=2 ttl=62 time=0.206 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=3 ttl=62 time=0.203 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=4 ttl=62 time=0.210 ms</span><br><span class="line">[root@node1 ~]<span class="comment"># tcpdump -i ens192 -nn icmp</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">12:31:10.899403 IP 10.244.1.124 &gt; 10.244.2.100: ICMP <span class="built_in">echo</span> request, id 8960, seq 24, length 64</span><br><span class="line">12:31:10.899546 IP 10.244.2.100 &gt; 10.244.1.124: ICMP <span class="built_in">echo</span> reply, id 8960, seq 24, length 64</span><br><span class="line">12:31:11.899505 IP 10.244.1.124 &gt; 10.244.2.100: ICMP <span class="built_in">echo</span> request, id 8960, seq 25, length 64</span><br><span class="line">12:31:11.899639 IP 10.244.2.100 &gt; 10.244.1.124: ICMP <span class="built_in">echo</span> reply, id 8960, seq 25, length 64</span><br><span class="line">通过抓包可以看到，现在在pod中进行互ping，是从物理网卡ens192进出的，这就是directrouting，这种性能比默认vxlan高。</span><br></pre></td></tr></table></figure>
<h2 id="外部访问集群"><a href="#外部访问集群" class="headerlink" title="外部访问集群"></a>外部访问集群</h2><p>从集群外访问集群有多种方式，比如loadbalancer，Ingress，nodeport，nodeport和loadbalancer是service的两个基本类型，是将service直接对外暴露的方式，ingress则是提供了七层负载均衡，其基本原理将外部流量转发到内部的service，再转发到后端endpoints，在平时的使用中，我们可以依据具体的业务需求选用不同的方式。这里主要介绍nodeport和ingress方式。</p>
<h3 id="Nodeport"><a href="#Nodeport" class="headerlink" title="Nodeport"></a>Nodeport</h3><p>通过将Service的类型设置为NodePort，就可以在Cluster中的主机上通过一个指定端口暴露服务。注意通过Cluster中每台主机上的该指定端口都可以访问到该服务，发送到该主机端口的请求会被kubernetes路由到提供服务的Pod上。采用这种服务类型，可以在kubernetes cluster网络外通过主机IP：端口的方式访问到服务。</p>
<img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/nodeport.jpg" class title="kubernetes网络通信原理">
<p>这里给出一个influxdb的例子，我们也可以针对这个模板去修改成其他的类型：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31112</span></span><br><span class="line">      <span class="attr">selector:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">influxdb</span></span><br></pre></td></tr></table></figure>

<h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/ingress.jpg" class title="kubernetes网络通信原理">
<p>Ingress是推荐在生产环境使用的方式，它起到了七层负载均衡器和Http方向代理的作用，可以根据不同的url把入口流量分发到不同的后端Service。外部客户端只看到<a href="http://foo.bar.com这个服务器,屏蔽了内部多个service的实现方式.采用这种方式,简化了客户端的访问,并增加了后端实现和部署的灵活性,可以在不影响客户端的情况下对后端的服务部署进行调整./">http://foo.bar.com这个服务器，屏蔽了内部多个Service的实现方式。采用这种方式，简化了客户端的访问，并增加了后端实现和部署的灵活性，可以在不影响客户端的情况下对后端的服务部署进行调整。</a></p>
<p>其部署的yaml可以参考如下模板：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line"> <span class="attr">annotations:</span></span><br><span class="line"> <span class="attr">ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">rules:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">test.name.com</span></span><br><span class="line"> <span class="attr">http:</span></span><br><span class="line"> <span class="attr">paths:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/test</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">service-1</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">8118</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/name</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">service-2</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">8228</span></span><br></pre></td></tr></table></figure>
<p>这里我们定义了一个ingress模板，定义通过<a href="http://test.name.com来访问服务,在虚拟主机http//test.name.com%E4%B8%8B%E9%9D%A2%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%A4%E4%B8%AAPath%EF%BC%8C%E5%85%B6%E4%B8%AD/test%E8%A2%AB%E5%88%86%E5%8F%91%E5%88%B0%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1s1%EF%BC%8C/name%E8%A2%AB%E5%88%86%E5%8F%91%E5%88%B0%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1s2%E3%80%82">http://test.name.com来访问服务，在虚拟主机http://test.name.com下面定义了两个Path，其中/test被分发到后端服务s1，/name被分发到后端服务s2。</a><br>集群中可以定义多个ingress，来完成不同服务的转发，这里需要一个ingress controller来管理集群中的Ingress规则。Ingress Contronler 通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段 Nginx 配置，再写到 Nginx-ingress-control的 Pod 里，这个 Ingress Contronler 的pod里面运行着一个nginx服务，控制器会把生成的nginx配置写入/etc/nginx.conf文件中，然后 reload使用配置生效。</p>
<p>Kubernetes提供的Ingress Controller模板如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line"> <span class="attr">annotations:</span></span><br><span class="line"> <span class="attr">ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">rules:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">foo.bar.com</span></span><br><span class="line"> <span class="attr">http:</span></span><br><span class="line"> <span class="attr">paths:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/foo</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">s1</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/bar</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">s2</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>



<p><a href="https://blog.51cto.com/liuzhengwei521/2427495">https://blog.51cto.com/liuzhengwei521/2427495</a></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>py_day01_exercise</title>
    <url>/2020/08/09/py-day01-exercise/</url>
    <content><![CDATA[<p>温故知新</p>
<a id="more"></a>

<h3 id="1-列举你了解的编码及他们之间的区别？"><a href="#1-列举你了解的编码及他们之间的区别？" class="headerlink" title="1.列举你了解的编码及他们之间的区别？"></a>1.列举你了解的编码及他们之间的区别？</h3><ul>
<li>ASCII: python2默认的编码，一个字母是8位</li>
<li>Unicode(万国码)：一个字母是32位</li>
<li>UTF - 8：万国码的压缩码，最少用一个字节，最多用4个字节，一个中文是三个字节，24<br>位</li>
<li>GBK: 专门用作汉文的编码，其中一个中文用两个字节<blockquote>
<p>注意：用什么格式编写保存文件，就用什么格式打开</p>
</blockquote>
</li>
</ul>
<h3 id="2-Python2和Python3的区别？"><a href="#2-Python2和Python3的区别？" class="headerlink" title="2.Python2和Python3的区别？"></a>2.Python2和Python3的区别？</h3><ul>
<li>编码<ul>
<li>python2默认的编码是ACSII</li>
<li>python3默认的编码是UTF-8,所以开发过程中最好加一句：  # -<em>- coding:utf-8 -</em>-</li>
</ul>
</li>
<li>输入<ul>
<li>python2: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = raw_input(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>python3 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>print<ul>
<li>python2: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>python3 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;123456&quot;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-python都有那些数据类型？"><a href="#3-python都有那些数据类型？" class="headerlink" title="3.python都有那些数据类型？"></a>3.python都有那些数据类型？</h3><p>Python基本数据类型一般分为：数字、字符串、列表、元组、字典、集合</p>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a><strong>数字</strong></h4><p>数字类型是不可更改的对象。对变量改变数字值就是生成/创建新的对象。<br>Python支持多种数字类型：<br>整型(标准整型和长整型(Python2.7及之前的有这种类型))、布尔型、双精度浮点型、十进制浮点型、复数。</p>
<h4 id="标准整型"><a href="#标准整型" class="headerlink" title="标准整型"></a><strong>标准整型</strong></h4><p>int，标准整型，在大多数32位机器上标准整型取值范围是-2^31到2^31-1，也就是-2147483648~2147483647，如果在64位机器使用64位编译器，那么这个系统的标准整型将是64位。</p>
<h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a><strong>布尔型</strong></h4><p>bool，从Python2.3开始Python中添加了布尔类型。布尔类型有两种True和False。对于没有__nozero__方法的对象默认是True。</p>
<p>对于值为0的数字、空集（空列表、空元组、空字典等）在Python中的布尔类型中都是False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a><strong>浮点型</strong></h4><p>float，每个浮点型占8个字节（64位），完全遵守IEEE754号规范（52M/11E/1S）,其中52个位用于表示底，11个位用于表示指数（可表示的范围大约是±10**308.25），剩下的一个位表示符号。这看上去相当完美，然而，实际精度依赖于机器架构和创建Python解释器的编译器。</p>
<p>浮点型值通常都有一个小数点和一个可选的后缀e（大写或小写，表示科学计数法）。在e和指数之间可以用正（+）或负（-）表示指数的正负（正数的话可以省略符号）。更多内容，请点击python学习网。</p>
<p>以上是Python核心编程的对浮点型(双精度浮点型)的说明。经过Python实测浮点型默认长度是24字节如果超出这个范围会自动</p>
<p>复数类型</p>
<p>complex，在复数中虚数不能单独存在，它们总是和一个值为0.0的实数部分一起来构成一个复数。<br>复数由实数部分和虚数部分构成。<br>表示虚数的语法：real+imagj。<br>实数部分和虚数部分都是浮点型。<br>虚数部分必须有后缀j或J。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h4><p>字符串(string)是不可变类型，就是说改变一个字符串的元素需要新建一个新的字符串。字符串是由独立的字符组成的，并且这些字符可以通过切片操作顺序地访问。Python里面通过在引号间包含字符的方式创建字符串，单引号和双引号的作用是相同的。</p>
<p>Python用“原始字符串”操作符来创建直接量字符串，所以再做区分就没什么意义了。其他的语言，比如C语言里面用单引号来标示字符，双引号标示字符串，而在Python里面没有字符这个类型。这可能是双引号和单引号在Python里面被视作一样的另一个原因。</p>
<p>Python实际上有三类字符串。通常意义的字符串（str） 和Unicode字符串（unicode） 实际上都是抽象类basestring的子类。这个basestring是不能实例化的。</p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h4><p>列表(list)像字符串类型一样，列表类型也是序列式的数据类型。字符串只能由字符组成，而且是不可变的（不能单独改变它的某个值），而列表则是能保留任意数目的Python对象的灵活的容器。</p>
<p>列表不仅可以包含Python的标准类型，而且可以用用户定义的对象作为自己的元素。列表可以包含不同类型的对象，而且要比C或者Python自己的数组类型（包含在array扩展包中）都要灵活，因为数组类型所有的元素只能是一种类型。列表可以执行pop,sort、reverse等操作。列表也可以添加或者减少元素，还可以跟其他的列表结合或者把一个列表分成几个。可以对单独一个元素或者多个元素执行insert、update或remove操作。</p>
<h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a><strong>元组</strong></h4><p>元组类型在很多操作上都跟列表一样，许多用在列表上的例子在元组上照样能跑，我们有一节内容专门讲解元组类型。它们的主要不同在于元组是不可变的，或者说是只读的，所以那些用于更新列表的操作，比如用切片操作来更新一部分元素的操作，就不能用于元组类型。</p>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a><strong>字典</strong></h4><p>字典是Python语言中唯一的映射类型。映射类型对象里哈希值（键，key） 和指向的对象（值。value） 是一对多的关系。一个字典对象是可变的，它是一个容器类型，能存储任意个数的Python对象，其中也包括其他容器类型。字典类型和序列类型容器类（列表、元组） 的区别是存储和访问数据的方式不同。序列类型只用数字类型的键（从序列的开始起按数值顺序索引） 。映射类型可以用其他对象类型做键，一般最常见的是用字符串做键。和序列类型的键不同，映像类型的键直接或间接地和存储的数据值相关联。但因为在映射类型中，我们不再用“序列化排序”的键，所以映像类型中的数据是无序排列的映射类型不要求用数字值做索引以从一个容器中获取对应的数据项。你可以用键直接“映射”到值，这就是为什么叫映射类型（“mappingtype”） 的原因。映射类型通常被称做哈希表，是因为字典对象就是哈希类型的。字典是Python中最强大的数据类型之一。</p>
<p>字典常见的操作有：字典创建、字典赋值、字典中值的访问、字典更新、字典元素删除等操作。</p>
<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a><strong>集合</strong></h4><p>集合最早出现在Python2.3版本中，通过集合模块来创建，并通过ImmutableSet类和Set类进行访问。</p>
<p>集合有两种不同的类型，可变集合（set）和不可变集合（frozenset）。可变集合，你可以添加和删除元素，对不可变集合则不允许这样做。请注意，可变集合不是可哈希的，因此既不能用做字典的键也不能做其他集合中的元素。不可变集合则正好相反，即，他们有哈希值，能被用做字典的键或是作为集合中的一个成员。集合对象是一组无序排列的可哈希的值。</p>
<p>集合支持用in和not in操作符检查成员，由len()内建函数得到集合的基数（大小） ，用for循环迭代集合的成员。但是因为集合本身是无序的，你不可以为集合创建索引或执行切片（slice） 操作，也没有键可用来获取集合中元素的值。</p>
<h3 id="4-补充代码，实现以下功能"><a href="#4-补充代码，实现以下功能" class="headerlink" title="4.补充代码，实现以下功能"></a>4.补充代码，实现以下功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = <span class="string">&#x27;51devops&quot;niubi&#x27;</span></span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure>
<h3 id="5-用print打印出下面内容："><a href="#5-用print打印出下面内容：" class="headerlink" title="5.用print打印出下面内容："></a>5.用print打印出下面内容：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">⽂能提笔安天下,</span></span><br><span class="line"><span class="string">武能上⻢定乾坤.</span></span><br><span class="line"><span class="string">⼼存谋略何⼈胜,</span></span><br><span class="line"><span class="string">古今英雄唯是君。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="6-变量名的命名规范和建议？"><a href="#6-变量名的命名规范和建议？" class="headerlink" title="6.变量名的命名规范和建议？"></a>6.变量名的命名规范和建议？</h3><blockquote>
<ol>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名的第一个字符不能是数字</li>
<li>关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li>
</ol>
</blockquote>
<h3 id="7-如下那个变量名是正确的？"><a href="#7-如下那个变量名是正确的？" class="headerlink" title="7.如下那个变量名是正确的？"></a>7.如下那个变量名是正确的？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name &#x3D; &#39;51devops&#39;  ✔️</span><br><span class="line">_ &#x3D; &#39;echo&#39;         ✔️</span><br><span class="line">_9 &#x3D; &quot;zhangsan&quot;    ✔️</span><br><span class="line">9name &#x3D; &quot;xxx&quot;      ×</span><br><span class="line">devops(edu &#x3D; 666   ×</span><br></pre></td></tr></table></figure>

<h3 id="8-简述你了解if条件语句的基本结构。"><a href="#8-简述你了解if条件语句的基本结构。" class="headerlink" title="8.简述你了解if条件语句的基本结构。"></a>8.简述你了解if条件语句的基本结构。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br><span class="line">(2)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">elif 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br><span class="line">(3)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>

<h3 id="9-设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确。"><a href="#9-设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确。" class="headerlink" title="9.设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确。"></a>9.设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line"></span><br><span class="line">num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">    print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">    print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="10-写程序，成绩有ABCDE5个等级，与分数的对应关系如下"><a href="#10-写程序，成绩有ABCDE5个等级，与分数的对应关系如下" class="headerlink" title="10.写程序，成绩有ABCDE5个等级，与分数的对应关系如下."></a>10.写程序，成绩有ABCDE5个等级，与分数的对应关系如下.</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">grade = int(input(<span class="string">&quot;请输入分数:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> grade &gt;= <span class="number">100</span> <span class="keyword">or</span> grade &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&#x27;请输入正确分数:0-100&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">90</span> &lt;= grade &lt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= grade &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= grade &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">40</span> &lt;= grade &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;E&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="11-模拟10086客服电话（条件语句的嵌套）"><a href="#11-模拟10086客服电话（条件语句的嵌套）" class="headerlink" title="11.模拟10086客服电话（条件语句的嵌套）"></a>11.模拟10086客服电话（条件语句的嵌套）</h3><hr>
<h3 id="1-猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确，然后退出循环。"><a href="#1-猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确，然后退出循环。" class="headerlink" title="1.猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确，然后退出循环。"></a>1.猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确，然后退出循环。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="2-在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。"><a href="#2-在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。" class="headerlink" title="2.在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。"></a>2.在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">    num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;太笨了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-使用两种方法实现输出-1-2-3-4-5-6-8-9-10"><a href="#3-使用两种方法实现输出-1-2-3-4-5-6-8-9-10" class="headerlink" title="3.使用两种方法实现输出 1 2 3 4 5 6 8 9 10"></a>3.使用两种方法实现输出 1 2 3 4 5 6 8 9 10</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(n)</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">7</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="4-求1-100的所有数的和"><a href="#4-求1-100的所有数的和" class="headerlink" title="4.求1-100的所有数的和"></a>4.求1-100的所有数的和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    res += n</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="5-输出-1-100-内的所有奇数"><a href="#5-输出-1-100-内的所有奇数" class="headerlink" title="5.输出 1-100 内的所有奇数"></a>5.输出 1-100 内的所有奇数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="6-输出-1-100-内的所有偶数"><a href="#6-输出-1-100-内的所有偶数" class="headerlink" title="6.输出 1-100 内的所有偶数"></a>6.输出 1-100 内的所有偶数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="7-求1-2-3-4-5-…-99的所有数的和"><a href="#7-求1-2-3-4-5-…-99的所有数的和" class="headerlink" title="7.求1-2+3-4+5 … 99的所有数的和"></a>7.求1-2+3-4+5 … 99的所有数的和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        res += n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res -= n</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h3 id="8-⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）"><a href="#8-⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）" class="headerlink" title="8.⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）"></a>8.⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">user = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">passwd = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    valid_user = input(<span class="string">&#x27;请输入用户名:&#x27;</span>)</span><br><span class="line">    valid_passwd = input(<span class="string">&#x27;请输入密码:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> valid_user == user <span class="keyword">and</span> valid_passwd == passwd:</span><br><span class="line">        print(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;用户名或密码错误(剩余尝试次数: %s次)&quot;</span> %(count))</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br></pre></td></tr></table></figure>

<h3 id="9-猜年龄游戏"><a href="#9-猜年龄游戏" class="headerlink" title="9.猜年龄游戏"></a>9.猜年龄游戏</h3><p>要求：允许用户最多尝试3次，3次都没猜对的话，就直接退出，如果猜对了，打印恭喜信息并退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#年龄</span></span><br><span class="line">age = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">&#x27;猜猜我的年龄:&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess_age &gt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess_age &lt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="10-猜年龄游戏升级版"><a href="#10-猜年龄游戏升级版" class="headerlink" title="10.猜年龄游戏升级版"></a>10.猜年龄游戏升级版</h3><p>要求：允许用户最多尝试3次，每尝试3次后，如果还没猜对，就问用户是否还想继续玩，如果回答Y，就继续让其猜3次，以此往复，如果回答N，就退出程序，如何猜对了，就直接退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#年龄</span></span><br><span class="line">age = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">&#x27;猜猜我的年龄:&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess_age &gt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess_age &lt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        chance = input(<span class="string">&#x27;Do you want continue(Y/N):&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> chance == <span class="string">&#x27;Y&#x27;</span> <span class="keyword">or</span> chance == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            count = <span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> chance == <span class="string">&#x27;N&#x27;</span> <span class="keyword">or</span> chance == <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;pls input correct choice&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-写代码，有如下列表，按照要求实现每一个功能。"><a href="#1-写代码，有如下列表，按照要求实现每一个功能。" class="headerlink" title="1.写代码，有如下列表，按照要求实现每一个功能。"></a>1.写代码，有如下列表，按照要求实现每一个功能。</h3><p>li = [“pounds”, “szk”, “haoda”, “barry”, “devops”]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算列表的长度并输出</span></span><br><span class="line">print(len(li))</span><br><span class="line"></span><br><span class="line"><span class="comment">#请通过步长获取索引为偶数的所有值，并打印出获取后的列表</span></span><br><span class="line">print(li[::<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表中追加元素”seven”,并输出添加后的列表</span></span><br><span class="line">li.append(<span class="string">&quot;seven&quot;</span>)</span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请在列表的第1个位置插入元素”Tony”,并输出添加后的列表</span></span><br><span class="line">li.insert(<span class="number">1</span>,<span class="string">&quot;Tony&quot;</span>)</span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请修改列表第2个位置的元素为”Kelly”,并输出修改后的列表</span></span><br><span class="line">li[<span class="number">2</span>] = <span class="string">&quot;Kelly&quot;</span></span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请删除列表中的元素”haoda”,并输出添加后的列表</span></span><br><span class="line">li.remove(<span class="string">&quot;haoda&quot;</span>)</span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请删除列表中的第2个元素，并输出删除元素后的列表</span></span><br><span class="line">li.pop(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># del li[2]</span></span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请删除列表中的第2至第4个元素，并输出删除元素后的列表</span></span><br><span class="line"><span class="keyword">del</span> li[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure>

<h3 id="2-写代码，有如下列表，利用切片实现每一个功能"><a href="#2-写代码，有如下列表，利用切片实现每一个功能" class="headerlink" title="2.写代码，有如下列表，利用切片实现每一个功能"></a>2.写代码，有如下列表，利用切片实现每一个功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>, <span class="number">4</span>, <span class="string">&quot;b&quot;</span>, <span class="number">5</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [1,3,2]</span></span><br><span class="line">new_list = li[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [“a”,4,”b”]</span></span><br><span class="line">new_list = li[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [1,2,4,5]</span></span><br><span class="line">new_list = li[::<span class="number">2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [3,”a”,”b”]</span></span><br><span class="line">new_list = li[<span class="number">1</span>:<span class="number">-2</span>:<span class="number">2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [3,”a”,”b”,”c”]</span></span><br><span class="line">new_list = li[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [“c”]</span></span><br><span class="line">new_list = li[<span class="number">-1</span>:]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [“b”,”a”,3]</span></span><br><span class="line">new_list = li[<span class="number">-3</span>::<span class="number">-2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-写代码，有如下列表，按照要求实现每一个功能。"><a href="#3-写代码，有如下列表，按照要求实现每一个功能。" class="headerlink" title="3.写代码，有如下列表，按照要求实现每一个功能。"></a>3.写代码，有如下列表，按照要求实现每一个功能。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;k&quot;</span>, [<span class="string">&quot;qwe&quot;</span>, <span class="number">20</span>, [<span class="string">&quot;k1&quot;</span>, [<span class="string">&quot;tt&quot;</span>, <span class="number">3</span>, <span class="string">&quot;1&quot;</span>]], <span class="number">89</span>], <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;adv&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表lis中的”k”变成大写，并打印列表。</span></span><br><span class="line">lis[<span class="number">2</span>] = lis[<span class="number">2</span>].upper()</span><br><span class="line">lis[<span class="number">2</span>] = <span class="string">&quot;K&quot;</span></span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#将列表中的数字3变成字符串”100”</span></span><br><span class="line">lis[<span class="number">1</span>] = <span class="string">&quot;100&quot;</span></span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#将列表中的字符串”tt”变成数字 101</span></span><br><span class="line">lis[<span class="number">3</span>][<span class="number">2</span>][<span class="number">0</span>] = <span class="number">101</span></span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#在 “qwe”前面插入字符串：”火车头”</span></span><br><span class="line">lis[<span class="number">3</span>].insert(<span class="number">0</span>,<span class="string">&quot;火车头&quot;</span>)</span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>


<h3 id="4-请用代码实现循环输出元素和值：users-“szk”-”pounds”-”波姐”-，如："><a href="#4-请用代码实现循环输出元素和值：users-“szk”-”pounds”-”波姐”-，如：" class="headerlink" title="4.请用代码实现循环输出元素和值：users = [“szk”,”pounds”,”波姐”] ，如："></a>4.请用代码实现循环输出元素和值：users = [“szk”,”pounds”,”波姐”] ，如：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="string">&quot;szk&quot;</span>,<span class="string">&quot;pounds&quot;</span>,<span class="string">&quot;波姐&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx,value <span class="keyword">in</span> enumerate(users):</span><br><span class="line">    print(idx,value)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-写代码实现以下功能"><a href="#5-写代码实现以下功能" class="headerlink" title="5.写代码实现以下功能"></a>5.写代码实现以下功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如有变量 googs = [‘汽车’,’飞机’,’火箭’] 提示用户可供选择的商品：用户输入索引后，将指定商品的内容拼接打印，如：用户输入0，则打印 您选择的商品是汽车。</span></span><br><span class="line">goods = [<span class="string">&#x27;汽车&#x27;</span>,<span class="string">&#x27;飞机&#x27;</span>,<span class="string">&#x27;火箭&#x27;</span>]</span><br><span class="line">tag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> tag:</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(goods):</span><br><span class="line">        print(<span class="string">&quot;编号:%s   商品名称: %s&quot;</span> %(k,v))</span><br><span class="line">    choice = int(input(<span class="string">&quot;输入商品编号:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> choice &gt;= <span class="number">0</span> <span class="keyword">and</span> choice &lt; <span class="number">3</span>:</span><br><span class="line">        print(goods[choice])</span><br><span class="line">        tag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;商品编号输入错误&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6-请用代码实现"><a href="#6-请用代码实现" class="headerlink" title="6.请用代码实现"></a>6.请用代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = <span class="string">&quot;szk&quot;</span></span><br><span class="line"><span class="comment">#转成列表</span></span><br><span class="line">convert_list = list(li)</span><br><span class="line">print(convert_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转成字符串</span></span><br><span class="line">convert_str = <span class="string">&quot;_&quot;</span>.join(convert_list)</span><br><span class="line">print(convert_str,type(convert_str))</span><br></pre></td></tr></table></figure>

<h3 id="8-利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中"><a href="#8-利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中" class="headerlink" title="8.利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中"></a>8.利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        new_list.append(num)</span><br><span class="line"></span><br><span class="line">print(new_list)</span><br></pre></td></tr></table></figure>


<h3 id="9-利用for循环和range-找出50以内能被3整除的数，并将这些数插入到一个新列表中"><a href="#9-利用for循环和range-找出50以内能被3整除的数，并将这些数插入到一个新列表中" class="headerlink" title="9.利用for循环和range 找出50以内能被3整除的数，并将这些数插入到一个新列表中"></a>9.利用for循环和range 找出50以内能被3整除的数，并将这些数插入到一个新列表中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        new_list.append(num)</span><br><span class="line"></span><br><span class="line">print(new_list)</span><br></pre></td></tr></table></figure>
<h3 id="10-利用for循环和range从100-1，倒序打印"><a href="#10-利用for循环和range从100-1，倒序打印" class="headerlink" title="10.利用for循环和range从100~1，倒序打印"></a>10.利用for循环和range从100~1，倒序打印</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">num_list = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    num_list.append(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#倒序</span></span><br><span class="line">num_list.reverse()</span><br><span class="line"></span><br><span class="line">print(num_list)</span><br></pre></td></tr></table></figure>
<h3 id="11-利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。"><a href="#11-利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。" class="headerlink" title="11.利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。"></a>11.利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">list_3 = []</span><br><span class="line">list_4 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">31</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        list_3.append(num)</span><br><span class="line">    <span class="keyword">elif</span> num % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">        list_4.append(num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">print(list_3)</span><br><span class="line">print(list_4)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python_exercise</category>
      </categories>
      <tags>
        <tag>python_exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day02</title>
    <url>/2020/08/16/py-day02/</url>
    <content><![CDATA[<p>python基础<br>列表 字典 集合 元祖<br>对文件操作<br>函数  函数(位置参数， 关键字参数， 默认参数)</p>
<a id="more"></a>

<ul>
<li><p>python的基础数据结构</p>
<ul>
<li>整型     1，2，3，</li>
<li>字符串  <ul>
<li>单引号  ‘hello’</li>
<li>双引号  “hello”</li>
<li>三引号  “”””””</li>
</ul>
</li>
<li>布尔类型<ul>
<li>True  </li>
<li>False  0,None,’’ 都为假 注意的是：js true false</li>
</ul>
</li>
</ul>
</li>
<li><p>python的变量</p>
<ul>
<li>变量的作用：保存中间结果    num = 1+2+3    </li>
<li>变量的命名规范：<ul>
<li>PEP8规范</li>
<li>等于号的左右两边是要有空格的</li>
<li><strong>变量名一定要有意义</strong>  name = “szk”</li>
<li>变量的几种风格  ： 大驼峰，小驼峰，下划线</li>
<li>变量命名规范：不能使用关键字命名，不能以数字开头</li>
</ul>
</li>
</ul>
</li>
<li><p>字符串的用法</p>
<ul>
<li>split(‘:’) :   name = “szk_age”  name.split(‘_’)   非常重要的一个字符串用法</li>
<li>字符串的格式化： <ul>
<li>%  例子： “曾老师是一个 %s” % （‘大萨达撒‘）</li>
<li>format 例子： “今天天气不错， 看电影 {}”.format(‘xxxxx’)</li>
<li>format 例子： “曾老师性别{sex}, 年龄 {age}”.format(sex=’男’, age=73)</li>
</ul>
</li>
<li>索引：任何语言中的索引，都是从0开始的  name = ‘szk’</li>
<li>切片：就是从一整个元素中切出想要的元素 name = ‘51aiops’ , 可以根据索引来进行切割 <ul>
<li>name[2:6]  索引的原则：前包后不包 </li>
</ul>
</li>
</ul>
</li>
<li><p>流程控制</p>
<ul>
<li>顺序<ul>
<li>代码从上到下依次执行</li>
</ul>
</li>
<li>分支<ul>
<li>if elif else</li>
<li>elif 可以写多个，而if和else只能写一次</li>
<li><strong>如果有多个分支条件的话，当命中一个条件之后，就会退出整个分支语句</strong></li>
</ul>
</li>
<li>循环<ul>
<li>while  条件: 项目中，用的比较少，算法的时候比较多<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;else包含的代码会再while循环结束后，没有被break打断的情况下，else代码会运行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Tag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> Tag:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> Tag:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">while</span> Tag:</span><br><span class="line">            ...</span><br><span class="line">            Tag = <span class="literal">False</span></span><br><span class="line">用于退出循环，但是还会执行tag后续代码</span><br></pre></td></tr></table></figure></li>
<li>for  项目中用的比较多<br>range在py2中是列表，py3中是个迭代器，更省资源<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>循环嵌套：外层循环一次，内层循环需要完整的循环完毕</span><br><span class="line"><span class="keyword">for</span> i range(<span class="number">3</span>):</span><br><span class="line">    print(<span class="string">&#x27;外层循环‘)</span></span><br><span class="line"><span class="string">    for j in range(5):</span></span><br><span class="line"><span class="string">        print(&#x27;</span>内层循环<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li>input</li>
<li>条件语句和运算符</li>
<li>赋值运算符 ： <ul>
<li>a = 10   a = a - 1 a += 1   a += 1 ===&gt; a = a - 1</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a><div id="title">今日内容</div></h4><h5 id="1-python基础数据类型之列表和元组"><a href="#1-python基础数据类型之列表和元组" class="headerlink" title="1. python基础数据类型之列表和元组"></a>1. python基础数据类型之列表和元组</h5><ul>
<li><p>列表   其他语言叫数组</p>
<ul>
<li><p>定义：用来存储比较复杂的数据 </p>
</li>
<li><p>用法：name_list = [‘老陈’, ‘老赵’,  ‘文亮’] </p>
</li>
<li><p>定义2： name_list = list() </p>
</li>
<li><p>增删改查  常用的方法： remove， pop， append，for循环 改索引</p>
<p>pop, remove，和del的区别：</p>
</li>
<li><p>pop弹出，弹出之后的元素是可以赋值给其他变量用的</p>
</li>
<li><p>remove和del, 直接删除元素</p>
</li>
<li><p>remove就是通过值删除这个元素</p>
</li>
<li><p>del 通过索引来删除值</p>
<p>pop 是弹出，后面可以引用，remove，del好像是直接删除    </p>
</li>
</ul>
</li>
<li><p>列表的切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;陈羽凡&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>, <span class="string">&#x27;xxxx&#x27;</span>, <span class="string">&#x27;波多老师&#x27;</span>]</span><br><span class="line">                <span class="comment"># 0      1       2        3       4</span></span><br><span class="line">                <span class="comment"># -5    -4       -3      -2       -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 通过索引下标来获取子列表</span></span><br><span class="line"><span class="comment">### 符合前包后不包的原则</span></span><br><span class="line">users = user_list[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">print(users)</span><br><span class="line">users = user_list[:]  <span class="comment">### 表示的是 从头切到尾</span></span><br><span class="line">users = user_list[<span class="number">2</span>:] <span class="comment">### 表示的是 从2 开始切到结尾</span></span><br><span class="line">users = user_list[:<span class="number">4</span>] <span class="comment">## 从头开始切</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表的循环</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### for循环打印</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&#x27;尼古拉斯赵四&#x27;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> user_list:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(user_list):</span><br><span class="line">    print(i, v)</span><br></pre></td></tr></table></figure>
<p><strong>只需要元素，则使用第一种循环， 若需要索引下标，则使用第二种循环</strong></p>
<ul>
<li>列表和字符串的互相转换<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 1.字符串转列表</span></span><br><span class="line">name = <span class="string">&quot;hello_world&quot;</span></span><br><span class="line">names = name.split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(names)<span class="comment">#### [&#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 2. 列表转字符串</span></span><br><span class="line">names_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&#x27;尼古拉斯赵四&#x27;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### 将上述元素通过下划线拼接成字符串</span></span><br><span class="line">res = <span class="string">&#x27;_&#x27;</span>.join(names_list)</span><br><span class="line">print(res, type(res))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>列表的增删改查，下去复习列表的基本操作的时候，遵循这个增删改查的原则</strong></p>
<h5 id="2-python的基础数据类型之字典和集合"><a href="#2-python的基础数据类型之字典和集合" class="headerlink" title="2. python的基础数据类型之字典和集合"></a>2. python的基础数据类型之字典和集合</h5><p><strong>字典和列表一样的重要</strong></p>
<p>python里叫字典，而其他语言java： 哈希table   hashtable</p>
<p>定义方式：</p>
<p>最长用的两种</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">第一种：</span><br><span class="line"><span class="comment"># info = &#123;</span></span><br><span class="line"><span class="comment">#     &quot;name&quot;: &#x27;szk&#x27;,</span></span><br><span class="line"><span class="comment">#     &quot;age&quot; : 18,</span></span><br><span class="line"><span class="comment">#     &quot;height&quot;: 180</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">user_info = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;陈顺阳&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">30</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;杜峰&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">32</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;pounds&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">32</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>字典的增删改查（crud）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">info = &#123;<span class="string">&quot;age&quot;</span>:<span class="number">12</span>, <span class="string">&quot;status&quot;</span>:<span class="literal">True</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;szk&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;xx@live.com&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 1.获取字典的键</span></span><br><span class="line"><span class="comment"># keys = info.keys()</span></span><br><span class="line"><span class="comment"># for k in keys:</span></span><br><span class="line"><span class="comment">#     print(k)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ### 2. 获取字典的所有值</span></span><br><span class="line"><span class="comment"># values = info.values()</span></span><br><span class="line"><span class="comment"># for v in values:</span></span><br><span class="line"><span class="comment">#     print(v)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3.要获取字典的值又要获取字典的key, 非常重要的方法</span></span><br><span class="line"><span class="comment"># for k, v in info.items():</span></span><br><span class="line"><span class="comment">#     print(k, v)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 根据键来获取值  重要</span></span><br><span class="line"><span class="comment"># print(info[&#x27;height&#x27;])</span></span><br><span class="line">data = info.get(<span class="string">&quot;height&quot;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment"># 根据name为键去info字典中获取对应的值，如果不存在则返回None，存在则返回值。</span></span><br><span class="line">print(data) <span class="comment"># 输出：None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 4.更新键值对</span></span><br><span class="line"><span class="comment"># info2 = &#123;&quot;age&quot;:12, &quot;status&quot;:True&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># info2.update(age=14, name=&#x27;szk&#x27;) </span></span><br><span class="line"><span class="comment"># info.update(dic)</span></span><br><span class="line"><span class="comment">### 如果key存在的话，就会更新原有的值，若不存在，将这个name值加入info2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 5.增加</span></span><br><span class="line"><span class="comment"># info2[&#x27;name&#x27;] = &#x27;szk&#x27; ###向字典中添加一个元素</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(info2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 6.删除</span></span><br><span class="line">info2 = &#123;<span class="string">&quot;age&quot;</span>:<span class="number">12</span>, <span class="string">&quot;status&quot;</span>:<span class="literal">True</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;szk&quot;</span>&#125;</span><br><span class="line"><span class="comment"># data = info2.pop(&quot;age&quot;) ### 根据键来删除元素,返回值</span></span><br><span class="line"><span class="comment"># data = info2.popitem:随机删除，返回元祖（key，value）</span></span><br><span class="line"><span class="keyword">del</span> info2[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">print(info2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 7.get</span></span><br><span class="line">d.get():根据key取值，容错性好</span><br><span class="line"><span class="comment">### 8.setdefault</span></span><br><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>&#125;</span><br><span class="line">d.setdefault(<span class="string">&#x27;k1&#x27;</span>,<span class="number">222</span>)</span><br><span class="line"><span class="comment"># 8.1 如果key存在则不添加，返回字典中key 的值</span></span><br><span class="line"><span class="comment"># 8.2 如果key没有则添加，返回字典中key对应的值</span></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">info.setdefault(<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>集合的特性<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 2.交集</span></span><br><span class="line">s1 = &#123;<span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&quot;刘科⻓&quot;</span>, <span class="string">&quot;冯乡⻓&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s3 = s1 &amp; s2                 <span class="comment"># 方式一：取两个集合的交集</span></span><br><span class="line">s4 = s1.intersection(s2) <span class="comment"># 方</span></span><br><span class="line"></span><br><span class="line">print(s3, s4)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 3.并集</span></span><br><span class="line">s1 = &#123;<span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&quot;刘科⻓&quot;</span>, <span class="string">&quot;冯乡⻓&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s3 = s1 | s2               <span class="comment"># 方式一：取两个集合的并集</span></span><br><span class="line">s4 = s1.union(s2)</span><br><span class="line"></span><br><span class="line">print(s3, s4)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4.差集</span></span><br><span class="line">s1 = &#123;<span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&quot;刘科⻓&quot;</span>, <span class="string">&quot;冯乡⻓&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s3 = s1 - s2                       <span class="comment"># 方式一：差集，s1中有且s2中没有的值</span></span><br><span class="line">s4 = s1.difference(s2)         <span class="comment"># 方式二：差集，s1中有且s2中没有的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>列表和集合的转换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">99</span>,<span class="number">22</span>]</span><br><span class="line">s1 = set(v1)</span><br><span class="line">l1 = list(s1)</span><br><span class="line">print(l1)</span><br></pre></td></tr></table></figure>

<h5 id="3-元祖"><a href="#3-元祖" class="headerlink" title="3.元祖"></a>3.元祖</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1. 作用：按照索引/位置存放多个值，只用于读不用于改</span></span><br><span class="line"><span class="comment">#2. 定义：()内用逗号分隔开多个任意类型的元素</span></span><br></pre></td></tr></table></figure>
<p>不可变列表<br>x = (10,)   # 要习惯加,</p>
<ul>
<li>类型转换<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(tuple(&#39;hello&#39;))</span><br><span class="line">print(tuple([1,2,3])</span><br><span class="line">print(tuple(&#123;&#39;a1&#39;:111,&#39;a2&#39;:333&#125;) &#x3D; (&#39;a1&#39;, &#39;a2&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h5 id="3-python对文件的操作"><a href="#3-python对文件的操作" class="headerlink" title="3. python对文件的操作"></a>3. python对文件的操作</h5><blockquote>
<p>主要学习就是文件打开的几种模式，项目中涉及到就是文件上传和下载</p>
</blockquote>
<p>主要的文件打开方式：</p>
<p>模式： w, r, r+<br>方法： open, close, read, write<br>上下文管理器：推崇的方式with</p>
<ul>
<li><p>with方法读写文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;a.txt&#39;,&#39;r&#39;) as read_f,open(&#39;b.txt&#39;,&#39;w&#39;) as write_f:</span><br><span class="line">    data&#x3D;read_f.read()</span><br><span class="line">    write_f.write(data)</span><br><span class="line">文件以什么方式存的，就要以什么方式打开。没有指定，就以操作系统为准</span><br><span class="line">f&#x3D;open(&#39;a.txt&#39;,&#39;r&#39;,encoding&#x3D;&#39;utf-8&#39;)</span><br></pre></td></tr></table></figure></li>
<li><p>循环读取每一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;b.txt&#39;, mode&#x3D;&#39;rt&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        print(line)</span><br><span class="line">for循环遍历，实际上是返回一个迭代器，并不断调用其next()方法的过程。next()返回什么，取决于迭代器的具体实现，对于str类型来说，就返回下一个字符串；对于file类型来说，就返回下一行。</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开文件模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. 打开文件的模式有(默认为文本模式)：</span><br><span class="line">r ，只读模式【默认模式，文件必须存在，不存在则抛出异常】</span><br><span class="line">w，只写模式【不可读；不存在则创建；存在则清空内容】</span><br><span class="line">a， 之追加写模式【不可读；不存在则创建；存在则只追加内容】</span><br><span class="line"></span><br><span class="line">#2. 对于非文本文件，我们只能使用b模式，&quot;b&quot;表示以字节的方式操作（而所有文件也都是以字节的形式存储的，使用这种模式无需考虑文本文件的字符编码、图片文件的jgp格式、视频文件的avi格式）</span><br><span class="line">rb </span><br><span class="line">wb</span><br><span class="line">ab</span><br><span class="line">注：以b方式打开时，读取到的内容是字节类型，写入时也需要提供字节类型，不能指定编码</span><br><span class="line"></span><br><span class="line">#3. 了解部分</span><br><span class="line">&quot;+&quot; 表示可以同时读写某个文件</span><br><span class="line">r+， 读写【可读，可写】</span><br><span class="line">w+，写读【可读，可写】</span><br><span class="line">a+， 写读【可读，可写】</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x， 只写模式【不可读；不存在则创建，存在则报错】</span><br><span class="line">x+ ，写读【可读，可写】</span><br><span class="line">xb</span><br></pre></td></tr></table></figure></li>
<li><p>操作文件的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#掌握</span><br><span class="line">f.read() #读取所有内容,光标移动到文件末尾</span><br><span class="line">f.readline() #读取一行内容,光标移动到第二行首部</span><br><span class="line">f.readlines() #读取每一行内容,存放于列表中</span><br><span class="line"></span><br><span class="line">f.write(&#39;1111\n222\n&#39;) #针对文本模式的写,需要自己写换行符</span><br><span class="line">f.write(&#39;1111\n222\n&#39;.encode(&#39;utf-8&#39;)) #针对b模式的写,需要自己写换行符</span><br><span class="line">f.writelines([&#39;333\n&#39;,&#39;444\n&#39;]) #文件模式</span><br><span class="line">f.writelines([bytes(&#39;333\n&#39;,encoding&#x3D;&#39;utf-8&#39;),&#39;444\n&#39;.encode(&#39;utf-8&#39;)]) #b模式</span><br><span class="line"></span><br><span class="line">#了解</span><br><span class="line">f.readable() #文件是否可读</span><br><span class="line">f.writable() #文件是否可读</span><br><span class="line">f.closed #文件是否关闭</span><br><span class="line">f.encoding #如果文件打开模式为b,则没有该属性</span><br><span class="line">f.flush() #立刻将文件内容从内存刷到硬盘</span><br><span class="line">f.name</span><br></pre></td></tr></table></figure>
<h5 id="3-1文件指针"><a href="#3-1文件指针" class="headerlink" title="3.1文件指针"></a>3.1文件指针</h5><blockquote>
<p>控制文件内指针移动的单位：只有t模式下的read(n)代表字符个数，除此之外全是字节个数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件内容：hello哈哈哈</span><br><span class="line"># with open(&#39;a.txt&#39;, mode&#x3D;&#39;rt&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">#     res &#x3D; f.read(6)</span><br><span class="line">#     print(res)</span><br><span class="line">#</span><br><span class="line"># with open(&#39;a.txt&#39;, mode&#x3D;&#39;rb&#39;) as f:</span><br><span class="line">#     res &#x3D; f.read(8)</span><br><span class="line">#     print(res.decode(&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>seek控制光标三种移动方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主动控制文件指针的移动</span><br><span class="line">0：t:参照文件开头移动n个字符  b:参照文件开头移动n个字节</span><br><span class="line">f.seek(3,0)</span><br><span class="line"></span><br><span class="line">1：参照当前位置移动n个字节</span><br><span class="line">f.seek(3,1)</span><br><span class="line"></span><br><span class="line">2：参照末尾位置移动n个字节</span><br><span class="line">f.seek(3,1)</span><br><span class="line">文件末尾</span><br><span class="line">a，f.seek(0,2)</span><br><span class="line"></span><br><span class="line"># ps: 只有0模式可以在t下使用，1和2只能在b</span><br></pre></td></tr></table></figure></li>
<li><p>移动到文件末尾的两种方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.a+</span><br><span class="line">2.f.seek(0,2)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>基于seek实现’tail -f’功能<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">with open(&#39;access.log&#39;, mode&#x3D;&#39;rb&#39;) as f:</span><br><span class="line">    f.seek(0,2)</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        line &#x3D; f.readline()</span><br><span class="line">        if len(line) &#x3D;&#x3D; 0:</span><br><span class="line">            time.sleep(0.3)</span><br><span class="line">        else:</span><br><span class="line">            print(&#39;x&#39;)</span><br><span class="line">            print(line.decode(&#39;utf-8&#39;),end&#x3D;&#39;&#39;)</span><br></pre></td></tr></table></figure>
<h5 id="3-2文件修改的两种方式"><a href="#3-2文件修改的两种方式" class="headerlink" title="3.2文件修改的两种方式"></a>3.2文件修改的两种方式</h5></li>
<li>方式一：将硬盘存放的该文件的内容全部加载到内存，在内存中是可以修改的，修改完毕后，再由内存覆盖到硬盘（word，vim，nodpad++等编辑器）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&#39;b.txt&#39;, mode&#x3D;&#39;rt&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    data &#x3D; f.read()</span><br><span class="line">    res &#x3D; data.replace(&#39;egon&#39;, &#39;EGON&#39;)</span><br><span class="line">with open(&#39;b.txt&#39;, mode&#x3D;&#39;wt&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:</span><br><span class="line">    f.write(res)</span><br></pre></td></tr></table></figure></li>
<li>方式二：将硬盘存放的该文件的内容一行一行地读入内存，修改完毕就写入新文件，最后用新文件覆盖源文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.以读的方式打开源文件，以写的方式打开一个临时文件</span><br><span class="line">2.从源文件中读出一行内容到内存中，修改完毕后再写入临时文件，循环往复直到读完源文件</span><br><span class="line">3.删除源文件，将临时文件改名为源文件名</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">with open(&#39;b.txt&#39;, mode&#x3D;&#39;rt&#39;, encoding&#x3D;&#39;utf-8&#39;) as src_f,\</span><br><span class="line">    open(&#39;.b.txt.swp&#39;,mode&#x3D;&#39;a+t&#39;) as dst_f:</span><br><span class="line">    for line in src_f:</span><br><span class="line">        dst_f.write(line.replace(&#39;EGON&#39;, &#39;egon&#39;))</span><br><span class="line"></span><br><span class="line">os.remove(&#39;b.txt&#39;)</span><br><span class="line">os.rename(&#39;.b.txt.swp&#39;, &#39;b.txt&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="4-python的函数-基础入门"><a href="#4-python的函数-基础入门" class="headerlink" title="4. python的函数 基础入门"></a>4. python的函数 基础入门</h5><blockquote>
<p>重点：函数的参数</p>
</blockquote>
<p>函数的定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shell:</span><br><span class="line">    func test()&#123;</span><br><span class="line">        函数体</span><br><span class="line">    &#125;</span><br><span class="line">    test() <span class="comment">### 函数的调用</span></span><br><span class="line">python:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">        函数体</span><br><span class="line">    test() <span class="comment">### 函数调用</span></span><br></pre></td></tr></table></figure>

<p>函数的返回值<br>重点：<strong>return的作用:结束一个函数的执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.return的作用:结束一个函数的执行</span><br><span class="line"></span><br><span class="line">2.首先返回值可以是任意的数据类型。</span><br><span class="line"></span><br><span class="line">3.函数可以有返回值：如果有返回值，必须要用变量接收才有效果</span><br><span class="line"></span><br><span class="line">   也可以没有返回值：</span><br><span class="line"></span><br><span class="line">　 没有返回值的时候分三种情况：</span><br><span class="line"></span><br><span class="line">　　　　1.当不写return的时候，函数的返回值为None</span><br><span class="line"></span><br><span class="line">　　　　2.当只写一个return的时候，函数的返回值为None</span><br><span class="line"></span><br><span class="line">　　　　3.return None的时候，函数的返回值为None（几乎不用）</span><br><span class="line"></span><br><span class="line">4.return返回一个值（一个变量）</span><br><span class="line"></span><br><span class="line">5.return返回多个值（多个变量）：多个值之间用逗号隔开，以元组的形式返回。</span><br><span class="line"></span><br><span class="line">　　　　　　　　　　　　　　　 接收：可以用一个变量接收，也可以用多个变量接收，返回几个就用几个变量去接收</span><br></pre></td></tr></table></figure>

<p>示例：函数有一个或多个返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def  func():</span><br><span class="line">        a&#x3D;111</span><br><span class="line">        b&#x3D;[1,2,3]</span><br><span class="line">        c&#x3D;&#123;&#39;a&#39;:15,&#39;b&#39;:6&#125;</span><br><span class="line">        # return a#返回一个值</span><br><span class="line">        return a,b,c#返回多个值，变量之间按逗号隔开，以元组的形式返回</span><br><span class="line">print(func())</span><br></pre></td></tr></table></figure>

<p>示例：函数没有返回值的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">func</span>():</span></span><br><span class="line">    a=<span class="number">111</span></span><br><span class="line">    b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">ret=func()</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>只写一个<span class="keyword">return</span>时返回<span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">func</span>():</span></span><br><span class="line">    a=<span class="number">111</span></span><br><span class="line">    b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">ret=func()</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="keyword">return</span> <span class="literal">None</span>的时候返回<span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">func</span>():</span></span><br><span class="line">    a=<span class="number">111</span></span><br><span class="line">    b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">None</span></span><br><span class="line">ret=func()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<p>示例：定义一个列表，返回列表的最后一个值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">方法一</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    list=[<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;egon&#x27;</span>,<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">    <span class="keyword">return</span> list[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">print(func())</span><br><span class="line"></span><br><span class="line">方法二</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    list=[<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;egon&#x27;</span>,<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line">m,n,k,g=func()<span class="comment">#</span></span><br><span class="line">print(g)</span><br></pre></td></tr></table></figure>


<h5 id="4-函数的参数"><a href="#4-函数的参数" class="headerlink" title="4.函数的参数"></a>4.函数的参数</h5><ul>
<li>函数参数两大类<ul>
<li>形参：在函数定义阶段括号定义的变量名，称之为形参</li>
<li>实参：在函数调用阶段括号内传入的值，称之为实参<br>形参与实参的关系：在调用函数时，实参的值会绑定给形参名，然后可以在函数内使用，调用完毕后，解除绑定</li>
</ul>
</li>
<li>参数的分类<ul>
<li>位置参数<ul>
<li>位置形参</li>
<li>默认形参</li>
<li>位置实参</li>
</ul>
</li>
<li>关键字参数<ul>
<li>关键字实参</li>
</ul>
</li>
<li>可变长参数<ul>
<li>‘*’ 与 ** 在形参中的应用</li>
<li>‘*’ 与 ** 在实参中的应用</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>概念 - 形参</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">位置形参：在函数定义阶段按照从左至右的顺序依次定义的形参，称之为位置形参</span><br><span class="line">特点:    必须被传值，多一个不行少一个也不行</span><br><span class="line"></span><br><span class="line">默认形参：在函数定义阶段就已经为某个形参赋值了，称之为默认形参</span><br><span class="line">特点：   在函数定义阶段就已经赋值了，意味着在调用阶段可以为其赋值</span><br><span class="line"></span><br><span class="line">需要注意的问题：</span><br><span class="line">1.默认形参的值只在函数定义阶段被赋值一次</span><br><span class="line">2.默认形参的值同城应该是不可变类型</span><br></pre></td></tr></table></figure>
<blockquote>
<p>概念 - 实参</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">位置实参：在函数调用阶段按照从左至右的顺序依次传入的值，称之为位置实参</span><br><span class="line">特点：按照顺序与形参一一对应</span><br><span class="line">关键字实参：在函实参数调用阶段按照key&#x3D;value 的格式传入的值，称之为关键字实参</span><br><span class="line">特点：可以打乱顺序，但是仍然能够为指定的形参赋值</span><br><span class="line"></span><br><span class="line">ps：可以混用位置实参与关键字实参，但是</span><br><span class="line">     1.位置实参必须在关键字前</span><br><span class="line">     2.不能为同一个形参重复赋值</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>概念 - 动态参数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按位置传值多余的参数都由**args**统一接收，保存成一个**元组**的形式</span><br><span class="line">按关键字传值接受多个关键字参数，由kwargs接收，保存成一个字典的形式</span><br></pre></td></tr></table></figure>
<ul>
<li><p>1.默认参数用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">用法：为什么要用默认参数？将变化比较小的值设置成默认参数（比如一个班的男生多，女生就几个，就可以设置个默认值参数）</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stu_info</span>(<span class="params">name,sex = <span class="string">&quot;male&quot;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;打印学生信息函数，由于班中大部分学生都是男生，</span></span><br><span class="line"><span class="string">        所以设置默认参数sex的默认值为&#x27;male&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(name,sex)</span><br><span class="line">stu_info(<span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line">stu_info(<span class="string">&#x27;海燕&#x27;</span>,<span class="string">&#x27;female&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.动态参数</p>
</li>
<li><p>* 与 ** 在形参实参中的应用<br>形参带*<br>args形参应用：按位置传值多余的参数都由<strong>args</strong>统一接收，保存成一个<strong>元组</strong>的形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a,b,*args</span>):</span></span><br><span class="line">    sum=a+b</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">           sum+=i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">print(fun(<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>))<span class="comment">#输出1+5+6+4的和</span></span><br></pre></td></tr></table></figure>
<p>形参带**<br>kwargs形参应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a,b,**kwargs</span>):</span></span><br><span class="line">    print(a,b,kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照关键字传参数</span></span><br><span class="line">fun(a = <span class="number">10</span>,b = <span class="number">20</span>,cccc= <span class="number">30</span>,dddd = <span class="number">50</span>)<span class="comment">#输出10 20 &#123;&#x27;cccc&#x27;: 30, &#x27;dddd&#x27;: 50&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">a,b,*args,defult=<span class="number">6</span>,**kwargs</span>):</span></span><br><span class="line">    <span class="comment">#位置参数，*args, 默认参数，**kwargs</span></span><br><span class="line">    <span class="comment"># print(a,b,args,defult,kwargs)</span></span><br><span class="line">    <span class="keyword">return</span> a,b,args,defult,kwargs</span><br><span class="line"></span><br><span class="line"><span class="comment">#传参数的时候：必须先按照位置传参数，再按照关键字传参数</span></span><br><span class="line">print(f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,ccc=<span class="number">10</span>,der=<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>‘* 与 ** 在实参中的应用<br>实参带*，*后跟的必须是一个可以被循环遍历的类型，*会将实参打散成位置实参</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def func(x,y,z):</span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(z)</span><br><span class="line">func(*[11,22,33])</span><br><span class="line">func(*&quot;hello&quot;) # func(&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;)</span><br></pre></td></tr></table></figure>
<p>实参带**，** 后跟的必须是一个字典，**会将实参打散成关键字实参</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def index(x,y,z):</span><br><span class="line">    print(x,y,z)</span><br><span class="line"></span><br><span class="line">def wrapper(*args, **kwargs):</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    index(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"># wrapper(1,2,3,4,5,6,7,8,a&#x3D;1,b&#x3D;2,c&#x3D;3)</span><br><span class="line"># wrapper(1,2,3)</span><br><span class="line">wrapper(1,z&#x3D;3,y&#x3D;2)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>参数组合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一种：</span><br><span class="line">位置参数， 关键字参数， 默认参数</span><br><span class="line">test(a, b, c=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line">动态接收位置参数， 动态接收关键字参数配合起来使用</span><br><span class="line">test(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    print(kwargs)</span><br><span class="line">func(**dic)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结:位置参数 &gt; args(动态位置参数) &gt; 默认值参数 &gt; *kwargs(动态默认参数)，这四种参数可以任意的使用</p>
</blockquote>
<p>如果想接收所有的参数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    print(args,kwargs)</span><br><span class="line">func(<span class="number">1</span>,<span class="number">23</span>,<span class="number">5</span>,a=<span class="number">1</span>,b=<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<p>动态参数还可以这样传参:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>]</span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line">    print(args)</span><br><span class="line">func(lst[<span class="number">0</span>],lst[<span class="number">1</span>],lst[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line">    print(args)</span><br><span class="line">func(*lst)  </span><br><span class="line"><span class="comment"># 在实参的位置上用*将lst(可迭代对象)按照顺序打散</span></span><br><span class="line"><span class="comment"># 在形参的位置上用*把收到的参数组合成一个元祖</span></span><br></pre></td></tr></table></figure>
<p>字典也可以进行打散,不过需要**</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    print(kwargs)</span><br><span class="line">func(**dic)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day06</title>
    <url>/2020/09/13/py-day06/</url>
    <content><![CDATA[<p>前端基础<br>html css</p>
<a id="more"></a>
<hr>
<h2 id="上周回顾"><a href="#上周回顾" class="headerlink" title="上周回顾"></a><div id="title">上周回顾</div></h2><ol>
<li><p>什么是反射，python中如何实现反射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">动态语言重要的特征；动态语言的特点是，定义一个变量，无需事先声明类型，直到程序运行的时候才知道其类型。</span><br><span class="line">反射：动态背景之下，有某种方法可以获取到数据内部信息；指的是通过字符串来操作类或者对象的属性</span><br><span class="line">hasattr getattr delattr setattr</span><br></pre></td></tr></table></figure>
</li>
<li><p>内置方法__str__与__del__的作用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__str__:方法会在对象被打印时自动触发,将返回值当做本次打印的结果。</span><br><span class="line">__del__:会在清理对象之前,自动触发;</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义元类的意义何在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元类: 类的类,可以实例化得到类。</span><br><span class="line">意义: 调用元类可以生成类,定义元类的目的就是控制类的行为。</span><br><span class="line">      1.控制类的产生 </span><br><span class="line">          __new__, __init__ 这两个方法控制类的产生。</span><br><span class="line">      2.控制类的调用,之后的用法。</span><br><span class="line">          __call__ 定义 控制类的调用</span><br></pre></td></tr></table></figure>
</li>
<li><p>__call__,__new__,__init__的执行顺序是？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象类中的.__call__</span><br><span class="line">    对象.__new__</span><br><span class="line">    对象.__init_</span><br></pre></td></tr></table></figure>


</li>
</ol>
<hr>
<h2 id="前端-html-css-js"><a href="#前端-html-css-js" class="headerlink" title="前端 (html css js)"></a><div id="title">前端 (html css js)</div></h2><blockquote>
<p>HTML：HTML，全称“Hyper Text Markup Language（超文本标记语言）”。HTML是网页的结构</p>
</blockquote>
<blockquote>
<p>CSS：全称“（层叠样式表）。CSS是网页的外观</p>
</blockquote>
<blockquote>
<p>JavaScript: JavaScript是一门脚本语言。JavaScript是页面的行为</p>
</blockquote>
<blockquote>
<p>关系：html相当于页面(人)的骨架，css就相当于给这个页面(人)穿上漂亮的衣服，js是让这个人动起来</p>
</blockquote>
<h3 id="1-html"><a href="#1-html" class="headerlink" title="1. html"></a>1. html</h3><blockquote>
<p>html的标签， 相当于linux中的命令。常见的标签 也就那么十几个</p>
</blockquote>
<p>html， css, js文件执行的原理：也是需要有一个解释器来从上到下执行html代码， 而这个解释器就是：浏览器。浏览器中内置了html的解释器，google的V8解释器，他可以执行html，css， js代码</p>
<p>其实就是一套规则，浏览器认识的规则</p>
<p>html代码结构介绍：</p>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> <span class="comment">&lt;!--代表使用的是html5的版本--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="comment">&lt;!--文件的元信息标签，默认使用的额是utf8编码--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>51aiops<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;张三&quot;</span>&gt;</span> <span class="comment">&lt;!-- 描述信息 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--html的代码内容--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="html标签的格式："><a href="#html标签的格式：" class="headerlink" title="html标签的格式："></a>html标签的格式：</h4><figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml">标答的语法：</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">“属性值1”</span> 属性<span class="attr">2</span>=<span class="string">“属性值2”……</span>&gt;</span>内容部分<span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span></span><br><span class="line"><span class="xml">例子：<span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">“属性值1”</span> 属性<span class="attr">2</span>=<span class="string">“属性值2”……</span> /&gt;</span></span></span><br><span class="line"><span class="xml">例子：<span class="tag">&lt;<span class="name">br</span>/&gt;</span> <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="html文本排版标签："><a href="#html文本排版标签：" class="headerlink" title="html文本排版标签："></a>html文本排版标签：</h4><ul>
<li>p标签        - 段落标签,换行</li>
<li>br标签       - 换行 </li>
<li>h1-h6标签    - 标题（带换行）</li>
<li>b标签        - 加粗</li>
<li>hr标签       - 华丽的分割线</li>
<li>marquee     - 跑马灯</li>
</ul>
<h4 id="html列表标签"><a href="#html列表标签" class="headerlink" title="html列表标签"></a>html列表标签</h4><ul>
<li><p>ul标签 无序列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>wangwu<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>type属性：disc(实心圆点)默认、circle(空心圆圈)、square(实心方块)</p>
</blockquote>
</li>
<li><p>ol标签 有序列表</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>属性：type编号类型，默认为整数。可选（1、A、a、i、I）<br>属性：start起始编号，默认为1，即由最小编号开始</p>
</blockquote>
</blockquote>
<h4 id="html标签之a标签-跳转标签"><a href="#html标签之a标签-跳转标签" class="headerlink" title="html标签之a标签 跳转标签"></a>html标签之a标签 跳转标签</h4><p>target=”_blank 新打开标签页</p>
<p>1）链接到远程地址</p>
<ul>
<li><code>&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt;跳转到百度&lt;/a&gt;</code><br>2）链接到本地文件</li>
<li><code>&lt;a href=&quot;/html/login.html&quot;&gt;登录页面&lt;/a&gt;</code><br>3）链接到邮箱</li>
<li><code>&lt;a href=&quot;mailto:xx@qq.com&quot;&gt;给我发邮件&lt;/a&gt;</code><br>4）下载文件</li>
<li><code>&lt;a href=&quot;/download/winRAR.rar&quot;&gt;下载WinRAR&lt;/a&gt;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果页面中大量的a标签都需要设置target=&quot;_blank&quot;,那么我们可以在head标签内新增一个base标签进行统一设置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果a标签自己设置了target，那么就以自己的为准，否则就会参照base的设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接到百度--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;搜索&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度一下，你就知道<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--a标签不仅可以标记文字，也可以标记图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--本地跳转--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span>锤我胸口<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="html标签之img标签"><a href="#html标签之img标签" class="headerlink" title="html标签之img标签"></a>html标签之img标签</h4><ul>
<li><code>&lt;img src=&quot;https://s2.ax1x.com/old/FAJTP.png&quot;  alt=&quot;加载失败&quot;/&gt;</code></li>
</ul>
<h4 id="html标签之div和span"><a href="#html标签之div和span" class="headerlink" title="html标签之div和span"></a>html标签之div和span</h4><ul>
<li>讲css的时候，用的会比较多</li>
<li>div是块级元素，独占一行；span是行级元素，并不独占一行<ul>
<li>div 是一个块级元素。这意味着它的内容自动地开始一个新行</li>
<li>span 没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。<br>块级元素：h1 – h6 p<br>行内元素：span img</li>
</ul>
</li>
</ul>
<h4 id="html标签之table系列标签"><a href="#html标签之table系列标签" class="headerlink" title="html标签之table系列标签"></a>html标签之table系列标签</h4><ul>
<li>table<ul>
<li>tr: 表示的是行</li>
<li>td:表示的是单元格，主要的内容写在td中</li>
<li>th:表示的是单元格，和td不一样的是，th加粗并居中内容</li>
<li>常见的属性：<ul>
<li>border=”1px” width=”300px” height=”150px” align=”right”</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h4><p>作用： 表单一般用来收集用户的输入信息</p>
<p>表单最基本的使用：</p>
<p>前端form表单：</p>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;reset&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;reset&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;142423123&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>type=”hidden” 会作为隐藏属性提交上去（token之类的）</p>
</blockquote>
<p>后端：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.get_argument(<span class="string">&#x27;account&#x27;</span>))</span><br><span class="line">        print(self.get_argument(<span class="string">&#x27;mypass&#x27;</span>))</span><br><span class="line">        self.write(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    application = tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：上述案例中，使用的是get方式发送http的请求。很明显，get请求会将用户输入的参数拼接在url地址的后面，安全性不够高。所以安全方面考虑，使用post相对安全些，因为post会将用户输入的内容放到http协议的body体中进行传输</p>
</blockquote>
<h4 id="input框"><a href="#input框" class="headerlink" title="input框"></a>input框</h4><figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml">爱好：</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span> <span class="attr">checked</span> &gt;</span>篮球</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span>&gt;</span>足球</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yumaoqiu&quot;</span>&gt;</span>羽毛球</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boxing&quot;</span>&gt;</span>拳击 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        水果：</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span>&gt;</span> 香蕉</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;putao&quot;</span>&gt;</span> 葡萄</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lizi&quot;</span>&gt;</span> 栗子 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结： 需要写三个属性：type决定input的类型， name是给input框起名，方便后端程序获取用户输入的内容。value是真正传给后端用户的内容</p>
</blockquote>
<p>复选框  checkbox<br>单选框  radio<br>上传文件 <code>&lt;input type=&quot;file&quot;&gt;</code><br>文件传输的框，需要和 <code>enctype=&quot;multipart/form-data&quot;</code> 并且<code>method=&quot;post&quot;</code> 搭配使用</p>
<h4 id="select-下拉框"><a href="#select-下拉框" class="headerlink" title="select 下拉框"></a>select 下拉框</h4><p>multiple 设置后允许多选<br>disabled 禁用下拉列表<br>selected 默认选中状态<br>value    定义发往服务器的选项值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择城市：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;hz&quot;</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="textarea-文本框"><a href="#textarea-文本框" class="headerlink" title="textarea 文本框"></a>textarea 文本框</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;question&quot;</span> <span class="attr">id</span>=<span class="string">&quot;question&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="LABEL-表单修饰"><a href="#LABEL-表单修饰" class="headerlink" title="LABEL 表单修饰"></a>LABEL 表单修饰</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;label for&#x3D;&quot;username&quot;&gt;用户名&lt;&#x2F;label&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; id&#x3D;&quot;username&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>label 元素不会向用户呈现任何特殊效果</p>
</blockquote>
<blockquote>
<p><code>&lt;label&gt;</code>标签的for属性应当与相关元素的id属性相同</p>
</blockquote>
<blockquote>
<p>结合CSS可以控制表单文本或控件对齐</p>
</blockquote>
<blockquote>
<p>总结</p>
</blockquote>
<img src="/2020/09/13/py-day06/form%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE.png" class title="form表单标签">




<h3 id="2-css"><a href="#2-css" class="headerlink" title="2.css"></a>2.css</h3><p>全称：cascading style sheet 层叠样式表 css<br>作用：美化页面，对页面进行布局</p>
<h4 id="CSS的语法结构"><a href="#CSS的语法结构" class="headerlink" title="CSS的语法结构"></a>CSS的语法结构</h4><blockquote>
<p>每个CSS样式由两个组成部分：选择器和声明。声明又包括属性和属性值。每个声明之后用分号结束</p>
</blockquote>
<img src="/2020/09/13/py-day06/css%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84.png" class title="css的语法结构">

<p><strong>注意：在css中，选择器是非常重要的，它制定了对哪些元素进行样式设置</strong></p>
<h4 id="CSS的三种引入方式"><a href="#CSS的三种引入方式" class="headerlink" title="CSS的三种引入方式"></a>CSS的三种引入方式</h4><ol>
<li><p>行内样式（不推荐使用，没有体现CSS的优势）</p>
<blockquote>
<p>直接对HTML的标签使用style属性，然后将css代码直接写在其中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p style&#x3D;&quot;color: red;font-size: 50px;text-align: center&quot;&gt;Egon是一个非常了不起的人&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>内部样式</p>
<blockquote>
<p>将css写在与之间，并用标签进行声明</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;1111&lt;/p&gt;</span><br><span class="line">&lt;p&gt;2222&lt;/p&gt;</span><br><span class="line">&lt;p&gt;3333&lt;/p&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="3">
<li>外部样式<blockquote>
<p>将css写在一个单独的文件中，然后在页面进行引入</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;09.css&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>总结：外部引入一般是引入第三方的资源css，而上面两种是自己写</p>
<h4 id="CSS常见选择器："><a href="#CSS常见选择器：" class="headerlink" title="CSS常见选择器："></a>CSS常见选择器：</h4><ul>
<li><ol>
<li>标签选择器<ul>
<li>a. 只要是HTML的标签都能当做标签选择器</li>
<li>b. 标签选择器选中的是当前界面中的所有标签,而不能单独选中某一标签</li>
<li>c. 标签选择器，无论嵌套多少层都能选中</li>
</ul>
</li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li><p>id选择器</p>
<ul>
<li><strong>a. 在企业开发中如果仅仅只是为了设置样式，通常不会使用id，在前端开发中id通常是留给js使用的</strong></li>
<li><strong>b. 每个标签都可以设置唯一一个id，id就相当于人/标签的身份证，因此在同一界面内id绝不能重复</strong></li>
<li><strong>c.引用id一定要加#</strong></li>
<li><strong>d. id的命名只能由字符、数字、下划线组成，且不能以数字开头，更不能是html关键字如p，a，img等</strong></li>
</ul>
</li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#one</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;span id=&quot;one&quot;&gt;asdasdasdasd&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>类别选择器<ul>
<li>a. 类名就是专门用来给某个特定的标签设置样式的</li>
<li>b. 每个标签都可以设置一个或多个class（空格分隔），class就相当于人/标签的名称，因此同一界面内class可以重复</li>
<li>c. 引用class一定要加点.</li>
<li>d. 类名的命名规则与id的命名规则相同<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;id选择器&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .p1 &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .p2 &#123;</span><br><span class="line">            font-size: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">        .p3 &#123;</span><br><span class="line">            text-decoration: underline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;p1 p2&quot;&gt;第一行内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;p2 p3&quot;&gt;第二行内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;p1 p3&quot;&gt;第三行内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>通用选择器<ul>
<li>在企业开发中一般不会使用通配符选择器：由于通配符选择器是设置界面上所有的标签的属性，所以在设置之前会遍历所有的标签，如果当前界面上的标签比较多，那么性能就会比较差。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>通配符选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        * &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> &gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> &gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>包含选择器(比如只想让div 下面的span更改样式)</li>
</ol>
<ul>
<li>当页面中有多个相同的选择器出现的时候，选择特定的选择器<ul>
<li>a、后代选择器必须用空格隔开</li>
<li>b、后代不仅仅是儿子，也包括孙子、重孙子</li>
<li>c、后代选择器不仅仅可以使用标签名称，还可以使用其他选择器比如id或class</li>
<li>d、后代选择器可以通过空格一直延续下去<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>后代选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">        div p &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#id1</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">            font-size: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div ul li a &#123;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是body下的段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果想为div内所有标签都设置属性，无论用id还是class都不合理，因为当div内的标签过多，我们无法加那么多id或者class--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;part1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是div下的段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是div下的段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span>我是ul&gt;li下的段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ddd&quot;</span>&gt;</span>我是ul&gt;li下的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>点我啊1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>点我啊2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是body下的段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><ol start="6">
<li>分组选择器<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div, span &#123;</span><br><span class="line">            background-color: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> &gt;</span>asdasdasdasd<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>asdasdasd<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>asdasd<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><ol start="7">
<li><p>伪类选择器(针对a标签)</p>
<ul>
<li><p>（1）静态伪类：只能用于超链接的样式。如下：</p>
<blockquote>
<p>:link 超链接点击之前</p>
</blockquote>
<blockquote>
<p>:visited 链接被访问过之后</p>
</blockquote>
<blockquote>
<p>PS：以上两种样式，只能用于超链接。</p>
</blockquote>
</li>
<li><p>（2）动态伪类：针对所有标签都适用的样式。如下：</p>
<blockquote>
<p>:hover “悬停”：鼠标放到标签上的时候</p>
</blockquote>
<blockquote>
<p>:active “激活”： 鼠标点击标签，但是不松手时。</p>
</blockquote>
<blockquote>
<p>:focus 是某个标签获得焦点时的样式（比如某个输入框获得焦点）</p>
</blockquote>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li><ol start="7">
<li>优先级排序<br><code>&lt;!--行内样式 &gt; id选择器 &gt; 类别选择器 &gt; 标签选择器 &gt; 通用选择器 --&gt;</code></li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1 &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#show1</span>&#123;</span></span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.show</span>&#123;</span></span><br><span class="line">            color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;show1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: gray&quot;</span>&gt;</span>优先级测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>总结：看自己的习惯使用. 推荐大家使用 id选择器，标签选择器</p>
</blockquote>
<h4 id="css常见的属性和属性值"><a href="#css常见的属性和属性值" class="headerlink" title="css常见的属性和属性值"></a>css常见的属性和属性值</h4><ol>
<li><p>段落(文本)属性和边框以及背景属性</p>
<ol>
<li><p>文本的行高</p>
<blockquote>
<p>line-height: 设置文本垂直方向行高值(设置要和height一致，才能居中)</p>
</blockquote>
</li>
<li><p>文本对齐 text-align 和 文本修饰 text-decoration</p>
<blockquote>
<p>text-align: 文本设置<br>text-decoration: 文本修饰</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text-align: left&#x2F;center&#x2F;right</span><br><span class="line">text-decoration: underline &#x2F; overline &#x2F; line-through &#x2F; bilink(闪烁的文本)</span><br></pre></td></tr></table></figure></li>
<li><p>边框设置</p>
<ul>
<li>border : border :1px solid red (宽度，样式，颜色）</li>
</ul>
</li>
<li><p>文字属性</p>
<ul>
<li>font-szie: 设置文字的大小</li>
<li>color: 1.red   2.16进制方式 tips: chrome控制台可以获取你想要的颜色</li>
</ul>
</li>
<li><p>背景属性 </p>
<ul>
<li><p>background-color: 背景色</p>
</li>
<li><p>background-image: 背景图片</p>
</li>
<li><p>background-repeat 背景重复；x或者y轴平铺 no-repeat 不平铺</p>
</li>
<li><p>background-position-y</p>
<p><strong>使用背景属性的一个常见案例</strong></p>
<blockquote>
<p>当我们网站流量比较大的时候，我们一般在请求图片资源时，并不是一张一张的去请求，而是一整张的去请求，然后根据需求对图像进行截取，这样能减少网络的请求，节省大量的费用。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initiak-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#one</span>&#123;</span></span><br><span class="line">           border: 1px solid red;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 400px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>background案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#one</span>&#123;</span></span><br><span class="line">            width: 48px;</span><br><span class="line">            height: 48px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background-image: url(&quot;https://common.cnblogs.com/images/wechat.png&quot;);</span><br><span class="line"><span class="css">            <span class="comment">/*background-repeat: repeat-y;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>sdsadas<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 布局属性</strong></p>
<blockquote>
<p>div套div的时候使用</p>
</blockquote>
<ul>
<li>margin: 对外元素的距离，用来控制元素本身的浮动位置<ul>
<li>margin 0 auto 就是居中显示</li>
</ul>
</li>
<li>padding：对内元素,用来控制内部元素位置</li>
<li>浮动：float</li>
</ul>
<blockquote>
<p>如果想让三个div并排显示，就需要设置float属性，设置float:left</p>
</blockquote>
<p><strong>float</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background-color: red;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.two</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.three</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>margin</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#pg-header</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f5f5f5</span>;</span></span><br><span class="line">            height: 28px;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            line-height: 28px;</span><br><span class="line"><span class="css">            <span class="comment">/*border: 1px solid red;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#pg-left</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#pg-right</span>&#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pg-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 980px; margin: 0 auto&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pg-left&quot;</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pg-right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>收藏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>块级元素和行内元素的区别</li>
</ol>
<blockquote>
<p>div,p,h1-h6 代表的元素就是：块级元素，独占一行, 浮动，margin只对块级元素生效</p>
</blockquote>
<blockquote>
<p>span,a,img代表的元素就是：行内元素，只占自己内容的大小</p>
</blockquote>
<blockquote>
<p>行内元素转块级元素：display</p>
</blockquote>
<ul>
<li>display属性<ul>
<li>block: 将元素变成块级标签，可以设置高度和宽度</li>
<li>inline: 将元素变成行内标签 ，不能设置高度和宽度</li>
<li>inline-block: 同时具有两种</li>
<li>none: 标签消失<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span style&#x3D;&quot;background-color: blue; width: 500px; height: 400px; display: block&quot;&gt;sadaqsdasd&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block;background-color: red; width: 600px;height: 100px;&quot;</span>&gt;</span>dsabhdsbadsba<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block; background-color: green; width: 600px;height:200px;&quot;</span>&gt;</span>dbsahdbsa<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>overflow溢出处理属性<ul>
<li>overflow（水平和垂直设置）</li>
<li>overflow-x（设置水平方向）</li>
<li>overflow-y（设置垂直方向）</li>
</ul>
</li>
</ul>
<p><strong>截断</strong></p>
<ul>
<li>overflow: hidden</li>
</ul>
<p><strong>如果内容被修剪，则浏览器会显示滚动条，以便查看其余内容</strong></p>
<ul>
<li>overflow: auto;</li>
</ul>
<p><strong>设置水平滚动条</strong></p>
<blockquote>
<p>overflow-x: scroll</p>
</blockquote>
<ul>
<li>eg: 滚动条</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            overflow: scroll;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>dsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsan<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li><p>代码重复问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.common</span>&#123;</span></span><br><span class="line">        共有的样式</span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-class">.one</span>&#123;</span></span><br><span class="line">        独有的css样式</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.two</span>&#123;</span></span><br><span class="line">        独有的css样式</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;common&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;common&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解决img边框的问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">img&#123;</span><br><span class="line">    border:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入框的加减<br>div套div + input框</p>
</li>
<li><p>自适应响应<br> min-width<br> max-width</p>
<p> .one{</p>
<pre><code> min-width:400px;</code></pre>
<p> }</p>
 <div class="one common"></div>



</li>
</ol>
<h5 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h5><p>商品布局真是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#pg-content</span>&#123;</span></span><br><span class="line">            border: 1px solid orange;</span><br><span class="line">            width: 700px;</span><br><span class="line">            height: 500px;</span><br><span class="line">        &#125;</span><br><span class="line">        h2&#123;</span><br><span class="line">            color: orange;</span><br><span class="line">            font-size: 18px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">orange</span>;</span></span><br><span class="line">            margin-top: 0;</span><br><span class="line">            padding-left: 12px;</span><br><span class="line"><span class="css">            <span class="comment">/*line-height: 18px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*height: 12px;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e7e7e7</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">            margin: 11px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        img&#123;</span><br><span class="line">            width: 130px;</span><br><span class="line">            height: 130px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item</span> <span class="selector-tag">p</span>, <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            font-size: 13px;</span><br><span class="line">            color: black;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.current</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">            font-size: 13px;</span><br><span class="line">            margin-left: -8px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.orgin</span>&#123;</span></span><br><span class="line">            text-decoration: line-through;</span><br><span class="line">            margin-left: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hot</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hot</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pg-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>限时抢购<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>常用快捷键</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. table&gt;tr*3&gt;td*3</span><br><span class="line">2. ！ Tab   ----快速生成文档结构</span><br><span class="line">3. SETTINGS-EDITOR-LIVE TEMPLATES   ---定义模板、快捷键</span><br><span class="line">4. (h$)*6  Tab   ---六个标题标签 h1,h2,h3,h4,h5,h6</span><br><span class="line">5. p*n  Tab   ---多个段落标签 p, p, ...</span><br><span class="line">6. div &gt; span  Tab   ---嵌套父子模式</span><br><span class="line">7. div &gt;(span+a)   ---嵌套兄弟模式</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.写一个商品页面展示布局效果   <a href="https://s2.ax1x.com/old/FZckt.png">https://s2.ax1x.com/old/FZckt.png</a><br>2.<a href="https://s2.ax1x.com/old/FEens.png">https://s2.ax1x.com/old/FEens.png</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day09</title>
    <url>/2020/10/18/py-day09/</url>
    <content><![CDATA[<p>ORM相关</p>
<a id="more"></a>

<p>Django</p>
<p>day 1 Django基础<br>      (1) web服务的本质<br>      (2) Django的介绍，下载，示例<br>      (3) MTV(MVC)<br>      (4) URL<br>      (5) View<br>      (6) Template<br>      (7) ORM(单表操作)</p>
<p>   day2 Django<br>          ORM多表操作<br>          Django组件<br>             —forms组件<br>             —cookie 与 session<br>             —中间件<br>             —Ajax  （$.ajax()）</p>
<p>socket<br>     client—- server</p>
<pre><code> BS架构

 browser---server </code></pre>
<p>一 Django流程</p>
<p>   1 MTV模型：<br>   M 代表模型（Model）：  负责业务对象和数据库的关系映射(ORM)。<br>   T 代表模板 (Template)：负责如何把页面展示给用户(html)。<br>   V 代表视图（View）：   负责业务逻辑，并在适当时候调用Model和Template。</p>
<pre><code>2 下载与命令

下载     pip3 install django
创建项目 django-admin startproject mysite
创建应用的命令：python3 manage.py startapp app01
         mysite
              ---mysite
                 ---settings:项目配置文件
                 ---urls：路径与视图函数的映射关系
                 ---wsgi：封装的socket
              ---manage.py   :Django项目进行交互的脚本
              ---app01(项目应用)
                 ---models  : 数据库操作
                 ---views   : 视图函数
              ---app02(项目应用)
                 ---models  : 数据库操作
                 ---views   : 视图函数
              ---templates
                     login.html
                     index.html


项目启动命令： python3 manage.py runserver IP PORT  


3 render的方法功能：

    1 return render(request,&quot;login.html&quot;)
        按着settings指定路径找到对应的login.html,读取文件内容，构建
        return HttpResponse(文件字符串)

    2 return render(request,&quot;app01/timer.html&quot;,&#123;&quot;ctime&quot;:ctime,&quot;name&quot;:name,&quot;age&quot;:age&#125;)
       按着settings指定路径找到对应的login.html,读取文件内容，
       进行渲染，把文件字符串中所有&#123;&#123;&#125;&#125;的内容按着&#123;&quot;ctime&quot;:ctime,&quot;name&quot;:name,&quot;age&quot;:age&#125;
       替换，将新的替换字符串构建HttpResponse(新的文件字符串)</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">二 URl控制器</span><br><span class="line">     url:协议:&#x2F;&#x2F;IP(域名)：端口(80)&#x2F;路径？GET参数</span><br><span class="line">         https:&#x2F;&#x2F;www.jd.com&#x2F;</span><br><span class="line">         http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;books&#x2F;1&#x2F;?x&#x3D;123</span><br><span class="line"></span><br><span class="line">     url的功能：url的路径和视图函数的映射关系</span><br><span class="line"></span><br><span class="line">（1）url的简单使用</span><br><span class="line">单个项目</span><br><span class="line">from app01 import views</span><br><span class="line"></span><br><span class="line">（2）url的有名分组</span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">re_path(r&quot;^article&#x2F;(\d&#123;4&#125;)&#x2F;$&quot;, views.article_year),</span><br><span class="line">re_path(r&quot;^article&#x2F;(?P&lt;year&gt;\d&#123;4&#125;)&#x2F;(?P&lt;month&gt;\d&#123;2&#125;)$&quot;, views.article_year_month)</span><br><span class="line">def article_year_month(request, month, year):</span><br><span class="line">return HttpResponse(year+&quot;:&quot;+month)</span><br></pre></td></tr></table></figure>
<p>（3）url的分发</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">多个项目</span><br><span class="line">app01中创建urls.py</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app02中创建urls.py</span><br><span class="line"><span class="keyword">from</span> app02 <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">project中urls.py中写引入includ</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line">path(<span class="string">&quot;app01/&quot;</span>, include(<span class="string">&quot;app01.urls&quot;</span>)),</span><br><span class="line">path(<span class="string">&quot;app02/&quot;</span>, include(<span class="string">&quot;app02.urls&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>（4）url的反射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urls</span><br><span class="line">path(&#39;login&#x2F;&#39;, views.login, name&#x3D;&quot;xxx&quot;)</span><br><span class="line"></span><br><span class="line">html</span><br><span class="line">&lt;form action&#x3D;&quot;&#123;% url &#39;xxx&#39; %&#125;&quot; method&#x3D;&quot;post&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>三 视图函数</p>
<blockquote>
<p>注意：Django必须响应一个Httpresponse对象<br>   1 request</p>
</blockquote>
<p>   2 HttpResponse :响应字符串<br>     render(封装了Httpresponse) : 响应模板<br>     redirect: 重定向</p>
<p>四 模板语法</p>
<ul>
<li>模板语法:<ul>
<li>变量<ul>
<li>深度查询  句点符.</li>
<li>过滤器</li>
</ul>
</li>
<li>标签</li>
</ul>
</li>
</ul>
<blockquote>
<p>简单渲染</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">views中指定</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    ctime = time.time()</span><br><span class="line">    name = <span class="string">&quot;yuan&quot;</span></span><br><span class="line">    age = <span class="number">22</span></span><br><span class="line">    <span class="comment"># return HttpResponse(ctime)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;timer.html&quot;</span>, &#123;<span class="string">&quot;time&quot;</span>:ctime, <span class="string">&quot;age&quot;</span>:age, <span class="string">&quot;name&quot;</span>:name&#125;)</span><br><span class="line"></span><br><span class="line">html中</span><br><span class="line">&lt;p&gt;当前时间：&#123;&#123; time &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;My name is &#123;&#123; name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;My age is &#123;&#123; age &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>深度查询</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">views中</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">template</span>(<span class="params">request</span>):</span></span><br><span class="line">    name = <span class="string">&quot;yuan&quot;</span></span><br><span class="line">    l = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">    info = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;egon&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">80</span>, <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;sb&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">object</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">            self.name = name</span><br><span class="line">            self.age = age</span><br><span class="line"></span><br><span class="line">    egon = Animal(<span class="string">&quot;egon&quot;</span>, <span class="number">233</span>)</span><br><span class="line">    alex = Animal(<span class="string">&quot;alex&quot;</span>, <span class="number">456</span>)</span><br><span class="line">    szk = Animal(<span class="string">&quot;szk&quot;</span>, <span class="number">789</span>)</span><br><span class="line">    Person_list = [egon, alex, szk]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;template.html&quot;</span>, &#123;<span class="string">&quot;tname&quot;</span>:name, <span class="string">&quot;l&quot;</span>:l, <span class="string">&quot;tinfo&quot;</span>:info, <span class="string">&quot;tPerson_list&quot;</span>:Person_list&#125;)</span><br><span class="line"></span><br><span class="line">html中</span><br><span class="line"></span><br><span class="line">&lt;p&gt;列表元素: &#123;&#123; l.0 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;列表元素: &#123;&#123; l.1 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;列表元素: &#123;&#123; l.2 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;字典元素: &#123;&#123; tinfo.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;字典元素: &#123;&#123; tinfo.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;字典元素: &#123;&#123; tinfo.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;对象元素: &#123;&#123; tPerson_list.1.name.0 &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>过滤器</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">views</span><br><span class="line"></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line"><span class="comment"># book_list = [&quot;三国演义&quot;, &quot;金瓶梅&quot;]</span></span><br><span class="line">boot_list = []</span><br><span class="line">file_size = <span class="number">112312321312</span></span><br><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">p = <span class="string">&quot;kobe is my idol, and MJ is my favorite baseketball player.&quot;</span></span><br><span class="line">link = <span class="string">&quot;&lt;a href=&#x27;&#x27;&gt;click&lt;/a&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">htmml</span><br><span class="line">&lt;h4&gt;过滤器&lt;/h4&gt;</span><br><span class="line">&lt;p&gt;过滤器: &#123;&#123; num|add:20 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;过滤器: &#123;&#123; now|date:&quot;Y-m-d h:i&quot; &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;过滤器: &#123;&#123; book_list|default:&quot;没有取到值&quot; &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;过滤器: &#123;&#123; file_size|filesizeformat &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;过滤器: &#123;&#123; s|slice:&quot;0::2&quot; &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;过滤器: &#123;&#123; p|truncatechars:20 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;过滤器: &#123;&#123; p|truncatewords:3 &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;过滤器: &#123;&#123; link|safe &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;过滤器: &#123;&#123; s &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>标签</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">views</span><br><span class="line">    book_list = [<span class="string">&quot;三国演义&quot;</span>, <span class="string">&quot;金瓶梅&quot;</span>]</span><br><span class="line">    info = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;egon&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">80</span>, <span class="string">&quot;sex&quot;</span>:<span class="string">&quot;sb&quot;</span> &#125;</span><br><span class="line">    score = <span class="number">60</span></span><br><span class="line">    num_list = [<span class="number">123</span>,<span class="number">234</span>,<span class="number">345</span>,<span class="number">22</span>,<span class="number">4545</span>,<span class="number">666</span>,<span class="number">7</span>,<span class="number">2123</span>,<span class="number">213</span>]</span><br><span class="line"></span><br><span class="line">html</span><br><span class="line">&lt;h4&gt;标签&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> i <span class="keyword">in</span> book_list %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; forloop.counter &#125;&#125; &#123;&#123; i &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> book <span class="keyword">in</span> book_list %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; book &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> k,v <span class="keyword">in</span> info.items %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123; k &#125;&#125;---&#123;&#123; v &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> score &gt; <span class="number">80</span> %&#125;</span><br><span class="line">    &lt;p&gt;优秀！&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">elif</span> score &gt;= <span class="number">60</span> %&#125;</span><br><span class="line">    &lt;p&gt;合格！&lt;/p&gt;</span><br><span class="line">    &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &lt;p&gt;不合格！&lt;/p&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> num <span class="keyword">in</span> num_list %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> num &gt; <span class="number">50</span> %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123; num &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>静态文件 引入<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">settings.py</span><br><span class="line"><span class="comment">#别名</span></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line"><span class="comment">#文件实际存在目录</span></span><br><span class="line">STATICFILES_DIRS=[</span><br><span class="line">    os.path.join(BASE_DIR,<span class="string">&quot;static&quot;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">html中引用</span><br><span class="line">/static/jquery.js</span><br></pre></td></tr></table></figure></li>
<li>模板继承<br>1、创建一个base.html文件，<br>2、把要显示的页面的内容写在这里面，也就是html要在浏览器显示的内容<br>3、在right里面写个盒子<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　&#123;% block classinfo %&#125;</span><br><span class="line"></span><br><span class="line">　　&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
在这里面写个空盒子，以后谁来扩展就在这个盒子里面添加相应的内容就行了</li>
</ul>
<p>4、然后再创建一个.html文件，让这个继承base.html文件，<br><code>　　&#123;% extends "base.html" %&#125;    #必须是在文件的第一行</code><br>　　在基板里面添加内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　&#123;% block classinfo %&#125;</span><br><span class="line">　　　　&lt;h2&gt;首页&lt;&#x2F;h2&gt;</span><br><span class="line">　　　　&lt;h2&gt;学生信息&lt;&#x2F;h2&gt;</span><br><span class="line">　　　　&lt;h3&gt;&#123;&#123; class_id &#125;&#125;班&lt;&#x2F;h3&gt;</span><br><span class="line">　　&#123;% endblock%&#125;</span><br></pre></td></tr></table></figure>

<p>5、也可以写好多盒子，<br>　　在left中写个盒子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　　　&#123;% block menu %&#125;</span><br><span class="line">　　　　　　&lt;p&gt;I see you you&lt;&#x2F;p&gt;</span><br><span class="line">　　　　&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：盒子里面可以有默认的内容，如果有默认的时候你不扩展就走默认的，如果你扩展了，就替换了，那么不替换直接追加可以嘛？可以的，那就用下面的方式。 <code>&#123;% block.super %&#125;</code></p>
</blockquote>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% block menu %&#125;</span><br><span class="line">　　&#123;&#123; block.super &#125;&#125;</span><br><span class="line">　`<span class="tag">&lt;<span class="name">p</span>&gt;</span>！！！<span class="tag">&lt;/<span class="name">p</span>&gt;</span>`       #先继承父类的，后插入数据</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>


<h3 id="五-ORM"><a href="#五-ORM" class="headerlink" title="五. ORM"></a>五. ORM</h3><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><ul>
<li>QuerySet<ul>
<li>是Django封装的一个数据类型，本质是一个列表，每个元素是一个book对象</li>
<li>print(ret.query) 打印查询的SQL语句</li>
</ul>
</li>
</ul>
<blockquote>
<p>查询所有内容 all — 列表套对象的格式</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;Book: Book object (<span class="number">1</span>)&gt;, &lt;Book: Book object (<span class="number">2</span>)&gt;, &lt;Book: Book object (<span class="number">3</span>)&gt;]&gt;</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> ret:</span><br><span class="line">    print(obj.title, obj.publish, obj.pub_date)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>指定具体字段 values — 列表套字典的格式</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.Book.objects.values(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;publish&quot;</span>)</span><br><span class="line">&lt;QuerySet [&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;武林外传&#x27;</span>, <span class="string">&#x27;publish&#x27;</span>: <span class="string">&#x27;人民出版社&#x27;</span>&#125;, &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;金庸群侠传&#x27;</span>, <span class="string">&#x27;publish&#x27;</span>: <span class="string">&#x27;51aiops&#x27;</span>&#125;, &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;金庸群侠传2&#x27;</span>, <span class="string">&#x27;publish&#x27;</span>: <span class="string">&#x27;51aiops&#x27;</span>&#125;]&gt;</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> ret:</span><br><span class="line">    print(obj.get(<span class="string">&quot;title&quot;</span>), obj.get(<span class="string">&quot;publish&quot;</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询符合条件的数据 get — 列表套字典的格式</p>
<blockquote>
<p>返回的对象只能为一个,超出一个都会抛出错误</p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.get(id=<span class="number">2</span>)</span><br><span class="line">print(ret.title, ret.publish)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>first 第一条数据</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.first()</span><br><span class="line">print(ret.title, ret.publish)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>last() 最后一条数据</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.last()</span><br><span class="line">print(ret.title, ret.publish)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>filter() 用于查询符合条件的数据—相当于where条件</p>
<blockquote>
<p>得到的还是queryset类型的数据，列表套对象的格式</p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.filter(id=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> ret:</span><br><span class="line">        print(obj.title)</span><br><span class="line"></span><br><span class="line">ret = models.Book.objects.filter(publish=<span class="string">&quot;51aiops&quot;</span>, price=<span class="number">50</span>) <span class="comment">##相当于and ,Q()方法相当于or</span></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> ret:</span><br><span class="line">        print(obj.title)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##like 基于双下划线的模糊查询</span></span><br><span class="line">ret = models.Book.objects.filter(price__in=[<span class="number">50</span>,<span class="number">70</span>])</span><br></pre></td></tr></table></figure>


<blockquote>
<p>exclude()查询不符合条件的数据</p>
<blockquote>
<p>得到的还是queryset类型的数据，列表套对象的格式</p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.exclude(publish=<span class="string">&#x27;51aiops&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>order_by() 用于对查询结果进行排序</p>
<blockquote>
<p>得到的还是queryset类型的数据，列表套对象的格式</p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.order_by(<span class="string">&quot;price&quot;</span>) <span class="comment">###升序</span></span><br><span class="line">ret = models.Book.objects.order_by(<span class="string">&quot;-price&quot;</span>) <span class="comment">###降序</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>count() 数据数量 返回数据是整数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.count()</span><br><span class="line">ret = models.Book.objects.filter(price=<span class="number">200</span>).count()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>exists() 方法用于判断查询的结果QuerySet列表里是否有数据</p>
</blockquote>
<blockquote>
<p>values_list() — 列表套元祖的格式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ret &#x3D; models.Book.objects.values_list(&quot;price&quot;, &quot;publish&quot;)</span><br><span class="line">&lt;QuerySet [(Decimal(&#39;55.00&#39;), &#39;人民出版社&#39;), (Decimal(&#39;50.00&#39;), &#39;51aiops&#39;), (Decimal(&#39;60.00&#39;), &#39;51aiops&#39;)]&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>distinct 去重复</p>
<blockquote>
<p>返回是queryset类型数据<br>注意：<br>对模型类的对象去重没有意义，因为每个对象都是不一样的存在<br>distinct()一般是联合values 或者values_list 联合使用</p>
</blockquote>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.values_list(<span class="string">&quot;publish&quot;</span>).distinct()</span><br><span class="line">print(ret)</span><br><span class="line">ret = models.Book.objects.distinct()</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure>

<h5 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意:"></a>需要注意:</h5><h5 id="上述方法可以连着用"><a href="#上述方法可以连着用" class="headerlink" title="上述方法可以连着用"></a>上述方法可以连着用</h5><h5 id="链式写法"><a href="#链式写法" class="headerlink" title="链式写法"></a>链式写法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = models.Book.objects.filter(price__gt=<span class="number">50</span>).distinct()</span><br><span class="line">ret = models.Book.objects.filter(price__gt=<span class="number">50</span>).values(<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;title&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = models.Book.objects.filter(id=<span class="number">3</span>).update(price=<span class="number">80</span>)</span><br><span class="line">print(books)  <span class="comment"># 返回1代表城管科，0代表失败</span></span><br><span class="line">books = models.Book.objects.filter(id=<span class="number">3</span>).first()</span><br><span class="line">print(books)</span><br><span class="line"></span><br><span class="line">books.price = <span class="number">111</span></span><br><span class="line">books.save()</span><br></pre></td></tr></table></figure>

<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">models.Book.objects.filter(id=<span class="number">3</span>).delete()</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">删除数据的两种方式：</span></span><br><span class="line"><span class="string">1.物理删除</span></span><br><span class="line"><span class="string">2.逻辑删除 另外增加一个字段来控制 status=0，1</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h4><h4 id="F查询（两个字段比较）"><a href="#F查询（两个字段比较）" class="headerlink" title="F查询（两个字段比较）"></a>F查询（两个字段比较）</h4><blockquote>
</blockquote>
<pre><code># F() 的实例可以在查询中引用字段，来比较同一个 model 实例中两个不同字段的值。之前构造的过滤器都只是将字段值与某个常量做比较，如果想要对两个字段的值做比较，就需要用到 F()。</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">res = models.Book.objects.update(price=F(<span class="string">&quot;price&quot;</span>)+<span class="number">100</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h4 id="Q查询（或）"><a href="#Q查询（或）" class="headerlink" title="Q查询（或）"></a>Q查询（或）</h4><p>使用前要先从 django.db.models 引入 Q:</p>
<blockquote>
<p>from django.db.models import Q<br>Q(条件判断)<br>之前构造的过滤器里的多个条件的关系都是 and，如果需要执行更复杂的查询（例如 or 语句），就可以使用 Q 。<br>Q 对象可以使用 &amp; | ~ （与 或 非）操作符进行组合。<br>优先级从高到低：~ &amp; |。<br>可以混合使用 Q 对象和关键字参数，Q 对象和关键字参数是用”and”拼在一起的（即将逗号看成 and ），但是 Q 对象必须位于所有关键字参数的前面。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"></span><br><span class="line"><span class="comment">## 1. 查询价格大于 350 或者名称以菜开头的书籍的名称和价格。</span></span><br><span class="line">res=models.Book.objects.filter(Q(price__gt=<span class="number">350</span>)|Q(title__startswith=<span class="string">&quot;菜&quot;</span>)).values(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;price&quot;</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2. 查询出版日期是 2004 或者 1999 年，并且书名中包含有&quot;菜&quot;的书籍。</span></span><br><span class="line">Q 对象和关键字混合使用，Q 对象要在所有关键字的前面:</span><br><span class="line"></span><br><span class="line">res = models.Book.objects.filter(Q(pub_date__year=<span class="number">2004</span>) | Q(pub_date__year=<span class="number">1999</span>), title__contains=<span class="string">&quot;菜&quot;</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>1.聚合查询（aggregate）<br>聚合查询函数是对一组值执行计算，并返回单个值。</p>
<p>Django 使用聚合查询前要先从 django.db.models 引入 Avg、Max、Min、Count、Sum（首字母大写）。</p>
<p>from django.db.models import Avg,Max,Min,Count,Sum # 引入函数</p>
<p>聚合查询返回值的数据类型是字典。</p>
<p>聚合函数 aggregate() 是 QuerySet 的一个终止子句， 生成的一个汇总值，相当于 count()。</p>
<p>使用 aggregate() 后，数据类型就变为字典，不能再使用 QuerySet 数据类型的一些 API 了。</p>
<p>返回的字典中：键的名称默认是（属性名称加上__聚合函数名），值是计算出来的聚合值。</p>
<p>如果要自定义返回字典的键的名称，可以起别名：</p>
<blockquote>
<p>aggregate(别名 = 聚合函数名(“属性名称”))</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db.models import Avg,Max,Min,Count,Sum  #   引入函数</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">### 1.计算所有图书的平均价格:</span><br><span class="line">res &#x3D; models.Book.objects.aggregate(Avg(&quot;price&quot;))</span><br><span class="line">print(res, type(res))</span><br><span class="line"></span><br><span class="line">### 2.计算所有图书的数量、最贵价格和最便宜价格:</span><br><span class="line">res&#x3D;models.Book.objects.aggregate(c&#x3D;Count(&quot;id&quot;),max&#x3D;Max(&quot;price&quot;),min&#x3D;Min(&quot;price&quot;)) </span><br><span class="line">print(res,type(res)</span><br></pre></td></tr></table></figure>


<p>分组查询（annotate）<br>分组查询一般会用到聚合函数，所以使用前要先从 django.db.models 引入 Avg,Max,Min,Count,Sum（首字母大写）。</p>
<hr>
<blockquote>
<p>一对多，多的一方设置外键<br>一对多查询<br>关键字段在A中 book表 —&gt; publish<br>               A           B<br>A –&gt; B 正向 : 正向查询按字段<br>B –&gt; A 反向 : 反向查按表名小写_set</p>
</blockquote>
<blockquote>
<p>多对多查询</p>
</blockquote>
<blockquote>
<blockquote>
<p>总结：基于对象的查询—子查询（两条sql）</p>
</blockquote>
</blockquote>
<pre><code>一对一
一对多
多对多</code></pre>
<blockquote>
<blockquote>
<pre><code> 基于双下划线的查询---join
一对一
一对多
多对多</code></pre>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 为什么要加上first</span><br><span class="line">&#96;filter(id&#x3D;5).first()&#96;</span><br><span class="line">默认返回的是queryset类型数据，加上first()返回的才是对象</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; orm中定义表的时候 加上 &#96;def __str__(self):  return self.name&#96; 打印对象本身的名字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 套模型 eg: 查询每个出版社的名称和书籍个数</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">ret &#x3D; models.Publish.objects.values(&#39;nid&#39;).annotate(c&#x3D;Count(&#39;book_name&#39;)).values(&#39;name&#39;,&#39;add&#39;,&#39;c&#39;)</span><br><span class="line"># 模型：values后面是groupby的字段models.Publish.objects.values(group_by).annotate(c&#x3D;Count(&#39;连表，要计算的字段&#39;)).values(&#39;name&#39;,&#39;add&#39;,&#39;c&#39;)</span><br></pre></td></tr></table></figure>


<p>一对多添加</p>
<ol>
<li>可通过对象添加</li>
<li>通过外键关联ID添加<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.create(name=<span class="string">&#x27;海燕3&#x27;</span>,price=<span class="number">333.123</span>,publish_date=now,publish_id=<span class="number">2</span>)</span><br><span class="line">Book.objects.create(name=<span class="string">&#x27;海3燕3&#x27;</span>,price=<span class="number">35.123</span>,publish_date=<span class="string">&#x27;2018/02/28&#x27;</span>,publish=pub)</span><br><span class="line">pub=Publish.objects.filter(nid=<span class="number">1</span>).first()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>多对多添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 当前生成的书籍对象</span><br><span class="line">    book_obj&#x3D;Book.objects.create(title&#x3D;&quot;追风筝的人&quot;,price&#x3D;200,publishDate&#x3D;&quot;2012-11-12&quot;,publish_id&#x3D;1)</span><br><span class="line">    # 为书籍绑定的做作者对象</span><br><span class="line">    yuan&#x3D;Author.objects.filter(name&#x3D;&quot;yuan&quot;).first() # 在Author表中主键为2的纪录</span><br><span class="line">    egon&#x3D;Author.objects.filter(name&#x3D;&quot;alex&quot;).first() # 在Author表中主键为1的纪录</span><br><span class="line"></span><br><span class="line">    # 绑定多对多关系,即向关系表book_authors中添加纪录</span><br><span class="line">    book_obj.authors.add(yuan,egon)    #  将某些特定的 model 对象添加到被关联对象集合中。   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;    book_obj.authors.add(*[])</span><br></pre></td></tr></table></figure>
<ul>
<li>多对多关系其它常用API：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">book_obj.authors.remove()      # 将某个特定的对象从被关联对象集合中去除。    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;   book_obj.authors.remove(*[])</span><br><span class="line">book_obj.authors.clear()       #清空被关联对象集合</span><br><span class="line">book_obj.authors.set()         #先清空再设置　</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>一对多查询（publish与book）<br>正向查询（按字段：publish）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询主键为1的书籍的出版社所在的城市</span></span><br><span class="line">book_obj=Book.objects.filter(pk=<span class="number">1</span>).first()</span><br><span class="line"><span class="comment"># book_obj.publish 是主键为1的书籍对象关联的出版社对象</span></span><br><span class="line">print(book_obj.publish.city)</span><br></pre></td></tr></table></figure>

<p>反向查询（按表名：book_set）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">publish=Publish.objects.get(name=<span class="string">&quot;苹果出版社&quot;</span>)</span><br><span class="line"><span class="comment">#publish.book_set.all() : 与苹果出版社关联的所有书籍对象集合</span></span><br><span class="line">book_list=publish.book_set.all()    </span><br><span class="line"><span class="keyword">for</span> book_obj <span class="keyword">in</span> book_list:</span><br><span class="line">       print(book_obj.title)</span><br></pre></td></tr></table></figure>

<p>一对一查询（Author 与 AuthorDetail）<br>正向查询(按字段：authorDetail)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">egon=Author.objects.filter(name=<span class="string">&quot;egon&quot;</span>).first()</span><br><span class="line">print(egon.authorDetail.telephone)</span><br></pre></td></tr></table></figure>

<p>反向查询(按表名：author)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询所有住址在北京的作者的姓名</span></span><br><span class="line"> </span><br><span class="line">authorDetail_list=AuthorDetail.objects.filter(addr=<span class="string">&quot;beijing&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> authorDetail_list:</span><br><span class="line">     print(obj.author.name)</span><br></pre></td></tr></table></figure>


<p>多对多查询 (Author 与 Book)</p>
<p>正向查询(按字段：authors)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 眉所有作者的名字以及手机号</span></span><br><span class="line"> </span><br><span class="line">book_obj=Book.objects.filter(title=<span class="string">&quot;眉&quot;</span>).first()</span><br><span class="line">authors=book_obj.authors.all()</span><br><span class="line"><span class="keyword">for</span> author_obj <span class="keyword">in</span> authors:</span><br><span class="line">     print(author_obj.name,author_obj.authorDetail.telephone)</span><br></pre></td></tr></table></figure>

<p>反向查询(按表名：book_set)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询egon出过的所有书籍的名字</span></span><br><span class="line"> </span><br><span class="line">    author_obj=Author.objects.get(name=<span class="string">&quot;egon&quot;</span>)</span><br><span class="line">    book_list=author_obj.book_set.all()        <span class="comment">#与egon作者相关的所有书籍</span></span><br><span class="line">    <span class="keyword">for</span> book_obj <span class="keyword">in</span> book_list:</span><br><span class="line">        print(book_obj.title)</span><br></pre></td></tr></table></figure>


<p>基于双下划线的跨表查询</p>
<blockquote>
<p>正向查询按字段,反向查询按表名小写用来告诉ORM引擎join哪张表</p>
</blockquote>
<p>一对多查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="comment"># 正向查询 按字段:publish</span></span><br><span class="line"></span><br><span class="line">    queryResult=Book.objects</span><br><span class="line">　　　　　　　　　　　　.filter(publish__name=<span class="string">&quot;苹果出版社&quot;</span>)</span><br><span class="line">　　　　　　　　　　　　.values_list(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;price&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向查询 按表名:book</span></span><br><span class="line"></span><br><span class="line">    queryResult=Publish.objects</span><br><span class="line">　　　　　　　　　　　　　　.filter(name=<span class="string">&quot;苹果出版社&quot;</span>)</span><br><span class="line">　　　　　　　　　　　　　　.values_list(<span class="string">&quot;book__title&quot;</span>,<span class="string">&quot;book__price&quot;</span>)</span><br><span class="line">查询的本质一样，就是select <span class="keyword">from</span>的表不一样</span><br></pre></td></tr></table></figure>

<p>多对多查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 练习: 查询alex出过的所有书籍的名字(多对多)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正向查询 按字段:authors:</span></span><br><span class="line">    queryResult=Book.objects</span><br><span class="line">　　　　　　　　　　　　.filter(authors__name=<span class="string">&quot;yuan&quot;</span>)</span><br><span class="line">　　　　　　　　　　　　.values_list(<span class="string">&quot;title&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向查询 按表名:book</span></span><br><span class="line">    queryResult=Author.objects</span><br><span class="line">　　　　　　　　　　　　　　.filter(name=<span class="string">&quot;yuan&quot;</span>)</span><br><span class="line">　　　　　　　　　　　　　　.values_list(<span class="string">&quot;book__title&quot;</span>,<span class="string">&quot;book__price&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>一对一查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询alex的手机号</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 正向查询</span></span><br><span class="line">    ret=Author.objects.filter(name=<span class="string">&quot;alex&quot;</span>).values(<span class="string">&quot;authordetail__telephone&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向查询</span></span><br><span class="line">    ret=AuthorDetail.objects.filter(author__name=<span class="string">&quot;alex&quot;</span>).values(<span class="string">&quot;telephone&quot;</span>)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day10</title>
    <url>/2020/10/31/py-day10/</url>
    <content><![CDATA[<p>Django 分页<br>django的模型字段介绍<br>cookie-session<br>Auth模块</p>
<a id="more"></a>


<h3 id="0-django的admin"><a href="#0-django的admin" class="headerlink" title="0. django的admin"></a>0. django的admin</h3><p>就是django内置了了⼀一套后台管理理系统，因为⾃自带的东⻄西，扩展性不不是很好。临时拿来⽤用可以，但是如果 让⽤用户使⽤用，就不不太推荐<br>需要注册模型类 admin.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Register your models here.</span><br><span class="line">from app01 import models</span><br><span class="line">### 注册 admin.site.register(models.Book)</span><br></pre></td></tr></table></figure>

<h3 id="cookie-session"><a href="#cookie-session" class="headerlink" title="cookie session"></a>cookie session</h3><p>session和token都是用来保持会话，功能相同</p>
<p>一、session机制，原理<br>　　 <img src="/2020/10/31/py-day10/cookie-session.png" class title="objsort"><br>session是服务端存储的一个对象，主要用来存储所有访问过该服务端的客户端的用户信息（也可以存储其他信息），从而实现保持用户会话状态。但是服务器重启时，内存会被销毁，存储的用户信息也就消失了。<br>　　　　不同的用户访问服务端的时候会在session对象中存储键值对，“键”用来存储开启这个用户信息的“钥匙”，在登录成功后，“钥匙”通过cookie返回给客户端，客户端存储为sessionId记录在cookie中。当客户端再次访问时，会默认携带cookie中的sessionId来实现会话机制。</p>
<ul>
<li><p>工作原理：</p>
<ul>
<li><p>a. 浏览器第一次请求获取登录页面 login。</p>
</li>
<li><p>b. 浏览器输入账号密码第二次请求，若输入正确，服务器响应浏览器一个 index 页面和一个键为 sessionid，值为随机字符串的 cookie，即 set_cookie (“sessionid”,随机字符串)。</p>
</li>
<li><p>c. 服务器内部在 django.session 表中记录一条数据。</p>
<p>  django.session 表中有三个字段。</p>
<p>  session_key：存的是随机字符串，即响应给浏览器的 cookie 的 sessionid 键对应的值。<br>  session_data：存的是用户的信息，即多个 request.session[“key”]=value，且是密文。<br>  expire_date：存的是该条记录的过期时间（默认14天）</p>
</li>
<li><p>d. 浏览器第三次请求其他资源时，携带 cookie :{sessionid:随机字符串}，服务器从 django.session 表中根据该随机字符串取出该用户的数据，供其使用（即保存状态）。</p>
</li>
</ul>
</li>
</ul>
<p><strong>注意</strong>: django.session 表中保存的是浏览器的信息，而不是每一个用户的信息。 因此， 同一浏览器多个用户请求只保存一条记录（后面覆盖前面）,多个浏览器请求才保存多条记录。</p>
<p>cookie 弥补了 http 无状态的不足，让服务器知道来的人是”谁”，但是 cookie 以文本的形式保存在浏览器端，安全性较差，且最大只支持 4096 字节，所以只通过 cookie 识别不同的用户，然后，在对应的 session 里保存私密的信息以及超过 4096 字节的文本。</p>
<p>session是基于cookie的。<br>cookie的数据4k左右<br>cookie存储数据的格式：字符串key=value<br>cookie存储有效期：可以自行通过expires进行具体的日期设置，如果没设置，默认是关闭浏览器时失效。<br>cookie有效范围：当前域名下有效。所以session这种会话存储方式方式只适用于客户端代码和服务端代码运行在同一台服务器上（前后端项目协议、域名、端口号都一致，即在一个项目下）<br>session持久化<br>　　　　用于解决重启服务器后session就消失的问题。在数据库中存储session，而不是存储在内存中。通过包：express-mysql-session</p>
<p>其它<br>　　　　当客户端存储的cookie失效后，服务端的session不会立即销毁，会有一个延时，服务端会定期清理无效session，不会造成无效数据占用存储空间的问题。</p>
<p>二、token机制，原理<br>　　<img src="/2020/10/31/py-day10/session-cookie2.png" class title="objsort"></p>
<p>适用于项目级的前后端分离（前后端代码运行在不同的服务器下）<br>　　　　请求登录时，token和sessionId原理相同，是对key和key对应的用户信息进行加密后的加密字符，登录成功后，会在响应主体中将{token：’字符串’}返回给客户端。客户端通过cookie、sessionStorage、localStorage都可以进行存储。再次请求时不会默认携带，需要在请求拦截器位置给请求头中添加认证字段Authorization携带token信息，服务器端就可以通过token信息查找用户登录状态。</p>
<p><strong>四. 总结</strong></p>
<p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>
<p>2、cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。</p>
<p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie。</p>
<p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>
<p>5、可以考虑将登陆信息等重要信息存放为session，其他信息如果需要保留，可以放在cookie中。</p>
<p>五.应用场景</p>
<p>登录网站，今输入用户名密码登录了，第二天再打开很多情况下就直接打开了。这个时候用到的一个机制就是cookie。<br>session一个场景是购物车，添加了商品之后客户端处可以知道添加了哪些商品，而服务器端如何判别呢，所以也需要存储一些信息就用到了session<br>服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。<br>在刚才的购物场景中，当用户选购了第一项商品，服务器在向用户发送网页的同时，还发送了一段Cookie，记录着那项商品的信息。当用户访问另一个页面，浏览器会把Cookie发送给服务器，于是服务器知道他之前选购了什么。用户继续选购饮料，服务器就在原来那段Cookie里追加新的商品信息。结帐时，服务器读取发送来的Cookie就行了。</p>
<ul>
<li>django的使⽤<ul>
<li>Django cookie 的使用:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set_cookie() : 服务端给前端设置cooKies键值对 r</span><br><span class="line">equest.COOKIES获取</span><br><span class="line">delete_cookie(): 清楚浏览器器信息</span><br></pre></td></tr></table></figure>
示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def login(request):</span><br><span class="line"></span><br><span class="line">if request.method &#x3D;&#x3D; &quot;GET&quot;:</span><br><span class="line">    return render(request,&quot;login.html&quot;)</span><br><span class="line">username &#x3D; request.POST.get(&#39;username&#39;)</span><br><span class="line">pwd &#x3D; request.POST.get(&#39;pwd&#39;)</span><br><span class="line"></span><br><span class="line">if username &#x3D;&#x3D; &quot;yan&quot; and pwd &#x3D;&#x3D; &quot;123456&quot;:</span><br><span class="line">    rep &#x3D; redirect(&quot;&#x2F;index&#x2F;&quot;)</span><br><span class="line">    #rep.set_cookie(&quot;islogin&quot;, &quot;assdasdasd&quot;)</span><br><span class="line">    rep.set_signed_cookie(&quot;islogin&quot;, &#39;asdasd&#39;, salt&#x3D;&quot;asdasd&quot;)</span><br><span class="line">    return rep</span><br><span class="line">else:</span><br><span class="line">    return redirect(&quot;&#x2F;login&#x2F;&quot;)</span><br><span class="line"></span><br><span class="line">def order(request):</span><br><span class="line">cookie_info &#x3D; request.COOKIES.get(&quot;islogin&quot;)</span><br><span class="line">print(cookie_info)</span><br><span class="line">if cookie_info:</span><br><span class="line">    return HttpResponse(&#39;this is a order.html&#39;)</span><br><span class="line">else:</span><br><span class="line">    return redirect(&quot;&#x2F;login&#x2F;&quot;)</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<pre><code>- django的session使⽤:
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;session 设置：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request.session[&amp;quot;key&amp;quot;] &amp;#x3D; value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
执行步骤：
a. 生成随机字符串
b. 把随机字符串和设置的键值对保存到 django_session 表的 session_key 和 session_data 里
c. 设置 cookie：set_cookie(“sessionid”,随机字符串) 响应给浏览器

session 获取：
&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;request.session.get(&amp;#39;key&amp;#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
执行步骤：
a. 从 cookie 中获取 sessionid 键的值，即随机字符串。
b. 根据随机字符串从 django_session 表过滤出记录。
c. 取出 session_data 字段的数据。

session 删除，删除整条记录（包括 session_key、session_data、expire_date 三个字段）：
`request.session.flush()`
删除 session_data 里的其中一组键值对：
`del request.session[&quot;key&quot;]`

执行步骤：
    a. 从 cookie 中获取 sessionid 键的值，即随机字符串
    b. 根据随机字符串从 django_session 表过滤出记录
    c. 删除过滤出来的记录</code></pre>
<p>设置session：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.session[&#39;is_login&#39;] &#x3D; True</span><br><span class="line">        request.session[&#39;user1&#39;] &#x3D; username</span><br><span class="line">        return redirect(&quot;&#x2F;index&#x2F;&quot;)</span><br></pre></td></tr></table></figure>
<p>验证session：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cookie_info = request.session.get(<span class="string">&quot;is_login&quot;</span>)  <span class="comment">### 相当于从session数据表中获取对应的data值，进行解密</span></span><br><span class="line">   print(cookie_info)</span><br><span class="line">   <span class="keyword">if</span> cookie_info:</span><br><span class="line">       <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;this is a order.html&#x27;</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>删除sessionid</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request.session.flush()  <span class="comment"># 删除一条记录(session_key , session_data, expire_date) 三个字段</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;退出成功&quot;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,redirect,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line">    username = request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    pwd = request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&quot;yan&quot;</span> <span class="keyword">and</span> pwd == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">        <span class="comment">### cookie做法</span></span><br><span class="line">        <span class="comment"># rep = redirect(&quot;/index/&quot;)</span></span><br><span class="line">        <span class="comment"># rep.set_cookie(&quot;islogin&quot;, &quot;assdasdasd&quot;)</span></span><br><span class="line">        <span class="comment"># rep.set_signed_cookie(&quot;islogin&quot;, &#x27;asdasd&#x27;, salt=&quot;asdasd&quot;)</span></span><br><span class="line">        <span class="comment"># return rep</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">### session做法</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        两步操作：</span></span><br><span class="line"><span class="string">        1. 将数据保存在session数据库中，相当于登记在访客登记表上</span></span><br><span class="line"><span class="string">        2. set_cookie(&quot;session_id&quot;, 随机字符串)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        request.session[<span class="string">&#x27;is_login&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        request.session[<span class="string">&#x27;user1&#x27;</span>] = username</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/index/&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;this is a index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">request</span>):</span></span><br><span class="line">    request.session.flush()  <span class="comment"># 删除一条记录(session_key , session_data, expire_date) 三个字段</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;退出成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>(<span class="params">request</span>):</span></span><br><span class="line">    cookie_info = request.session.get(<span class="string">&quot;is_login&quot;</span>)  <span class="comment">### 相当于从session数据表中获取对应的data值，进行解密</span></span><br><span class="line">    print(cookie_info)</span><br><span class="line">    <span class="keyword">if</span> cookie_info:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;this is a order.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展:分布式session存储</li>
</ul>
<h3 id="二-django的模型字段介绍"><a href="#二-django的模型字段介绍" class="headerlink" title="二. django的模型字段介绍"></a>二. django的模型字段介绍</h3><p>⽐比较常⻅见的模型字段:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;1&gt; CharField</span><br><span class="line">#字符串串字段, ⽤用于较短的字符串串.</span><br><span class="line">#CharField 要求必须有⼀一个参数 maxlength, ⽤用于从数据库层和Django校验层限制该字段所 允许的最⼤大字符数</span><br><span class="line"></span><br><span class="line">&lt;2&gt; IntegerField #⽤用于保存⼀一个整数.</span><br><span class="line"></span><br><span class="line">&lt;3&gt; FloatField</span><br><span class="line"># ⼀一个浮点数. 必须 提供两个参数:</span><br><span class="line">#</span><br><span class="line"># 参数 描述</span><br><span class="line"># max_digits 总位数(不不包括⼩小数点和符号)</span><br><span class="line"># decimal_places ⼩小数位数</span><br><span class="line"># 举例例来说, 要保存最⼤大值为 999 (⼩小数点后保存2位),你要这样定义字段: #</span><br><span class="line"># models.FloatField(..., max_digits&#x3D;5, decimal_places&#x3D;2)</span><br><span class="line"></span><br><span class="line">&lt;5&gt; TextField</span><br><span class="line"># ⼀一个容量量很⼤大的⽂文本字段.</span><br><span class="line"># admin ⽤用⼀一个 &lt;textarea&gt; (⽂文本区域)表示该字段数据.(⼀一个多⾏行行编辑框).</span><br><span class="line"></span><br><span class="line">&lt;5&gt; TextField</span><br><span class="line"># ⼀一个容量量很⼤大的⽂文本字段.</span><br><span class="line"># admin ⽤用⼀一个 &lt;textarea&gt; (⽂文本区域)表示该字段数据.(⼀一个多⾏行行编辑框).</span><br><span class="line"></span><br><span class="line">&lt;7&gt; DateField</span><br><span class="line"># ⼀一个⽇日期字段. 共有下列列额外的可选参数:</span><br><span class="line"># Argument</span><br><span class="line"># auto_now &quot;last-modified&quot; 时间戳. # auto_now_add</span><br><span class="line">于表示对象创建时间.</span><br><span class="line">描述 当对象被保存时,⾃自动将该字段的值设置为当前时间.通常⽤用于表示</span><br><span class="line">当对象⾸首次被创建时,⾃自动将该字段的值设置为当前时间.通常⽤用</span><br><span class="line"></span><br><span class="line">&lt;8&gt; DateTimeField</span><br><span class="line"># ⼀一个⽇日期时间字段. 类似 DateField ⽀支持同样的附加选项.</span><br></pre></td></tr></table></figure>

<p>常⻅见的参数:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、null&#x3D;True 数据库中字段是否可以为空</span><br><span class="line">4、auto_now 和 auto_now_add</span><br><span class="line">  auto_now ⾃自动创建---⽆无论添加或修改，都是当前操作的时间   auto_now_add ⾃自动创建---永远是创建时的时间</span><br><span class="line">5、choices</span><br><span class="line">GENDER_CHOICE &#x3D; (</span><br><span class="line">(u&#39;M&#39;, u&#39;Male&#39;),</span><br><span class="line">(u&#39;F&#39;, u&#39;Female&#39;), )</span><br><span class="line">gender &#x3D; models.CharField(max_length&#x3D;2,choices &#x3D; GENDER_CHOICE)   这⾥里里我们⽤用在内存创建⼀一个关联,来取代再创建⼀一个简单的表来关联 6、max_length</span><br><span class="line">7、default  默认值</span><br><span class="line">9、unique&#x3D;True  不不允许重复 例例如⽤用户名注册时候是不不允许重复的,在username字段⾥里里设置, 不不让重复</span><br><span class="line">10、db_index &#x3D; True  数据库索引</span><br></pre></td></tr></table></figure>

<h3 id="Django-分页"><a href="#Django-分页" class="headerlink" title="Django 分页"></a>Django 分页</h3><ul>
<li><p>导入分页模块<br><code>from django.core.paginator import Paginator</code></p>
</li>
<li><p>查询所有数据列表queryset对象<br><code>book_list = BorrotBook.objects.all()</code></p>
</li>
<li><p>实例化对象<br><code>paginator = Paginator(book_list, 10)</code></p>
</li>
<li><p>Paginator类对象的属性<br>序号    属性名    说明<br>1    num_pages    返回分页之后的总页数<br>2    page_range    返回分页后的页码列表</p>
</li>
</ul>
<p>Paginator类对象的方法</p>
<p>序号    方法名    说明<br>1    page(self, number)    返回第number页的page类实例对象</p>
<p>Page实例对象的属性<br>序号    属性名    说明<br>1    number    返回当前页的页码<br>2    object_list    返回当前页的数据查询集<br>3    paginator    返回对应的Paginator类对象</p>
<p>page实例对象的方法</p>
<p>序号    方法名    说明<br>1    has_previous    判断当前页是否有前一页<br>2    has_next    判断当前页是否有下一页<br>3    previous_page_number    返回前一页的页码<br>4    next_page_number    返回下一页的页码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Views.py</span><br><span class="line">bookinfo = models.Book.objects.all() <span class="comment">## [&lt;Book: Book object (1)&gt;, &lt;Book: Book object (2)&gt;, &lt;Book: Book object (3)&gt;]&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line">    paginator = Paginator(bookinfo, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    print(paginator)</span><br><span class="line">    pindex = request.GET.get(<span class="string">&#x27;pindex&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    pindex = int(pindex)</span><br><span class="line">    page = paginator.page(pindex)  <span class="comment"># 传递当前页的实例对象到前端</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 3. 展示从数据库中获取的内容，美化展示</span></span><br><span class="line">    <span class="comment"># books = models.Book.objects.create(title=&quot;如来神掌&quot;,price=200,publish=&quot;功夫出版社&quot;,pub_date=&quot;2010-10-10&quot;)</span></span><br><span class="line">    print(pindex , page)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;booklist.html&quot;</span>, &#123; <span class="string">&quot;page&quot;</span>: page, <span class="string">&quot;pindex&quot;</span>: pindex&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% for obj in page %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.publish &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.pub_date &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>删除 | 更新&#123;&#123; obj.id &#125;&#125; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">--底部分页按钮显示--</span>&gt;</span>#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">&quot;Page navigation&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">        &#123;#            # 判断当前页是否有上一页#&#125;</span><br><span class="line">        &#123;% if page.has_previous %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/booklist/?pindex=&#123;&#123;page.previous_page_number&#125;&#125;&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Previous&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;#    # 循环遍历页码列表，并展示到底部#&#125;</span><br><span class="line">        &#123;% for num in page.paginator.page_range%&#125;</span><br><span class="line">            &#123;%if pindex == num %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> &gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;%else%&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/booklist/?pindex=&#123;&#123;num&#125;&#125;&quot;</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            &#123;%endif%&#125;</span><br><span class="line">         &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;#            # 判断当前页是否有下一页#&#125;</span><br><span class="line">         &#123;% if page.has_next %&#125;</span><br><span class="line">             <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/booklist/?pindex=&#123;&#123;page.next_page_number&#125;&#125;&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Next&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="auth模块"><a href="#auth模块" class="headerlink" title="auth模块"></a>auth模块</h3><p>Django 用户认证（Auth）组件一般用在用户的登录注册上，用于判断当前的用户是否合法，并跳转到登陆成功或失败页面。</p>
<p>Django 用户认证（Auth）组件需要导入 auth 模块:<br>导入模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 认证模块</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应数据库</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, AnonymousUser</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br></pre></td></tr></table></figure>



<p>使⽤用auth.login() 登录成功的时候，<br><code>request.user的值: zekai &lt;class &#39;django.utils.functional.SimpleLazyObject&#39;&gt;</code><br>如果未登录，则<br><code>request.user的值:AnonymousUser &lt;class &#39;django.utils.functional.SimpleLazyObject&#39;&gt;</code></p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse, redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, AnonymousUser</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def login(request):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     if request.method == &#x27;GET&#x27;:</span></span><br><span class="line"><span class="comment">#         return render(request, &quot;login.html&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     username = request.POST.get(&#x27;username&#x27;)</span></span><br><span class="line"><span class="comment">#     pwd = request.POST.get(&#x27;pwd&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     if username == &#x27;zekai&#x27; and pwd == &#x27;123qwe&#x27;:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         ### cookie的做法</span></span><br><span class="line"><span class="comment">#         # rep = redirect(&quot;/index/&quot;)</span></span><br><span class="line"><span class="comment">#         # rep.set_cookie(&quot;is_login&quot;, &quot;dsbahdbshabdhsja&quot;)</span></span><br><span class="line"><span class="comment">#         # rep.set_signed_cookie(&quot;is_login&quot;, &quot;dsbahdbshabdhsja&quot;, salt=&quot;test123&quot;)</span></span><br><span class="line"><span class="comment">#         # return rep</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         ### session的做法</span></span><br><span class="line"><span class="comment">#         &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#         两步操作:</span></span><br><span class="line"><span class="comment">#         1.将数据保存在session数据库中，相当于登记在访客登记表上</span></span><br><span class="line"><span class="comment">#         2.set_cookie(&quot;sessionid&quot;, 随机字符串)</span></span><br><span class="line"><span class="comment">#         &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#         request.session[&#x27;is_login&#x27;] = True</span></span><br><span class="line"><span class="comment">#         request.session[&#x27;user1&#x27;] = username</span></span><br><span class="line"><span class="comment">#         return redirect(&quot;/index/&quot;)</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         return redirect(&#x27;/login/&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    username = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    user_obj = auth.authenticate(username=username, password=password)</span><br><span class="line"></span><br><span class="line">    print(user_obj.__dict__)</span><br><span class="line">    <span class="comment"># print(user_obj.username)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user_obj:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(request.body)</span><br><span class="line">        <span class="comment">### 待解决</span></span><br><span class="line">        path = request.POST.get(<span class="string">&quot;url&quot;</span>) <span class="keyword">or</span> <span class="string">&quot;/index/&quot;</span></span><br><span class="line"></span><br><span class="line">        print(path)</span><br><span class="line">        auth.login(request, user_obj)  <span class="comment">### 此方法相当于 request.session[&#x27;is_login&#x27;] = True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redirect(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment">## OA  ladap</span></span><br><span class="line">    <span class="comment"># User.objects.create_superuser(username=&#x27;zekai&#x27;, email=&quot;zekai@163.com&quot;, password=&quot;123qwe&quot;)</span></span><br><span class="line">    <span class="comment"># User.objects.create_user(username=&quot;test&quot;, password=&#x27;test&#x27;)</span></span><br><span class="line">    <span class="comment"># User.objects.create(username=&quot;test2&quot;, password=&#x27;qweasd&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;this is index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;test1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### 使用cookie和session方式</span></span><br><span class="line">    <span class="comment"># cookie_info = request.session.get(&quot;is_login&quot;)  ### 相当于从session数据表中获取对应的data值</span></span><br><span class="line">    <span class="comment"># if cookie_info:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># return HttpResponse(&#x27;this is order.html&#x27;)</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    <span class="comment">#     return redirect(&quot;/login/&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 使用auth模块的方式</span></span><br><span class="line">    print(request.user, type(request.user)) <span class="comment">## zekai &lt;class &#x27;django.utils.functional.SimpleLazyObject&#x27;&gt;</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(request.user, AnonymousUser):</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;this is order.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### session的方式</span></span><br><span class="line">    <span class="comment"># request.session.flush() # 删除一条记录包括(session_key session_data expire_date)三个字段</span></span><br><span class="line">    <span class="comment"># return redirect(&quot;/login/&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### auth模块的方式</span></span><br><span class="line">    ppp = auth.logout(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/login/&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-drf</title>
    <url>/2020/12/06/py-drf/</url>
    <content><![CDATA[<p>DRF-day01</p>
<a id="more"></a>

<h2 id="DRF入门规范"><a href="#DRF入门规范" class="headerlink" title="DRF入门规范"></a>DRF入门规范</h2><h3 id="0-RESTful-API规范"><a href="#0-RESTful-API规范" class="headerlink" title="0. RESTful API规范"></a>0. RESTful API规范</h3><p>10条<br>最终要2条<br>4.1 数据的安全保障<br>url链接一般都采用https协议进行传输</p>
<p>注：采用https协议，可以提高数据交互过程中的安全性</p>
<p>4.2 接口特征表现<br>用api关键字标识接口url：</p>
<p><a href="https://api.baidu.com/">https://api.baidu.com</a><br><a href="https://www.baidu.com/api">https://www.baidu.com/api</a><br>注：看到api字眼，就代表该请求url链接是完成前后台数据交互的</p>
<p>4.3 多数据版本共存<br>在url链接中标识数据版本</p>
<p><a href="https://api.baidu.com/v1">https://api.baidu.com/v1</a><br><a href="https://api.baidu.com/v2">https://api.baidu.com/v2</a><br>注：url链接中的v1、v2就是不同数据版本的体现（只有在一种数据资源有多版本情况下）</p>
<p>4.4 数据即是资源，均使用名词（可复数）<br>接口一般都是完成前后台数据的交互，交互的数据我们称之为资源</p>
<p><a href="https://api.baidu.com/users">https://api.baidu.com/users</a><br><a href="https://api.baidu.com/books">https://api.baidu.com/books</a><br><a href="https://api.baidu.com/book">https://api.baidu.com/book</a><br>注：一般提倡用资源的复数形式，在url链接中奖励不要出现操作资源的动词，错误示范：<a href="https://api.baidu.com/delete-user">https://api.baidu.com/delete-user</a></p>
<p>特殊的接口可以出现动词，因为这些接口一般没有一个明确的资源，或是动词就是接口的核心含义</p>
<p><a href="https://api.baidu.com/place/search">https://api.baidu.com/place/search</a><br><a href="https://api.baidu.com/login">https://api.baidu.com/login</a><br>4.5 资源操作由请求方式决定（method）<br>操作资源一般都会涉及到增删改查，我们提供请求方式来标识增删改查动作<br><a href="https://api.baidu.com/books">https://api.baidu.com/books</a> - get请求：获取所有书<br><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - get请求：获取主键为1的书<br><a href="https://api.baidu.com/books">https://api.baidu.com/books</a> - post请求：新增一本书书<br><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - put请求：整体修改主键为1的书<br><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - patch请求：局部修改主键为1的书<br><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - delete请求：删除主键为1的书<br>4.6 过滤，通过在url上传参的形式传递搜索条件<br><a href="https://api.example.com/v1/zoos?limit=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E6%95%B0%E9%87%8F">https://api.example.com/v1/zoos?limit=10：指定返回记录的数量</a><br><a href="https://api.example.com/v1/zoos?offset=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E5%BC%80%E5%A7%8B%E4%BD%8D%E7%BD%AE">https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置</a><br><a href="https://api.example.com/v1/zoos?page=2&amp;per_page=100%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AC%AC%E5%87%A0%E9%A1%B5%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%AF%8F%E9%A1%B5%E7%9A%84%E8%AE%B0%E5%BD%95%E6%95%B0">https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数</a><br><a href="https://api.example.com/v1/zoos?sortby=name&amp;order=asc%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%8C%89%E7%85%A7%E5%93%AA%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E9%A1%BA%E5%BA%8F">https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序</a><br><a href="https://api.example.com/v1/zoos?animal_type_id=1%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AD%9B%E9%80%89%E6%9D%A1%E4%BB%B6">https://api.example.com/v1/zoos?animal_type_id=1：指定筛选条件</a><br>4.7 响应状态码<br>4.7.1 正常响应<br>响应状态码2xx<br>200：常规请求<br>201：创建成功<br>4.7.2 重定向响应<br>响应状态码3xx<br>301：永久重定向<br>302：暂时重定向<br>4.7.3 客户端异常<br>响应状态码4xx<br>403：请求无权限<br>404：请求路径不存在<br>405：请求方法不存在<br>4.7.4 服务器异常<br>响应状态码5xx<br>500：服务器异常<br>4.8 错误处理，应返回错误信息，error当做key</p>
<p>{<br>    error: “无权限操作”<br>}<br>4.9 返回结果，针对不同操作，服务器向用户返回的结果应该符合以下规范</p>
<p>GET /collection：返回资源对象的列表（数组）<br>GET /collection/resource：返回单个资源对象<br>POST /collection：返回新生成的资源对象<br>PUT /collection/resource：返回完整的资源对象<br>PATCH /collection/resource：返回完整的资源对象<br>DELETE /collection/resource：返回一个空文档<br>4.10 需要url请求的资源需要访问资源的请求链接</p>
<blockquote>
<p>Hypermedia API，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么<br>{<br>      “status”: 0,<br>      “msg”: “ok”,<br>      “results”:[<br>        {<br>            “name”:”肯德基(罗餐厅)”,<br>            “img”: “<a href="https://image.baidu.com/kfc/001.png&quot;">https://image.baidu.com/kfc/001.png&quot;</a><br>        }<br>          …<br>        ]<br>}<br>比较好的接口返回</p>
</blockquote>
<blockquote>
<p>响应数据要有状态码、状态信息以及数据本身<br>{<br>      “status”: 0,<br>      “msg”: “ok”,<br>      “results”:[<br>        {<br>            “name”:”肯德基(罗餐厅)”,<br>            “location”:{<br>                “lat”:31.415354,<br>                “lng”:121.357339<br>            },<br>            “address”:”月罗路2380号”,<br>            “province”:”上海市”,<br>            “city”:”上海市”,<br>            “area”:”宝山区”,<br>            “street_id”:”339ed41ae1d6dc320a5cb37c”,<br>            “telephone”:”(021)56761006”,<br>            “detail”:1,<br>            “uid”:”339ed41ae1d6dc320a5cb37c”<br>        }<br>          …<br>        ]<br>}</p>
</blockquote>
<h3 id="1-drf的安装和使用"><a href="#1-drf的安装和使用" class="headerlink" title="1. drf的安装和使用"></a>1. drf的安装和使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkvirtualenv drfdemo -p python3</span></span><br><span class="line"><span class="comment"># pip install django</span></span><br><span class="line"></span><br><span class="line">pip install djangorestframework</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>

<p>创建django项目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ~/Desktop</span><br><span class="line">django-admin startproject drfdemo</span><br></pre></td></tr></table></figure>
<p>添加rest_framework应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在settings.py的INSTALLED_APPS中添加’rest_framework’。</span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>接下来就可以使用DRF提供的功能进行api接口开发了。在项目中如果使用rest_framework框架实现API接口，主要有以下三个步骤：</p>
<ul>
<li>将请求的数据（如JSON格式）转换为模型类对象</li>
<li>操作数据库</li>
<li>将模型类对象转换为响应的数据（如JSON格式）</li>
</ul>
<p>快速体验</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># model.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    nid = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    price = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    author = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建ser.py序列化类</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.serializers <span class="keyword">import</span> ModelSerializer</span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> Book</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="comment">## 表示序列化Book表，表里的所有字段都序列化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelSerializer</span>(<span class="params">ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Book</span><br><span class="line"><span class="keyword">from</span> .ser <span class="keyword">import</span> BookModelSerializer</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    queryset = Book.objects.all()</span><br><span class="line">    serializer_class = BookModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="comment"># 路由列表</span></span><br><span class="line">urlpatterns = []</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()  <span class="comment"># 可以处理视图的路由器</span></span><br><span class="line">router.register(<span class="string">&#x27;books&#x27;</span>, views.BooksViewSet)  <span class="comment"># 向路由器中注册视图集</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 将路由器中的所以路由信息追到到django的路由列表中</span></span><br></pre></td></tr></table></figure>

<h3 id="2-cbv源码"><a href="#2-cbv源码" class="headerlink" title="2. cbv源码"></a>2. cbv源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ModelViewSet继承View(Django原生view)</span></span><br><span class="line"><span class="comment"># APIView继承View</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先读View的源码</span></span><br><span class="line">path(<span class="string">&#x27;books1/&#x27;</span>, views.Books.as_view()), <span class="comment">### 在这个地方写个函数内存地址;也就是说views.Books.as_view()执行完，是个函数内存地址，as_view是一个类方法，类直接来调用，会把类自动传入</span></span><br><span class="line">放了一个view的内存地址(view--&gt;as_view的内层函数)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求来了，如果路径匹配，会执行函数内存地址(request)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="comment">#request是档次请求的request,cls就是Books(类的绑定方法)</span></span><br><span class="line">    self = cls(**initkwargs)<span class="comment">#实例化得到一个对象，Books对象</span></span><br><span class="line">    self.setup(request, *args, **kwargs)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">&#x27;request&#x27;</span>):</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(</span><br><span class="line">            <span class="string">&quot;%s instance has no &#x27;request&#x27; attribute. Did you override &quot;</span></span><br><span class="line">            <span class="string">&quot;setup() and forget to call super()?&quot;</span> % cls.__name__</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">if</span> hasattr(self, <span class="string">&#x27;get&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(self, <span class="string">&#x27;head&#x27;</span>):</span><br><span class="line">        self.head = self.get</span><br><span class="line">    self.request = request</span><br><span class="line">    self.args = args</span><br><span class="line">    self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="comment"># request是当前请求的request, self是book对象</span></span><br><span class="line">    <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">        <span class="comment">#handler是通过反射拿到Books类的get方法的内存地址</span></span><br><span class="line">        handler = getattr(self, request.method.lower(), self.http_method_not_allowed)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        handler = self.http_method_not_allowed</span><br><span class="line">    <span class="keyword">return</span> handler(request, *args, **kwargs) <span class="comment">#执行get(request)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-apiview源码"><a href="#3-apiview源码" class="headerlink" title="3. apiview源码"></a>3. apiview源码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">path(<span class="string">&#x27;booksapiview/&#x27;</span>, views.BookAPIView.as_view()) <span class="comment"># 这个地方也应该是个函数内存地址</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="comment">#APIView的as_view方法(类的绑定方法)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">as_view</span>(<span class="params">cls, **initkwargs</span>):</span></span><br><span class="line">    view = super().as_view(**initkwargs) <span class="comment"># 调用父类(View)的as_view(**initkwargs)</span></span><br><span class="line">    view.cls = cls</span><br><span class="line">    view.initkwargs = initkwargs</span><br><span class="line">    <span class="comment"># 以后所有的请求,都没有csrf认证了，只要继承了APIView,就没有csrf认证</span></span><br><span class="line">    <span class="keyword">return</span> csrf_exempt(view)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请求--&gt;路由匹配---&gt; view(request) --&gt; 调用了self.dispatch,会执行apiview的dispatch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#APIView的dispatch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">    self.args = args</span><br><span class="line">    self.kwargs = kwargs</span><br><span class="line">    <span class="comment"># 重写了request对象，以后再用的request对象,就是新的request对象</span></span><br><span class="line">    request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">    self.request = request</span><br><span class="line">    self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 三大认证模块</span></span><br><span class="line">        self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">        <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">            handler = getattr(self, request.method.lower(),</span><br><span class="line">                                self.http_method_not_allowed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            handler = self.http_method_not_allowed</span><br><span class="line">        <span class="comment"># 响应模块</span></span><br><span class="line">        response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="comment"># 异常模块</span></span><br><span class="line">        response = self.handle_exception(exc)</span><br><span class="line">    <span class="comment"># 渲染模块</span></span><br><span class="line">    self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> self.response</span><br><span class="line"><span class="comment"># APIView的initial方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span>(<span class="params">self, request, *args, **kwargs</span>)</span></span><br><span class="line"><span class="function">        # 认证组件：校验用户 - 游客，合法用户，非法用户</span></span><br><span class="line"><span class="function">        # 游客：代表校验通过，直接进入下一步校验</span></span><br><span class="line">        # 合法用户：代表校验通过，将用户存储在request.user中,再进入下一步校验(权限校验)</span><br><span class="line">        <span class="comment"># 非法用户：代表校验失败，抛出异常，返回403权限异常结果</span></span><br><span class="line">        self.perform_authentication(request)</span><br><span class="line">        <span class="comment"># 权限组件:校验用户权限 - 必须登录、所有用户、登录读写游客只读，自定义用户角色</span></span><br><span class="line">        <span class="comment">#认证通过：可以进入下一步校验(频率认证)</span></span><br><span class="line">        <span class="comment">#认证失败：抛出异常，返回403权限异常结果</span></span><br><span class="line">        self.check_permissions(request)</span><br><span class="line">        <span class="comment">#频率组件：限制视图接口被访问的频率次数 - 限制的条件(IP、id、唯一键)、频率周期时间(s、m、h)、频率；v的次数(3/s)</span></span><br><span class="line">        <span class="comment"># 没有达到限次：正常访问的接口</span></span><br><span class="line">        <span class="comment"># 达到限次：限制时间内不能访问，限制时间内达到后，可以重新访问</span></span><br><span class="line">        self.check_throttles(request)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="comment"># 只要继承了APIView,视图中的request对象，都是新的，也就是上面那个request对象</span></span><br><span class="line"><span class="comment"># 老的request在新的request._request</span></span><br><span class="line"><span class="comment"># 使用request对象就像使用之前的request对象一模一样（因为重写了__getattr__方法）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, attr</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> getattr(self._request, attr) <span class="comment">#通过反射，取原生的request对象，取出属性或方法</span></span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">return</span> self.__getattribute__(attr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># request.data 感觉是个数据属性，其实是个方法，@property，修饰了</span></span><br><span class="line">  它是一个字典，post请求不管使用什么编码，传过来的数据，都在request.data</span><br><span class="line"><span class="comment"># get请求传过来的数据</span></span><br><span class="line">  request.GET</span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_params</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    More semantically correct name for request.GET.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> self._request.GET</span><br><span class="line"><span class="comment">#视图类中</span></span><br><span class="line">print(request.query_params) <span class="comment">#get请求，地址中的参数</span></span><br><span class="line"><span class="comment">#原来在</span></span><br><span class="line">print(request.GET)</span><br></pre></td></tr></table></figure>

<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="一切皆对象"><a href="#一切皆对象" class="headerlink" title="一切皆对象"></a>一切皆对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line">foo.name = <span class="string">&#x27;lqz&#x27;</span> <span class="comment">#由于一切皆对象,函数也是个对象，对象放值</span></span><br><span class="line"></span><br><span class="line">print(foo(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">print(foo.name)</span><br></pre></td></tr></table></figure>
<h4 id="局部禁用csrf"><a href="#局部禁用csrf" class="headerlink" title="局部禁用csrf"></a>局部禁用csrf</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在视图函数上家装饰器@csrf_exempt</span></span><br><span class="line"><span class="comment"># csrf_exempt(view) 和在视图函数上家装饰器是一模一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url.py中看到这种写法，也是可以的</span></span><br><span class="line">path(<span class="string">&#x27;test/&#x27;</span>, csrf_exempt(view.test))</span><br></pre></td></tr></table></figure>

<p>请求-&gt;匹配路由-&gt;执行as_view里面的view函数-&gt;执行了self.dispatch-&gt;但是执行dispatch是执行APIView的dispatch–&gt;dispatch把请求方法转成小写,通过反射,在对象中去找,是否有get方法,有就加括号执行,并且把request传进去；dispatch的第三行重新包装了request对象-&gt;request对象又有好多东西,data,query_params,files–&gt;接着又执行了self.initial-&gt;三个函数（权限，认证，频率）-&gt;执行完回到之前;get请求执行get函数，post请求执行post函数。–&gt;拿到response对象–&gt;有异常处理:用处，程序出错之后，捕获到之后，可以通过一个配置指定返回异常结果，如errmessage:服务器内部错误;因为前后端分离，就是要返回json格式–有一个总的异常补货，一旦捕获到之后，不管什么错误，都是返回json格式。—&gt;渲染reponse，包装，浏览器访问就是页面和postman访问就是另外格式—&gt;总结：整个请求过程就是通过APIView控制的</p>
<h3 id="3-APIView源码分析（drf提供的，扩展了View的功能）"><a href="#3-APIView源码分析（drf提供的，扩展了View的功能）" class="headerlink" title="3.APIView源码分析（drf提供的，扩展了View的功能）"></a>3.APIView源码分析（drf提供的，扩展了View的功能）</h3><ul>
<li>视图类，继承APIView(读APIView的源码)</li>
<li>在类里写get,post方法就可以了,只要get请求来,就有走get方法</li>
<li>路由：views.Books.as_view()—这个函数执行完一定是一个内存地址–&gt;view(闭包函数)内存函数的地址,处理了csrf,所有请求,都没有csrf校验了</li>
<li>请求来了,路由匹配上,—&gt;view(request)—&gt;self.dispatch(request,*args,**kwargs),现在这个dispatch不是View中的dispatch,而是APIView中的dispatch</li>
</ul>
<h2 id="序列化器-Serializer"><a href="#序列化器-Serializer" class="headerlink" title="序列化器-Serializer"></a>序列化器-Serializer</h2><h3 id="1-作用："><a href="#1-作用：" class="headerlink" title="1.作用："></a>1.作用：</h3><ol>
<li>序列化,序列化器会把模型对象转换成字典,经过response以后变成json字符串</li>
<li>反序列化,把客户端发送过来的数据,经过request以后变成字典,序列化器可以把字典转成模型</li>
<li>反序列化,完成数据校验功能</li>
</ol>
<h3 id="2-简单使用"><a href="#2-简单使用" class="headerlink" title="2.简单使用"></a>2.简单使用</h3><ol>
<li>写一个序列化的类，继承Serializer</li>
<li>在类中写要序列化的字段,想要序列化哪个字段,就在类中写哪个字段</li>
<li>在视图类中使用,导入–&gt;实例化得到序列化类的对象–&gt;把要序列化的对象传入</li>
<li>序列化的对象.data 是一个字典</li>
<li>如果不使用rest_framework 提供的Response,那么就使用JsonResponse  </li>
</ol>
<h3 id="3-序列化类的字段类型"><a href="#3-序列化类的字段类型" class="headerlink" title="3.序列化类的字段类型"></a>3.序列化类的字段类型</h3><blockquote>
<p>有很多，不需要都记住<br>只需要记住：CharField，IntegerField，DateField…</p>
</blockquote>
<h3 id="4-序列化字段选项"><a href="#4-序列化字段选项" class="headerlink" title="4.序列化字段选项"></a>4.序列化字段选项</h3><h3 id="5-序列化组件修改数据"><a href="#5-序列化组件修改数据" class="headerlink" title="5.序列化组件修改数据"></a>5.序列化组件修改数据</h3><ol>
<li>写一个序列化的类，继承Serializer</li>
<li>在类中写要反序列化的字段,想要反序列化哪个字段,就在类中写哪个字段,字段的属性(max_length,…..)</li>
<li>在视图类中使用,导入-&gt;实例化得到序列化类的对象-&gt;把要修改的对象传入,修改的数据传入 book_ser = BookSerializer(instance=book, data=request.data) instance要修改的对象，data是修改的数据</li>
<li>得到对象之后，进行数据校验if book_ser.is_valid()</li>
<li>如果校验通过，就保存(序列化对象.save(),而不是book.save()) book_ser.save()</li>
<li>如果不通过，逻辑自己写</li>
<li>如果字段的校验规则不够，可以写钩子函数(局部和全局)<br>局部钩子<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_price</span>(<span class="params">self, data</span>):</span> <span class="comment"># validate_字段名 接收一个参数:传过来的price</span></span><br><span class="line">    <span class="comment"># 如果价格小于10，校验不通过</span></span><br><span class="line">    print(type(data))</span><br><span class="line">    print(data)</span><br><span class="line">    <span class="keyword">if</span> float(data)&gt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#校验失败，抛异常</span></span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;价格太低&#x27;</span>)</span><br></pre></td></tr></table></figure>
全局钩子<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, validate_data</span>):</span> <span class="comment"># 全局钩子</span></span><br><span class="line">    print(validate_data)</span><br><span class="line">    author = validate_data.get(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">    publish = validate_data.get(<span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> author == publish:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;作者名字和出版社一样&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> validate_data</span><br></pre></td></tr></table></figure></li>
<li>可以使用字段的author=serializers.CharField(validators=[check_author]),来校验<br>写一个函数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def check_author(data):</span><br><span class="line">    if data.startwith(&#39;sb&#39;):</span><br><span class="line">        raise ValidationError(&#39;sb&#39;)</span><br><span class="line">    else:</span><br><span class="line">        return data</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="6-read-only和write-only"><a href="#6-read-only和write-only" class="headerlink" title="6.read_only和write_only"></a>6.read_only和write_only</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read_only 表明该字段仅用于序列化输出，默认<span class="literal">False</span>，如果设置成<span class="literal">True</span>，postman中可以看到该字段，不需要传该字段</span><br><span class="line">write_only 表明该字段仅用于反序列化输出，默认<span class="literal">False</span>，如果设置成<span class="literal">True</span>，postman中看不到该字段，修改时需要传该字段</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下的了解</span></span><br><span class="line">required    表明该字段在反序列化时必须输入，默认<span class="literal">True</span></span><br><span class="line">default    反序列化时使用的默认值</span><br><span class="line">allow_null    表明该字段是否允许传入<span class="literal">None</span>，默认<span class="literal">False</span></span><br><span class="line">validators    该字段使用的验证器</span><br><span class="line">error_messages    包含错误编号与错误信息的字典</span><br><span class="line">label    用于HTML展示API页面时，显示的字段名称</span><br><span class="line">help_text    用于HTML展示API页面时，显示的字段帮助提示信息</span><br></pre></td></tr></table></figure>

<h3 id="7-查询所有"><a href="#7-查询所有" class="headerlink" title="7.查询所有"></a>7.查询所有</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        response_msg = &#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;成功&#x27;</span>&#125;</span><br><span class="line">        books = Book.objects.all()</span><br><span class="line">        book_ser = BookSerializer(books, many=<span class="literal">True</span>) <span class="comment"># 序列化多条，如果序列化一条，则不需要写</span></span><br><span class="line">        response_msg[<span class="string">&#x27;data&#x27;</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">return</span> Response(response_msg)</span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BooksView.as_view()),</span><br></pre></td></tr></table></figure>

<h3 id="8-新增数据"><a href="#8-新增数据" class="headerlink" title="8.新增数据"></a>8.新增数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新增</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        response_msg = &#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;成功&#x27;</span>&#125;</span><br><span class="line">        <span class="comment"># 修改才有instance, 新增没有instance, 只有data</span></span><br><span class="line">        <span class="comment"># book_ser = BookSerializer(request.data)  # 这个按位置传request.data会给instance,就报错了</span></span><br><span class="line">        book_ser = BookSerializer(data=request.data)</span><br><span class="line">        <span class="comment"># 校验字段</span></span><br><span class="line">        <span class="keyword">if</span> book_ser.is_valid():  <span class="comment"># 返回True表示验证通过</span></span><br><span class="line">            book_ser.save()</span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>] = book_ser.data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response_msg[<span class="string">&#x27;status&#x27;</span>] = <span class="number">102</span></span><br><span class="line">            response_msg[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&#x27;数据校验失败&#x27;</span></span><br><span class="line">            response_msg[<span class="string">&#x27;data&#x27;</span>] = book_ser.errors</span><br><span class="line">        <span class="keyword">return</span> Response(response_msg)</span><br><span class="line">ser.py 序列化类重新create方法</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        instance = Book.objects.create(**validated_data)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">urls.py</span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BooksView.as_view()),</span><br></pre></td></tr></table></figure>


<h3 id="9-删除一个数据"><a href="#9-删除一个数据" class="headerlink" title="9.删除一个数据"></a>9.删除一个数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, pk</span>):</span></span><br><span class="line">        <span class="comment"># 找到对象</span></span><br><span class="line">        ret = Book.objects.filter(id=pk).delete()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">100</span>,<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;删除成功&#x27;</span>&#125;)</span><br><span class="line">urls.py</span><br><span class="line">path(<span class="string">&#x27;books/&#x27;</span>, views.BooksView.as_view()),</span><br></pre></td></tr></table></figure>

<h3 id="10-模型类序列化器"><a href="#10-模型类序列化器" class="headerlink" title="10.模型类序列化器"></a>10.模型类序列化器</h3><ul>
<li>基于模型类自动生成一系列字段</li>
<li>基于模型类自动为Serializer生成validators，比如unique_together</li>
<li>包含默认的create()和update()的实现<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookModelSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Book  <span class="comment"># 对应上model.py中的模型</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br><span class="line">        <span class="comment"># fields = (&#x27;name&#x27;,&#x27;price&#x27;) # 只序列化指定的字段</span></span><br><span class="line">        <span class="comment"># exclude = (&#x27;name&#x27;,) #跟fields不能都写，写谁，就表示排除谁</span></span><br><span class="line">        <span class="comment"># read_only_fields = (&#x27;id&#x27;, )    #</span></span><br><span class="line">        <span class="comment"># write_only_fields = (&#x27;price&#x27;)  # 弃用了，extra_kwargs</span></span><br><span class="line">        extra_kwargs = &#123; <span class="comment"># 类似于这种形式  name = serializers.CharField(max_length=16,min_length=4)</span></span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># 其他使用一模一样</span></span><br><span class="line"><span class="comment"># 不需要重写create 和update了</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="11-源码分析"><a href="#11-源码分析" class="headerlink" title="11.源码分析"></a>11.源码分析</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 序列化多条，需要传many&#x3D;True</span><br><span class="line">book_ser &#x3D; BookModelSerializer(books, many&#x3D;True)</span><br><span class="line">book_one_ser &#x3D; BookModelSerializer(books)</span><br><span class="line"></span><br><span class="line">print(type(book_ser))</span><br><span class="line">&lt;class &#39;rest_framework.serializers.ListSerializer&#39;&gt;</span><br><span class="line">print(type(book_one_ser))</span><br><span class="line">&lt;class &#39;app01.ser.BookModelSerializer&#39;&gt;</span><br><span class="line"># 对象的生成--&gt;先调用类的__new__方法，生成空对象</span><br><span class="line"># 对象&#x3D;类名(name&#x3D;lqz)，触发类的__init__()</span><br><span class="line"># 类的__new__方法控制对象的生成</span><br><span class="line"></span><br><span class="line">def __new__(cls, *args, **kwargs):</span><br><span class="line">    if kwargs.pop(&#39;many&#39;, False):</span><br><span class="line">        return cls.many_init(*args, **kwargs)</span><br><span class="line">    # 没有传many&#x3D;True,走下面，正常的对象实例化</span><br><span class="line">    return super().__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="12-Serializer高级用法"><a href="#12-Serializer高级用法" class="headerlink" title="12.Serializer高级用法"></a>12.Serializer高级用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># source的使用</span></span><br><span class="line"> <span class="number">1.</span> 可以改字段名字 xxx = serializers.CharField(source=<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"> <span class="number">2.</span> 可以跨表 publish = serializers.CharField(source=<span class="string">&#x27;publish.email&#x27;</span>)</span><br><span class="line"> <span class="number">3.</span> 可以执行方法 pub_date = serializers.CharField(source=<span class="string">&#x27;test&#x27;</span>) test是Book表模型中的方法</span><br><span class="line"><span class="comment"># SerializerMethodField</span></span><br><span class="line">    authors = serializers.SerializerMethodField() <span class="comment"># 它需要有个配套方法，方法名叫get_字段名，返回值就是要显示的东西</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_authors</span>(<span class="params">self, instance</span>):</span></span><br><span class="line">        <span class="comment"># book对象</span></span><br><span class="line">        authors = instance.authors.all()</span><br><span class="line">        ll = []</span><br><span class="line">        <span class="keyword">for</span> author <span class="keyword">in</span> authors:</span><br><span class="line">            ll.append(&#123;<span class="string">&#x27;name&#x27;</span>:author.name, <span class="string">&#x27;age&#x27;</span>:author.age&#125;)</span><br><span class="line">        <span class="keyword">return</span> ll</span><br></pre></td></tr></table></figure>

<h2 id><a href="#" class="headerlink" title></a></h2><ol>
<li>补充(自己封装response对象)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myresponse</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.status = <span class="number">100</span></span><br><span class="line">        self.msg = <span class="string">&#x27;成功&#x27;</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dict</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__dict__</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    res = Myresponse()</span><br><span class="line">    res.status = <span class="number">101</span></span><br><span class="line">    res.msg = <span class="string">&#x27;失败&#x27;</span></span><br><span class="line">    res.data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lqz&#x27;</span>&#125;</span><br><span class="line">    print(res.get_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        response = Myresponse()</span><br><span class="line">        books = Book.objects.all()</span><br><span class="line">        book_ser = BookSerializer(books, many=<span class="literal">True</span>) <span class="comment"># 序列化多条，如果序列化一条，则不需要写</span></span><br><span class="line">        response.data = book_ser.data</span><br><span class="line">        <span class="keyword">return</span> Response(response.get_dict)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>你在实际开发中遇到的问题<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write_only_fields 不能使用了；使用extra_kwargs = &#123;&#125;解决</span><br><span class="line"></span><br><span class="line">extra_kwargs = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: &#123;<span class="string">&#x27;write_only&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;read_only&#x27;</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-skill</title>
    <url>/2020/11/06/py-skill/</url>
    <content><![CDATA[<p>需要记住</p>
<a id="more"></a>

<ol start="0">
<li>字符串前加r的意思<br>r/R 表示非转义的原始字符串,比如在字符串中如果出现\n是换行,但是如果在字符串的前面添加r则表示\和n两个字符,一般常见于正则表达式中。</li>
</ol>
<ol>
<li>Python __dict__与dir()区别</li>
</ol>
<p>__dict__与dir()的区别：</p>
<p>1.dir()是一个函数，返回的是list；<br>2.__dict__是一个字典，键为属性名，值为属性值；<br>3.dir()用来寻找一个对象的所有属性，包括__dict__中的属性，__dict__是dir()的子集；</p>
<ol start="2">
<li>字符串和字节相互转换<br>通过decode encode 方式太麻烦，不好理解</li>
</ol>
<p>字符串转换成字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bytes(tmp, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>字节转换成字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str(tmp, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>class 中什么时候用classmethod</li>
</ol>
<ul>
<li>想通过类的方法得到对象，会用到classmethod</li>
</ul>
<ol start="4">
<li>Django 模板语法 如何处理xss攻击的</li>
</ol>
<ul>
<li>safe<br>Django的模板中会对HTML标签和JS等语法标签进行自动转义，原因显而易见，这样是为了安全。但是有的时候我们可能不希望这些HTML元素被转义，比如我们做一个内容管理系统，后台添加的文章中是经过修饰的，这些修饰可能是通过一个类似于FCKeditor编辑加注了HTML修饰符的文本，如果自动转义的话显示的就是保护HTML标签的源文件。为了在Django中关闭HTML的自动转义有两种方式，如果是一个单独的变量我们可以通过过滤器“|safe”的方式告诉Django这段代码是安全的不必转义。比如：<figure class="highlight"><table><tr><td class="code"><pre><span class="line">value=<span class="string">&quot;&lt;a href=&quot;</span><span class="string">&quot;&gt;点击&lt;/a&gt;&quot;</span></span><br><span class="line">&#123;&#123; value|safe&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; label &#125;&#125;&lt;/p&gt;  &lt;!--为了安全系统会把标签变成字符串--&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; label|safe &#125;&#125;&lt;/p&gt;    &lt;!--加上safe，确定你的数据是安全的才能被当成是标签--&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>底层实现原理：mark_safe 通过html特殊字符的替换</p>
<ol start="5">
<li>csrf跨站请求伪造<br>什么是csrf：<br>其原理是攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form 表单可用POST方式提交参数的页面</li>
</ol>
<p>原理：<br>当用post提交数据的时候，django会去检查是否有一个csrf的随机字符串，如果没有就会报错，这也是之前我们一直将其注释的原因，错误如下：403</p>
<ul>
<li>通过form提交<br>在form表单里面需要添加<code>&#123;%csrf_token%&#125;</code>，<br>这样当你查看页面源码的时候,可以看到form中有一个input是隐藏的<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;scrf_token&lt;/h3&gt;&lt;form action=&quot;/tag/&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;haiyan&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<img src="https://images2015.cnblogs.com/blog/997599/201701/997599-20170113091806338-1978303584.png">


<p>总结原理：当用户访问login页面的时候，会生成一个csrf的随机字符串，，并且cookie中也存放了这个随机字符串，当用户再次提交数据的时候会带着这个随机字符串提交，如果没有这个随机字符串则无法提交成功</p>
<ul>
<li>通过ajax提交</li>
</ul>
<p><a href="https://www.cnblogs.com/jinxf/p/9186923.html">https://www.cnblogs.com/jinxf/p/9186923.html</a></p>
<ol start="6">
<li>orm 相关问题</li>
</ol>
<p>values和values_list 在annotate（分组查询）  前后的区别<br><a href="https://www.runoob.com/django/django-orm-3.html">https://www.runoob.com/django/django-orm-3.html</a></p>
<ol start="7">
<li>Ajax<br>AJAX（Asynchronous Javascript And XML）翻译成中文就是“异步Javascript和XML”。即使用Javascript语言与服务器进行异步交互，传输的数据为XML（当然，传输的数据不只是XML,现在更多使用json数据）。</li>
</ol>
<ul>
<li>同步交互：客户端发出一个请求后，需要等待服务器响应结束后，才能发出第二个请求；</li>
<li>异步交互：客户端发出一个请求后，无需等待服务器响应结束，就可以发出第二个请求。</li>
</ul>
<p><strong>AJAX除了异步的特点外，还有一个就是：浏览器页面局部刷新；（这一特点给用户的感受是在不知不觉中完成请求和响应过程）</strong><br>局部刷新：Ajax 发请求，把数据拿过来，再勇敢Dom渲染局部</p>
<p><code>$.ajax 是Jquery封装的，会根据不同参数和配置的type组装不同的http请求</code></p>
<ol start="8">
<li>forms组件</li>
</ol>
<ul>
<li>使用它的字段检验功能<ul>
<li><ol>
<li>写一个类(UserForm)，继承Form</li>
</ol>
</li>
<li><ol start="2">
<li>在类中写字段，pwd=forms.CharField(max_length=32,min_length=4)</li>
</ol>
</li>
<li><ol start="3">
<li>在视图函数中使用: form=UserForm(检验的字典)</li>
</ol>
</li>
<li><ol start="4">
<li>form.is_valid()里面做校验；通过，存起来；不通过，forms.errors会有错误信息</li>
</ol>
</li>
</ul>
</li>
<li>默认的校验规则还不够，需要自己写钩子函数<ul>
<li>局部钩子：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_</span>字段名():</span></span><br><span class="line">    val=self.cleaned_data.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    通过<span class="keyword">return</span></span><br><span class="line">    不通过抛出</span><br></pre></td></tr></table></figure></li>
<li>全局钩子：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span></span><br><span class="line">    pwd=self.cleaned_data.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    r_pwd=self.cleaned_data.get(<span class="string">&#x27;r_pwd&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pwd <span class="keyword">and</span> r_pwd:</span><br><span class="line">        <span class="keyword">if</span> pwd==r_pwd:</span><br><span class="line">            <span class="keyword">return</span> self.cleaned_data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;两次密码不一致&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.cleaned_data</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<ol start="9">
<li><p>捕捉错误模块<br>import traceback<br>return response.ServerErrorResponse(content=traceback.format_exc())</p>
</li>
<li><p>QuerySet转成字典<br>引入模块 from django.forms import model_to_dict</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> model_to_dict</span><br><span class="line"></span><br><span class="line">ret = models.Publish.objects.all()</span><br><span class="line">res = [model_to_dict(obj) <span class="keyword">for</span> obj <span class="keyword">in</span> ret]</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
</li>
<li><p>request.POST 和 request.body 获取数据</p>
</li>
</ol>
<p>前端发送数据格式为 json，是在body里的，且header是application/json,数据在request.body<br>发送数据是form 表单的，request.POST</p>
<ol start="12">
<li>Cors跨域问题</li>
</ol>
<ol start="12">
<li>JWT<br>面试问题：JWT底层实现原理<img src="/2020/11/06/py-skill/jwt%E4%BB%8B%E7%BB%8D.png" class title="objsort">
<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></li>
</ol>
<ul>
<li><p>传统token方式</p>
<blockquote>
<p>用户登录成功后，服务端生成一个随机token给用户，并且在服务端(数据库或缓存)中保存一份token，以后用户再来访问时需携带token，服务端接收到token之后，去数据库或缓存中进行校验token的是否超时、是否合法。</p>
</blockquote>
</li>
<li><p>为什么使用JWT<br>传统方式需要考虑session共享问题,存储中间件压力也很大;<br>使用JWT把后端的压力分摊给前端;<br>和session方式不一样的地方:服务端不再保存session的信息了,而是前端将信息保存在客户端,保存在cookie里面，仅仅是保存。下一次再去请求的时候,从cookie里面把信息拿出来,放到请求的header里面,然后发给服务端,后端进行验证的时候只是从header头里面把token拿出来,进行解密,拿到用户信息以及一些权限,再进行展示处理或者操作。</p>
</li>
</ul>
<ul>
<li><p>jwt方式</p>
<blockquote>
<p>用户登录成功后，服务端通过jwt生成一个随机token给用户（服务端无需保留token），以后用户再来访问时需携带token，服务端接收到token之后，通过jwt对token进行校验是否超时、是否合法。</p>
</blockquote>
</li>
<li><p>三部分</p>
<ul>
<li>Header（头部）<blockquote>
<p>是一个 JSON 对象,主要放JWT元信息;Base64URL进行加密；</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">&quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>Payload（负载）<blockquote>
<p>也是一个 JSON 对象，主要放实际的数据，用来存放实际需要传递的数据。Base64URL进行加密；如name或者工号</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">&quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">&quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>
</li>
<li>Signature（签名）<blockquote>
<p>Signature 部分是对前两部分的签名，防止数据篡改。并且通过secret加密。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">base64UrlEncode(payload),</span><br><span class="line">secret)</span><br></pre></td></tr></table></figure>
<p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>JWT 的使用方式<br>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>
</li>
</ul>
<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>
<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>
<p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p>
<p>前端登录—&gt; 后端验证，返回JWT—&gt;前端把jwt写入cookie（键为token）—&gt;登录验证成功—&gt;跳转前要经过路由守卫,请求前端的Getuserinfo，检验用户是否有权限跳转目标页面；(获取token，如没有，跳转登录页面，如果有token，有权限，然后请求getUserInfo—&gt;getuserinfo作用：查看用户是访问权限，是否有权限访问home页面；访问的时候要求带着token—&gt; 前端的getuserinfo，axios请求到后端的getuserinfo，后端从header头中拿出来进行jwt解密token，验证是否为合法用户(middleware进行进行验证:如果没有token或者为undefined，request.user设置为匿名用户;如果有token，jwt进行解密，可以获取name和id，name和id就是用户登录的时候自定义的数据jwt_data)；解密之后赋值给request.user; —&gt; 后端接口getuserinfo，判断request.user数据是否有值,返回. –&gt;前端判断权限信息</p>
<p>后端接口逻辑:根据业务拿到id或者名字，到DB查询该用户是否有权限，有的话，返回True，没有的话，返回false。一般后端接口data是一些权限的信息</p>
<p>中间件解密，login的时候加密</p>
<ol start="14">
<li>动静态页面区别<br>动态页面：数据每次请求可能不一样，数据是从数据库拿出来渲染的，数据改了，页面就变了。<br>静态页面：数据是固定的，写死的，就是静态页面</li>
</ol>
<p>访问速度：静态&gt;动态</p>
<p>页面静态化：并发量比较高的首页（电商），后台数据如果发生变化，重新生成静态页面</p>
<ol start="15">
<li>web开发模式<blockquote>
<p>前后端混合开发:（前后端不分离）请求动态页面–&gt;查询数据库–&gt;渲染模板–&gt;返回HTML内容(JS在客户端浏览器上执行，所以Ajax是从浏览器里发出去的)</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>前后端分离: 返给前端数据,JS处理数据,JS拿到数据进行DOM渲染</p>
</blockquote>
<ul>
<li>过程:浏览器请求静态页面(不是Django转发的);看到页面后,里面写了一些JS的代码,可以向后端发起请求;返回Json/XML格式的数据,前端就可以渲染页面了.</li>
</ul>
<ol start="16">
<li><p>api接口<br>通过网络,规定了前后台信息交互规则的url连接,也就是前后台交互的媒介。</p>
</li>
<li><p>RESTful API规范</p>
</li>
</ol>
<ol start="18">
<li>生产消费模型</li>
</ol>
<ul>
<li>redis</li>
<li>kafka</li>
<li>rabbitmq</li>
<li>rocketmq<br>消息队列存在哪些问题</li>
<li>如何保证redis/kafka的高可用性</li>
<li>生产的速度&gt;消费的速度 ？ 消息堆积的情况？ 增加消费者</li>
<li>如果保证消息的顺序的可靠性</li>
<li>如何保证生产者消费消息的时候，不重复消费(幂等性)</li>
<li>待补充<br>消息队列的作用：</li>
<li>程序的解耦</li>
<li>削峰</li>
</ul>
<ol start="19">
<li>函数对象（经常用）<br>利用该特性，优雅的取代多分支的if<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    print(<span class="string">&quot;注册&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span>():</span></span><br><span class="line">    print(<span class="string">&quot;转账&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>():</span></span><br><span class="line">    print(<span class="string">&quot;提现&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    func_dic = &#123;</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:[<span class="string">&quot;登录&quot;</span>,register],</span><br><span class="line">        <span class="string">&quot;2&quot;</span>:[<span class="string">&quot;注册&quot;</span>,login],</span><br><span class="line">        <span class="string">&quot;3&quot;</span>:[<span class="string">&quot;转账&quot;</span>,transfer],</span><br><span class="line">        <span class="string">&quot;4&quot;</span>:[<span class="string">&quot;提现&quot;</span>,withdraw],</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> func_dic:</span><br><span class="line">            print(k, func_dic[k][<span class="number">0</span>])</span><br><span class="line">        print(<span class="string">&quot;0 退出&quot;</span>)</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">&quot;请输入您的命令编号: &quot;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> func_dic:</span><br><span class="line">            func_dic[choice][<span class="number">1</span>]()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;请输入正确编号&quot;</span>)</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="20">
<li>for循环原理<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> 迭代器对象.__iter__():</span><br><span class="line">    可以不加区分的调用可迭代对象或者迭代器对象</span><br><span class="line"><span class="keyword">for</span>循环工作原理：</span><br><span class="line">可以称之为迭代器循环</span><br><span class="line"><span class="number">1.</span> d.__iter__()得到一个迭代器对象</span><br><span class="line"><span class="number">2.</span> 迭代器对象.__next__()拿到一个返回值,然后将返回值赋值给k</span><br><span class="line"><span class="number">3.</span> 循环往复步骤<span class="number">2</span>,直到抛出Stopiteration异常<span class="keyword">for</span>循环会捕捉异常然后结束循环</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="21">
<li>变量问题</li>
</ol>
<ul>
<li>os.environ 系统环境变量(所有文件都能看的到) key:value必须为字符串<pre><code>       os.environ[&#39;aaaaaa&#39;] = &#39;111111&#39;</code></pre>
</li>
<li>sys.path   模块的搜索路径</li>
<li>os.path    主要是用于对系统路径文件的操作</li>
<li>PATH       命令执行路径</li>
</ul>
<ol start="22">
<li>路径append<h4 id="项目里面需要注意："><a href="#项目里面需要注意：" class="headerlink" title="项目里面需要注意："></a>项目里面需要注意：</h4></li>
<li>项目内文件相互引用，选择在环境变量里append在启动文件所在的项目根目录。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">print(__file__)) #当前文件的绝对路径</span><br><span class="line">BASE_DIR &#x3D; os.path.dirname(os.path.dirname(__file__))</span><br><span class="line">print(BASE_DIR)</span><br><span class="line">sys.path.append(BASE_DIR)</span><br><span class="line"></span><br><span class="line">LOG_PATH &#x3D; os.path.join(BASE_DIR,&#39;log&#39;,&#39;access.log&#39;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pathlib import Path</span><br><span class="line">res &#x3D; Path(__file__).parent.parent</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="23">
<li><p>原始办法序列化和反序列化<br>str 序列化，eval反序列化<br>eval其实就是执行字符串语句，里面是个字典，那就运行一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;aaa&#x27;</span>:<span class="number">111</span>, <span class="string">&#x27;bbb&#x27;</span>:<span class="number">222</span>&#125;</span><br><span class="line"></span><br><span class="line">print(a,type(a))</span><br><span class="line"></span><br><span class="line">str_a = str(a)</span><br><span class="line"></span><br><span class="line">print(str_a, type(str_a))</span><br><span class="line"></span><br><span class="line">dict_a = eval(str_a)</span><br><span class="line">print(dict_a,type(dict_a))</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志生产配置</p>
</li>
</ol>
<ul>
<li>生产配置<br>1、日志配置字典<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">logging配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录三种日志输出格式</span></span><br><span class="line">standard_format = <span class="string">&#x27;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&#x27;</span> \</span><br><span class="line">                  <span class="string">&#x27;[%(levelname)s][%(message)s]&#x27;</span> <span class="comment"># 其中name为getlogger指定的名字</span></span><br><span class="line">simple_format = <span class="string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&#x27;</span></span><br><span class="line">test_format = <span class="string">&#x27;%(asctime)s] %(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录三种日志输出格式 结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *******************注意1: log文件的目录</span></span><br><span class="line">BASE_PATH = os.path.dirname(os.path.dirname(__file__))</span><br><span class="line">logfile_dir = os.path.join(BASE_PATH, <span class="string">&#x27;log&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># *******************注意2: log文件名</span></span><br><span class="line">logfile_name = <span class="string">&#x27;atm.log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不存在定义的日志目录就创建一个</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(logfile_dir):</span><br><span class="line">    os.mkdir(logfile_dir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># log文件的全路径</span></span><br><span class="line">logfile_path = os.path.join(logfile_dir, logfile_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、日志配置字典</span></span><br><span class="line">LOGGING_DIC = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;standard&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: standard_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: simple_format</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 打印到终端的日志</span></span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,  <span class="comment"># 打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment"># 打印到文件的日志,收集info及以上的日志</span></span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件,日志轮转</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: logfile_path,</span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,  <span class="comment"># 日志文件编码，不用担心中文乱码</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># logging.getLogger(__name__)拿到的logger配置</span></span><br><span class="line">        <span class="string">&#x27;&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>, <span class="string">&#x27;default&#x27;</span>, ],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>, <span class="comment"># 向上(更高level的logger)传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>2、使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># !!!强调!!!</span></span><br><span class="line"><span class="comment"># 1、logging是一个包，需要使用其下的config、getLogger，可以如下导入</span></span><br><span class="line"><span class="comment"># from logging import config</span></span><br><span class="line"><span class="comment"># from logging import getLogger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、也可以使用如下导入</span></span><br><span class="line"><span class="keyword">import</span> logging.config <span class="comment"># 这样连同logging.getLogger都一起导入了,然后使用前缀logging.config.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、加载配置</span></span><br><span class="line">logging.config.dictConfig(settings.LOGGING_DIC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、输出日志</span></span><br><span class="line">logger1=logging.getLogger(<span class="string">&#x27;用户交易&#x27;</span>)</span><br><span class="line">logger1.info(<span class="string">&#x27;egon儿子alex转账3亿冥币&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># logger2=logging.getLogger(&#x27;专门的采集&#x27;) # 名字传入的必须是&#x27;专门的采集&#x27;，与LOGGING_DIC中的配置唯一对应</span></span><br><span class="line"><span class="comment"># logger2.debug(&#x27;专门采集的日志&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">====================================================================</span><br><span class="line">common.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加日志功能：日志功能在接口层使用</span></span><br><span class="line"><span class="comment"># 获取日志对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_logger</span>(<span class="params">log_type</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param log_type: 比如是user日志，bank日志，购物商城日志</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 1. 加载日志配置信息</span></span><br><span class="line">    logging.config.dictConfig(</span><br><span class="line">        settings.LOGGING_DIC</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 获取日志对象</span></span><br><span class="line">    logger = logging.getLogger(log_type)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line">接口层配置==============================================</span><br><span class="line">user_logger = common.get_logger(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">程序位置放置user_logger.info(msg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># formatters 多个日志格式，想用哪一个，直接去取</span><br><span class="line"># handlers 是日志的接收者，不同的handler控制日志输出到不同的位置.console，log</span><br><span class="line"># loggers  日志生产者，产生的日志将会传递给handler然后控制输出</span><br><span class="line"></span><br><span class="line"># 注意：loggers(第一层日志级别关限制)---&gt;handlers(第二层日志级别关卡限制)；loggers 和 handler 通常设置成一样就可以了。</span><br><span class="line"># 如果需要配置多个应用打到一个日志，为了避免重复配置，可配置空key</span><br></pre></td></tr></table></figure>

<ol start="25">
<li>hashlib模块<br>hashlib 加密的必须是bytes类型</li>
</ol>
<ul>
<li><p>字符串加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m.update(<span class="string">&#x27;world&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">res = m.hexdigest()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">m1 = hashlib.md5(<span class="string">&#x27;he&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;llo&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;wor&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;ld&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">res = m1.hexdigest()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件校验（seek随机位置，读取2000个字符）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m2 = hashlib.md5()</span><br><span class="line">f = open(<span class="string">&#x27;a2.log&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f.seek(<span class="number">5</span>)</span><br><span class="line">f.read(<span class="number">20</span>)</span><br><span class="line">m2.update(f.read(<span class="number">20</span>))</span><br><span class="line">res4 = m2.hexdigest()</span><br><span class="line">print(res4)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="26">
<li>Python - r’’, b’’, u’’, f’’ 的含义</li>
</ol>
<ul>
<li>字符串前加 f（重点！敲黑板！）<br>作用：相当于 format() 函数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;帅哥&quot;</span></span><br><span class="line">age = <span class="number">12</span></span><br><span class="line">print(<span class="string">f&quot;my name is <span class="subst">&#123;name&#125;</span>,age is <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>执行结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">my name is 帅哥,age is 12</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串前加 r<br>r””  的作用是：去除转义字符<br>场景：想复制某个文件夹的目录，假设是 F:\Python_Easy\n4\test.py<br>当你不用 r”” ，你有三种写法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;F:\Python_Easy\n4\test.py &quot;</span>)</span><br><span class="line">print(<span class="string">&quot;F:\\Python_Easy\\n4\\test.py &quot;</span>)</span><br><span class="line">print(<span class="string">&quot;F:/Python_Easy/n4/test.py &quot;</span>)</span><br></pre></td></tr></table></figure>
<p>而通常如果直接复制目录路径的话，你就粘贴出来的字符串就是第一行代码所示，所有 \ 会<br>当成转义符；而为了消除转义作用，需要手动再加一个 \ ，否则你也得手动改成第三行代码一样<br><strong>执行结果</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">F:\Python_Easy</span><br><span class="line"><span class="number">4</span>    est.py </span><br><span class="line">F:\Python_Easy\n4\test.py </span><br><span class="line">F:/Python_Easy/n4/test.py </span><br></pre></td></tr></table></figure>
<p>而 r”” 的出现就是为了避免这种情况，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(r&quot;F:\Python_Easy\n4\test.py &quot;)</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong><br>F:\Python_Easy\n4\test.py </p>
<ul>
<li>字符串前加 b<br>b” “的作用是：后面字符串是bytes 类型<br>话不多说，直接上代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;中文&quot;</span>.encode(encoding=<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">print(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode())</span><br><span class="line">print(<span class="string">r&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>执行结果</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br><span class="line">中文</span><br><span class="line">\xe4\xb8\xad\xe6\x96\x87</span><br></pre></td></tr></table></figure>
<p>可以看到，当你不加 b”” 时，他也就是个普通的字符串而已，不会识别为字节类型</p>
<p>bytes应用场景：像图片、音视频等文件的读写就是用bytes数据<br>顺便可以看看字符串和bytes之间的转换是怎么样的：<a href="https://www.cnblogs.com/poloyy/p/12341746.html">https://www.cnblogs.com/poloyy/p/12341746.html</a></p>
<ul>
<li><p>字符串前加 u<br>作用：后面字符串以 Unicode 格式 进行编码<br>实际场景：一般用在中文字符串前面，防止因为源码储存格式问题，导致再次使用时出现乱码。<br>建议所有编码方式采用utf8</p>
</li>
<li><p>每次打印换行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">recv_size = <span class="number">0</span></span><br><span class="line">total_size = <span class="number">33333</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> recv_size &lt; total_size:</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    recv_size += <span class="number">1024</span></span><br><span class="line">    percent = recv_size / total_size</span><br><span class="line">    <span class="keyword">if</span> percent &gt; <span class="number">1</span>:</span><br><span class="line">        percent = <span class="number">1</span></span><br><span class="line">    res = int(<span class="number">50</span> * percent) * <span class="string">&#x27;#&#x27;</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;\r[%-50s] %d%%&#x27;</span> % (res,int(percent*<span class="number">100</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;\r[%-50s] %d%%&#x27;</span> % (res,int(percent*<span class="number">100</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="27">
<li>可变不可变，有序无序<br>不可变数据类型： 是指变量的值发生改变时，其对应的内存地址<strong>发生改变</strong>。<br>数字、字符串、元祖、布尔</li>
</ol>
<p>可变数据类型：是指变量的值发生改变时，其对应的内存地址<strong>不发生改变</strong>。<br>字典、集合、列表</p>
<p>整型（不可变）<br>列表（有序可变）<br>字符串（有序不可变）<br>元组（有序不可变）<br>字典（无序可变）<br>集合（无序可变）</p>
<ol start="28">
<li>需要掌握的<strong>内置方法</strong></li>
<li>isinstance（做类型判断，不推荐用type）<br>判断一个对象是不是累的实例</li>
<li>issubclass<br>判断类是否属于xx子类</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="comment">#判断Foo 是不是 obj 的实例</span></span><br><span class="line"><span class="comment"># print(isinstance(obj,Foo))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(isinstance([],list))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(type(obj) is Foo)</span></span><br><span class="line"><span class="comment"># print(type([1,2]) is list) </span></span><br><span class="line"></span><br><span class="line">print(issubclass(Foo,object))</span><br></pre></td></tr></table></figure>


<ol start="29">
<li>各种数据类型删除操作</li>
</ol>
<ul>
<li><p>列表<br>pop 弹出 ,根据索引删除<br>del 直接删除  根据索引删除<br>remove 直接删除 根据值删除</p>
</li>
<li><p>字典<br>data = info2.pop(“age”) ### 根据键来删除元素,返回值<br>data = info2.popitem:随机删除，返回元祖（key，value）<br>del info2[‘age’]</p>
</li>
</ul>
<ol start="30">
<li>网络相关问题<br>网络号: （ip与掩码位运算）标明是否在同一个局域网<br>ARP协议: 二层交换机工作所在层级，IP –&gt; MAC 地址的映射关系<br>三层为路由协议（公网）<br>网卡（工作在2层）<br>帧：头16字节(源地址mac + 目标地址mac) + 数据部分 1500MTU 一次最多接受1500字节</li>
</ol>
<ul>
<li>子网划分</li>
</ul>
<ol>
<li>192.168.1.2/24 网络位 192.168.1  主机位 .2<br>子网划分，借用主机位，比如划分2个子网<br>2 的 n次方  借用主机位，给后面的主机划分几个子网<br>可用主机地址 2的 y次方 -2   y是为0的主机位个数</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day03</title>
    <url>/2020/08/23/py-day03/</url>
    <content><![CDATA[<p>python基础<br>函数高级操作(名称空间·作用域·函数嵌套·生成器、迭代器、装饰器)</p>
<a id="more"></a>
<h4 id="内容复习"><a href="#内容复习" class="headerlink" title="内容复习 "></a><div id="title">内容复习 </div></h4><p>1.列表：</p>
<ul>
<li>定义：<ul>
<li>li = []</li>
<li>li = list()</li>
</ul>
</li>
<li>增<ul>
<li>append insert</li>
</ul>
</li>
<li>删<ul>
<li>pop  clear</li>
</ul>
</li>
<li>改<ul>
<li>li[3] = ‘newvalue’</li>
</ul>
</li>
<li>查<ul>
<li>for i in li:</li>
<li>for index, value in  enumate(li):</li>
</ul>
</li>
<li>索引<ul>
<li>不管是哪一门语言，只要提到索引，必然起始值从0开始</li>
<li>li[3]</li>
</ul>
</li>
<li>切片<ul>
<li>li = [1,2,3,4,5,6,7,8]</li>
<li>根据索引的下标来去切，并且遵循一个原则，前包后不包 li[2:5]</li>
</ul>
</li>
</ul>
<p>2.字典：</p>
<ul>
<li>定义：<ul>
<li>d = dict() ===&gt; d = dict(name=’szk’, age=13)</li>
<li>d = {}  ===&gt; d = {‘name’:’szk’, ‘age’:13}   推荐</li>
</ul>
</li>
<li>增 或 修改<ul>
<li>d[‘height’] = 178</li>
<li>d.update(height=180)  d.update(xxx=123)</li>
<li>删除<ul>
<li>del d[‘name’]</li>
</ul>
</li>
</ul>
</li>
<li>查：<ul>
<li>遍历所有的键   for k in d.keys()</li>
<li>遍历所有的值   for v in d.values()</li>
<li>遍历所有的键值 for k, v in d.items()  </li>
</ul>
</li>
</ul>
<p>项目中的数据结构：非常重要的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;szk&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">13</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;kkk&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">14</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>3.元组<br>定义：(1,2,)   tuple()<br>4.集合<br>定义：{}  set()  天生去重</p>
<h3 id="函数部分："><a href="#函数部分：" class="headerlink" title="函数部分："></a>函数部分：</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名():</span></span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">函数名()</span><br></pre></td></tr></table></figure>

<p>函数执行的原理：</p>
<blockquote>
<p>函数定义的时候，会开辟一个栈(先进后出)，然后将函数压入栈中，注意此时我们只能操作栈顶的元素。调用函数的时候 函数名() ,就会将函数出栈，执行</p>
</blockquote>
<h4 id="0-函数对象"><a href="#0-函数对象" class="headerlink" title="0.函数对象"></a>0.函数对象</h4><p>函数是第一类对象，即函数可以当作变量去用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1 可以被引用</span><br><span class="line">#2 可以当作参数传递</span><br><span class="line">#3 返回值可以是函数</span><br><span class="line">#3 可以当作容器类型的元素</span><br></pre></td></tr></table></figure>
<ul>
<li>利用该特性，优雅的取代多分支的if<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&quot;登录&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    print(<span class="string">&quot;注册&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span>():</span></span><br><span class="line">    print(<span class="string">&quot;转账&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>():</span></span><br><span class="line">    print(<span class="string">&quot;提现&quot;</span>.center(<span class="number">50</span>,<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    func_dic = &#123;</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:[<span class="string">&quot;登录&quot;</span>,register],</span><br><span class="line">        <span class="string">&quot;2&quot;</span>:[<span class="string">&quot;注册&quot;</span>,login],</span><br><span class="line">        <span class="string">&quot;3&quot;</span>:[<span class="string">&quot;转账&quot;</span>,transfer],</span><br><span class="line">        <span class="string">&quot;4&quot;</span>:[<span class="string">&quot;提现&quot;</span>,withdraw],</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> func_dic:</span><br><span class="line">            print(k, func_dic[k][<span class="number">0</span>])</span><br><span class="line">        print(<span class="string">&quot;0 退出&quot;</span>)</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">&quot;请输入您的命令编号: &quot;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> func_dic:</span><br><span class="line">            func_dic[choice][<span class="number">1</span>]()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;请输入正确编号&quot;</span>)</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-函数嵌套"><a href="#1-函数嵌套" class="headerlink" title="1.函数嵌套"></a>1.函数嵌套</h4><ol>
<li>只要遇见了()就是函数的调用. 如果没有()就不是函数的调用</li>
<li>函数的执行顺序<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">circle</span>(<span class="params">radius,mode=<span class="number">0</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perimiter</span>(<span class="params">radius</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * pi * radius</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span>(<span class="params">radius</span>):</span></span><br><span class="line">        <span class="keyword">return</span> pi * (radius ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> perimiter(radius)</span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> area(radius)</span><br><span class="line"></span><br><span class="line">print(circle(<span class="number">5</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max2</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max4</span>(<span class="params">a,b,c,d</span>):</span></span><br><span class="line">    res1 = max2(a,b,)</span><br><span class="line">    res2 = max2(res1,c)</span><br><span class="line">    res3 = max2(res2,d)</span><br><span class="line">    <span class="keyword">return</span> res3</span><br><span class="line"></span><br><span class="line">res = max4(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
接下来再看一个例子:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span>   </span><br><span class="line">    print(<span class="number">222</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun3</span>():</span></span><br><span class="line">        print(<span class="number">666</span>)</span><br><span class="line">    print(<span class="number">444</span>)</span><br><span class="line">    fun3()</span><br><span class="line">    print(<span class="number">888</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="number">33</span>)</span><br><span class="line">fun2()</span><br><span class="line">print(<span class="number">555</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-名称空间"><a href="#2-名称空间" class="headerlink" title="2. 名称空间"></a>2. 名称空间</h4><blockquote>
<p>名称空间Namespaces：存放名字与其对应的内存地址的地方.是对栈多的一种划分，真正存在的是栈区，名称空间只是一种虚拟的划分。本身只有优先级之分，并无嵌套关系。</p>
</blockquote>
<ul>
<li>名称空间的加载顺序<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python test.py</span><br><span class="line">#1、python解释器先启动，因而首先加载的是：内置名称空间</span><br><span class="line">#2、执行test.py文件，然后以文件为基础，加载全局名称空间</span><br><span class="line">#3、在执行文件的过程中如果调用函数，则临时产生局部名称空间</span><br></pre></td></tr></table></figure></li>
<li>总结<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 名字访问的优先级</span><br><span class="line">     基于自己当前所在的位置向外一层一层查找，LEGB</span><br><span class="line">     局部名称空间---&gt;全局名称空间---&gt;内置名称空间</span><br><span class="line">    #需要注意的是：在全局无法查看局部的，在局部可以查看全局的</span><br><span class="line">    # max&#x3D;1</span><br><span class="line">    def f1():</span><br><span class="line">        # max&#x3D;2</span><br><span class="line">        def f2():</span><br><span class="line">            # max&#x3D;3</span><br><span class="line">            print(max)</span><br><span class="line">        f2()</span><br><span class="line">    f1()</span><br><span class="line">    print(max)</span><br><span class="line">2. 名称空间的&quot;嵌套&quot;关系是函数定义阶段、扫描语法时生成的，与调用位置无关</span><br><span class="line">案例1：</span><br><span class="line">x &#x3D; 222</span><br><span class="line">def f1():</span><br><span class="line">    print(x)</span><br><span class="line">    x &#x3D; 111</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3. 作用域"></a>3. 作用域</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、作用域即范围</span><br><span class="line">    - 全局范围（内置名称空间+全局名称空间属于该范围）：全局存活，全局有效</span><br><span class="line">    - 局部范围（局部名称空间属于该范围）：临时存活，局部有效</span><br><span class="line">#2、作用域关系是在函数定义阶段就已经固定的，与函数的调用位置无关，如下</span><br></pre></td></tr></table></figure>

<ul>
<li>gloabal<br>首先我们写这样一个代码, 首先在全局声明一个变量, 然后再局部调用这个变量, 并改变这 个变量的值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 100</span><br><span class="line">def func():   </span><br><span class="line">    global a    # 加了个global表示不再局部创建这个变量了. 而是直接使用全局的a   </span><br><span class="line">    a &#x3D; 28   </span><br><span class="line">print(a)</span><br><span class="line">func()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>变量污染，很少使用</strong></p>
<blockquote>
<p>global表示. 不再使用局部作用域中的内容了. 而改用全局作用域中的变量</p>
</blockquote>
<ul>
<li><p>nonlocal(了解): 修改函数外层函数包含的名字对应的值（不可变类型）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &#x3D; 0</span><br><span class="line">def f1():</span><br><span class="line">    x &#x3D; 11</span><br><span class="line">    def f2():</span><br><span class="line">        global x</span><br><span class="line">        x &#x3D; 22</span><br><span class="line">    f2()</span><br><span class="line">    print(&#39;f1内的x&#39;,x)</span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">global ---&gt; nolocal</span><br></pre></td></tr></table></figure>
</li>
<li><p>重点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.查找原则- LEGB</span><br><span class="line">2.名称空间只有优先级之分，本身并无嵌套关系，画图只是方便理解</span><br><span class="line">3.名称空间的其那套关系决定了名字的查找顺序；而名称空间的嵌套关系是以函数定义阶段为准的，即函数的嵌套关系与名字的查找顺序是在定义阶段就已经确定好了的。</span><br><span class="line"></span><br><span class="line">x &#x3D; 111</span><br><span class="line">def f1():</span><br><span class="line">    print(x)</span><br><span class="line">    x &#x3D; 222</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-闭包函数"><a href="#4-闭包函数" class="headerlink" title="4. 闭包函数"></a>4. 闭包函数</h4><ul>
<li><p>闭包函数 = 名称空间与作用域 + 函数嵌套 + 函数对象</p>
<blockquote>
<p>核心点：名字的查找关系是以函数定义阶段为准</p>
</blockquote>
</li>
<li><p>什么是闭包函数:</p>
<blockquote>
<p>“闭”函数指的是该函数是内嵌函数<br>“包”函数指的是该函数包含对外层函数作用域名字的引用(不是对全局作用域)</p>
</blockquote>
</li>
<li><p>闭包函数：函数对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def f1():</span><br><span class="line">    x &#x3D; 33333333</span><br><span class="line">    def f2():</span><br><span class="line">        print(&#39;函数f2: &#39;,x)</span><br><span class="line">    return f2</span><br><span class="line">f &#x3D; f1()</span><br><span class="line"></span><br><span class="line">def foo():</span><br><span class="line">    x &#x3D; 555</span><br><span class="line">    f()</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>为什么要有闭包函数 -&gt; 闭包函数的应用</strong></p>
</li>
<li><p>为函数体传参的两种方式<br>方式一: 直接把函数体需要的参数定义成形参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    print(len(response.text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">get(<span class="string">&#x27;http://www.zhihu.com&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>方式二: 闭包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        print(len(response.text))</span><br><span class="line">    <span class="keyword">return</span> get</span><br><span class="line"></span><br><span class="line">baidu = outter(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">baidu()</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="5-装饰器"><a href="#5-装饰器" class="headerlink" title="5.装饰器"></a>5.装饰器</h4><ol>
<li>装饰器（闭包函数的应用）</li>
</ol>
<ul>
<li><p>1、开放封闭原则<br>  软件一旦上之后就应该开放封闭原则<br>  具体是指对修改是封闭的，但对扩展是开放的</p>
</li>
<li><p>2、什么是装饰器<br>  装饰就是修饰，器指的就是工具<br>  装饰器本身可以是任意可调用的对象<br>  被装饰的对象也可以是任意可调用的对象</p>
<p>  装饰器—&gt;函数<br>  被装饰的对象=&gt;函数</p>
<p>  装饰器是用来为被装饰对象添加新功能的一种工具<br>  必须遵循：</p>
<pre><code>  1、不能修改被装饰对象的源代码
  2、不能修改被装饰对象的调用方式</code></pre>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;from home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># func=index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        start_time=time.time()</span><br><span class="line">        func()</span><br><span class="line">        end_time=time.time()</span><br><span class="line">        print(<span class="string">&#x27;run time is %s&#x27;</span> %(end_time - start_time))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index=outter(index)</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>装饰器修正+装饰器语法糖</p>
<blockquote>
<p>如果有返回值，则在内层函数定义res ，末尾return；<br>内层函数接收参数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span>(<span class="params">func</span>):</span> <span class="comment">#func用来接收被装饰的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span> <span class="comment">#这个功能是给原始的函数用的</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs) <span class="comment">#拿到返回值</span></span><br><span class="line">        stop_time=time.time()</span><br><span class="line">        print(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time - start_time))</span><br><span class="line">        <span class="comment"># return res</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer # index=timmer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome to index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer #home=timmer(home)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome %s to home page&#x27;</span> %name)</span><br></pre></td></tr></table></figure>
</li>
<li><p>无参装饰器模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 总结无参装饰器模板</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 1. 调原函数</span></span><br><span class="line">        <span class="comment"># 2. 为其增加新功能</span></span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">wrapper内需要func ,往里一缩，加入outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><strong>@的作用</strong><blockquote>
<p>@名字  home = 名字(home)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def home():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li>
<li>+内置函数伪装<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(fuinc)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        res = func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">     <span class="comment"># 手动将原函数的属性赋值给wrapper函数</span></span><br><span class="line">     <span class="comment"># 1. 函数wrapper.__name__ = 原函数.__name__</span></span><br><span class="line">     <span class="comment"># 2. 函数wrapper.__doc__ = 原函数.__doc__</span></span><br><span class="line">     <span class="comment">#  wrapper.__name__ = func.__name__</span></span><br><span class="line">     <span class="comment">#  wrapper.__doc__ = func.__doc__</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">wrapper内需要func ,往里一缩，加入outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;from index&#x27;</span>)</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="4">
<li>叠加装饰器<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco1</span>(<span class="params">func1</span>):</span>  <span class="comment"># func1 = wrapper2的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper1</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;=======&gt;wrapper1&#x27;</span>)</span><br><span class="line">        res1 = func1(*args,**kwargs)</span><br><span class="line">        print(<span class="string">&#x27;===&gt;end wrapper1&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res1</span><br><span class="line">    <span class="keyword">return</span> wrapper1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco2</span>(<span class="params">func2</span>):</span>  <span class="comment"># func2 = wrapper3的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper2</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;=======&gt;wrapper2&#x27;</span>)</span><br><span class="line">        res2 = func2(*args,**kwargs)</span><br><span class="line">        print(<span class="string">&#x27;===&gt;end wrapper2&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res2</span><br><span class="line">    <span class="keyword">return</span> wrapper2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco3</span>(<span class="params">func3</span>):</span>  <span class="comment"># func3 = 最原始的index的内存地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper3</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;=======&gt;wrapper3&#x27;</span>)</span><br><span class="line">        res3 = func3(*args,**kwargs)</span><br><span class="line">        print(<span class="string">&#x27;===&gt;end wrapper3&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res3</span><br><span class="line">    <span class="keyword">return</span> wrapper3</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco1</span></span><br><span class="line"><span class="meta">@deco2</span></span><br><span class="line"><span class="meta">@deco3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;index %s %s&#x27;</span>%(a,b))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123123123123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(index(<span class="number">1111</span>,<span class="number">2222</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 叠加多个装饰器</p>
</blockquote>
</li>
</ol>
<p><strong>1.加载顺序(outter函数的调用顺序):自下而上</strong><br><strong>2.执行顺序(wrapper函数的执行顺序):自上而下</strong></p>
<ol start="5">
<li>有参装饰器<br>eg: 引入参数的例子<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">db_type</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deco</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            name = input(<span class="string">&#x27;pls input your username&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">            password = input(<span class="string">&#x27;pls input your username&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> db_type == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                print(<span class="string">&quot;基于文件的验证&quot;</span>)</span><br><span class="line">                <span class="comment"># 从文件中验证用户名和密码</span></span><br><span class="line">                <span class="keyword">if</span> name == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">                    res = func(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">&quot;用户认证失败....&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> db_type == <span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">                print(<span class="string">&quot;基于mysql的验证&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> db_type == <span class="string">&#x27;ldap&#x27;</span>:</span><br><span class="line">                print(<span class="string">&quot;基于ldap的验证&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;不支持该db_type&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(db_type=&#x27;file&#x27;)  # 基于数据库的验证 #deco  #index=deco(index) #index=wrapper #index(1,2) = wrapper(1,2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">page</span>):</span></span><br><span class="line">    print(<span class="string">&quot;welcome home page %s&quot;</span> % (page))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(db_type=&#x27;sql&#x27;)  # 账号密码来源是文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;home---&gt;%s&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(db_type=&#x27;ldap&#x27;)  # 账号密码来源是ldap</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span>(<span class="params">money</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;transfer---&gt;%s&#x27;</span> % money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index(<span class="string">&#x27;egon&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_user = &#123;<span class="string">&#x27;login&#x27;</span>:<span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> current_user[<span class="string">&#x27;login&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        user = input(<span class="string">&#x27;username&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        passwd = input(<span class="string">&#x27;passwd&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span>  user == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> passwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            current_user[<span class="string">&#x27;login&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome to index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome %s to home page&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">home(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>引入参数<br>func 用来接收被装饰的函数<br>wrapper(*args,**kwargs): #这个功能是给原始的函数用的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_user=&#123;<span class="string">&#x27;login&#x27;</span>:<span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">engine</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">            <span class="keyword">if</span> current_user[<span class="string">&#x27;login&#x27;</span>]:</span><br><span class="line">                <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line"></span><br><span class="line">            user=input(<span class="string">&#x27;username&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">            pwd=input(<span class="string">&#x27;password&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> engine == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> user == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">                    current_user[<span class="string">&#x27;login&#x27;</span>]=<span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">                print(<span class="string">&#x27;基于mysql数据的认证&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">&#x27;ldap&#x27;</span>:</span><br><span class="line">                print(<span class="string">&#x27;基于ldap的认证方式&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(engine=&#x27;mysql&#x27;) # @outter # index=outter(index) #index=wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome to index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(engine=&#x27;ldap&#x27;) # @outter # home=outter(home) #home=wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome %s to home page&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">home(<span class="string">&#x27;egon&#x27;</span>)</span><br></pre></td></tr></table></figure>


<blockquote>
<p>装饰器原理：就是闭包函数的应用。 @auth(engine=’file’)，执行的过程为拿到outter内存地址+engine=’file’; @outter(func) 执行的过程为 把他正下方的函数名当做参数传入，得到的结果重新赋值给index index = @outter(index),index拿到的是outter的调用结果，index = wrapper; wrapper函数内打开就可以看到，要访问一个func，问上一层outter要，enggine没有，再上一层要，auth。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">engine</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>)</span></span><br><span class="line"><span class="function">            ....</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">wrapper</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结: wrapper(*args,**kwargs) 这个参数的功能是给原始函数用的；outter(func)，用来装被修饰的函数，auth(engine) 传给内层需要的函数。三层足够使用，最外层可以无限的延伸参数。</p>
</blockquote>
<ol start="6">
<li><strong>有参数装饰器模板</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 有参装饰器(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@有参装饰器(1,y=1,z=2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 被装饰对象():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>




</li>
</ol>
<h4 id="6-内置函数"><a href="#6-内置函数" class="headerlink" title="6. 内置函数"></a>6. 内置函数</h4><p>就是python给你提供的. 拿来直接用的函数, 比如print., input等等.</p>
<img src="/2020/08/23/py-day03/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.jpg" class title="内置函数">
<p><strong>迭代器相关</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">range()</span><br><span class="line">next()</span><br><span class="line">迭代器向下执⾏一次, 内部实际使用了next()方法返回迭代器的下一个项目</span><br></pre></td></tr></table></figure>
<p><strong>iter()</strong></p>
<blockquote>
<p>获取迭代器, 内部实际使用的是iter()方法来获取迭代器</p>
</blockquote>
<p><strong>eval()</strong></p>
<blockquote>
<p>字符串类型代码的执行<br>执行部分字符串类型的代码,并返回最终结果</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(eval(&quot;2+2&quot;))</span><br><span class="line"># 4</span><br><span class="line">n &#x3D; 8</span><br><span class="line">print(eval(&quot;2+n&quot;))</span><br><span class="line"># 10</span><br><span class="line">def func():</span><br><span class="line">    print(666)</span><br><span class="line">eval(&quot;func()&quot;)</span><br><span class="line"># 666</span><br></pre></td></tr></table></figure>
<p><strong>exec()</strong></p>
<blockquote>
<p>执行字符串类型的代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msg &#x3D; &#39;&#39;&#39;</span><br><span class="line">def func():</span><br><span class="line">    print(&#39;有计划没行动等于零&#39;)</span><br><span class="line">func()</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">exec(msg)</span><br></pre></td></tr></table></figure>
<p>以上这两个在公司开发中禁止使用,如果里边出现<strong>del</strong>就会出现很大的问题</p>
<p><strong>输入和输出相关</strong><br><strong>input()</strong></p>
<blockquote>
<p>获取用户输入的内容</p>
</blockquote>
<p><strong>print()</strong></p>
<blockquote>
<p>打印输出</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&#39;你好&#39;,&#39;我好&#39;)    </span><br><span class="line">print(&#39;你好&#39;,&#39;我好&#39;,sep&#x3D;&#39;|&#39;)</span><br><span class="line">结果:</span><br><span class="line">你好 我好</span><br><span class="line">你好|我好</span><br></pre></td></tr></table></figure>
<p><strong>sep</strong>是将多个元素进行修改 默认的是空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&#39;你好&#39;)</span><br><span class="line">print(&#39;我好&#39;)</span><br><span class="line">print(&#39;你好&#39;,end&#x3D;&#39;&#39;)</span><br><span class="line">print(&#39;我好&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>end</strong>默认是\n 这就是我们为什么使用print的时候会出现换行,end的值修改成了空字符串</p>
<p><strong>id()</strong></p>
<blockquote>
<p>获取到对象的内存地址</p>
</blockquote>
<p><strong>调用相关</strong></p>
<p><strong>callable()</strong></p>
<blockquote>
<p>用于检查一个对象是否是可调用的. 如果返回True, object有可能调用失败, 但如果返回False. 那调用绝对不会成功</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(callable(print))</span><br><span class="line">结果:</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p><strong>查看内置属性</strong><br><strong>dir()</strong></p>
<blockquote>
<p>查看对象的内置属性</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(dir(list))</span><br><span class="line">结果:</span><br><span class="line">[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;]</span><br></pre></td></tr></table></figure>

<p><strong>基础数据类型相关</strong><br>数字相关<br><strong>​- bool()</strong> 将给定的数据转换成bool值. 如果不给值. 返回False<br>​**- int()** 将给定的数据转换成int值. 如果不给值, 返回0<br><strong>​- ﬂoat()</strong> 将给定的数据转换成ﬂoat值. 也就是小数<br>​数学运算<br>​<strong>abs()</strong> 返回绝对值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:  print(abs(-1))</span><br><span class="line">2:  结果:</span><br><span class="line">3:  1</span><br></pre></td></tr></table></figure>

<p><strong>divmod()</strong> 返回商和余数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(divmod(15,2))</span><br><span class="line">结果:</span><br><span class="line">(7, 1)</span><br></pre></td></tr></table></figure>

<p><strong>​round()</strong> 四舍五入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(round(15.1111,2))  # 保留2位小数</span><br><span class="line">结果:</span><br><span class="line">15.11</span><br></pre></td></tr></table></figure>
<p>​<br><strong>pow(a, b)</strong> 求a的b次幂, 如果有三个参数. 则求完次幂后对第三个数取余</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(pow(15,2,3))</span><br><span class="line">结果:</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<p><strong>​sum()</strong> 求和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(sum([12,3,4]))  #sum里边的参数是一个可迭代对象</span><br><span class="line">结果:</span><br><span class="line">19</span><br></pre></td></tr></table></figure>

<p><strong>​​min()</strong> 求最小值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(min([12,3,4]))  # 寻找最小的数字</span><br><span class="line">结果:</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>​<strong>max()</strong> 求最大值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(max([12,3,4]))  # 寻找最大的数字</span><br><span class="line">结果:</span><br><span class="line">12</span><br><span class="line">max的工作原理就是迭代对象里的值，迭代的是什么返回什么，字典就是key；能改变的是别让迭代出来的值当比较依据.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max(iterable, key&#x3D;func)</span><br><span class="line"></span><br><span class="line">salaries &#x3D; &#123;&#39;aaa&#39;: 1000, &#39;bbb&#39;:1100, &#39;ccc&#39;:1200, &#39;dddd&#39;:13000&#125;</span><br><span class="line"></span><br><span class="line">def func(x):</span><br><span class="line">    return salaries[x]</span><br><span class="line"></span><br><span class="line">res &#x3D; max(salaries, key&#x3D;func)</span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>数据结构相关</strong><br>列表和元组:</p>
<ul>
<li>list() 将一个可迭代对象转换成列表</li>
<li>tuple() 将一个可迭代对象转换成元组</li>
<li>reversed() 将一个序列翻转, 返回翻转序列的迭代器</li>
</ul>
<p><strong>reversed</strong> 示例:<br><code>l = reversed(&#39;你好&#39;)  # l 获取到的是一个生成器 print(list(l))</code></p>
<p><strong>数据结构相关</strong><br>列表和元组:</p>
<ul>
<li>list() 将一个可迭代对象转换成列表</li>
<li>tuple() 将一个可迭代对象转换成元组</li>
<li>reversed() 将一个序列翻转, 返回翻转序列的迭代器</li>
</ul>
<p><strong>reversed</strong> 示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l &#x3D; reversed(&#39;你好&#39;)  # l 获取到的是一个生成器</span><br><span class="line">print(list(l))</span><br></pre></td></tr></table></figure>
<p><strong>bytes()</strong> 把字符串转换成bytes类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 :  s &#x3D; &#39;你好武大&#39;</span><br><span class="line">2 :  bs &#x3D; s.encode(&#39;utf-8&#39;)</span><br><span class="line">3 :  print(bs)</span><br><span class="line">4 :  结果:b&#39;\xe4\xbd\xa0\xe5\xa5\xbd\xe6\xad\xa6\xe5\xa4\xa7&#39;</span><br><span class="line">5 :  s1 &#x3D; bs.decode(&#39;utf-8&#39;)</span><br><span class="line">6 :  print(s1)</span><br><span class="line">7 :  结果: 你好武大</span><br><span class="line">8 :  s &#x3D; &#39;你好&#39;</span><br><span class="line">9 :  bs &#x3D; bytes(s,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">10:  print(bs)</span><br><span class="line">11:  # 将字符串转换成字节</span><br><span class="line">12:  bs1 &#x3D; str(bs,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">13:  print(bs1)</span><br><span class="line">14:  # 将字节转换成字符串</span><br></pre></td></tr></table></figure>

<p><strong>数据集合</strong></p>
<ul>
<li>dict() 创建一个字典</li>
<li>set() 创建一个集合</li>
<li>len() 返回一个对象的元素个数</li>
<li>enumerate() 获取枚举对象</li>
</ul>
<p><strong>enumerate()</strong> 举例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lst &#x3D; [&#39;zhangsan&#39;,&#39;lisi&#39;,&#39;wangwu&#39;]</span><br><span class="line">for i,k in enumerate(lst):</span><br><span class="line">    print(&#39;这是序号&#39;,i)</span><br><span class="line">    print(&#39;这是元素&#39;,k)</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">**zip()** 函数用于将可迭代的对象作为参数,将对象中对应的元素打包成一个个元祖,</span><br><span class="line">然后返回由这些元祖组成的内容,如果各个迭代器的元素个数不一致,则按照长度最短的返回</span><br></pre></td></tr></table></figure>
<p>lst1 = [1,2,3]<br>lst2 = [‘a’,’b’,’c’,’d’]<br>lst3 = (11,12,13,14,15)<br>for i in zip(lst1,lst2,lst3):<br>    print(i)<br>结果:<br>(1, ‘a’, 11)<br>(2, ‘b’, 12)<br>(3, ‘c’, 13)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**lambda**</span><br><span class="line">&gt; 匿名函数,一句话函数；用于临时调用一次的场景：更多的是将匿名函数与其他函数配合使用</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">def func(n):</span><br><span class="line">    return n**n</span><br><span class="line">print(func(4))</span><br><span class="line">f &#x3D; lambda x: x**x</span><br><span class="line">print(f(4))</span><br><span class="line">结果:</span><br><span class="line">256</span><br><span class="line">256</span><br><span class="line"></span><br><span class="line">salaries &#x3D; &#123;&#39;aaa&#39;: 1000, &#39;bbb&#39;:1100, &#39;ccc&#39;:1200, &#39;dddd&#39;:13000&#125;</span><br><span class="line"></span><br><span class="line">def func(x):</span><br><span class="line">    return salaries[x]</span><br><span class="line"></span><br><span class="line">res &#x3D; max(salaries, key&#x3D;lambda k:salaries[k])</span><br><span class="line">print(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>lambda</strong>表示的是匿名函数,不需要用<strong>def</strong>来声明,一句话就可以声明出一个函数<br>语法:<br>　　函数名 = <strong>lambda</strong> 参数:返回值<br>注意:<br>　　1. 函数的参数可以有多个,多个参数之间用逗号隔开<br>　　2. 匿名函数不管多复杂.只能写一行.且逻辑结束后直接返回数据<br>　　3. 返回值和正常的函数一样,可以是任意数据类型,返回值的时候只能返回一个不能返回多个匿名函数并不是说一定没有名字,这里前面的变量就是一个函数名,说他是匿名原因是我们通过name查看的时候是没有名字的.统一都叫做lambda.在调用的时候没有什么特别之处,像正常的函数调用既可</p>
<p><strong>sorted</strong><br>排序函数</p>
<blockquote>
<p>语法:sorted(iterable,key=None,reverse=False)</p>
</blockquote>
<p><strong>iterable</strong> : 可迭代对象<br><strong>key</strong>: 排序规则(排序函数),在<strong>sorted</strong>内部会将可迭代对象中的每一个元素传递给这个函数的参数.根据函数运算的结果进行排序<br><strong>reverse</strong> :是否是倒叙,True 倒叙 False 正序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lst &#x3D; [1,3,2,5,4]</span><br><span class="line">lst2 &#x3D; sorted(lst)</span><br><span class="line">print(lst)    #原列表不会改变</span><br><span class="line">print(lst2)   #返回的新列表是经过排序的</span><br><span class="line">lst3 &#x3D; sorted(lst,reverse&#x3D;True)</span><br><span class="line">print(lst3)   #倒叙</span><br><span class="line">结果:</span><br><span class="line">[1, 3, 2, 5, 4]</span><br><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">[5, 4, 3, 2, 1]</span><br></pre></td></tr></table></figure>
<p>字典使用<strong>sorted</strong>排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dic &#x3D; &#123;1:&#39;a&#39;,3:&#39;c&#39;,2:&#39;b&#39;&#125;</span><br><span class="line">print(sorted(dic))   # 字典排序返回的就是排序后的key</span><br><span class="line">结果:</span><br><span class="line">[1,2,3]</span><br><span class="line"></span><br><span class="line">salaries &#x3D; &#123;</span><br><span class="line">  &#39;szk&#39;:30000,</span><br><span class="line">  &#39;zhangsan&#39;:888888888,</span><br><span class="line">  &#39;nick&#39;:2000,</span><br><span class="line">  &#39;pounds&#39;:100</span><br><span class="line">&#125;</span><br><span class="line">sorted(salaries, key&#x3D;lambda name:salaries[name])</span><br></pre></td></tr></table></figure>


<h5 id="2-匿名函数-lambada-面试问的较多"><a href="#2-匿名函数-lambada-面试问的较多" class="headerlink" title="2.匿名函数 lambada  面试问的较多"></a>2.匿名函数 lambada  面试问的较多</h5><h5 id="3-map、reduce、filter"><a href="#3-map、reduce、filter" class="headerlink" title="3.map、reduce、filter"></a>3.map、reduce、filter</h5><p>函数map、reduce、filter都支持迭代器协议，用来处理可迭代对象，我们以一个可迭代对象array为例来介绍它们三个的用法</p>
<ul>
<li>map函数会根据提供的函数对指定序列做映射。<ul>
<li>map的作用是以参数序列中的每一个元素调用function函数，返回包含每次function函数返回值的list。</li>
</ul>
</li>
<li>filter函数会对指定序列执行过滤操作。<ul>
<li>filter函数会对序列参数sequence中的每个元素调用function函数，最后返回的结果包含调用结果为True的元素。返回值的类型和参数sequence的类型相同</li>
</ul>
</li>
<li>reduce函数，reduce函数会对参数序列中元素进行累积。<ul>
<li>function参数是一个有两个参数的函数，reduce依次从sequence中取一个元素，和上一次调用function的结果做参数再次调用function。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array&#x3D;[1,2,3,4,5]</span><br></pre></td></tr></table></figure>
要求一：对array的每个元素做平方处理，可以使用map函数<br>map函数可以接收两个参数，一个是函数，另外一个是可迭代对象，具体用法如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res&#x3D;map(lambda x:x**2,array)</span><br><span class="line">&gt;&gt;&gt; res</span><br><span class="line">&lt;map object at 0x1033f45f8&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
解析：map会依次迭代array，得到的值依次传给匿名函数（也可以是有名函数），而map函数得到的结果仍然是迭代器。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(res) #使用list可以依次迭代res，取得的值作为列表元素</span><br><span class="line">[1, 4, 9, 16, 25]</span><br></pre></td></tr></table></figure>
要求二：对array进行合并操作，比如求和运算，这就用到了reduce函数<br>reduce函数可以接收三个参数，一个是函数，第二个是可迭代对象，第三个是初始值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># reduce在python2中是内置函数，在python3中则被集成到模块functools中，需要导入才能使用</span><br><span class="line">&gt;&gt;&gt; from functools import reduce </span><br><span class="line">&gt;&gt;&gt; res&#x3D;reduce(lambda x,y:x+y,array)</span><br><span class="line">&gt;&gt;&gt; res</span><br><span class="line">15</span><br></pre></td></tr></table></figure>
解析：</li>
</ul>
</li>
</ul>
<p>1 没有初始值，reduce函数会先迭代一次array得到的值作为初始值，作为第一个值数传给x，然后继续迭代一次array得到的值作为第二个值传给y，运算的结果为3</p>
<p>2 将上一次reduce运算的结果作为第一个值传给x，然后迭代一次array得到的结果作为第二个值传给y，依次类推，知道迭代完array的所有元素，得到最终的结果15</p>
<p>也可以为reduce指定初始值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res&#x3D;reduce(lambda x,y:x+y,array,100) &gt;&gt;&gt; res</span><br><span class="line">115</span><br></pre></td></tr></table></figure>
<p>要求三：对array进行过滤操作，这就用到了filter函数，比如过滤出大于3的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; res&#x3D;filter(lambda x:x&gt;3,array)</span><br></pre></td></tr></table></figure>
<p>解析：filter函数会依次迭代array，得到的值依次传给匿名函数，如果匿名函数的返回值为真，则过滤出该元素，而filter函数得到的结果仍然是迭代器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(res) </span><br><span class="line">[4, 5]</span><br></pre></td></tr></table></figure>
<p>提示：我们介绍map、filter、reduce只是为了带大家了解函数式编程的大致思想，在实际开发中，我们完全可以用列表生成式或者生成器表达式来实现三者的功能。</p>
<h4 id="7-迭代器-和-for循环机制-面试中的重点"><a href="#7-迭代器-和-for循环机制-面试中的重点" class="headerlink" title="7. 迭代器 和 for循环机制 面试中的重点"></a>7. 迭代器 和 for循环机制 面试中的重点</h4><ul>
<li><p>为什么要有迭代器</p>
<blockquote>
<p>要有一种不依赖于索引的取值方案</p>
</blockquote>
</li>
<li><p>可迭代对象</p>
<blockquote>
<p>列表,字符串,元祖,字典,集合,文件对象</p>
</blockquote>
</li>
<li><p>迭代器对象</p>
<blockquote>
<p>文件对象</p>
</blockquote>
</li>
</ul>
<p>可迭代对象</p>
<blockquote>
<p>“可以转成迭代器对象”;但凡有_iter__()方法都称之为可迭代对象</p>
</blockquote>
<p>调用可迭代对象._iter__():得到迭代器对象</p>
<p>迭代器对象</p>
<blockquote>
<p>既有包含<strong>iter</strong>() 同时包含<strong>next</strong>().</p>
</blockquote>
<p>  迭代器.<em>next__(): 得到迭代器的下一个值<br>  迭代器.<em>iter</em></em>(): 得到迭代器的本身,说白了调与没调一个样</p>
<ul>
<li><strong>for循环工作原理</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; &#123;&#39;a&#39;:1, &#39;b&#39;:2, &#39;c&#39;:3&#125;</span><br><span class="line">for x in 迭代器对象.__iter__():</span><br><span class="line">    可以不加区分的调用可迭代对象或者迭代器对象</span><br><span class="line">for循环工作原理：</span><br><span class="line">可以称之为迭代器循环</span><br><span class="line">1. 可迭代对象.__iter__()得到一个迭代器对象</span><br><span class="line">2. 迭代器对象.__next__()拿到一个返回值,然后将返回值赋值给k</span><br><span class="line">3. 循环往复步骤2,直到抛出Stopiteration异常for循环会捕捉异常然后结束循环</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 迭代器不能反复,只能向下执行,并且是一次性的.获取过了就不能在获取了。</p>
</blockquote>
</li>
</ul>
<p>总结:</p>
<ul>
<li><p>Iterator: 迭代器. 内部包含<strong>iter</strong>() 同时包含<strong>next</strong>().</p>
</li>
<li><p>迭代器的优点:</p>
</li>
</ul>
<ol start="0">
<li>提供一种新的，统一的取值方式（不依赖于索引的key）</li>
<li>节省内存.</li>
<li>惰性机制</li>
</ol>
<ul>
<li>迭代器的缺点:</li>
</ul>
<ol>
<li>不能反复, 只能向下执行.</li>
<li>取值不灵活</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">print(dir(a))  <span class="comment"># dir查看对象的方法和函数</span></span><br><span class="line"><span class="comment"># 在打印结果中寻找__iter__ 如果存在就表示当前的这个类型是个可迭代对象</span></span><br></pre></td></tr></table></figure>

<h4 id="4-生成器-面试中的重点"><a href="#4-生成器-面试中的重点" class="headerlink" title="4.生成器  面试中的重点"></a>4.生成器  面试中的重点</h4><ul>
<li><p>生成器定义<br>生成器的本质就是迭代器，因此我们可以使用迭代器中的__next__方法来获取元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">22</span>  <span class="comment">### 将return换成yield关键字即可</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="comment"># print(ret.__next__())</span></span><br><span class="line"><span class="comment"># print(ret)  ### &lt;generator object func at 0x103cc80b0&gt; 生成器的对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_range</span>(<span class="params">start, stop, step</span>):</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = my_range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>x=yield g.send</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def dog(name):</span><br><span class="line">    print(&#39;倒戈%s准备吃东西了....&#39; %name)</span><br><span class="line">    while True:</span><br><span class="line">        # x 拿到的是yield返回值</span><br><span class="line">        x &#x3D; yield 默认是None</span><br><span class="line">        print(&#39;倒戈%s准备吃东西了..%s..&#39; %(name,x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g.send 意思就是yield接受到的值赋值给x</span><br><span class="line"></span><br><span class="line">g &#x3D; dog(&#39;alex&#39;)</span><br><span class="line">g.send(None) #   &#x3D;&#x3D; next(g)</span><br><span class="line">g.send(&#39;adasd&#39;)   </span><br><span class="line">g.close()  # 关闭之后无法传值</span><br><span class="line">g.send(&#39;13123&#39;)  # 报错</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>理解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span>(<span class="params">name</span>):</span></span><br><span class="line">    food_list = []</span><br><span class="line">    print(<span class="string">&#x27;倒戈%s准备吃东西了....&#x27;</span> % name)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># x 拿到的是yield返回值</span></span><br><span class="line">        x = <span class="keyword">yield</span> food_list</span><br><span class="line">        print(<span class="string">&#x27;倒戈%s准备吃东西了..%s..&#x27;</span> %(name,x))</span><br><span class="line">        food_list.append(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = dog(<span class="string">&#x27;alex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res = g.send(<span class="literal">None</span>) <span class="comment"># next(g)</span></span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">res = g.send(<span class="string">&#x27;宫保鸡鸡&#x27;</span>)</span><br><span class="line"><span class="comment">#&#x27;倒戈%s准备吃东西了..%s..&#x27; %(name,宫保鸡鸡)</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><p>return 和 yield 的区别</p>
<ul>
<li>有了yield关键字，我们就有了一种自定义迭代器的实现方式。yield可以用于返回值，但不同于return，函数一旦遇到return就结束了，而yield可以保存函数的运行状态挂起函数，用来返回多次值</li>
<li>yield是分段来执行一个函数,yield可以出现多次</li>
<li>return是直接停止这个函数,return可以出现多次但是只会执行到第一个就结束了</li>
</ul>
</li>
<li><p>生成器的好处</p>
<ul>
<li>节省内存<br>python中提供的生成器：</li>
</ul>
</li>
</ul>
<p>1.生成器函数(yield)    2.生成器表达式(res = (i for i in range(5)))</p>
<p>总结：生成器一定是迭代器，但是迭代器就不一定是生成器</p>
<h4 id="5-列表生成式和字典生成式-项目中的重点"><a href="#5-列表生成式和字典生成式-项目中的重点" class="headerlink" title="5.列表生成式和字典生成式 []  项目中的重点"></a>5.列表生成式和字典生成式 []  项目中的重点</h4><ol>
<li>列表推导式的常⽤写法:</li>
</ol>
<blockquote>
<p>[结果 for 变量 in 可迭代对象]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls &#x3D; [i for i in range(10)]</span><br><span class="line">print(ls)</span><br></pre></td></tr></table></figure>
<p>筛选模式</p>
<blockquote>
<p>[结果 for 变量 in 可迭代对象 if 条件]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lst &#x3D; [i for i in range(100) if i %2 &#x3D;&#x3D; 0]</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>字典生成式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内置方法初识</span></span><br><span class="line">l=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> enumerate(l):</span><br><span class="line">    print(i,v)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 构造字典</span></span><br><span class="line">keys=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">vals=[<span class="string">&#x27;szk&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>]</span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys):</span><br><span class="line">    <span class="comment"># print(i,k)</span></span><br><span class="line">    dic[k]=vals[i]</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典生成式</span></span><br><span class="line">dic=&#123;k:vals[i] <span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys)&#125;</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 也支持if判断</span></span><br><span class="line">dic=&#123;k:vals[i] <span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys) <span class="keyword">if</span> i &gt; <span class="number">0</span>&#125;</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure>
</li>
<li><p>集合生成式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">res &#x3D; &#123;i for i in range(5)&#125;</span><br><span class="line">print(res, type(res))</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成器表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">res &#x3D; (i for i in range(5))</span><br><span class="line">print(res, type(res))</span><br><span class="line"></span><br><span class="line">print(tuple(res))</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>案例，读文件省内存<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;a.txt&#x27;</span>, mode=<span class="string">&#x27;rt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res = sum((len(line) <span class="keyword">for</span> line <span class="keyword">in</span> f ))</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>





</li>
</ul>
<ol start="4">
<li>三元表达式<blockquote>
<p>结果 = 条件成立 if 条件 else 条件不成立返回的值</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求两个数的较大值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max2</span>(<span class="params">x, y</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x &gt; y:</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 三元表达式实现的效果:条件成立的情况下返回一个值，不成立的情况下返回另外一个值</span></span><br><span class="line">name = input(<span class="string">&#x27;please input your name&gt;&gt;&gt;:&#x27;</span>).strip()</span><br><span class="line">res = <span class="string">&#x27;NB&#x27;</span> <span class="keyword">if</span> name = <span class="string">&#x27;szk&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;SB&#x27;</span>  <span class="comment"># 当name值为szk的时候才会是NB其他情况都是SB</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">语法结构</span></span><br><span class="line"><span class="string">结果 = 条件成立 if 条件 else 条件不成立返回的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">替换上面max2内的代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="5-递归函数-面试中常见问题"><a href="#5-递归函数-面试中常见问题" class="headerlink" title="5. 递归函数  面试中常见问题"></a>5. 递归函数  面试中常见问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.什么是函数递归调用？(也可以说成是函数的嵌套调用的一种形式)</span></span><br><span class="line"><span class="string">    在调用一个函数的过程中又直接或者间接的调用该函数本身，称之为函数的递归调用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 直接调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">  print(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">  foo()</span><br><span class="line">foo()</span><br><span class="line"><span class="string">&quot;&quot;&quot;画图诠释递归调用意味着反复的开辟内存空间最后导致内存溢出&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps:补充知识点 查看及修改最大递归深度的方法(不是绝对的精准)</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getrecursionlimit())  <span class="comment"># 查看最大递归深度 1000</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)  <span class="comment"># 修改最大递归深度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看具体的递归深度(直接调用自己)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">n</span>):</span></span><br><span class="line">  print(<span class="string">&#x27;from foo&#x27;</span>,n)</span><br><span class="line">  foo(n+<span class="number">1</span>)</span><br><span class="line">foo(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 间接调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">  print(<span class="string">&#x27;from bar&#x27;</span>)</span><br><span class="line">  func()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  print(<span class="string">&#x27;from func&#x27;</span>)</span><br><span class="line">  bar()</span><br><span class="line">bar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ps:无限的递归没有任何意义的</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>有意义的递归一定是伴随着n规模的减少而减少</p>
</blockquote>
<p>举个例子：累加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.从1到100，求个和？</span></span><br><span class="line"><span class="comment">## 常规的做法</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    sum += i</span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 递归的做法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">有意义的递归：</span></span><br><span class="line"><span class="string">    有最终的结束条件</span></span><br><span class="line"><span class="string">    n规模问题的解决得益于n-1问题的规模的解决</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">现在是求1到100的和？</span></span><br><span class="line"><span class="string">1到99的和，然后再加上 100， 即就能够知道1到100的和</span></span><br><span class="line"><span class="string">1到98的和，然后再加上 99，就能够知道1到99的和</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumrecv</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sumrecv(n<span class="number">-1</span>) + n </span><br></pre></td></tr></table></figure>

<p>2.求n!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jiecheng</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jiecheng(n<span class="number">-1</span>) * n</span><br><span class="line"></span><br><span class="line">res = jiecheng(<span class="number">5</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>递推</p>
<blockquote>
<p>满足某种结束条件，结束递归调用，然后一层一层返回</p>
</blockquote>
</li>
<li><p>回溯</p>
<blockquote>
<p>一层一层调用下去</p>
</blockquote>
</li>
</ul>
<p>3.二分法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">56</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_find</span>(<span class="params">find_num, l</span>):</span></span><br><span class="line">    print(l)</span><br><span class="line">    <span class="keyword">if</span> len(l) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&quot;找的值不存在&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_index = len(l) // <span class="number">2</span></span><br><span class="line">    mid_val = l[mid_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> find_num &gt; mid_val:</span><br><span class="line">        l = l[mid_index+<span class="number">1</span>:]</span><br><span class="line">        binary_find(find_num, l)</span><br><span class="line">    <span class="keyword">elif</span> find_num &lt; mid_val:</span><br><span class="line">        l = l[:mid_index]</span><br><span class="line">        binary_find(find_num, l)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;索引下标&quot;</span>, mid_index)</span><br><span class="line">        print(<span class="string">&#x27;find it&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">binary_find(<span class="number">82</span>, nums)</span><br></pre></td></tr></table></figure>

<h4 id="6-函数名的作用以及闭包函数-面试和项目中的重点"><a href="#6-函数名的作用以及闭包函数-面试和项目中的重点" class="headerlink" title="6.函数名的作用以及闭包函数   面试和项目中的重点"></a>6.函数名的作用以及闭包函数   面试和项目中的重点</h4><blockquote>
<p>闭包函数：函数嵌套+名称空间与作用域+函数对象</p>
</blockquote>
<ol>
<li>什么是闭包函数<ol>
<li>定义在函数内的函数</li>
<li>该函数体代码包含对该函数外层作用域中名字的引用<ul>
<li>强调：函数外层指的不是全局作用域</li>
</ul>
</li>
</ol>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>()</span></span><br><span class="line">    x = 1</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner <span class="comment">#利用函数对象的概念，将一个内部函数返回并在全剧终拿到并使用，从而打破了函数的层级限制</span></span><br><span class="line"></span><br><span class="line"> f = outter()  返回的是inner的内存地址</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">     x = <span class="number">11111</span></span><br><span class="line">     print(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">     f()   </span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数的作用域关系在定义阶段就已经固定了，与调用位置无关<br>f = outter() —&gt; 指向inner内存地址<br>闭: 函数一定来自于函数内部<br>包: 此函数外面还包裹了一层东西，无论在哪用inner，都是以外面包裹的这一层东西为准</p>
</blockquote>
<h4 id="7-装饰器-面试和项目中的重中之重"><a href="#7-装饰器-面试和项目中的重中之重" class="headerlink" title="7.**装饰器 面试和项目中的重中之重 **"></a>7.**装饰器 面试和项目中的重中之重 **</h4>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day05</title>
    <url>/2020/09/06/py-day05/</url>
    <content><![CDATA[<p>python基础<br>class(封装、多态、继承)</p>
<a id="more"></a>


<p>1.第三方模块  requests， pymysql， jenkins，gitlab</p>
<p>pip工具，下载安装第三方模块。和yum类似</p>
<p>pip工具安装的包一定是和python的解释器相对应的</p>
<blockquote>
<p>pip3 install 安装的包<br>pip3 uninstall 安装的包<br>pip3 list<br>换源：</p>
</blockquote>
<ul>
<li>临时换源：</li>
</ul>
<blockquote>
<p>pip install 包名 -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
</blockquote>
<ul>
<li>永久性换源<br>修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>2.requests模块</p>
<blockquote>
<p>pip3 install requests</p>
</blockquote>
<blockquote>
<p>linux curl<br>爬虫中非常重要的一个模块<br>通过这个模块可以发起http请求，get， post， put， delete方法</p>
</blockquote>
<blockquote>
<p>后续，请求第三放的api获取数据的时候，都是要用到的</p>
</blockquote>
<p>3.pymysql模块<br>如果以后有些老的项目，使用python2.7写的，使用python操作mysql的模块是：MySQL-Python</p>
<p>在python3中的使用方法：</p>
<blockquote>
<p>pip3 install  pymysql</p>
</blockquote>
<p>总结: sql语句的写法是不变。需要关注操作的函数即可。execute</p>
<p>4.redis模块</p>
<blockquote>
<p><a href="https://www.cnblogs.com/john-xiong/p/12089103.html">https://www.cnblogs.com/john-xiong/p/12089103.html</a></p>
</blockquote>
<p>5.gitlab模块</p>
<p>生成token： settings ===&gt; accesstoken ===&gt; create 生成</p>
<blockquote>
<p><a href="https://pypi.org/project/python-gitlab/">https://pypi.org/project/python-gitlab/</a></p>
</blockquote>
<ul>
<li>操作docker</li>
<li>操作paramiko  堡垒机、ansible、saltstack</li>
</ul>
<blockquote>
<p>总结：python之所以强大，是因为他有很强大的第三方模块。以后我们在使用python解决问题的时候，我们可以首先先考虑一下有没有现成的第三方的模块(轮子)，有的话直接拿来用就好了。找第三方模块的方法：首先考虑到github找。</p>
</blockquote>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="1-面向对象编程的学习"><a href="#1-面向对象编程的学习" class="headerlink" title="1.面向对象编程的学习"></a>1.面向对象编程的学习</h4><ul>
<li>面向过程编程思想<ul>
<li>在我们学习函数之前，写的所有的程序代码，都是面向过程式的编程</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    total += <span class="number">1</span></span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure>

<ul>
<li>面向过程编程有点像高中的时候解题：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">答：第一步：</span><br><span class="line">   第二步：</span><br><span class="line">   第三步：</span><br></pre></td></tr></table></figure>

<ul>
<li>面向函数编程思想</li>
</ul>
<blockquote>
<p>学完函数之后，我们写的代码，发生了一些改变。我们会把一些功能相同的代码写到一个函数中去，而后，那块需要用到这个功能，我们直接调用这个函数即可</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;鉴权逻辑&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;登录逻辑&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>减少代码的冗余</li>
<li>增加了代码的灵活度</li>
</ul>
<blockquote>
<p>shell编程中，是没有面向对象的思想的。shell编程是面向函数式的编程。处理一些简单的任务，所以面向函数编程，已经足够满足我们的日常需求了。但是如果写一些大的项目话，shell就力不从心了。因此，引入了面向对象的编程，来满足大型项目的开发需要    </p>
</blockquote>
<blockquote>
<p>面向函数式编程和面向对象编程，是没有好坏之分的，需要看你的应用场景来决定。面向对象编程他的封装性和扩展性比其他的编程思想要好很多。</p>
</blockquote>
<h4 id="2-面向对象的概念"><a href="#2-面向对象的概念" class="headerlink" title="2.面向对象的概念"></a>2.面向对象的概念</h4><p><strong>什么是类?什么又是对象?</strong></p>
<blockquote>
<p>类：类也是容器，该容器用来存放<strong>同类对象共有的数据与功能</strong>。</p>
</blockquote>
<blockquote>
<p>对象：就是类的具体表现形式, 对象是”容器”，用来盛放<strong>数据与功能</strong>的；终极奥义是将程序”整合” –&gt; 程序=数据+功能</p>
</blockquote>
<p><strong>所谓的类，就是一个模板，对象就是模板的具体生产出来的实例</strong></p>
<ul>
<li>面向对象中类和对象的基本使用</li>
</ul>
<blockquote>
<p>现在基本上所有的高级语言(c++, java, php, python,C#)中，都有面向对象的</p>
</blockquote>
<h5 id="3-从类的角度研究基本使用方法"><a href="#3-从类的角度研究基本使用方法" class="headerlink" title="3.从类的角度研究基本使用方法"></a>3.从类的角度研究基本使用方法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    mind = <span class="string">&quot;有思想&quot;</span></span><br><span class="line">    leg = <span class="number">2</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;eating...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sleeping...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>‘’’<br>注意：<br>    1. class是定义类的关键字，Person是类名，建议大家首字母大写<br>    2. 冒号后面是这个类的具体内容<br>‘’’</p>
<blockquote>
<p>print(Person.<strong>dict</strong>) ### 获取类中所有的属性和方法<br>print(Person.<strong>dict</strong>.get(‘leg’)) ### 获取某一个属性的方式</p>
</blockquote>
<ul>
<li><strong>注意</strong>: 在类定义阶段就会立刻执行类体代码，会产生类的名称空间，用于将类体代码执行过程中产生的名字都存放与类的名称空间中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在类定义阶段就会立刻执行类体代码，会产生类的名称空间，用于将类体代码执行过程中产生的名字都存放与类的名称空间中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;Oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;is choosing course&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 定义执行后就会输出====&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-类与对象的使用"><a href="#4-类与对象的使用" class="headerlink" title="4.类与对象的使用"></a>4.类与对象的使用</h4><p>类有两种用途<br><strong>用途一：类本身就一个容器（名称空间），所以可以增删改查类的属性</strong></p>
<ul>
<li>属性访问的语法(.key的方式访问属性)</li>
</ul>
<ol>
<li>数据访问的属性</li>
<li>函数访问的属性<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(OldboyStudent.school) <span class="comment">#OldboyStudent.__dict__[&#x27;school&#x27;]</span></span><br><span class="line"><span class="comment"># print(OldboyStudent.xxx) #OldboyStudent.__dict__[&#x27;xxx&#x27;]</span></span><br><span class="line">print(OldboyStudent.choose_course)</span><br><span class="line">OldboyStudent.choose_course(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">print(OldboyStudent.school)</span><br><span class="line"><span class="comment"># print(OldboyStudent.xxxx)</span></span><br><span class="line"></span><br><span class="line">OldboyStudent.country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">OldboyStudent.school=<span class="string">&#x27;Oldgirl&#x27;</span></span><br><span class="line">print(OldboyStudent.__dict__)</span><br><span class="line"><span class="keyword">del</span> OldboyStudent.school</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">print(OldboyStudent.__dict__)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>用途二：调用类来产生对象，调用类的过程又称之为实例化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;Oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;is choosing course&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1=OldboyStudent()  <span class="comment"># stu1可称为一个对象，也可以称为一个实例</span></span><br><span class="line">stu2=OldboyStudent()  <span class="comment"># stu1可称为一个对象，也可以称为一个实例</span></span><br><span class="line">stu3=OldboyStudent()  <span class="comment"># stu1可称为一个对象，也可以称为一个实例</span></span><br></pre></td></tr></table></figure>

<h4 id="5-推荐大家使用如下方式"><a href="#5-推荐大家使用如下方式" class="headerlink" title="5.推荐大家使用如下方式"></a>5.推荐大家使用如下方式</h4><p><strong>使用类的方式来获取类中的属性和类的方法</strong><br><strong>直接使用 . 的方式来获取，万能的点</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    mind = <span class="string">&quot;有思想&quot;</span></span><br><span class="line">    leg = <span class="number">2</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;eating...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sleeping...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(Person.leg)</span><br><span class="line">Person.eat(<span class="number">123</span>)  <span class="comment">####</span></span><br><span class="line"></span><br><span class="line">Person.mind = <span class="string">&#x27;无脑&#x27;</span>  <span class="comment"># 改</span></span><br><span class="line">print(Person.mind)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> Person.mind  <span class="comment"># 删</span></span><br><span class="line">print(Person.mind)</span><br></pre></td></tr></table></figure>


<h5 id="6-初始化方法init"><a href="#6-初始化方法init" class="headerlink" title="6.初始化方法init"></a>6.初始化方法<strong>init</strong></h5><p>p1 = Person()  # Person.__init__(空对象,x,y,z)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    mind = <span class="string">&quot;有思想&quot;</span></span><br><span class="line">    leg = <span class="number">2</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### 当实例化一个对象的时候，会自动的触发该__init__函数</span></span><br><span class="line">    <span class="comment">### 此时self指代的就是当前实例化的对象，也就是 self = p1</span></span><br><span class="line">    <span class="comment">### init方法只能返回None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, height</span>):</span></span><br><span class="line">        <span class="comment"># print(self) ### &lt;__main__.Person object at 0x10ee29760&gt;</span></span><br><span class="line">        self.name = name <span class="comment">### p1.name = &#x27;wenliang&#x27;  p2.name = &#x27;nick&#x27;</span></span><br><span class="line">        self.age = age   <span class="comment">### p1.age = 73   p2.age = 84</span></span><br><span class="line">        self.height = height <span class="comment">### p1.height = 168 p2.height=178</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">### self = p1</span></span><br><span class="line">        print(<span class="string">&#x27;%s eating...&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sleeping...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p1 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># p2 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># p3 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># print(id(p1)) ### 产生对象的内存地址是不同的</span></span><br><span class="line"><span class="comment"># print(id(p2))</span></span><br><span class="line"><span class="comment"># print(id(p3))</span></span><br><span class="line"></span><br><span class="line">p1 = Person(name=<span class="string">&#x27;wenliang&#x27;</span>, age=<span class="number">73</span>, height=<span class="number">168</span>)</span><br><span class="line">p2 = Person(name=<span class="string">&#x27;nick&#x27;</span>, age=<span class="number">84</span>, height=<span class="number">170</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p1.__dict__)</span></span><br><span class="line"><span class="comment"># print(p2.__dict__)</span></span><br></pre></td></tr></table></figure>

<p><strong>对象操作属性</strong></p>
<ol>
<li>类的属性是共享给对象使用的，大家的访问地址都一样<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(p1.mind)</span><br><span class="line">print(p1.name)</span><br><span class="line">print(p2.mind)</span><br><span class="line">print(p2.name)</span><br></pre></td></tr></table></figure></li>
<li>类的函数属性是绑定给对象用的</li>
</ol>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>调用类产生对象，过程称之为实例化，发生了三件事<ul>
<li>1.产生一个空对象(调用new方法产生一个空对象)</li>
<li>2.python会自动调用类中的__init__方法,将空对象以及调用类时括号内传入的参数一同传给__init__方法</li>
<li>3.返回初始化完的对象</li>
</ul>
</li>
</ul>
<hr>
<h3 id="6-绑定方法"><a href="#6-绑定方法" class="headerlink" title="6.绑定方法"></a>6.绑定方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person.eat(1)</span><br><span class="line">p1.eat()  ### 会默认将当前的对象p1,传给方法中的self</span><br><span class="line">p2.eat()</span><br></pre></td></tr></table></figure>
<ol>
<li>类的属性是共享给对象使用的，大家的访问地址都一样</li>
<li>类的函数属性是绑定给对象用的；绑定方法的特殊之处在于：谁来调用绑定方法就会将谁当做第一个参数，自动传入</li>
<li>属性查找顺序：对象的名称空间里只存放着对象独有的属性，而对象们相似的属性是存放于类中的。对象在访问属性时，会优先从对象本身的__dict__中查找，未找到，则去类的__dict__中查找</li>
</ol>
<blockquote>
<p>总结：<br>1.后续项目中大部分都是使用对象来操作类中相关的属性和方法的<br>2.self 指代的就是当前的对象<br>3.<code>__init__()</code>初始化方法</p>
</blockquote>
<h3 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h3><ul>
<li>python 中一切皆对象；linux一切皆文件</li>
<li><strong>封装</strong><ul>
<li>封装的总共有两个特点：<br>1.将内容封装到某个地方，以后再去调用被封装在某处的内容。<br>2.一些私有的不想被外部访问的变量，也可以封装起来</li>
</ul>
</li>
<li>隐藏属性<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># I: 在类外部无法访问双下划线开头的属性，但知道了类名和属性名就可以拼出名字:_类名__属性就可以访问了，如Foo._A__N就可以访问了，所以说这种操作并没有严格意义上的限制外部访问；仅仅只是语法上的一种变形、</span></span><br><span class="line"><span class="comment"># II: 这种隐藏对外不对内，因为__开头的属性会在检查类内代码时统一发生变形。</span></span><br><span class="line"><span class="comment"># III: 这种变形操作只在检查类体语法的时候发生一次，之后定义的__开头的属性都不会变形</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>():</span></span><br><span class="line">    __x = <span class="number">1</span>     <span class="comment"># _Foo__x</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span>  <span class="comment"># _Foo__f1</span></span><br><span class="line">        print(<span class="string">&#x27;from test&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.__x)</span><br><span class="line">        print(self.__f1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj.f2()</span><br><span class="line">Foo.__y = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li><p>为什么要隐藏（数据，函数）</p>
<ul>
<li>将数据隐藏起来就限制了类外部对数据的直接操作，然后类内应该提供相应的接口来允许类外部间接地操作数据，接口之上可以附加额外的逻辑来对数据的操作进行严格地控制</li>
<li>目的的是为了隔离复杂度，例如ATM程序的取款功能,该功能有很多其他功能组成，比如插卡、身份认证、输入金额、打印小票、取钱等，而对使用者来说,只需要开发取款这个功能接口即可,其余功能我们都可以隐藏起来</li>
</ul>
<ul>
<li><p><strong>继承</strong></p>
<ul>
<li>分类：<ul>
<li>单继承</li>
<li>多继承   C++， python有，但是php和java没有</li>
</ul>
</li>
</ul>
</li>
<li><p>多态</p>
</li>
</ul>
</li>
</ul>
<h4 id="1-继承与派生"><a href="#1-继承与派生" class="headerlink" title="1.继承与派生"></a>1.继承与派生</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、什么是继承</span><br><span class="line">    继承一种新建类的方式，新建的类称为子类或者派生类，被继承的类称为父类或基类或超类</span><br><span class="line">    子类会遗传父类的一系列属性</span><br><span class="line"></span><br><span class="line">    python支持多继承</span><br><span class="line">    注意：</span><br><span class="line">        在python3中，如果没有显式地继承任何类，那默认继承object类</span><br><span class="line">        在python2中，如果没有显式地继承任何类，也不会继承object类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    在python中类分为两种：</span><br><span class="line">        新式类:</span><br><span class="line">            但凡继承object的类，以及该类的子类都是新式类</span><br><span class="line">            在python3中所有的类都是新式类</span><br><span class="line">        经典类</span><br><span class="line">            没有继承object类，以该类的子类都是经典类</span><br><span class="line">            只有在python2中才存在经典类，为何？</span><br><span class="line">            因为在python2中没有没有显式地继承任何类，也不会继承object类</span><br><span class="line"></span><br><span class="line">2、为什么要用继承</span><br><span class="line">    减少代码冗余</span><br><span class="line">多继承缺点: 违背人的思维习惯；代码可读性变差；扩展性变差，有可能引发菱形问题；如果不可避免，应该使用Mixins</span><br><span class="line"></span><br><span class="line">3、如何用继承</span><br></pre></td></tr></table></figure>
<p>使用继承</p>
<blockquote>
<p>在Python中，每个类有一个__bases__属性，列出其基类</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent1</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub1</span>(<span class="params">Parent1</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub2</span>(<span class="params">Parent1,Parent2</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(Parent1.__bases__)</span><br><span class="line">print(Parent2.__bases__)</span><br><span class="line"></span><br><span class="line">print(Sub1.__bases__)</span><br><span class="line">print(Sub2.__bases__)</span><br></pre></td></tr></table></figure>

<p><strong>基于继承减少代码冗余的案例+派生/衍生</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;%s&#x27;</span> % self.name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(self, f)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self,course</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is choosing course:%s&#x27;</span> %(self.name,course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span></span><br><span class="line">        <span class="comment"># self.name = name</span></span><br><span class="line">        <span class="comment"># self.age = age</span></span><br><span class="line">        <span class="comment"># self.sex = sex</span></span><br><span class="line">        OldboyPeople.__init__(self,name,age,sex)</span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self,stu</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is score %s&#x27;</span> %(self.name,stu.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># stu1=OldboyStudent(&#x27;alex&#x27;,38,&#x27;male&#x27;)</span></span><br><span class="line"><span class="comment"># print(stu1.__dict__)</span></span><br><span class="line"><span class="comment"># stu1.save()</span></span><br><span class="line"></span><br><span class="line">tea1=OldboyTeacher(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">print(tea1.name,tea1.level)</span><br><span class="line"><span class="comment"># tea1.save()</span></span><br><span class="line"><span class="comment"># print(stu1.school)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-继承属性查找关系"><a href="#2-继承属性查找关系" class="headerlink" title="2.继承属性查找关系"></a>2.继承属性查找关系</h4><ol>
<li>单继承的属性查找：对象自己-&gt;对象的类-&gt;父类-&gt;父类</li>
<li>多继承的属性查找：对象自己-&gt;对象的类-&gt;从左往右一个一个的分支找下去</li>
</ol>
<blockquote>
<p><strong>Python3</strong> 中， 新式类的查找方法 是：BFS：<strong>广度优先</strong></p>
</blockquote>
<blockquote>
<p><strong>Python2</strong>中， 经典类的查找方式 是：DFS ：<strong>深度优先</strong></p>
</blockquote>
<blockquote>
<p>树 </p>
</blockquote>
<p>继承原理（python如何实现的继承）：<br>python到底是如何实现继承的，对于你定义的每一个类，python会通过C3算法计算出一个顺序(MRO)列表，这个MRO列表就是一个简单的所有基类的线性顺序列表，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; F.mro() #等同于F.__mro__</span><br><span class="line">[&lt;class &#39;__main__.F&#39;&gt;, &lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.E&#39;&gt;, &lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;object&#39;&gt;]</span><br></pre></td></tr></table></figure>
<p><strong>mro只有新式类才有这个属性可以查看线性列表，经典类没有这个属性</strong></p>
<p>为了实现继承,python会在MRO列表上从左到右开始查找基类,直到找到第一个匹配这个属性的类为止。<br>而这个MRO列表的构造是通过一个C3线性化算法来实现的。我们不去深究这个算法的数学原理,它实际上就是合并所有父类的MRO列表并遵循如下三条准则:</p>
<ul>
<li>1.子类会先于父类被检查</li>
<li>2.多个父类会根据它们在列表中的顺序被检查</li>
<li>3.如果对下一个类存在两个合法的选择,选择第一个父类</li>
</ul>
<h4 id="3-在子类中重用父类功能的两种方式"><a href="#3-在子类中重用父类功能的两种方式" class="headerlink" title="3.在子类中重用父类功能的两种方式"></a>3.在子类中重用父类功能的两种方式</h4><p>在子类派生出的新方法中重用父类的功能：</p>
<ul>
<li><p><strong>方式一：指名道姓地访问某一个类的函数，与继承是没有关系的</strong><br>OldboyPeople.<strong>init</strong>(self,name,age,sex)</p>
</li>
<li><p><strong>方式二：super(自己的类名,self).父类中的方法名()</strong><br>调用super会得到一个特殊的对象，该对象是专门用来引用父类中的方法的，参照属性发起者的MRO </p>
</li>
</ul>
<blockquote>
<p>具体的：该对象会严格按照当前类的MRO列表从当前类的父类中依次查找属性，即这种方式是严格依赖于继承的</p>
</blockquote>
<blockquote>
<p>ps:在python3中可以简写为super()</p>
</blockquote>
<blockquote>
<p> ！！！！！强调：二者使用哪一种都可以，但最好不要混合使用 ！！！ </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span></span><br><span class="line">        <span class="comment"># OldboyPeople.__init__(self, name, age, sex)</span></span><br><span class="line">        <span class="comment"># super().__init__(name,age,sex)</span></span><br><span class="line">        super().__init__(name, age, sex)</span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">tea1=OldboyTeacher(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">print(tea1.name,tea1.level)</span><br></pre></td></tr></table></figure>

<p><strong>即使没有直接继承关系，super仍然会按照mro继续往后查找</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        super().f2() <span class="comment"># super（）会基于当前所在的查找位置继续往后查找</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A,B</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj=C()</span><br><span class="line">print(C.mro())</span><br><span class="line">obj.f1()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的"><a href="#4-父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的" class="headerlink" title="4. 父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的"></a>4. 父类如果不想让子类覆盖自己的方法，可以采用双下划线开头的方式将方法设置为私有的</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.f1()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Bar()</span><br><span class="line">obj.f2()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;</span><br><span class="line">Foo.f2</span><br><span class="line">Bar.f1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;方式一: 通过__ 进行属性变形</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment">#已经变形 _Foo__f1</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.__f1() <span class="comment"># self._Foo__f1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Bar()</span><br><span class="line">obj.f2()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">Foo.f2</span><br><span class="line">Foo.f1</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">直接调用类的方法实现</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.f1(self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Bar()</span><br><span class="line">obj.f2()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-组合"><a href="#5-组合" class="headerlink" title="5.组合"></a>5.组合</h4><ul>
<li>1、什么是组合<br>  对象的属性的值是来自于另外一个类的对象，这就叫类的组合使用</li>
<li>2、为何要用组合<br>  组合是用来减少类与类代码冗余的<ul>
<li>组合vs继承<br>   只有在类与类之间有从属的关系的时候才能用继承<br>   否则的话用组合</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;%s&#x27;</span> % self.name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(self, f)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        OldboyPeople.__init__(self,name,age,sex)</span><br><span class="line">        self.courses=[]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self,course</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is choosing course:%s&#x27;</span> %(self.name,course))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_courses_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> course <span class="keyword">in</span> self.courses:</span><br><span class="line">            course.tell_info()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span></span><br><span class="line">        <span class="comment"># self.name = name</span></span><br><span class="line">        <span class="comment"># self.age = age</span></span><br><span class="line">        <span class="comment"># self.sex = sex</span></span><br><span class="line">        OldboyPeople.__init__(self,name,age,sex)</span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self,stu</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is score %s&#x27;</span> %(self.name,stu.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,price,period</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.price=price</span><br><span class="line">        self.period=period</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            课程名：%s</span></span><br><span class="line"><span class="string">            价钱：%s</span></span><br><span class="line"><span class="string">            周期：%s</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span> % (self.name, self.price, self.period))</span><br><span class="line"></span><br><span class="line">python=Course(<span class="string">&#x27;python&#x27;</span>,<span class="number">8000</span>,<span class="string">&#x27;5mons&#x27;</span>)</span><br><span class="line">linux=Course(<span class="string">&#x27;linux&#x27;</span>,<span class="number">10000</span>,<span class="string">&#x27;3mons&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1=OldboyStudent(<span class="string">&#x27;李三泡&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">stu1.courses.append(python)</span><br><span class="line">stu1.courses.append(linux)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu2=OldboyStudent(<span class="string">&#x27;李二泡&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line">stu2.courses.append(python)</span><br></pre></td></tr></table></figure>

<h4 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h4><ul>
<li><ol>
<li>如果结构为<strong>非菱形</strong>，无论新式类 经典类 python2 python3 ；则按照分支查找。</li>
</ol>
</li>
<li><ol start="2">
<li>菱形继承；python3 新式类 广度优先（最后找大脑袋）； python2 经典类深度优先（在以一个分支就大脑袋找了一下）</li>
</ol>
</li>
</ul>
<h4 id="7-mixins"><a href="#7-mixins" class="headerlink" title="7. mixins"></a>7. mixins</h4><ul>
<li>minxins机制核心: 就是多继承背景下尽可能地多提升多继承的可读性</li>
</ul>
<p>功能类放在左边(mixins), 主继承类放在右边<br>典型模块: SocketServer</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>:</span>  <span class="comment"># 交通工具</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyableMixin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        飞行功能相应的代码        </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        print(<span class="string">&quot;I am flying&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CivilAircraft</span>(<span class="params">FlyableMixin, Vehicle</span>):</span>  <span class="comment"># 民航飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Helicopter</span>(<span class="params">FlyableMixin, Vehicle</span>):</span>  <span class="comment"># 直升飞机</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">Vehicle</span>):</span>  <span class="comment"># 汽车</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps: 采用某种规范（如命名规范）来解决具体的问题是python惯用的套路</span></span><br></pre></td></tr></table></figure>



<h4 id="8-多态与多态性"><a href="#8-多态与多态性" class="headerlink" title="8.多态与多态性"></a>8.多态与多态性</h4><ul>
<li><p>1、什么是多态<br>  同一种事物的多种形态</p>
</li>
<li><p>2、为何要用多态<br>   多态性：指的是可以在不用考虑对象具体类型的前提下，直接调用对象的方法</p>
</li>
<li><p>3、如何用多态</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">metaclass=abc.ABCMeta</span>):</span> <span class="comment"># 父类存在的意义就是用来定义规范</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;xxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;哼哼哼&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1 = People()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多态：不同类，拥有同样的方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何实现多态的条件：通过 abc 抽象类来去定义规范实现</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>python推崇的是鸭子类型</strong><br>代码解耦合；也有规范</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;say hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;哼哼哼&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peo1=People()</span><br><span class="line">dog1=Dog()</span><br><span class="line">pig1=Pig()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peo1.talk()</span><br><span class="line">dog1.talk()</span><br><span class="line">pig1.talk()</span><br></pre></td></tr></table></figure>

<h4 id="9-封装"><a href="#9-封装" class="headerlink" title="9.封装"></a>9.封装</h4><ol>
<li><p>什么是封装<br> “装”的意思就往一个容器中放入一系列属性<br> “封”的意思就是藏起来，在内部可以看到，但对外部是隐藏的</p>
</li>
<li><p>为什么要用封装</p>
</li>
<li><p>如何用封装<br> 但凡是双下划线开头（不能是双下划线结尾）的属性，会被隐藏起来，类内部可以直接使用<br> 而类外部无法直接使用，即封装是对外不对内的</p>
<p> 这种隐藏的特点：</p>
<pre><code> 1、只是一种语法上的变形，会将__开头的属性变形为:_自己的类名__属性名
 2、该变形只在类定义阶段发生一次，在类定义阶段之后新增的__开头的属性并不会发生变形
 3、隐藏是对外不对内的
 4、在继承中，父类如果不想让子类覆盖自己的同名方法，可以将方法定义为私有的</code></pre>
</li>
</ol>
<p>‘’’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment">#_Foo__f1</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.__f1() <span class="comment">#self._Foo__f1()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment">#_Bar__f1</span></span><br><span class="line">        print(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Bar()</span><br><span class="line">obj.f2()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>为何要封装</li>
</ol>
<ul>
<li>1、封装数据属性：将数据数据隐藏起来，从而类的使用者无法直接操作该数据属性<br>需要类的设计者在类内部开辟接口，让类的使用者同接口来间接地操作数据，<br>类的设计者可以在接口之上附加任意逻辑，从而严格控制类的使用者对属性的操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.__name=name</span><br><span class="line">        self.__age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&lt;%s:%s&gt;&#x27;</span> %(self.__name,self.__age))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_info</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        <span class="keyword">if</span> type(name) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;用户名必须是str类型&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> type(age) <span class="keyword">is</span> <span class="keyword">not</span> int:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;年龄必须是int类型&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.__name=name</span><br><span class="line">        self.__age=age</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">p=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="comment"># p.tell_info()</span></span><br><span class="line">p.set_info(<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;asdfsadf&#x27;</span>)</span><br><span class="line"><span class="comment"># p.tell_info()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2、封装函数属性：隔离复杂度</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ATM</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__card</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;插卡&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__auth</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;用户认证&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__input</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;输入取款金额&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__print_bill</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;打印账单&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__take_money</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;取款&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__card()</span><br><span class="line">        self.__auth()</span><br><span class="line">        self.__input()</span><br><span class="line">        self.__print_bill()</span><br><span class="line">        self.__take_money()</span><br><span class="line"></span><br><span class="line">a=ATM()</span><br><span class="line">a.withdraw()</span><br></pre></td></tr></table></figure>

<h4 id="10-面向的对象中的装饰器"><a href="#10-面向的对象中的装饰器" class="headerlink" title="10.面向的对象中的装饰器"></a>10.面向的对象中的装饰器</h4><ul>
<li>封装之property<br>property是一种特殊的属性，访问它时会执行一段功能（函数）然后返回值<br>将一个类的函数定义成特性以后，对象再去使用的时候obj.name,根本无法察觉自己的name是执行了一个函数然后计算出来的，这种特性的使用方式遵循了统一访问的原则</li>
</ul>
<p><strong>但凡是被property修饰过的方法，可以使用@def_name.setter,@def_name.deleter</strong></p>
<p>@property  <strong>使用方式一</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,height,weight</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.height=height</span><br><span class="line">        self.weight=weight</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bmi</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.weight / (self.height ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">egon=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">1.80</span>,<span class="number">75</span>)</span><br><span class="line">egon.height=<span class="number">1.82</span></span><br><span class="line"><span class="comment"># print(egon.bmi())</span></span><br><span class="line"></span><br><span class="line">print(egon.bmi)</span><br></pre></td></tr></table></figure>

<p>@property <strong>使用方式二</strong><br>name = 的方式赋值为 查看 设置 删除 函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        <span class="keyword">if</span> type(val) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            print(<span class="string">&#x27;必须传入str类型&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.__name = val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;不让删除&#x27;</span>)</span><br><span class="line">        <span class="comment"># del self.__name</span></span><br><span class="line"></span><br><span class="line">    name = property(get_name, set_name, del_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = People(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(obj1.name)</span><br><span class="line"></span><br><span class="line">obj1.name = <span class="string">&#x27;alex&#x27;</span></span><br><span class="line"></span><br><span class="line">print(obj1.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> obj1.name</span><br></pre></td></tr></table></figure>


<p>@property <strong>使用方式三</strong><br>所有操作函数名称都改为 <strong>属性名称</strong><br>@def_name.setter<br>@def_name.deleter</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.__name=name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self,val</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;=====&gt;准备修改名字的值：&#x27;,val)</span></span><br><span class="line">        <span class="keyword">if</span> type(val) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;名字的值必须为str类型&#x27;</span>)</span><br><span class="line">        self.__name=val</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># del self.__name</span></span><br><span class="line">        print(<span class="string">&#x27;不让删啊老铁&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=People(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(p.name)</span><br><span class="line"></span><br><span class="line">p.name=<span class="string">&#x27;EGON&#x27;</span></span><br><span class="line"><span class="comment"># p.name=123</span></span><br><span class="line">print(p.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> p.name</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">print(p.name)</span><br></pre></td></tr></table></figure>


<ul>
<li>绑定方法与非绑定方法<ul>
<li>classmethod</li>
<li>staticmethod</li>
</ul>
</li>
</ul>
<ol>
<li><p>绑定方法：<br> 特点：</p>
<pre><code> 绑定给谁，就应该由谁来调用，谁来调用就会将谁当做第一个参数传入</code></pre>
<p> 绑定到对象的方法：</p>
<pre><code> 在类中定义的函数，在没有被任何装饰器装饰的情况下，默认都是绑定给对象的</code></pre>
<p> 绑定到类的方法</p>
<pre><code> 在类中定义的函数，在被装饰器classmethod装饰的情况下，该方法是绑定类的
 最常用：提供额外的造对象(实例化)方式</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port</span>):</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">conn1 = MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>)</span><br><span class="line">conn2 = MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>)</span><br><span class="line"></span><br><span class="line">演变：提供额外的实例化方式，来从配置文件里面加载配置的方式来帮助完成自动传参，不用自己再去指定主机端口。</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># def from_conf():</span></span><br><span class="line">    <span class="comment">#     return MySQL(settings.HOST,settings.PORT)</span></span><br><span class="line">    <span class="comment"># 演变如下</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_conf</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(settings.HOST,settings.PORT)</span><br><span class="line"></span><br><span class="line">conn1=MySQL.from_conf()</span><br><span class="line">print(conn1.host,conn1.port)</span><br><span class="line"></span><br><span class="line">conn=MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line">print(conn.host,conn.port)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li>非绑定方法：既不与类绑定也不与对象绑定，没有任何自动传值的效果，因为函数体根本也不需要</li>
</ol>
<p><strong>函数体既不需要类传进来，也不需要对象传进来</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_conf</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(settings.HOST,settings.PORT)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_id</span>():</span></span><br><span class="line">        m=hashlib.md5()</span><br><span class="line">        m.update(str(time.clock()).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line">obj=MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(MySQL.create_id())</span></span><br><span class="line"><span class="comment"># print(obj.create_id())</span></span><br><span class="line">obj.id=obj.create_id()</span><br><span class="line"></span><br><span class="line">print(obj.id)</span><br></pre></td></tr></table></figure>


<h4 id="11-类的内在机制-反射"><a href="#11-类的内在机制-反射" class="headerlink" title="11.类的内在机制-反射"></a>11.类的内在机制-反射</h4><ul>
<li><strong>反射</strong> <ul>
<li>只有在Python中有</li>
</ul>
</li>
</ul>
<ol>
<li>反射：指的是通过<strong>字符串</strong>来操作类或者对象的属性</li>
</ol>
<ul>
<li>涉及四个内置函数<br><strong>dict</strong> 打印类的属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=People(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hasattr ===&gt; 判断属性是否存在</span><br><span class="line">print(<span class="string">&#x27;country&#x27;</span> <span class="keyword">in</span> People.__dict__)</span><br><span class="line">print(hasattr(People,<span class="string">&#x27;country&#x27;</span>))</span><br><span class="line"></span><br><span class="line">getattr ===&gt; 通过字符串访问类的属性</span><br><span class="line">print(People.__dict__[<span class="string">&#x27;country&#x27;</span>])</span><br><span class="line">print(getattr(People,<span class="string">&#x27;country&#x27;</span>))</span><br><span class="line"></span><br><span class="line">==============================</span><br><span class="line">print(getattr(People,<span class="string">&#x27;country1111&#x27;</span>,<span class="literal">None</span>))</span><br><span class="line">==============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setattr ===&gt; 通过字符串设置类的属性</span><br><span class="line">People.__dict__[<span class="string">&#x27;x&#x27;</span>]=<span class="number">111</span></span><br><span class="line">print(People.x)</span><br><span class="line">setattr(People,<span class="string">&#x27;x&#x27;</span>,<span class="number">111</span>)</span><br><span class="line">print(People.__dict__)</span><br><span class="line"></span><br><span class="line">delattr ===&gt; 通过字符串删除类的属性</span><br><span class="line">delattr(People,<span class="string">&#x27;country&#x27;</span>)</span><br><span class="line">print(People.__dict__)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ftp</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;get...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;put...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;auth...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd=input(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip() <span class="comment">#cmd=&#x27;get&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> hasattr(self,cmd):</span><br><span class="line">                method=getattr(self,cmd)</span><br><span class="line">                method()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;输入的方法不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Ftp()</span><br><span class="line"></span><br><span class="line">obj.run()</span><br></pre></td></tr></table></figure>

<h4 id="12-内置方法"><a href="#12-内置方法" class="headerlink" title="12.内置方法"></a>12.内置方法</h4><ul>
<li><strong>需要掌握</strong></li>
</ul>
<ol>
<li>isinstance <strong>(做类型判断，不推荐用type)</strong><br>判断实例是否属于类</li>
<li>issubclass<br>判断类是否属于xx子类</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="comment">#判断Foo 是不是 obj 的实例</span></span><br><span class="line"><span class="comment"># print(isinstance(obj,Foo))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(isinstance([],list))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(type(obj) is Foo)</span></span><br><span class="line"><span class="comment"># print(type([1,2]) is list) </span></span><br><span class="line"></span><br><span class="line">print(issubclass(Foo,object))</span><br></pre></td></tr></table></figure>


<ul>
<li>定义: 在类内部，以__开发并以__结尾的方法</li>
<li>特点: 会在某种情况下自动触发执行</li>
</ul>
<ol>
<li><strong>str</strong></li>
</ol>
<p><strong>该方法会在对象被打印时自动触发,将返回值当做本次打印的结果。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该方法会在对象被打印时自动触发，</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;=====run=====&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[&quot;%s&quot;,%s,&quot;%s&quot;]&#x27;</span> %(self.name,self.age,self.sex)</span><br><span class="line"></span><br><span class="line">obj=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">print(obj) <span class="comment">#print(obj.__str__())</span></span><br><span class="line"></span><br><span class="line">obj1=list([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(obj1)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>del</strong></li>
</ol>
<p><strong>会在清理对象之前,自动触发;</strong></p>
<blockquote>
<p>什么时候用del:在涉及到一个python的变量关联了一个系统变量的时候，涉及到回收资源的问题，python的变量是被python所管理的，但涉及到的系统资源python不会管，需要自己定义del方法，在删对象之前先触发del执行，先把对象关联的系统资源回收，再做其他。</p>
</blockquote>
<blockquote>
<p><strong>应用: 在应用结束之前，发起系统调用，回收相关系统资源</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name, age</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.f = open(<span class="string">&#x27;a.txt&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;del......&#x27;</span>)</span><br><span class="line">        self.f.close()</span><br><span class="line">    </span><br><span class="line">obj = People(<span class="string">&#x27;egon&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment"># del obj</span></span><br><span class="line">print(<span class="string">&#x27;=====&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line">        self.conn=connect(host,port)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">obj=Mysql(<span class="string">&#x27;1.1.1.1&#x27;</span>,<span class="number">3306</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>hash</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        self.b = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> hash(str(self.a)+str(self.b))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(hash(a))</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li><strong>call</strong><br>对象后面加括号，触发执行。</li>
</ol>
<p>注：构造方法new的执行是由创建对象触发的，即：对象 = 类名() ；而对于 call 方法的执行是由对象后加括号触发的，即：对象() 或者 类()()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;__call__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo() <span class="comment"># 执行 __init__</span></span><br><span class="line">obj()       <span class="comment"># 执行 __call__</span></span><br></pre></td></tr></table></figure>


<ol start="5">
<li><strong>new</strong><br>对象实例化的时候，默认首先会执行 <strong>new</strong> 方法， 而后才会执行 <strong>init</strong> 方法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x = <span class="number">1</span></span><br><span class="line">        print(<span class="string">&#x27;in init function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;in new function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object.__new__(A, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">a = A()  <span class="comment">### 对象实例化的时候，默认首先会执行 __new__ 方法， 而后才会执行 __init__ 方法</span></span><br><span class="line">print(a.x)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p><strong>面试经常会问：单例模式</strong></p>
<ul>
<li>23种设计模式 ：<ul>
<li>单例模式 ： 对象只能出现一次<ul>
<li>__new__方法</li>
<li>装饰器</li>
</ul>
</li>
<li>工厂模式</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">### 当实例化一个对象的时候，会自动的触发该__init__函数</span></span><br><span class="line">    <span class="comment">### 此时self指代的就是当前实例化的对象，也就是 self = p1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, height</span>):</span></span><br><span class="line">        <span class="comment"># print(self) ### &lt;__main__.Person object at 0x10ee29760&gt;</span></span><br><span class="line">        self.name = name <span class="comment">### p1.name = &#x27;wenliang&#x27;  p2.name = &#x27;nick&#x27;</span></span><br><span class="line">        self.age = age   <span class="comment">### p1.age = 73   p2.age = 84</span></span><br><span class="line">        self.height = height <span class="comment">### p1.height = 168 p2.height=178</span></span><br><span class="line"></span><br><span class="line">p1 = Person(name=<span class="string">&#x27;szk&#x27;</span>, age=<span class="number">12</span>, height=<span class="number">178</span>)  <span class="comment">### 实例化Person类，产生一个对象</span></span><br><span class="line">p2 = Person(name=<span class="string">&#x27;szk&#x27;</span>, age=<span class="number">12</span>, height=<span class="number">178</span>)  <span class="comment">### 实例化Person类，产生一个对象</span></span><br><span class="line">p3 = Person(name=<span class="string">&#x27;szk&#x27;</span>, age=<span class="number">12</span>, height=<span class="number">178</span>)  <span class="comment">### 实例化Person类，产生一个对象</span></span><br><span class="line">print(id(p1)) <span class="comment">### 产生对象的内存地址是不同的</span></span><br><span class="line">print(id(p2))</span><br><span class="line">print(id(p3))</span><br></pre></td></tr></table></figure>
<p>代码解释：当实例化p1()的时候，就会调用__new__；第一次实例，就会判断__instance有没有这个值，第一次实例，没有这个值；判断是None，接下来就会实例化一个对象，赋值给instance属性上面。p1实例化完成之后，就有了p1实例的内存地址了；会把cls.__instance__地址返回,接着就正常执行__init__初始化实例；当p2再实例化的时候，先走__new___再__init__；判断cls.__instance__上面有没有这么一个对象，由于p1已经实例化，instance绑定的是p1的对象，返回的是p1对象的内存地址；所以p2用的还是这个内存地址，不会再重新开辟内存了。</p>
<p>要保证不管怎么实例化，实例化出来的对象永远只是这么一个，内存地址都是一样的。这种设计模式就叫单例</p>
<h4 id="13-内置函数"><a href="#13-内置函数" class="headerlink" title="13. 内置函数"></a>13. 内置函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">绝对值</span><br><span class="line">print(abs(<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">all后面跟可迭代对象，bool(x)返回Ture，x来自于可迭代对象，x都为真，才为真</span><br><span class="line">print(all([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="literal">None</span>,<span class="string">&#x27;&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">    可迭代对象空为真</span><br><span class="line">    <span class="comment"># print(all([]))</span></span><br><span class="line"></span><br><span class="line">任何一个来自于可迭代对象的值为真，最终结果为真</span><br><span class="line"><span class="comment"># print(any([0,None,&#x27;&#x27;,1]))</span></span><br><span class="line"></span><br><span class="line">为空的时候返回<span class="literal">False</span></span><br><span class="line"><span class="comment"># print(any([]))</span></span><br><span class="line"></span><br><span class="line">返回对象的所有属性</span><br><span class="line"><span class="comment"># print(dir(obj1))</span></span><br><span class="line"></span><br><span class="line">转成二进制</span><br><span class="line"><span class="comment"># print(bin(3)) #11</span></span><br><span class="line">十进制转八进制</span><br><span class="line"><span class="comment"># print(oct(9)) #11</span></span><br><span class="line">十进制转十六机制</span><br><span class="line"><span class="comment"># print(hex(17)) #11</span></span><br><span class="line"></span><br><span class="line">可调用的</span><br><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class Foo:</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment"># print(callable(func))</span></span><br><span class="line"><span class="comment"># print(callable(Foo))</span></span><br><span class="line"></span><br><span class="line">取余数（应用领域：分页）</span><br><span class="line"><span class="comment"># print(divmod(10,3))</span></span><br><span class="line"><span class="comment"># print(divmod(131,20))</span></span><br><span class="line"></span><br><span class="line">枚举（小元祖）</span><br><span class="line"><span class="comment"># l=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br><span class="line"><span class="comment"># for index,item in enumerate(l):</span></span><br><span class="line"><span class="comment">#     print(index,item)</span></span><br><span class="line"></span><br><span class="line">可变集合</span><br><span class="line"><span class="comment"># s=set(&#123;1,2,3&#125;)</span></span><br><span class="line"><span class="comment"># s.add(4)</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line"></span><br><span class="line">不可变集合</span><br><span class="line"><span class="comment"># s=frozenset(&#123;1,2,3&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可变类型可以当做字典的key，不可变类型即可hash类型</span></span><br><span class="line"><span class="comment"># print(hash((1,2,3)))</span></span><br><span class="line"><span class="comment"># print(hash(&#x27;sdafsafdas&#x27;))</span></span><br><span class="line"><span class="comment"># print(hash(1))</span></span><br><span class="line"><span class="comment"># print(hash([1,2,3]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d=&#123;[1,2,3]:&#x27;aaa&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     这是一个xxx功能</span></span><br><span class="line"><span class="comment">#     :return:</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(help(func))</span></span><br><span class="line"></span><br><span class="line">数字转ASCII码</span><br><span class="line"><span class="comment"># print(chr(65))</span></span><br><span class="line">ASCII码转数字</span><br><span class="line"><span class="comment"># print(ord(&#x27;A&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(pow(3,2,3)) #10**2%3</span></span><br><span class="line">四舍五入</span><br><span class="line"><span class="comment"># print(round(3.5))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># l=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]</span></span><br><span class="line">切片，好处是切片对象可重复使用</span><br><span class="line"><span class="comment"># sc=slice(1,4,1)</span></span><br><span class="line"><span class="comment"># # print(l[1:4])</span></span><br><span class="line"><span class="comment"># print(l[sc])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(vars(People)) #People.__dict__</span></span><br><span class="line"></span><br><span class="line">拉链函数，左右对应，zip之后得到一个迭代器对象，list之后可以看到</span><br><span class="line"><span class="comment"># x=&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment"># y=[1,2,3,4,5,6,7]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># obj=zip(x,y)</span></span><br><span class="line"><span class="comment"># print(list(obj))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line">以字符串的方式导入模块</span><br><span class="line">m=__import__(<span class="string">&#x27;time&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(m.time())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="14-元类"><a href="#14-元类" class="headerlink" title="14. 元类"></a>14. 元类</h4><p>定义源自于: 一切皆为对象</p>
<h4 id="15-异常处理"><a href="#15-异常处理" class="headerlink" title="15. 异常处理"></a>15. 异常处理</h4><ol>
<li><p>什么是异常处理<br> 异常是程序发生错误的信号，即程序一旦出错就会立刻产生一个异常，如果该异常没有被处理<br> 那么异常就抛出来，程序的运行也随之终止</p>
<p> 异常分为三部分：</p>
<pre><code> 异常的类型
 异常的内容、提示信息
 异常的追踪/定位信息信息</code></pre>
<p> 捕捉/检测异常，一旦发生异常就立刻执行相应的处理逻辑，而不是任由异常抛出来终止程序</p>
</li>
<li><p>为何要进行异常处理<br> 增强程序的健壮性</p>
</li>
</ol>
<ul>
<li>异常又分为两大类：<ul>
<li><ol>
<li>语法上错误导致的异常 #SyntaxError<br>针对语法上的错误，应该在程序运行前就立刻改正</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>异常打入日志</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    logging.error(str(e))</span><br><span class="line"></span><br><span class="line">自定义异常</span><br></pre></td></tr></table></figure></li>
<li><p>语法错误不会捕捉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line">   print(<span class="string">&#x27;====&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>逻辑错误导致的异常<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">int(<span class="string">&#x27;xxxxxxx&#x27;</span>) <span class="comment">#ValueError</span></span><br><span class="line"></span><br><span class="line">age <span class="comment">#NameError</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">10</span>: <span class="comment">#TypeError:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">l=[]</span><br><span class="line">l[<span class="number">1111111</span>] <span class="comment">#IndexError</span></span><br><span class="line"></span><br><span class="line">d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">d[<span class="string">&#x27;y&#x27;</span>] <span class="comment">#KeyError</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span> <span class="comment">#ZeroDivisionError</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
<li><ol start="3">
<li><p>如何进行异常处理</p>
<p>   try…except…</p>
</li>
</ol>
</li>
</ul>
<p>1.异常的单分支</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    age=<span class="number">10</span></span><br><span class="line">    age</span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    l[<span class="number">100</span>]</span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    d[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    print(<span class="string">&#x27;=====&gt;NameError&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>2.异常的多分支</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    age</span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># l[100]</span></span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment"># d[&#x27;y&#x27;]</span></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;NameError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError: %s&#x27;</span> %e)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>3.万能异常：Exception，可以匹配所有种类的异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># l[100]</span></span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    d[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>
<p>4.多分支+Exception，注意Exception一定要<strong>放到except 其他异常的的后面</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    l[<span class="number">100</span>]</span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    d[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError:%s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>5.try…else，else会在被检测的代码块没有异常发生的情况下执行， else一定要与except连用，并且一定要放到多个except后面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># l[100]</span></span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment"># d[&#x27;y&#x27;]</span></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError:%s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;else的代码只有在被检测的代码块没有异常发生的情况下才会执行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>6.try…finally,finnaly的代码会什么时候运行？ finally应放到最后面;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    f=open(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    l[<span class="number">100</span>]</span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment"># d[&#x27;y&#x27;]</span></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError:%s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;else的代码只有在被检测的代码块没有异常发生的情况下才会执行&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&#x27;finally的代码，无论被检测的代码有无异常，都会执行，通常在finally内做一些回收资源的事情&#x27;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>7.主动触发异常raise 异常类型(’异常的内容‘),指定抛出已知类型错误；触发异常后，后面的代码就不会再执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;===&gt;1&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;===&gt;2&#x27;</span>)</span><br><span class="line"><span class="keyword">raise</span> TypeError(<span class="string">&#x27;类型错误&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;===&gt;3&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;===&gt;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;阶段1---&gt;1&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段1---&gt;2&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段1---&gt;3&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义异常错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrError</span>(<span class="params">BaseException</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, v</span>):</span></span><br><span class="line">        self.v = v</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;%s&gt;&quot;</span> %self.v</span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> StrError(<span class="string">&#x27;名字必须str类型&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>8.断言</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assert  表达式 , 描述</span><br></pre></td></tr></table></figure>
<p>表达式为我们的预期结果，当表达式的结果为False时，抛出 AssertionError 异常，如无异常捕获程序遇到异常时直接结束运行。反之，表达式结果为True 程序继续向下运行。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if len(info) != 7:</span></span><br><span class="line"><span class="comment">#     raise ValueError(&#x27;值的个数 &lt; 7&#x27;)</span></span><br><span class="line"><span class="keyword">assert</span> len(info) == <span class="number">6</span> <span class="comment"># 我断定len(info) == 7,如果我断言失败，程序则抛出异常</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;阶段2---&gt;1&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段2---&gt;2&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段2---&gt;3&#x27;</span>)</span><br></pre></td></tr></table></figure>




<h3 id="面向对象实战"><a href="#面向对象实战" class="headerlink" title="面向对象实战"></a>面向对象实战</h3><p>链接：<a href="http://www.cnblogs.com/linhaifeng/articles/7341318.html">http://www.cnblogs.com/linhaifeng/articles/7341318.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day04</title>
    <url>/2020/08/29/py-day04/</url>
    <content><![CDATA[<p>python基础<br>函数高级操作(生成器、迭代器、装饰器)+模块(request json)</p>
<a id="more"></a>

<h4 id="复习"><a href="#复习" class="headerlink" title="复习"></a><div id="title">复习</div></h4><p>函数部分：</p>
<p>0.函数嵌套</p>
<ul>
<li>一个函数中可以调用另一个函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;fuc1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    func1()</span><br><span class="line">    print(<span class="string">&#x27;func2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">func2()</span><br></pre></td></tr></table></figure>

<ul>
<li>只要遇见了()就是函数的调用. 如果没有()就不是函数的调用</li>
<li>函数的执行顺序</li>
</ul>
<p>1.内置函数</p>
<ul>
<li>数学计算<ul>
<li>sum</li>
<li>abs</li>
<li>divmod</li>
<li>round</li>
<li>pow</li>
<li>min， max</li>
</ul>
</li>
<li>数据结构相关<ul>
<li>list() 将一个可迭代对象转换成列表</li>
<li>tuple() 将一个可迭代对象转换成元组</li>
<li><strong>bytes() 把字符串类型转换成bytes类型</strong> 重要</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2中经常使用的编码方式</span><br><span class="line">s = <span class="string">&#x27;你好武大&#x27;</span></span><br><span class="line">bs = s.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(bs)</span><br><span class="line">结果:<span class="string">b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd\xe6\xad\xa6\xe5\xa4\xa7&#x27;</span></span><br><span class="line">s1 = bs.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(s1)</span><br><span class="line">结果: 你好武大</span><br><span class="line"></span><br><span class="line">python3中使用如下方式</span><br><span class="line">s = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">bs = bytes(s,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(bs)</span><br><span class="line"><span class="comment"># 将字符串转换成字节</span></span><br><span class="line">bs1 = str(bs,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(bs1)</span><br></pre></td></tr></table></figure>

<ul>
<li>enumerate  对列表的高级操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(lst):</span><br><span class="line">    print(<span class="string">&#x27;这是序号&#x27;</span>,i)</span><br><span class="line">    print(<span class="string">&#x27;这是元素&#x27;</span>,k)</span><br></pre></td></tr></table></figure>

<p>2.匿名函数 lambada  面试问的较多 (<strong>和sorted函数配合使用</strong>)</p>
<blockquote>
<p>没有名字的函数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在项目中单独使用lambada的情况，不是很多。</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">和 sorted 一起使用的时候，比较多。</span><br><span class="line">项目中有很多需要对数据进行排序的需求</span><br><span class="line"></span><br><span class="line">salaries = &#123;</span><br><span class="line">  <span class="string">&#x27;szk&#x27;</span>:<span class="number">30000</span>,</span><br><span class="line">  <span class="string">&#x27;zhangsan&#x27;</span>:<span class="number">888888888</span>,</span><br><span class="line">  <span class="string">&#x27;nick&#x27;</span>:<span class="number">2000</span>,</span><br><span class="line">  <span class="string">&#x27;pounds&#x27;</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">sorted(salaries, key=<span class="keyword">lambda</span> name:salaries[name])</span><br></pre></td></tr></table></figure>


<p>3.迭代器 和for循环机制 <strong>面试中的重点</strong></p>
<blockquote>
<p>如果一个变量中， 包含有<code>__iter__</code>方法的话，那代表这个就是一个迭代器，可以使用<code>__next__</code>来获取其中的每一个元素<br>使用<code>dir()</code>来进行查看，该方法会将这个元素中所有的方法和属性全部列出来</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(a)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__getnewargs__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mod__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__rmod__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;capitalize&#x27;</span>, <span class="string">&#x27;casefold&#x27;</span>, <span class="string">&#x27;center&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;encode&#x27;</span>, <span class="string">&#x27;endswith&#x27;</span>, <span class="string">&#x27;expandtabs&#x27;</span>, <span class="string">&#x27;find&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;format_map&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;isalnum&#x27;</span>, <span class="string">&#x27;isalpha&#x27;</span>, <span class="string">&#x27;isascii&#x27;</span>, <span class="string">&#x27;isdecimal&#x27;</span>, <span class="string">&#x27;isdigit&#x27;</span>, <span class="string">&#x27;isidentifier&#x27;</span>, <span class="string">&#x27;islower&#x27;</span>, <span class="string">&#x27;isnumeric&#x27;</span>, <span class="string">&#x27;isprintable&#x27;</span>, <span class="string">&#x27;isspace&#x27;</span>, <span class="string">&#x27;istitle&#x27;</span>, <span class="string">&#x27;isupper&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;ljust&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>, <span class="string">&#x27;lstrip&#x27;</span>, <span class="string">&#x27;maketrans&#x27;</span>, <span class="string">&#x27;partition&#x27;</span>, <span class="string">&#x27;replace&#x27;</span>, <span class="string">&#x27;rfind&#x27;</span>, <span class="string">&#x27;rindex&#x27;</span>, <span class="string">&#x27;rjust&#x27;</span>, <span class="string">&#x27;rpartition&#x27;</span>, <span class="string">&#x27;rsplit&#x27;</span>, <span class="string">&#x27;rstrip&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;splitlines&#x27;</span>, <span class="string">&#x27;startswith&#x27;</span>, <span class="string">&#x27;strip&#x27;</span>, <span class="string">&#x27;swapcase&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;translate&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;zfill&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = a.__iter__()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&lt;str_iterator object at <span class="number">0x10b4447f0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<p>面试考察时，考察点就是：如何判断一个元素是否是迭代器？<br>答： 包含有<code>__iter__</code>方法的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">print(dir(a))  <span class="comment"># dir查看对象的方法和函数</span></span><br><span class="line"><span class="comment"># 在打印结果中寻找__iter__ 如果存在就表示当前的这个类型是个可迭代对象</span></span><br></pre></td></tr></table></figure>

<p>4.生成器  <strong>面试中的重点</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 生成器定义</span></span><br><span class="line"><span class="comment">### 生成器的本质就是迭代器，因此我们可以使用迭代器中的__next__方法来获取元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">22</span>  <span class="comment">### 将return换成yield关键字即可</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="comment"># print(ret.__next__())</span></span><br><span class="line"><span class="comment"># print(ret)  ### &lt;generator object func at 0x103cc80b0&gt; 生成器的对象</span></span><br></pre></td></tr></table></figure>

<p>总结：生成器一定是迭代器，但是迭代器就不一定是生成器</p>
<p>5.列表生成式和字典生成式 []  <strong>项目中的重点</strong></p>
<blockquote>
<p>写法比较pythonic的风格</p>
</blockquote>
<ul>
<li>列表生成式</li>
</ul>
<blockquote>
<p>目的是把一些复杂的代码，写的简单化</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">**传统的写法**</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    l.append(i)</span><br><span class="line"></span><br><span class="line">**pythonnic的写法**</span><br><span class="line">格式：[结果 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象]</span><br><span class="line"></span><br><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**高级的写法**</span><br><span class="line">格式：[结果 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象 <span class="keyword">if</span> 条件]</span><br><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>字典生成式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># **传统方式构造字典**</span></span><br><span class="line">keys=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">vals=[<span class="string">&#x27;szk&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>]</span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys):</span><br><span class="line">    <span class="comment"># print(i,k)</span></span><br><span class="line">    dic[k]=vals[i] <span class="comment">## dic[&#x27;name&#x27;] = vals[0] = &#x27;szk&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment">### **pythonnic方式**</span></span><br><span class="line"></span><br><span class="line">dic = &#123;k:vals[i] <span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys) <span class="keyword">if</span> 条件判断&#125;</span><br></pre></td></tr></table></figure>

<p>总结：笔试和项目中比较常见的问题。推荐大家，代码比较简单的话，使用上面两种方式，而如果代码比较复杂的话，不建议大家使用</p>
<p>5.5 递归函数  <strong>面试中常见问题</strong></p>
<blockquote>
<p>函数自己调用自己</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello, f1&#x27;</span>)</span><br><span class="line">    f1()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码会报错误，因为，无限制的递归下去，会导致操作系统不断的在内存中开辟栈空间，因此会将内存撑爆，程序死掉。所以，为了防止这种情况出现，python设置了一个最大的递归深度，默认1000。如果想要设置这个递归的深度的话，需要改变一下递归的深度设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getrecursionlimit())  <span class="comment"># 查看最大递归深度 1000</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)  <span class="comment"># 修改最大递归深度</span></span><br></pre></td></tr></table></figure>

<p>所以，如果以后想使用递归的时候，<strong>需要在程序中加入一个终止条件</strong>。</p>
<p>举个例子：</p>
<p>求1到n=5的和？</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">想要获取<span class="number">1</span>到<span class="number">5</span>的和， 只需要知道，<span class="number">1</span>到<span class="number">4</span>的和， 然后加上<span class="number">5</span>，<span class="number">5</span> + sum(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> + sum(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> + sum(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> + sum(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> + sum(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sum1(n<span class="number">-1</span>) + n</span><br><span class="line">        </span><br><span class="line">sum1(5) ===&gt; sum1(4) + 5 </span><br><span class="line">sum1(4) ===&gt; sum1(3) + 4</span><br><span class="line">sum1(3) ===&gt; sum1(2) + 3</span><br><span class="line">sum1(2) ===&gt; sum1(1) + 2</span><br><span class="line">sum1(1) ===&gt; 1</span><br></pre></td></tr></table></figure>

<p>求n的阶乘？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>! = <span class="number">5</span> * <span class="number">4</span> * <span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>! = <span class="number">5</span> * <span class="number">4</span>!</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>! = <span class="number">4</span> * <span class="number">3</span>!</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>! = <span class="number">3</span> * <span class="number">2</span>!</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>! = <span class="number">2</span> * <span class="number">1</span>!</span><br><span class="line"></span><br><span class="line">n! = n * (n<span class="number">-1</span>)!</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sum1(n<span class="number">-1</span>) * n</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>求斐波那契数列</p>
<blockquote>
<p>0, 1, 1, 2, 3, 5, 8,13,21…… </p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">斐波那契数学规律</span><br><span class="line"></span><br><span class="line">当n=<span class="number">0</span>或者n=<span class="number">1</span>, <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">当n&gt;2, f(3) = f(1) + f(2) = 1 + 1 = 2  ==&gt; f(n) = f(n-1) + f(n-2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> <span class="keyword">or</span> n==<span class="number">1</span> :</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line">fib(4) ==&gt; fib(3) + fib(2)</span><br></pre></td></tr></table></figure>

<p>总结：递归比较难理解，因为自己调用自己，如果没有终止条件的话，很可能造成整个程序崩掉。在项目中用的比较少。递归使用最多的场景，是在算法，尤其是树的相关算法中，用的最多。所以面试考察递归的时候，除了，用上面这几个简单的例子外，最多考察的是遍历树之类的问题</p>
<p>有兴趣的话，可以刷一下，算法题中的树</p>
<p>6.函数名的作用以及闭包函数   <strong>面试和项目中的重点</strong></p>
<ul>
<li>函数名的作用</li>
</ul>
<blockquote>
<p>函数名本身就是一个内存地址, 是可以当做参数进行传递的,并且还可以赋值给别的变量</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">f1</span>):</span></span><br><span class="line">    f1()    </span><br><span class="line">    print(<span class="string">&quot;呵呵&quot;</span>)</span><br><span class="line">    print(func)</span><br><span class="line">    </span><br><span class="line">a = func    <span class="comment"># 把函数当成一个值赋值给另一个变量</span></span><br><span class="line">a()     <span class="comment"># 函数调用 func()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>闭包函数</li>
</ul>
<blockquote>
<p>外层函数中嵌套一个内层函数，然后，外层函数的返回值是这个内层函数。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        name = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">        print(name)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">outter()  <span class="comment">### wrapper()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>并且，函数执行完之后，内部的变量不会随着外面变量的改变而改变。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        name = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">        print(name)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">f1 = outter()</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;kkk&#x27;</span></span><br><span class="line">f1()  <span class="comment">### szk</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总结：函数的变量名和闭包函数的使用主要是为装饰器打的基础。这两个知识点，面试中比较常问。而以闭包函数问的最多。</p>
<p>7.**装饰器 面试和项目中的重中之重 **</p>
<p>最简单的装饰器的写法和使用：</p>
<blockquote>
<p>计算时间的装饰器</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 装饰器的写法：</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_time</span>(<span class="params">fuc</span>):</span>  <span class="comment">### 参数是需要计算的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warpper</span>(<span class="params">*args, **kwargs</span>):</span> <span class="comment">### 需要计算的函数的参数</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        fuc(*args, **kwargs)  <span class="comment">### 需要计算时间的函数</span></span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">    <span class="keyword">return</span> warpper</span><br><span class="line"></span><br><span class="line"><span class="comment">### 装饰器的使用：</span></span><br><span class="line"><span class="meta">@count_time   ### python提供的语法糖写法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>带参数的装饰器</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">engine</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>)</span></span><br><span class="line"><span class="function">            ....</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">wrapper</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">outter</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">@<span class="title">count_time</span>(<span class="params">engine=<span class="string">&#x27;file&#x27;</span></span>)  ### <span class="title">python</span>提供的语法糖写法</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">f1</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">wrapper(*args,**kwargs) 这个参数的功能是给原始函数用的；outter(func)，用来装被修饰的函数，auth(engine) 传给内层需要的函数。三层足够使用，最外层可以无限的延伸参数。</span><br></pre></td></tr></table></figure>

<p>总结：装饰器在面试和项目中用的最多。甚至在面试的时候，会当场让你写装饰器。在项目中多用来判断用户是否登录以及记录日志等功能。</p>
<p>函数部分的总结：</p>
<ul>
<li>函数的写法和定义以及基础的参数，位置参数，关键字参数，动态获取参数 </li>
<li>部分内置函数</li>
<li>迭代器和生成器</li>
<li>列表生成式和字典生成式</li>
<li>递归</li>
<li>闭包函数</li>
<li>装饰器</li>
</ul>
<h4 id="模块部分："><a href="#模块部分：" class="headerlink" title="模块部分："></a>模块部分：</h4><blockquote>
<p>python 之所以强大，很大一部分原因是python有非常丰富的内置模块和第三方模块和包</p>
</blockquote>
<ol start="0">
<li>模块的定义</li>
</ol>
<blockquote>
<p>模块的本质就是一系列的python程序。</p>
</blockquote>
<p>“””<br>1、执行源文件代码<br>2、产生一个新的名称空间用于存放源文件执行过程中产生的名字<br>3、在当前执行文件所在的名称空间中得到一个名字foo，该名字指向新创建的模块名称空间，若要引用模块名称空间中的名字，需要加上该前缀，如下</p>
<p>import foo #导入模块foo<br>a=foo.x #引用模块foo中变量x的值赋值给当前名称空间中的名字a<br>foo.get() #调用模块foo的get函数<br>foo.change() #调用模块foo中的change函数<br>obj=foo.Foo() #使用模块foo的类Foo来实例化，进一步可以执行obj.func()<br>“””</p>
<ol>
<li>模块的使用</li>
</ol>
<blockquote>
<p><strong>import 模块名</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> md  <span class="comment">### 直接导入模块文件名即可</span></span><br><span class="line">print(md.read())  <span class="comment">### 调用模块中常见的方法和属性，使用.的方式来获取和使用</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>使用.的方式获取所有的函数或者属性</li>
<li>引入的方法不会和当前运行文件中的函数或者属性冲突</li>
</ul>
<blockquote>
<p><strong>from 模块 import 引入的函数或者属性</strong><br>1.产生一个模块的名称空间<br>2.运行foo.py将运行过程中产生的名字都丢到模块的名称空间去<br><strong>3.在当前名称空间拿到一个名字，该名字与模块名称空间中某一个内存地址关联</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> md <span class="keyword">import</span> read</span><br><span class="line">read()</span><br></pre></td></tr></table></figure>
<p><strong>import x x=模块foo中值0的内存地址</strong></p>
<img src="/2020/08/29/py-day04/from%E5%AF%BC%E5%8C%85x%E7%9A%84%E5%85%B3%E7%B3%BB.png" class title="py-day04">
<img src="/2020/08/29/py-day04/import.png" class title="py-day04">

<ul>
<li>from 模块 import *<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from foo import * #把foo中所有的名字都导入到当前执行文件的名称空间中，在当前位置直接可以使用这些名字</span><br><span class="line"></span><br><span class="line">a&#x3D;x</span><br><span class="line">get()</span><br><span class="line">change()</span><br><span class="line">obj&#x3D;Foo()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#foo.py</span><br><span class="line">__all__&#x3D;[&#39;x&#39;,&#39;get&#39;] #该列表中所有的元素必须是字符串类型，每个元素对应foo.py中的一个名字</span><br><span class="line">x&#x3D;1</span><br><span class="line">def get():</span><br><span class="line">    print(x)</span><br><span class="line">def change():</span><br><span class="line">    global x</span><br><span class="line">    x&#x3D;0</span><br><span class="line">class Foo:</span><br><span class="line">    def func(self):</span><br><span class="line">       print(&#39;from the func&#39;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>无需加前缀的好处是使得我们的代码更加简洁，坏处则是容易与当前名称空间中的名字冲突，如果当前名称空间存在相同的名字，则后定义的名字会覆盖之前定义的名字。</p>
<ul>
<li>优点：使用啥就导入啥，提高程序的执行效率</li>
</ul>
<blockquote>
<p><strong>import foo as f #为导入的模块foo在当前位置起别名f，以后再使用时就用这个别名f</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">as</span> f <span class="comment">#为导入的模块foo在当前位置起别名f，以后再使用时就用这个别名f</span></span><br><span class="line">f.x</span><br><span class="line">f.get()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>模块的导入查找方式</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">模块的查询顺序</span><br><span class="line">    <span class="number">1.</span>先从内存中找可能已经加载了的</span><br><span class="line">    <span class="number">2.</span>python 内置模块  </span><br><span class="line">    <span class="number">3.</span>sys.path列表里面每一个路径下去找, 需要知道sys.path列表中第一个路径就是当前被执行文件所在的文件夹（pycharm会加上根路径，不要考虑）</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如何解决上述找不到的路径的问题：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">###两种方式</span></span><br><span class="line"><span class="comment">#### 1.将该模块的绝对路径加入到sys.path中</span></span><br><span class="line">sys.path.append(<span class="string">r&#x27;/Users/shangzekai/PycharmProjects/day04/md1/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> md  <span class="comment">###</span></span><br><span class="line">print(md.read1())</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 2.从根路径下面的模块开始导入</span></span><br><span class="line"><span class="keyword">from</span> md1 <span class="keyword">import</span> md</span><br><span class="line"><span class="keyword">from</span> md1.md <span class="keyword">import</span> read, read1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>循环导入问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m1.py</span><br><span class="line"></span><br><span class="line">print(&#39;正在导入m1&#39;)</span><br><span class="line">from m2 import y</span><br><span class="line"></span><br><span class="line">x&#x3D;&#39;m1&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m2.py</span><br><span class="line"></span><br><span class="line">print(&#39;正在导入m2&#39;)</span><br><span class="line">from m1 import x</span><br><span class="line"></span><br><span class="line">y&#x3D;&#39;m2&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run.py</span><br><span class="line"></span><br><span class="line">import m1</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、执行run.py会抛出异常</span><br><span class="line">正在导入m1</span><br><span class="line">正在导入m2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&#x2F;Users&#x2F;linhaifeng&#x2F;PycharmProjects&#x2F;pro01&#x2F;1 aaaa练习目录&#x2F;aa.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    import m1</span><br><span class="line">  File &quot;&#x2F;Users&#x2F;linhaifeng&#x2F;PycharmProjects&#x2F;pro01&#x2F;1 aaaa练习目录&#x2F;m1.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    from m2 import y</span><br><span class="line">  File &quot;&#x2F;Users&#x2F;linhaifeng&#x2F;PycharmProjects&#x2F;pro01&#x2F;1 aaaa练习目录&#x2F;m2.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    from m1 import x</span><br><span class="line">ImportError: cannot import name &#39;x&#39;</span><br><span class="line"></span><br><span class="line">#2、分析</span><br><span class="line">先执行run.py---&gt;执行import m1，开始导入m1并运行其内部代码---&gt;打印内容&quot;正在导入m1&quot;</span><br><span class="line">---&gt;执行from m2 import y 开始导入m2并运行其内部代码---&gt;打印内容“正在导入m2”---&gt;执行from m1 import x,由于m1已经被导入过了，所以不会重新导入，所以直接去m1中拿x，然而x此时并没有存在于m1中，所以报错</span><br></pre></td></tr></table></figure>
<p>解决方法：1.变量名字上提  2.导入语句放到函数中 3.放到中转模块上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 方案一：导入语句放到最后，保证在导入时，所有名字都已经加载过</span><br><span class="line"># 文件：m1.py</span><br><span class="line">print(&#39;正在导入m1&#39;)</span><br><span class="line"></span><br><span class="line">x&#x3D;&#39;m1&#39;</span><br><span class="line"></span><br><span class="line">from m2 import y</span><br><span class="line"></span><br><span class="line"># 文件：m2.py</span><br><span class="line">print(&#39;正在导入m2&#39;)</span><br><span class="line">y&#x3D;&#39;m2&#39;</span><br><span class="line"></span><br><span class="line">from m1 import x</span><br><span class="line"></span><br><span class="line"># 文件：run.py内容如下，执行该文件，可以正常使用</span><br><span class="line">import m1</span><br><span class="line">print(m1.x)</span><br><span class="line">print(m1.y)</span><br><span class="line"></span><br><span class="line"># 方案二：导入语句放到函数中，只有在调用函数时才会执行其内部代码</span><br><span class="line"># 文件：m1.py</span><br><span class="line">print(&#39;正在导入m1&#39;)</span><br><span class="line"></span><br><span class="line">def f1():</span><br><span class="line">    from m2 import y</span><br><span class="line">    print(x,y)</span><br><span class="line"></span><br><span class="line">x &#x3D; &#39;m1&#39;</span><br><span class="line"></span><br><span class="line"># 文件：m2.py</span><br><span class="line">print(&#39;正在导入m2&#39;)</span><br><span class="line"></span><br><span class="line">def f2():</span><br><span class="line">    from m1 import x</span><br><span class="line">    print(x,y)</span><br><span class="line"></span><br><span class="line">y &#x3D; &#39;m2&#39;</span><br><span class="line"></span><br><span class="line"># 文件：run.py内容如下，执行该文件，可以正常使用</span><br><span class="line">import m1</span><br><span class="line"></span><br><span class="line">m1.f1()</span><br></pre></td></tr></table></figure>
</li>
<li><p>点的问题 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">导入语句中的 &quot;.&quot; 是路径分隔符</span><br><span class="line">使用语句中的. 是向名称空间要名字</span><br></pre></td></tr></table></figure>
</li>
<li><p>区分py文件的两种用途<br>一个Python文件有两种用途，一种被当主程序/脚本执行，另一种被当模块导入，为了区别同一个文件的不同用途，每个py文件都内置了__name__变量.<br>__name__在py文件被当做脚本执行时赋值为“__main__”,<br>__name__在py文件被当做模块导入时赋值为模块名.</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">作为模块foo.py的开发者，可以在文件末尾基于__name__在不同应用场景下值的不同来控制文件执行不同的逻辑</span><br><span class="line"><span class="comment">#foo.py</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo.py被当做脚本执行时运行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    foo.py被当做模块导入时运行的代码</span><br><span class="line"></span><br><span class="line">通常我们会在<span class="keyword">if</span>的子代码块中编写针对模块功能的测试代码，这样foo.py在被当做脚本运行时，就会执行测试代码，而被当做模块导入时则不用执行测试代码。</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>模块的分类</p>
<ul>
<li>自定义模块</li>
<li>内置模块</li>
<li>第三方模块 </li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  <span class="comment"># 当文件被直接执行时</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.常见的内置模块</p>
<ul>
<li><p>sys ： </p>
<ul>
<li>sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值<br>-os:</li>
<li>os.path.abspath(path)       返回path规范化的绝对路径</li>
<li>os.path.split(path)         将path分割成目录和文件名二元组返回</li>
<li>os.path.dirname(path)       返回path的目录。其实就是os.path.split(path)的第一个元素</li>
<li>os.path.basename(path)      返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</li>
<li>os.path.exists(path)        如果path存在，返回True；如果path不存在，返回False</li>
<li>os.path.isfile(path)        如果path是一个存在的文件，返回True。否则返回False</li>
<li>os.path.isdir(path)         如果path是一个存在的目录，则返回True。否则返回False</li>
</ul>
</li>
<li><p>random : 生成随机字符串，验证码</p>
<ul>
<li>random.randint(1,2)</li>
</ul>
</li>
<li><p>json 使用的场景非常多，常见于不同的语言和python进行数据交互使用</p>
<ul>
<li>dumps：序列化</li>
<li>loads: 反序列化</li>
<li>dump</li>
<li>load   </li>
</ul>
</li>
<li><p>hashlib  编码</p>
<ul>
<li>md5</li>
<li>sha1</li>
<li>sha256</li>
</ul>
</li>
</ul>
<h4 id="包部分："><a href="#包部分：" class="headerlink" title="包部分："></a>包部分：</h4><p>“””<br>随着模块数目的增多，把所有模块不加区分地放到一起也是极不合理的，于是Python为我们提供了一种把模块组织到一起的方法，即创建一个包。包就是一个含有<strong>init</strong>.py文件的文件夹，文件夹内可以组织子模块或子包，例如<br>“””</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pool&#x2F;                #顶级包</span><br><span class="line">├── __init__.py     </span><br><span class="line">├── futures          #子包</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── process.py</span><br><span class="line">│   └── thread.py</span><br><span class="line">└── versions.py      #子模块</span><br></pre></td></tr></table></figure>

<h5 id="1-包就是包含有init-py的文件夹；"><a href="#1-包就是包含有init-py的文件夹；" class="headerlink" title="1.包就是包含有init.py的文件夹；"></a>1.包就是包含有<strong>init</strong>.py的文件夹；</h5><h5 id="2-包的本质是文件的一种形式，包是用来当做模块导入的"><a href="#2-包的本质是文件的一种形式，包是用来当做模块导入的" class="headerlink" title="2.包的本质是文件的一种形式，包是用来当做模块导入的"></a>2.包的本质是文件的一种形式，包是用来当做模块导入的</h5><ul>
<li>需要强调</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1. 在python3中，即使包下没有__init__.py文件，import 包仍然不会报错，而在python2中，包下一定要有该文件，否则import 包报错</span><br><span class="line"></span><br><span class="line">#2. 创建包的目的不是为了运行，而是被导入使用，记住，包只是模块的一种形式而已，包的本质就是一种模块</span><br></pre></td></tr></table></figure>

<ul>
<li>导入包与<strong>init</strong>.py-包的使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、执行包下的__init__.py文件</span><br><span class="line">2、产生一个新的名称空间用于存放__init__.py执行过程中产生的名字</span><br><span class="line">3、在当前执行文件所在的名称空间中得到一个名字pool，该名字指向__init__.py的名称空间，例如http:&#x2F;&#x2F;pool.xxx和pool.yyy中的xxx和yyy都是来自于pool下的__init__.py，也就是说导入包时并不会导入包下所有的子模块与子包</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h5 id="强调-包的使用"><a href="#强调-包的使用" class="headerlink" title="强调 - 包的使用"></a><strong>强调</strong> - 包的使用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.关于包相关的导入语句也分为import和from ... import ...两种，但是无论哪种，无论在什么位置，在导入时都必须遵循一个原则：凡是在导入时带点的，点的左边都必须是一个包，否则非法。可以带有一连串的点，如import 顶级包.子包.子模块,但都必须遵循这个原则。但对于导入后，在使用时就没有这种限制了，点的左边可以是包,模块，函数，类(它们都可以用点的方式调用自己的属性)。</span><br><span class="line"></span><br><span class="line">2、包A和包B下有同名模块也不会冲突，如A.a与B.a来自俩个命名空间</span><br><span class="line"></span><br><span class="line">3、import导入文件时，产生名称空间中的名字来源于文件，import 包，产生的名称空间的名字同样来源于文件，即包下的__init__.py，导入包本质就是在导入该文件</span><br></pre></td></tr></table></figure>

<h5 id="绝对导入与相对导入"><a href="#绝对导入与相对导入" class="headerlink" title="绝对导入与相对导入"></a>绝对导入与相对导入</h5><p>1、绝对导入：以顶级包为起始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pool下的__init__.py</span></span><br><span class="line"><span class="keyword">from</span> pool <span class="keyword">import</span> versions</span><br></pre></td></tr></table></figure>

<p>2、相对导入：.代表当前文件所在的目录，..代表当前目录的上一级目录，依此类推</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pool下的__init__.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> versions</span><br></pre></td></tr></table></figure>
<p>同理，针对pool.futures.process.ProcessPoolExecutor(3)，则需要</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#操作pool下的__init__.py，保证pool.futures</span><br><span class="line">from . import futures #或from pool import futures</span><br><span class="line"></span><br><span class="line">#操作futrues下的__init__.py，保证pool.futures.process</span><br><span class="line">from . import process #或from pool.futures import process</span><br></pre></td></tr></table></figure>
<p>在包内使用相对导入还可以跨目录导入模块，比如thread.py中想引用versions.py的名字check</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import也能使用绝对导入，导入过程中同样会依次执行包下的__init__.py,只是基于import导入的结果，使用时必须加上该前缀</span><br></pre></td></tr></table></figure>
<p>例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pool.futures #拿到名字pool.futures指向futures下的__init__.py</span><br><span class="line">pool.futures.xxx #要求futures下的__init__.py中必须有名字xxx</span><br></pre></td></tr></table></figure>
<p>例2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pool.futures.thread #拿到名字pool.futures.thread指向thread.py</span><br><span class="line"></span><br><span class="line">thread_pool&#x3D;pool.futures.thread.ThreadPoolExecutor(3)</span><br><span class="line">thread_pool.submit()</span><br></pre></td></tr></table></figure>
<p>相对导入只能用from module import symbol的形式,import ..versions语法是不对的，且symbol只能是一个明确的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from pool import futures.process #语法错误</span><br><span class="line">from pool.futures import process #语法正确</span><br></pre></td></tr></table></figure>
<ul>
<li>针对包内部模块之间的相互导入推荐使用相对导入，需要特别强调：<blockquote>
<p>1、相对导入只能在包内部使用，用相对导入不同目录下的模块是非法的<br>2、无论是import还是from-import，但凡是在导入时带点的，点的左边必须是包,否则语法错误</p>
</blockquote>
</li>
</ul>
<h5 id="总结包的使用需要牢记三点"><a href="#总结包的使用需要牢记三点" class="headerlink" title="总结包的使用需要牢记三点"></a>总结包的使用需要牢记三点</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、导包就是在导包下__init__.py文件</span><br><span class="line">2、包内部的导入应该使用相对导入，相对导入也只能在包内部使用，而且...取上一级不能出包</span><br><span class="line">3、</span><br><span class="line">使用语句中的点代表的是访问属性</span><br><span class="line">m.n.x ----&gt; 向m要n，向n要x</span><br><span class="line">而导入语句中的点代表的是路径分隔符</span><br><span class="line">import a.b.c --&gt; a&#x2F;b&#x2F;c，文件夹下a下有子文件夹b，文件夹b下有子文件或文件夹c</span><br><span class="line">所以导入语句中点的左边必须是一个包</span><br></pre></td></tr></table></figure>


<h4 id="项目里面需要注意："><a href="#项目里面需要注意：" class="headerlink" title="项目里面需要注意："></a>项目里面需要注意：</h4><ol>
<li>项目内文件相互引用，选择在环境变量里append在启动文件所在的项目根目录。<br>import os<br>print(<strong>file</strong>)) #当前文件的绝对路径<br>BASE_DIR = os.path.dirname(os.path.dirname(<strong>file</strong>))<br>print(BASE_DIR)<br>sys.path.append(BASE_DIR)</li>
</ol>
<p>LOG_PATH = os.path.join(BASE_DIR,’log’,’access.log’)</p>
<h4 id="本周内容："><a href="#本周内容：" class="headerlink" title="本周内容："></a>本周内容：</h4><p>0.内置的模块</p>
<img src="/2020/08/29/py-day04/%E6%97%B6%E9%97%B4%E6%88%B3.png" class title="内置函数">
<ol>
<li>时间模块 （time）<ul>
<li>import time   time.time() </li>
<li>time.sleep(3)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入时间模块</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#时间戳</span></span><br><span class="line">&gt;&gt;&gt;time.time()</span><br><span class="line"><span class="number">1500875844.800804</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间字符串</span></span><br><span class="line">&gt;&gt;&gt;time.strftime(<span class="string">&quot;%Y-%m-%d %X&quot;</span>)</span><br><span class="line"><span class="string">&#x27;2017-07-24 13:54:37&#x27;</span></span><br><span class="line">&gt;&gt;&gt;time.strftime(<span class="string">&quot;%Y-%m-%d %H-%M-%S&quot;</span>)</span><br><span class="line"><span class="string">&#x27;2017-07-24 13-55-04&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间元组:localtime将一个时间戳转换为当前时区的struct_time</span></span><br><span class="line">time.localtime()</span><br><span class="line">time.struct_time(tm_year=<span class="number">2017</span>, tm_mon=<span class="number">7</span>, tm_mday=<span class="number">24</span>,</span><br><span class="line">　　　　　　　　　　tm_hour=<span class="number">13</span>, tm_min=<span class="number">59</span>, tm_sec=<span class="number">37</span>, </span><br><span class="line">                 tm_wday=<span class="number">0</span>, tm_yday=<span class="number">205</span>, tm_isdst=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ul>
<li>重点转换 字符串&lt;–&gt;时间戳<br>字符串–&gt;时间戳<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 如果别人给你传了一个2016-05-22，转换成时间戳</span></span><br><span class="line"><span class="comment">#将 日期字符串 转成 struct时间对象格式</span></span><br><span class="line">string_to_struct = time.strptime(<span class="string">&quot;2016-05-22&quot;</span>,<span class="string">&quot;%Y-%m-%d&quot;</span>) </span><br><span class="line"><span class="comment"># print(string_to_struct)</span></span><br><span class="line"><span class="comment">#将struct时间对象转成时间戳</span></span><br><span class="line">struct_to_stamp = time.mktime(string_to_struct) </span><br><span class="line">print(struct_to_stamp)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>时间戳 -&gt; 日期字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,time.gmtime()) )</span><br></pre></td></tr></table></figure>
<p>总结：时间的转换以及时间的加减</p>
<ol>
<li><p>时间模块datetime</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义日期</span></span><br><span class="line">res = datetime.date(<span class="number">2019</span>, <span class="number">7</span>, <span class="number">15</span>)</span><br><span class="line">print(res)  <span class="comment"># 2019-07-15</span></span><br><span class="line"></span><br><span class="line">dt_now = datetime.datetime.now()</span><br><span class="line">tdelta = datetime.timedelta(days=<span class="number">7</span>)</span><br><span class="line">print(datetime.datetime.now() + datetime.timedelta(days=<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>random模块<br>场景：验证码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def make_code(size&#x3D;6):</span><br><span class="line">    res &#x3D; &#39;&#39;</span><br><span class="line">    for i in range(size):</span><br><span class="line">        num &#x3D; str(random.randint(0,9))</span><br><span class="line">        alpha &#x3D; chr(random.randint(65,90))</span><br><span class="line">        res +&#x3D; random.choice([num,alpha])</span><br><span class="line">    return res</span><br><span class="line">print(make_code())</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#随机小数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()      <span class="comment"># 大于0且小于1之间的小数</span></span><br><span class="line"><span class="number">0.7664338663654585</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">#大于1小于3的小数</span></span><br><span class="line"><span class="number">1.6270147180533838</span><span class="comment">#恒富：发红包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#随机整数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">5</span>)  <span class="comment"># 大于等于1且小于等于5之间的整数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>) <span class="comment"># 大于等于1且小于10之间的奇数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#随机选择一个返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="number">1</span>,<span class="string">&#x27;23&#x27;</span>,[<span class="number">4</span>,<span class="number">5</span>]])  <span class="comment"># #1或者23或者[4,5]</span></span><br><span class="line"><span class="comment">#随机选择多个返回，返回的个数为函数的第二个参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample([<span class="number">1</span>,<span class="string">&#x27;23&#x27;</span>,[<span class="number">4</span>,<span class="number">5</span>]],<span class="number">2</span>) <span class="comment"># #列表元素任意2个组合</span></span><br><span class="line">[[<span class="number">4</span>, <span class="number">5</span>], <span class="string">&#x27;23&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#打乱列表顺序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(item) <span class="comment"># 打乱次序</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item</span><br><span class="line">[<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(item)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>item</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>os模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.makedirs(<span class="string">&#x27;dirname1/dirname2&#x27;</span>)    可生成多层递归目录</span><br><span class="line">os.removedirs(<span class="string">&#x27;dirname1&#x27;</span>)    若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</span><br><span class="line">os.mkdir(<span class="string">&#x27;dirname&#x27;</span>)    生成单级目录；相当于shell中mkdir dirname</span><br><span class="line">os.rmdir(<span class="string">&#x27;dirname&#x27;</span>)    删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</span><br><span class="line">os.listdir(<span class="string">&#x27;dirname&#x27;</span>)    列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</span><br><span class="line">os.remove()  删除一个文件</span><br><span class="line">os.rename(<span class="string">&quot;oldname&quot;</span>,<span class="string">&quot;newname&quot;</span>)  重命名文件/目录</span><br><span class="line">os.stat(<span class="string">&#x27;path/filename&#x27;</span>)  获取文件/目录信息</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&quot;bash command&quot;</span>)  运行shell命令，直接显示</span><br><span class="line">os.popen(<span class="string">&quot;bash command).read()  运行shell命令，获取执行结果</span></span><br><span class="line"><span class="string">os.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径</span></span><br><span class="line"><span class="string">os.chdir(&quot;</span>dirname<span class="string">&quot;)  改变当前脚本工作目录；相当于shell下cd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">os.path</span></span><br><span class="line"><span class="string">os.path.abspath(path) 返回path规范化的绝对路径os.path.split(path) 将path分割成目录和文件名二元组返回 </span></span><br><span class="line"><span class="string">os.path.dirname(path) 返回path的目录。其实就是os.path.split(path)的第一个元素 </span></span><br><span class="line"><span class="string">os.path.basename(path) 返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</span></span><br><span class="line"><span class="string">os.path.exists(path)  如果path存在，返回True；如果path不存在，返回False</span></span><br><span class="line"><span class="string">os.path.isabs(path)  如果path是绝对路径，返回True</span></span><br><span class="line"><span class="string">os.path.isfile(path)  如果path是一个存在的文件，返回True。否则返回False</span></span><br><span class="line"><span class="string">os.path.isdir(path)  如果path是一个存在的目录，则返回True。否则返回False</span></span><br><span class="line"><span class="string">os.path.join(path1[, path2[, ...]])  将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span></span><br><span class="line"><span class="string">os.path.getatime(path)  返回path所指向的文件或者目录的最后访问时间</span></span><br><span class="line"><span class="string">os.path.getmtime(path)  返回path所指向的文件或者目录的最后修改时间</span></span><br><span class="line"><span class="string">os.path.getsize(path) 返回path的大小</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sys模块<br>sys模块是与python解释器交互的一个接口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.argv           命令行参数List，第一个元素是程序本身路径</span><br><span class="line">sys.exit(n)        退出程序，正常退出时exit(<span class="number">0</span>),错误退出sys.exit(<span class="number">1</span>)</span><br><span class="line">sys.version        获取Python解释程序的版本信息</span><br><span class="line">sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span><br><span class="line">sys.platform       返回操作系统平台名称</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> SystemExit <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure></li>
<li><p>pathlib模块(3.5之后一个新的模块)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">res = Path(__file__).parent.parent</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">路径拼接</span><br><span class="line">res = Path(<span class="string">&#x27;/a/b/c&#x27;</span>) / <span class="string">&#x27;d/e.txt&#x27;</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="6">
<li>configparser模块<br>该模块适用于配置文件的格式与windows ini文件类似，可以包含一个或多个节（section），每个节可以有多个参数（键=值）。<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">ServerAliveInterval</span> = <span class="number">45</span></span><br><span class="line"><span class="attr">Compression</span> = <span class="literal">yes</span></span><br><span class="line"><span class="attr">CompressionLevel</span> = <span class="number">9</span></span><br><span class="line"><span class="attr">ForwardX11</span> = <span class="literal">yes</span></span><br><span class="line">  </span><br><span class="line"><span class="section">[bitbucket.org]</span></span><br><span class="line"><span class="attr">User</span> = hg</span><br><span class="line">  </span><br><span class="line"><span class="section">[topsecret.server.com]</span></span><br><span class="line"><span class="attr">Port</span> = <span class="number">50022</span></span><br><span class="line"><span class="attr">ForwardX11</span> = <span class="literal">no</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>如果想用python生成一个这样的文档怎么做呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line">config[<span class="string">&quot;DEFAULT&quot;</span>] = &#123;<span class="string">&#x27;ServerAliveInterval&#x27;</span>: <span class="string">&#x27;45&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;Compression&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;CompressionLevel&#x27;</span>: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;ForwardX11&#x27;</span>:<span class="string">&#x27;yes&#x27;</span></span><br><span class="line">                     &#125;</span><br><span class="line"></span><br><span class="line">config[<span class="string">&#x27;bitbucket.org&#x27;</span>] = &#123;<span class="string">&#x27;User&#x27;</span>:<span class="string">&#x27;hg&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">config[<span class="string">&#x27;topsecret.server.com&#x27;</span>] = &#123;<span class="string">&#x27;Host Port&#x27;</span>:<span class="string">&#x27;50022&#x27;</span>,<span class="string">&#x27;ForwardX11&#x27;</span>:<span class="string">&#x27;no&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;example.ini&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> configfile:</span><br><span class="line"></span><br><span class="line">   config.write(configfile)</span><br></pre></td></tr></table></figure>
<p>查找文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------查找文件内容,基于字典的形式</span></span><br><span class="line"></span><br><span class="line">print(config.sections())        <span class="comment">#  []</span></span><br><span class="line"></span><br><span class="line">config.read(<span class="string">&#x27;example.ini&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(config.sections())        <span class="comment">#   [&#x27;bitbucket.org&#x27;, &#x27;topsecret.server.com&#x27;]</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;bytebong.com&#x27;</span> <span class="keyword">in</span> config) <span class="comment"># False</span></span><br><span class="line">print(<span class="string">&#x27;bitbucket.org&#x27;</span> <span class="keyword">in</span> config) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(config[<span class="string">&#x27;bitbucket.org&#x27;</span>][<span class="string">&quot;user&quot;</span>])  <span class="comment"># hg</span></span><br><span class="line"></span><br><span class="line">print(config[<span class="string">&#x27;DEFAULT&#x27;</span>][<span class="string">&#x27;Compression&#x27;</span>]) <span class="comment">#yes</span></span><br><span class="line"></span><br><span class="line">print(config[<span class="string">&#x27;topsecret.server.com&#x27;</span>][<span class="string">&#x27;ForwardX11&#x27;</span>])  <span class="comment">#no</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(config[<span class="string">&#x27;bitbucket.org&#x27;</span>])          <span class="comment">#&lt;Section: bitbucket.org&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> config[<span class="string">&#x27;bitbucket.org&#x27;</span>]:     <span class="comment"># 注意,有default会默认default的键</span></span><br><span class="line">    print(key)</span><br><span class="line"></span><br><span class="line">print(config.options(<span class="string">&#x27;bitbucket.org&#x27;</span>))  <span class="comment"># 同for循环,找到&#x27;bitbucket.org&#x27;下所有键</span></span><br><span class="line"></span><br><span class="line">print(config.items(<span class="string">&#x27;bitbucket.org&#x27;</span>))    <span class="comment">#找到&#x27;bitbucket.org&#x27;下所有键值对</span></span><br><span class="line"></span><br><span class="line">print(config.get(<span class="string">&#x27;bitbucket.org&#x27;</span>,<span class="string">&#x27;compression&#x27;</span>)) <span class="comment"># yes       get方法Section下的key对应的value</span></span><br></pre></td></tr></table></figure>
<p>增删改操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line">config.read(<span class="string">&#x27;example.ini&#x27;</span>)</span><br><span class="line"></span><br><span class="line">config.add_section(<span class="string">&#x27;yuan&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config.remove_section(<span class="string">&#x27;bitbucket.org&#x27;</span>)</span><br><span class="line">config.remove_option(<span class="string">&#x27;topsecret.server.com&#x27;</span>,<span class="string">&quot;forwardx11&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config.set(<span class="string">&#x27;topsecret.server.com&#x27;</span>,<span class="string">&#x27;k1&#x27;</span>,<span class="string">&#x27;11111&#x27;</span>)</span><br><span class="line">config.set(<span class="string">&#x27;yuan&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>,<span class="string">&#x27;22222&#x27;</span>)</span><br><span class="line"></span><br><span class="line">config.write(open(<span class="string">&#x27;new2.ini&#x27;</span>, <span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>logging模块</li>
</ol>
<ul>
<li>函数式简单配置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line">logging.debug(<span class="string">&#x27;debug message&#x27;</span>)  </span><br><span class="line">logging.info(<span class="string">&#x27;info message&#x27;</span>)  </span><br><span class="line">logging.warning(<span class="string">&#x27;warning message&#x27;</span>)  </span><br><span class="line">logging.error(<span class="string">&#x27;error message&#x27;</span>)  </span><br><span class="line">logging.critical(<span class="string">&#x27;critical message&#x27;</span>) </span><br></pre></td></tr></table></figure>
默认情况下Python的logging模块将日志打印到了标准输出中，且只显示了大于等于WARNING级别的日志，这说明默认的日志级别设置为WARNING（日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG），默认的日志格式为日志级别：Logger名称：用户输出消息。</li>
</ul>
<p><strong>灵活配置日志级别，日志格式，输出位置:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">file_handler = logging.FileHandler(filename=<span class="string">&#x27;x1.log&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>,)</span><br><span class="line">logging.basicConfig(</span><br><span class="line">    format=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line">    handlers=[file_handler,],</span><br><span class="line">    level=logging.ERROR</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logging.error(<span class="string">&#x27;你好&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>日志切割</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> handlers</span><br><span class="line"></span><br><span class="line">sh = logging.StreamHandler()</span><br><span class="line">rh = handlers.RotatingFileHandler(<span class="string">&#x27;myapp.log&#x27;</span>, maxBytes=<span class="number">1024</span>,backupCount=<span class="number">5</span>)</span><br><span class="line">fh = handlers.TimedRotatingFileHandler(filename=<span class="string">&#x27;x2.log&#x27;</span>, when=<span class="string">&#x27;s&#x27;</span>, interval=<span class="number">5</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">logging.basicConfig(</span><br><span class="line">    format=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line">    handlers=[fh,sh,rh],</span><br><span class="line">    level=logging.ERROR</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100000</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    logging.error(<span class="string">&#x27;KeyboardInterrupt error %s&#x27;</span>%str(i))</span><br></pre></td></tr></table></figure>

<p>配置参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logging.basicConfig()函数中可通过具体参数来更改logging模块默认行为，可用参数有：</span><br><span class="line"></span><br><span class="line">filename：用指定的文件名创建FiledHandler，这样日志会被存储在指定的文件中。</span><br><span class="line">filemode：文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。</span><br><span class="line">format：指定handler使用的日志显示格式。</span><br><span class="line">datefmt：指定日期时间格式。</span><br><span class="line">level：设置rootlogger（后边会讲解具体概念）的日志级别</span><br><span class="line">stream：用指定的stream创建StreamHandler。可以指定输出到sys.stderr,sys.stdout或者文件(f&#x3D;open(‘test.log’,’w’))，默认为sys.stderr。若同时列出了filename和stream两个参数，则stream参数会被忽略。</span><br><span class="line"></span><br><span class="line">format参数中可能用到的格式化串：</span><br><span class="line">%(name)s Logger的名字</span><br><span class="line">%(levelno)s 数字形式的日志级别</span><br><span class="line">%(levelname)s 文本形式的日志级别</span><br><span class="line">%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</span><br><span class="line">%(filename)s 调用日志输出函数的模块的文件名</span><br><span class="line">%(module)s 调用日志输出函数的模块名</span><br><span class="line">%(funcName)s 调用日志输出函数的函数名</span><br><span class="line">%(lineno)d 调用日志输出函数的语句所在的代码行</span><br><span class="line">%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</span><br><span class="line">%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</span><br><span class="line">%(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</span><br><span class="line">%(thread)d 线程ID。可能没有</span><br><span class="line">%(threadName)s 线程名。可能没有</span><br><span class="line">%(process)d 进程ID。可能没有</span><br><span class="line">%(message)s用户输出的消息</span><br></pre></td></tr></table></figure>
<ul>
<li>logger对象配置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line"><span class="comment"># 创建一个handler，用于写入日志文件</span></span><br><span class="line">fh = logging.FileHandler(<span class="string">&#x27;test.log&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 再创建一个handler，用于输出到控制台 ch = logging.StreamHandler() formatter = logging.Formatter(&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;)</span></span><br><span class="line">fh.setLevel(logging.DEBUG)fh.setFormatter(formatter) ch.setFormatter(formatter) </span><br><span class="line">logger.addHandler(fh) <span class="comment">#logger对象可以添加多个fh和ch对象 logger.addHandler(ch) logger.debug(&#x27;logger debug message&#x27;) logger.info(&#x27;logger info message&#x27;) logger.warning(&#x27;logger warning message&#x27;) logger.error(&#x27;logger error message&#x27;) logger.critical(&#x27;logger critical message&#x27;)</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>logging库提供了多个组件：Logger、Handler、Filter、Formatter。Logger对象提供应用程序可直接使用的接口，Handler发送日志到适当的目的地，Filter提供了过滤日志信息的方法，Formatter指定日志显示格式。另外，可以通过：logger.setLevel(logging.Debug)设置级别,当然，也可以通过</p>
<p>fh.setLevel(logging.Debug)单对文件流设置某个级别。</p>
<h5 id="日志模块直奔主题版"><a href="#日志模块直奔主题版" class="headerlink" title="日志模块直奔主题版"></a>日志模块直奔主题版</h5><p>1、日志级别与配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一：日志配置</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    <span class="comment"># 1、日志输出位置：1、终端 2、文件</span></span><br><span class="line">    <span class="comment"># filename=&#x27;access.log&#x27;, # 不指定，默认打印到终端</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2、日志格式</span></span><br><span class="line">    format=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3、时间格式</span></span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S %p&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4、日志级别</span></span><br><span class="line">    <span class="comment"># critical =&gt; 50</span></span><br><span class="line">    <span class="comment"># error =&gt; 40</span></span><br><span class="line">    <span class="comment"># warning =&gt; 30</span></span><br><span class="line">    <span class="comment"># info =&gt; 20</span></span><br><span class="line">    <span class="comment"># debug =&gt; 10</span></span><br><span class="line">    level=<span class="number">30</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二：输出日志</span></span><br><span class="line">logging.debug(<span class="string">&#x27;调试debug&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;消息info&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;警告warn&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;错误error&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;严重critical&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 注意下面的root是默认的日志名字</span></span><br><span class="line"><span class="string">WARNING:root:警告warn</span></span><br><span class="line"><span class="string">ERROR:root:错误error</span></span><br><span class="line"><span class="string">CRITICAL:root:严重critical</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>生产配置<br>2、日志配置字典<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">logging配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、定义三种日志输出格式，日志中可能用到的格式化串如下</span></span><br><span class="line"><span class="comment"># %(name)s Logger的名字</span></span><br><span class="line"><span class="comment"># %(levelno)s 数字形式的日志级别</span></span><br><span class="line"><span class="comment"># %(levelname)s 文本形式的日志级别</span></span><br><span class="line"><span class="comment"># %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</span></span><br><span class="line"><span class="comment"># %(filename)s 调用日志输出函数的模块的文件名</span></span><br><span class="line"><span class="comment"># %(module)s 调用日志输出函数的模块名</span></span><br><span class="line"><span class="comment"># %(funcName)s 调用日志输出函数的函数名</span></span><br><span class="line"><span class="comment"># %(lineno)d 调用日志输出函数的语句所在的代码行</span></span><br><span class="line"><span class="comment"># %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</span></span><br><span class="line"><span class="comment"># %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</span></span><br><span class="line"><span class="comment"># %(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</span></span><br><span class="line"><span class="comment"># %(thread)d 线程ID。可能没有</span></span><br><span class="line"><span class="comment"># %(threadName)s 线程名。可能没有</span></span><br><span class="line"><span class="comment"># %(process)d 进程ID。可能没有</span></span><br><span class="line"><span class="comment"># %(message)s用户输出的消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、强调：其中的%(name)s为getlogger时指定的名字</span></span><br><span class="line">standard_format = <span class="string">&#x27;[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]&#x27;</span> \</span><br><span class="line">                  <span class="string">&#x27;[%(levelname)s][%(message)s]&#x27;</span></span><br><span class="line"></span><br><span class="line">simple_format = <span class="string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line">test_format = <span class="string">&#x27;%(asctime)s] %(message)s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、日志配置字典</span></span><br><span class="line">LOGGING_DIC = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;standard&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: standard_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: simple_format</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: test_format</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#打印到终端的日志</span></span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,  <span class="comment"># 打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">#打印到文件的日志,收集info及以上的日志</span></span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,  <span class="comment"># 保存到文件,日志轮转</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;standard&#x27;</span>,</span><br><span class="line">            <span class="comment"># 可以定制日志文件路径</span></span><br><span class="line">            <span class="comment"># BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # log文件的目录</span></span><br><span class="line">            <span class="comment"># LOG_PATH = os.path.join(BASE_DIR,&#x27;a1.log&#x27;)</span></span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;a1.log&#x27;</span>,  <span class="comment"># 日志文件</span></span><br><span class="line">            <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">5</span>,  <span class="comment"># 日志大小 5M</span></span><br><span class="line">            <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,  <span class="comment"># 日志文件的编码，再也不用担心中文log乱码了</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;other&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.FileHandler&#x27;</span>,  <span class="comment"># 保存到文件</span></span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;a2.log&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment">#logging.getLogger(__name__)拿到的logger配置</span></span><br><span class="line">        <span class="string">&#x27;&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;console&#x27;</span>],  <span class="comment"># 这里把上面定义的两个handler都加上，即log数据既写入文件又打印到屏幕</span></span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>, <span class="comment"># loggers(第一层日志级别关限制)---&gt;handlers(第二层日志级别关卡限制)</span></span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,  <span class="comment"># 默认为True，向上（更高level的logger）传递，通常设置为False即可，否则会一份日志向上层层传递</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;专门的采集&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;other&#x27;</span>,],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">日志配置字典LOGGING_DIC</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3、使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># !!!强调!!!</span></span><br><span class="line"><span class="comment"># 1、logging是一个包，需要使用其下的config、getLogger，可以如下导入</span></span><br><span class="line"><span class="comment"># from logging import config</span></span><br><span class="line"><span class="comment"># from logging import getLogger</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、也可以使用如下导入</span></span><br><span class="line"><span class="keyword">import</span> logging.config <span class="comment"># 这样连同logging.getLogger都一起导入了,然后使用前缀logging.config.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、加载配置</span></span><br><span class="line">logging.config.dictConfig(settings.LOGGING_DIC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、输出日志</span></span><br><span class="line">logger1=logging.getLogger(<span class="string">&#x27;用户交易&#x27;</span>)</span><br><span class="line">logger1.info(<span class="string">&#x27;egon儿子alex转账3亿冥币&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># logger2=logging.getLogger(&#x27;专门的采集&#x27;) # 名字传入的必须是&#x27;专门的采集&#x27;，与LOGGING_DIC中的配置唯一对应</span></span><br><span class="line"><span class="comment"># logger2.debug(&#x27;专门采集的日志&#x27;)</span></span><br><span class="line"></span><br><span class="line">common.py</span><br></pre></td></tr></table></figure>

<p>解释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># formatters 多个日志格式，想用哪一个，直接去取</span><br><span class="line"># handlers 是日志的接收者，不同的handler控制日志输出到不同的位置.console，log</span><br><span class="line"># loggers  日志生产者，产生的日志将会传递给handler然后控制输出</span><br><span class="line"></span><br><span class="line"># 注意：loggers(第一层日志级别关限制)---&gt;handlers(第二层日志级别关卡限制)；loggers 和 handler 通常设置成一样就可以了。</span><br><span class="line"># 如果需要配置多个应用打到一个日志，为了避免重复配置，可配置空key</span><br></pre></td></tr></table></figure>



<ol start="8">
<li>序列化模块<br>什么叫序列化——将原本的字典、列表等内容转换成一个字符串的过程就叫做序列化。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如，我们在python代码中计算的一个数据需要给另外一段程序使用，那我们怎么给？</span><br><span class="line">现在我们能想到的方法就是存在文件里，然后另一个python程序再从文件里读出来。</span><br><span class="line">但是我们都知道，对于文件来说是没有字典这个概念的，所以我们只能将数据转换成字典放到文件中。</span><br><span class="line">你一定会问，将字典转换成一个字符串很简单，就是str(dic)就可以办到了，为什么我们还要学习序列化模块呢？</span><br><span class="line">没错序列化的过程就是从dic 变成str(dic)的过程。现在你可以通过str(dic)，将一个名为dic的字典转换成一个字符串，</span><br><span class="line">但是你要怎么把一个字符串转换成字典呢？</span><br><span class="line">聪明的你肯定想到了eval()，如果我们将一个字符串类型的字典str_dic传给eval，就会得到一个返回的字典类型了。</span><br><span class="line">eval()函数十分强大，但是eval是做什么的？e官方demo解释为：将字符串str当成有效的表达式来求值并返回计算结果。</span><br><span class="line">ＢＵＴ！强大的函数有代价。安全性是其最大的缺点。</span><br><span class="line">想象一下，如果我们从文件中读出的不是一个数据结构，而是一句&quot;删除文件&quot;类似的破坏性语句，那么后果实在不堪设设想。</span><br><span class="line">而使用eval就要担这个风险。</span><br><span class="line">所以，我们并不推荐用eval方法来进行反序列化操作(将str转换成python中的数据结构)</span><br><span class="line"></span><br><span class="line">为什么要有序列化模块</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>序列化的目的<br>1、以某种存储形式使自定义对象持久化；<br>2、将对象从一个地方传递到另一个地方。<br>3、使程序更具维护性。</li>
</ul>
<img src="/2020/08/29/py-day04/%E5%BA%8F%E5%88%97%E5%8C%96.png" class title="py-day04">

<ul>
<li><strong>json</strong><blockquote>
<p><strong>注意，json转换完的字符串类型的字典中的字符串是由””表示的</strong></p>
</blockquote>
</li>
</ul>
<img src="/2020/08/29/py-day04/json.png" class title="py-day04">

<p>Json模块提供了四个功能：dumps、dump、loads、load</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>&#125;</span><br><span class="line">str_dic = json.dumps(dic)  <span class="comment">#序列化：将一个字典转换成一个字符串</span></span><br><span class="line">print(type(str_dic),str_dic)  <span class="comment">#&lt;class &#x27;str&#x27;&gt; &#123;&quot;k3&quot;: &quot;v3&quot;, &quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;&#125;</span></span><br><span class="line"><span class="comment">#注意，json转换完的字符串类型的字典中的字符串是由&quot;&quot;表示的</span></span><br><span class="line"></span><br><span class="line">dic2 = json.loads(str_dic)  <span class="comment">#反序列化：将一个字符串格式的字典转换成一个字典</span></span><br><span class="line"><span class="comment">#注意，要用json的loads功能处理的字符串类型的字典中的字符串必须由&quot;&quot;表示</span></span><br><span class="line">print(type(dic2),dic2)  <span class="comment">#&lt;class &#x27;dict&#x27;&gt; &#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;, &#x27;k3&#x27;: &#x27;v3&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_dic = [<span class="number">1</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>],<span class="number">3</span>,&#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>&#125;]</span><br><span class="line">str_dic = json.dumps(list_dic) <span class="comment">#也可以处理嵌套的数据类型 </span></span><br><span class="line">print(type(str_dic),str_dic) <span class="comment">#&lt;class &#x27;str&#x27;&gt; [1, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], 3, &#123;&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;&#125;]</span></span><br><span class="line">list_dic2 = json.loads(str_dic)</span><br><span class="line">print(type(list_dic2),list_dic2) <span class="comment">#&lt;class &#x27;list&#x27;&gt; [1, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 3, &#123;&#x27;k1&#x27;: &#x27;v1&#x27;, &#x27;k2&#x27;: &#x27;v2&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line">loads和dumps</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">&#x27;json_file&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>&#125;</span><br><span class="line">json.dump(dic,f)  <span class="comment">#dump方法接收一个文件句柄，直接将字典转换成json字符串写入文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&#x27;json_file&#x27;</span>)</span><br><span class="line">dic2 = json.load(f)  <span class="comment">#load方法接收一个文件句柄，直接将文件中的json字符串转换成数据结构返回</span></span><br><span class="line">f.close()</span><br><span class="line">print(type(dic2),dic2)</span><br><span class="line"></span><br><span class="line">load和dump</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">json.dump(&#123;<span class="string">&#x27;国籍&#x27;</span>:<span class="string">&#x27;中国&#x27;</span>&#125;,f)</span><br><span class="line">ret = json.dumps(&#123;<span class="string">&#x27;国籍&#x27;</span>:<span class="string">&#x27;中国&#x27;</span>&#125;)</span><br><span class="line">f.write(ret+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">json.dump(&#123;<span class="string">&#x27;国籍&#x27;</span>:<span class="string">&#x27;美国&#x27;</span>&#125;,f,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">ret = json.dumps(&#123;<span class="string">&#x27;国籍&#x27;</span>:<span class="string">&#x27;美国&#x27;</span>&#125;,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">f.write(ret+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">ensure_ascii关键字参数</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Serialize obj to a JSON formatted str.(字符串表示的json对象) </span><br><span class="line">Skipkeys：默认值是<span class="literal">False</span>，如果dict的keys内的数据不是python的基本类型(str,unicode,int,long,float,bool,<span class="literal">None</span>)，设置为<span class="literal">False</span>时，就会报TypeError的错误。此时设置成<span class="literal">True</span>，则会跳过这类key </span><br><span class="line">ensure_ascii:，当它为<span class="literal">True</span>的时候，所有非ASCII码字符显示为\uXXXX序列，只需在dump时将ensure_ascii设置为<span class="literal">False</span>即可，此时存入json的中文即可正常显示。) </span><br><span class="line">If check_circular <span class="keyword">is</span> false, then the circular reference check <span class="keyword">for</span> container types will be skipped <span class="keyword">and</span> a circular reference will result <span class="keyword">in</span> an OverflowError (<span class="keyword">or</span> worse). </span><br><span class="line">If allow_nan <span class="keyword">is</span> false, then it will be a ValueError to serialize out of range float values (nan, inf, -inf) <span class="keyword">in</span> strict compliance of the JSON specification, instead of using the JavaScript equivalents (NaN, Infinity, -Infinity). </span><br><span class="line">indent：应该是一个非负的整型，如果是<span class="number">0</span>就是顶格分行显示，如果为空就是一行最紧凑显示，否则会换行且按照indent的数值显示前面的空白分行显示，这样打印出来的json数据也叫pretty-printed json </span><br><span class="line">separators：分隔符，实际上是(item_separator, dict_separator)的一个元组，默认的就是(‘,’,’:’)；这表示dictionary内keys之间用“,”隔开，而KEY和value之间用“：”隔开。 </span><br><span class="line">default(obj) <span class="keyword">is</span> a function that should <span class="keyword">return</span> a serializable version of obj <span class="keyword">or</span> <span class="keyword">raise</span> TypeError. The default simply raises TypeError. </span><br><span class="line">sort_keys：将数据根据keys的值进行排序。 </span><br><span class="line">To use a custom JSONEncoder subclass (e.g. one that overrides the .default() method to serialize additional types), specify it <span class="keyword">with</span> the cls kwarg; otherwise JSONEncoder <span class="keyword">is</span> used.</span><br><span class="line"></span><br><span class="line">其他参数说明</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;<span class="string">&#x27;username&#x27;</span>:[<span class="string">&#x27;李华&#x27;</span>,<span class="string">&#x27;二愣子&#x27;</span>],<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">16</span>&#125;</span><br><span class="line">json_dic2 = json.dumps(data,sort_keys=<span class="literal">True</span>,indent=<span class="number">2</span>,separators=(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;:&#x27;</span>),ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(json_dic2)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>pickle</strong><br>json &amp; pickle 模块<br>用于序列化的两个模块<br>json，用于字符串 和 python数据类型间进行转换<br>pickle，用于python特有的类型 和 python的数据类型间进行转换<br>pickle模块提供了四个功能：dumps、dump(序列化，存）、loads（反序列化，读）、load  （不仅可以序列化字典，列表…<strong>可以把python中任意的数据类型序列化</strong>）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>&#125;</span><br><span class="line">str_dic = pickle.dumps(dic)</span><br><span class="line">print(str_dic)  <span class="comment">#一串二进制内容</span></span><br><span class="line"></span><br><span class="line">dic2 = pickle.loads(str_dic)</span><br><span class="line">print(dic2)    <span class="comment">#字典</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">struct_time  = time.localtime(<span class="number">1000000000</span>)</span><br><span class="line">print(struct_time)</span><br><span class="line">f = open(<span class="string">&#x27;pickle_file&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">pickle.dump(struct_time,f)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&#x27;pickle_file&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">struct_time2 = pickle.load(f)</span><br><span class="line">print(struct_time2.tm_year)</span><br><span class="line"></span><br><span class="line">pickle</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这时候机智的你又要说了，既然pickle如此强大，为什么还要学json呢？<br>这里我们要说明一下，json是一种所有的语言都可以识别的数据结构。<br>如果我们将一个字典或者序列化成了一个json存在文件里，那么java代码或者js代码也可以拿来用。<br>但是如果我们用pickle进行序列化，其他语言就不能读懂这是什么了～<br>所以，如果你序列化的内容是列表或者字典，我们非常推荐你使用json模块<br>但如果出于某种原因你不得不序列化其他的数据类型，而未来你还会用python对这个数据进行反序列化的话，那么就可以使用pickle</p>
<ol start="9">
<li>shutil模块<br>高级的 文件、文件夹、压缩包 处理模块<br>shutil.copyfileobj(fsrc, fdst[, length])<br>将文件内容拷贝到另一个文件中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.copyfileobj(open(&#39;old.xml&#39;,&#39;r&#39;), open(&#39;new.xml&#39;, &#39;w&#39;))</span><br></pre></td></tr></table></figure>
shutil.copyfile(src, dst)<br>拷贝文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shutil.copyfile(&#39;f1.log&#39;, &#39;f2.log&#39;) #目标文件无需存在</span><br></pre></td></tr></table></figure>
shutil.copymode(src, dst)<br>仅拷贝权限。内容、组、用户均不变<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shutil.copymode(&#39;f1.log&#39;, &#39;f2.log&#39;) #目标文件必须存在</span><br></pre></td></tr></table></figure>
shutil.copystat(src, dst)<br>仅拷贝状态的信息，包括：mode bits, atime, mtime, flags<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shutil.copystat(&#39;f1.log&#39;, &#39;f2.log&#39;) #目标文件必须存在</span><br></pre></td></tr></table></figure>
shutil.copy(src, dst)<br>拷贝文件和权限<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.copy(&#39;f1.log&#39;, &#39;f2.log&#39;)</span><br></pre></td></tr></table></figure>
shutil.copy2(src, dst)<br>拷贝文件和状态信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.copy2(&#39;f1.log&#39;, &#39;f2.log&#39;)</span><br></pre></td></tr></table></figure>
shutil.ignore_patterns(*patterns)<br>shutil.copytree(src, dst, symlinks=False, ignore=None)<br>递归的去拷贝文件夹<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.copytree(&#39;folder1&#39;, &#39;folder2&#39;, ignore&#x3D;shutil.ignore_patterns(&#39;*.pyc&#39;, &#39;tmp*&#39;)) #目标目录不能存在，注意对folder2目录父级目录要有可写权限，ignore的意思是排除 </span><br></pre></td></tr></table></figure>
拷贝软连接<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line"></span><br><span class="line">shutil.copytree(&#39;f1&#39;, &#39;f2&#39;, symlinks&#x3D;True, ignore&#x3D;shutil.ignore_patterns(&#39;*.pyc&#39;, &#39;tmp*&#39;))</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">通常的拷贝都把软连接拷贝成硬链接，即对待软连接来说，创建新的文件</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">拷贝软连接</span><br></pre></td></tr></table></figure>
shutil.rmtree(path[, ignore_errors[, onerror]])<br>递归的去删除文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.rmtree(&#39;folder1&#39;)</span><br></pre></td></tr></table></figure>
<p>shutil.move(src, dst)<br>递归的去移动文件，它类似mv命令，其实就是重命名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.move(&#39;folder1&#39;, &#39;folder3&#39;)</span><br></pre></td></tr></table></figure>
<p>shutil.make_archive(base_name, format,…)<br>创建压缩包并返回文件路径，例如：zip、tar<br>创建压缩包并返回文件路径，例如：zip、tar<br>base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目录，否则保存至指定路径，<br>如 data_bak                       =&gt;保存至当前路径<br>如：/tmp/data_bak =&gt;保存至/tmp/<br>format： 压缩包种类，“zip”, “tar”, “bztar”，“gztar”<br>root_dir： 要压缩的文件夹路径（默认当前目录）<br>owner： 用户，默认当前用户<br>group： 组，默认当前组<br>logger： 用于记录日志，通常是logging.Logger对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将 /data 下的文件打包放置当前程序目录</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">ret = shutil.make_archive(<span class="string">&quot;data_bak&quot;</span>, <span class="string">&#x27;gztar&#x27;</span>, root_dir=<span class="string">&#x27;/data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将 /data下的文件打包放置 /tmp/目录</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">ret = shutil.make_archive(<span class="string">&quot;/tmp/data_bak&quot;</span>, <span class="string">&#x27;gztar&#x27;</span>, root_dir=<span class="string">&#x27;/data&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的，详细：<br>zipfile压缩解压缩</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&#x27;laxi.zip&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">z.write(<span class="string">&#x27;a.log&#x27;</span>)</span><br><span class="line">z.write(<span class="string">&#x27;data.data&#x27;</span>)</span><br><span class="line">z.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">z = zipfile.ZipFile(<span class="string">&#x27;laxi.zip&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">z.extractall(path=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">z.close()</span><br><span class="line"></span><br><span class="line">zipfile压缩解压缩</span><br></pre></td></tr></table></figure>

<p>tarfile压缩解压缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import tarfile</span><br><span class="line"></span><br><span class="line"># 压缩</span><br><span class="line">&gt;&gt;&gt; t&#x3D;tarfile.open(&#39;&#x2F;tmp&#x2F;egon.tar&#39;,&#39;w&#39;)</span><br><span class="line">&gt;&gt;&gt; t.add(&#39;&#x2F;test1&#x2F;a.py&#39;,arcname&#x3D;&#39;a.bak&#39;)</span><br><span class="line">&gt;&gt;&gt; t.add(&#39;&#x2F;test1&#x2F;b.py&#39;,arcname&#x3D;&#39;b.bak&#39;)</span><br><span class="line">&gt;&gt;&gt; t.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">&gt;&gt;&gt; t&#x3D;tarfile.open(&#39;&#x2F;tmp&#x2F;egon.tar&#39;,&#39;r&#39;)</span><br><span class="line">&gt;&gt;&gt; t.extractall(&#39;&#x2F;egon&#39;)</span><br><span class="line">&gt;&gt;&gt; t.close()</span><br><span class="line"></span><br><span class="line">tarfile压缩解压缩</span><br></pre></td></tr></table></figure>



<ol start="10">
<li>re模块<img src="/2020/08/29/py-day04/%E6%AD%A3%E5%88%99.png" class title="py-day04">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># res = re.findall(&#x27;\w&#x27;,&#x27;hello wo_r++ld 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;_&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\W&#x27;,&#x27;hello wo_r++ld 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27; &#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\W&#x27;,&#x27;hello wo_r++ld 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27; &#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\s&#x27;,&#x27;hello world 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27; &#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\S&#x27;,&#x27;hello world 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\d&#x27;,&#x27;hello world 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\D&#x27;,&#x27;hello world 123&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27; &#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;, &#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\Aalex&#x27;, &#x27; alexis sb&#x27;)   # 只能开头匹配</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;\Aalex&#x27;, &#x27;alexis sb&#x27;)   # 只能开头匹配</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;alex&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;sb\Z&#x27;, &#x27;alexis sb &#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;sb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;sb$&#x27;, &#x27;alexis alex sb&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;sb&#x27;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;^alex&#x27;, &#x27;alexis alex sb&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># [&#x27;alex&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = re.findall(&#x27;^alex$&#x27;, &#x27;alexis alex sb&#x27;)</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"><span class="comment"># []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;^h&#x27;,&#x27;hello egon 123&#x27;))</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;3$&#x27;,&#x27;hello egon 123&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####重复普匹配</span></span><br><span class="line"><span class="comment"># 1.: 代表匹配一个字符，该字符可以是除了换行符\n之外的任意字符</span></span><br><span class="line"><span class="comment"># print(re.findall(&quot;a.c&quot;,&quot;alc a+c abc aAc a c aaaaaac a\nc a\tc&quot;))</span></span><br><span class="line"><span class="comment"># # [&#x27;alc&#x27;, &#x27;a+c&#x27;, &#x27;abc&#x27;, &#x27;aAc&#x27;, &#x27;a c&#x27;, &#x27;aac&#x27;, &#x27;a\tc&#x27;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(re.findall(&quot;a.c&quot;,&quot;alc a+c abc aAc a c aaaaaac a\nc a\tc&quot;,re.DOTALL))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.*：左侧字符重复次数0次或无穷次，性格贪婪</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;ab*&#x27;,&#x27;a ab abb abbbbbbbb bbbbbbbbbb&#x27;))</span></span><br><span class="line"><span class="comment"># [&#x27;a&#x27;, &#x27;ab&#x27;, &#x27;abb&#x27;, &#x27;abbbbbbbb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. +:左侧字符重复1次或者无穷次，性格贪婪</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;ab+&#x27;,&#x27;a ab abb abbbbbbbb bbbbbbbbbb&#x27;))</span></span><br><span class="line"><span class="comment"># [&#x27;ab&#x27;, &#x27;abb&#x27;, &#x27;abbbbbbbb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.左侧字符0粗或1次，性格贪婪</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;ab?&#x27;,&#x27;a ab abb abbbbbbbb bbbbbbbbbb&#x27;))</span></span><br><span class="line"><span class="comment"># [&#x27;a&#x27;, &#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;ab&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.&#123;n,m&#125; 左侧字符重复n次到m次，性格贪婪</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;ab&#123;2,5&#125;&#x27;,&#x27;a ab abb abbbbbbbb bbbbbbbbbb&#x27;))</span></span><br><span class="line"><span class="comment"># [&#x27;abb&#x27;, &#x27;abbbbb&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;\d+\.?\d*&#x27;,&#x27;asdasdasassad123asd1111.13dsf12dfgf1asdffgd3&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># []指定匹配字符的一个</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;a\db&#x27;,&#x27;a1b a3b  a4b a5b a b a\nb&#x27;))</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;a[0-5]b&#x27;,&#x27;a1b a3b  a4b a5b a b a\nb&#x27;))</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;a[0-9a-zA-Z]b&#x27;,&#x27;a1b a3b  a4b a5b azb a b a\nb&#x27;))</span></span><br><span class="line"><span class="comment"># 取反</span></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;a[^0-9a-zA-Z]b&#x27;,&#x27;a1b a3b  a4b a5b azb a b a\nb&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(re.findall(&#x27;a[-0-9]b&#x27;,&#x27;a-b a1b a3b  a4b a5b azb a b a\nb&#x27;))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="11">
<li>hashlib模块</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1、什么叫hash:hash是一种算法（3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法），该算法接受传入的内容，经过运算得到一串hash值</span><br><span class="line"># 2、hash值的特点是：</span><br><span class="line">#2.1 只要传入的内容一样，得到的hash值必然一样&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;要用明文传输密码文件完整性校验</span><br><span class="line">#2.2 不能由hash值返解成内容&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》把密码做成hash值，不应该在网络传输明文密码</span><br><span class="line">#2.3 只要使用的hash算法不变，无论校验的内容有多大，得到的hash值长度是固定的</span><br></pre></td></tr></table></figure>


<p>hashlib 加密的必须是bytes类型<br>1.常用方法<br>m = hashlib.md5()<br>m.update(‘hello’.encode(‘utf-8’))<br>res = m.hexdigest()</p>
<p>2.也可以直接初始就传值<br>m1 = hashlib.md5(‘he’.encode(‘utf-8’))<br>m1.update(‘llo’.encode(‘utf-8’))</p>
<ul>
<li><p>字符串加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="string">&#x27;hello&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m.update(<span class="string">&#x27;world&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">res = m.hexdigest()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">m1 = hashlib.md5(<span class="string">&#x27;he&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;llo&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;wor&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">m1.update(<span class="string">&#x27;ld&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">res = m1.hexdigest()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件校验（seek随机位置，读取2000个字符）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m2 = hashlib.md5()</span><br><span class="line">f = open(<span class="string">&#x27;a2.log&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">f.seek(<span class="number">5</span>)</span><br><span class="line">f.read(<span class="number">20</span>)</span><br><span class="line">m2.update(f.read(<span class="number">20</span>))</span><br><span class="line">res4 = m2.hexdigest()</span><br><span class="line">print(res4)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>密码加盐</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">pwd</span>):</span></span><br><span class="line">    <span class="comment"># 实例化对象</span></span><br><span class="line">    obj = hashlib.md5(SALT)</span><br><span class="line">    <span class="comment"># 写入要加密的字节</span></span><br><span class="line">    obj.update(pwd.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment"># 获取密文</span></span><br><span class="line">    <span class="keyword">return</span> obj.hexdigest()</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ol start="12">
<li>subprocess模块</li>
</ol>
<ul>
<li>执行系统命令的模块<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  subprocess</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sh-3.2# ls /Users/egon/Desktop |grep txt$</span></span><br><span class="line"><span class="string">mysql.txt</span></span><br><span class="line"><span class="string">tt.txt</span></span><br><span class="line"><span class="string">事物.txt</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">res1=subprocess.Popen(<span class="string">&#x27;ls /Users/jieli/Desktop&#x27;</span>,shell=<span class="literal">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">res=subprocess.Popen(<span class="string">&#x27;grep txt$&#x27;</span>,shell=<span class="literal">True</span>,stdin=res1.stdout,</span><br><span class="line">                 stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">print(res.stdout.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#等同于上面,但是上面的优势在于,一个数据流可以和另外一个数据流交互,可以通过爬虫得到结果然后交给grep</span></span><br><span class="line">res1=subprocess.Popen(<span class="string">&#x27;ls /Users/jieli/Desktop |grep txt$&#x27;</span>,shell=<span class="literal">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">print(res1.stdout.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#windows下:</span></span><br><span class="line"><span class="comment"># dir | findstr &#x27;test*&#x27;</span></span><br><span class="line"><span class="comment"># dir | findstr &#x27;txt$&#x27;</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">res1=subprocess.Popen(<span class="string">r&#x27;dir C:\Users\Administrator\PycharmProjects\test\函数备课&#x27;</span>,shell=<span class="literal">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">res=subprocess.Popen(<span class="string">&#x27;findstr test*&#x27;</span>,shell=<span class="literal">True</span>,stdin=res1.stdout,</span><br><span class="line">                 stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">print(res.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>)) <span class="comment">#subprocess使用当前系统默认编码，得到结果为bytes类型，在windows下需要用gbk解码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>1.第三方模块  requests， pymysql， jenkins，gitlab</p>
<p>pip工具，下载安装第三方模块。和yum类似</p>
<p>pip工具安装的包一定是和python的解释器相对应的</p>
<blockquote>
<p>pip3 install 安装的包<br>pip3 uninstall 安装的包<br>pip3 list<br>换源：</p>
</blockquote>
<p>临时换源：</p>
<blockquote>
<p>pip install 包名 -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
</blockquote>
<p>永久性换源<br>修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>2.requests模块</p>
<blockquote>
<p>爬虫中非常重要的一个模块<br>通过这个模块可以发起http请求，get， post， put， delete方法</p>
</blockquote>
<p>3.pymysql模块</p>
<blockquote>
<p>pip3 install  pymysql</p>
</blockquote>
<p>总结: sql语句的写法是不变。需要关注操作的函数即可。execute</p>
<p>4.redis模块</p>
<blockquote>
<p><a href="https://www.cnblogs.com/john-xiong/p/12089103.html">https://www.cnblogs.com/john-xiong/p/12089103.html</a></p>
</blockquote>
<p>5.gitlab模块</p>
<p>生成token： settings ===&gt; accesstoken ===&gt; create 生成</p>
<blockquote>
<p><a href="https://pypi.org/project/python-gitlab/">https://pypi.org/project/python-gitlab/</a></p>
</blockquote>
<ul>
<li>ATM作业</li>
<li>python操作 docker， k8s， saltstack， ansible</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day07</title>
    <url>/2020/09/19/py-day07/</url>
    <content><![CDATA[<p>前端基础基础<br>class(html、css、jQuery)</p>
<a id="more"></a>

<h3 id="上周回顾"><a href="#上周回顾" class="headerlink" title="上周回顾"></a>上周回顾</h3><ol start="0">
<li><p>前端初识</p>
<blockquote>
<p>三剑客：html， css， js</p>
</blockquote>
</li>
<li><p>html部分</p>
<ol>
<li><p>html的基本构成</p>
<ul>
<li>Html  &gt; head &gt; body</li>
</ul>
</li>
<li><p>html的基本标签</p>
<ol>
<li><p>内容标签</p>
<blockquote>
<p>p, br, u, h1—h6</p>
</blockquote>
</li>
<li><p>元素标签</p>
<blockquote>
<p>Img <img src></p>
<p>Span 和 div</p>
</blockquote>
</li>
<li><p>table系列标签</p>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&#x27;1px&#x27;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>table标签非常的重要</p>
</li>
<li><p>form表单系列</p>
<blockquote>
<p>收集用户提交的信息，然后将提交的信息通过http协议的GET或者POST方法，将数据提交给后台的服务端</p>
</blockquote>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户ing&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">checked</span>&gt;</span>香蕉</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span>苹果</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span>句子</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span>里</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>footballl</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>footballl2</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>footballl3</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>footballl4</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span> <span class="attr">disabled</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;hz&quot;</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
</li>
<li><p>CSS部分</p>
<ol>
<li><p>css的引入</p>
<ul>
<li>行内样式： html和css写在一起</li>
</ul>
<blockquote>
<p><code>&lt;span style=&quot;color:red;&quot;&gt;xxxx&lt;/span&gt;</code></p>
</blockquote>
<ul>
<li>内部样式</li>
</ul>
<blockquote>
<p>head标签中写就可以   <code>&lt;style &gt;css的样式&lt;/style&gt;</code></p>
</blockquote>
<ul>
<li><p>外部样式</p>
<blockquote>
<p>head标签中， <link src></p>
</blockquote>
</li>
</ul>
</li>
<li><p>css的选择器</p>
<ol>
<li><p>id选择  #id{}</p>
</li>
<li><p>class选择器  .classname{}</p>
</li>
<li><p>标签选择器  p{}</p>
</li>
<li><p>包含选择器  div span {}</p>
</li>
<li><p>分组选择器  div , span {}</p>
</li>
<li><p>选择全部  <code>*</code></p>
<p>选择器的优先级 </p>
</li>
</ol>
</li>
<li><p>css的常见属性</p>
<ol>
<li><p>文本常见属性</p>
<ol>
<li>font-size</li>
<li>color</li>
<li>Line-height</li>
<li>text-align, border</li>
</ol>
</li>
<li><p>背景属性</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><ol>
<li>网站的商品展示页面<ol>
<li>把整个框架搭起来，然后再这个框架中填充内容</li>
</ol>
</li>
<li>登录页面</li>
</ol>
<h3 id="本周内容"><a href="#本周内容" class="headerlink" title="本周内容"></a>本周内容</h3><h4 id="css完结"><a href="#css完结" class="headerlink" title="css完结"></a>css完结</h4><ol>
<li><p>定位 position 和 定位属性坐标配合使用  top, right, left, bottom</p>
<ol>
<li><p>fixed:固定位置;相对于body定位;将某个元素固定在页面的某个位置<br>特点：</p>
<blockquote>
<p>相对于浏览器窗口来进行定位的<br>固定到窗口的某个位置上，不随内容而滚动<br>如果不设置定位坐标，就在原来的位置，否则反之</p>
</blockquote>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">        #i1&#123;</span></span><br><span class="line"><span class="xml">            width: 100px;</span></span><br><span class="line"><span class="xml">            height: 100px;</span></span><br><span class="line"><span class="xml">            border: 1px solid red;</span></span><br><span class="line"><span class="xml">            background-color: red;</span></span><br><span class="line"><span class="xml">            position: fixed;</span></span><br><span class="line"><span class="xml">            right: 10px;</span></span><br><span class="line"><span class="xml">            bottom: 15px;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        body&#123;</span></span><br><span class="line"><span class="xml">            height: 10000px;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>releative: 相对定位<br>特点：</p>
<blockquote>
<p>相对定位是相对于，自身的左上角为坐标点</p>
</blockquote>
</li>
<li><p>absloute：绝对定位<br>特点：</p>
<blockquote>
<p>相对于（祖先元素的定位方式（relative）来进行定位）<br>找祖先元素是否有定位，如果没有定位，，找到<body>，就相对于body来定位<br>如果找到祖先元素有定位，相对祖先祖先元素来定位</body></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:releative&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：releative和absolute搭配使用</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<p>position之input输入框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 30px; position: relative&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 30px;padding-right: 16px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;i_pwd.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; top: 9px;right: -18px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>z-index<blockquote>
<p>设置对象的层叠顺序</p>
</blockquote>
</li>
</ol>
<p><strong>特点</strong></p>
<blockquote>
<p>较大的number值的对象会覆盖在较小number值得对象之上</p>
</blockquote>
<p>浮层的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:2000px</span>;</span></span><br><span class="line">            background-color: wheat;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.two</span>&#123;</span></span><br><span class="line">            background-color: black;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:2050px</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.5</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:10</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.three</span>&#123;</span></span><br><span class="line">            background-color: white;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:40</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:12</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;展示模态框&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="javascript介绍"><a href="#javascript介绍" class="headerlink" title="javascript介绍"></a>javascript介绍</h3><h4 id="一、JS如何引入及基本语法规范"><a href="#一、JS如何引入及基本语法规范" class="headerlink" title="一、JS如何引入及基本语法规范"></a>一、JS如何引入及基本语法规范</h4><p>1.js的简单介绍</p>
<ul>
<li>为啥js叫做javascript？</li>
<li>html, css, python,php,java,javascript</li>
<li>90年代</li>
<li>js 的运行：浏览器</li>
</ul>
<p>2.js的初识</p>
<ul>
<li><p>js的写法</p>
<ul>
<li>head头中：<br>文件引入：<code>&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</code><br>代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;dsadsadsa&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>body后面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>dsbadbshabdhsabdsha<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**推荐大家讲js的代码放在body的后面**/</span><br><span class="line">    /**js的代码**/</span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;dsadsa&#x27;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在开发者平台的console中，也可以写js的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert（‘dsadsadsa’）</span><br><span class="line">console.log(&#39;dsadsadsadsa&#39;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li><p>js的注释：<br>单行注释： //<br>多行注释： /**/</p>
</li>
<li><p>js代码后面加分号</p>
<h4 id="二、变量声明"><a href="#二、变量声明" class="headerlink" title="二、变量声明"></a>二、变量声明</h4></li>
<li><p>变量声明<br>python<br> name = ‘zhansgan’<br>js</p>
<p> 局部变量 var name = ‘zhansan’;<br> 全部变量 name = ‘zhansagn’;<br> var age = 12;<br> 变量名区分大小写str和Str不是一个变量，也就是js对变量名的大小写是敏感的<br>ps:<br> 代码的书写</p>
</li>
</ol>
<h4 id="三、变量类型"><a href="#三、变量类型" class="headerlink" title="三、变量类型"></a>三、变量类型</h4><ol>
<li>JS变量类型</li>
</ol>
<p>python：<br>    num(int  float)<br>    字符串<br>    列表<br>    字典<br>    元组<br>    集合<br>js：<br>    num<br>        var age = 12;<br>        var age = 1.1;</p>
<ol start="2">
<li>常用方法</li>
</ol>
<ul>
<li><p>数值</p>
<ul>
<li>parseInt 将某值转换成数字，不成功则NAN</li>
<li>ParseFloat 将某值转换成浮点数，不成功则NAN</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parseInt(<span class="string">&#x27;3.5&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">parseInt(<span class="string">&#x27;3.6&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">parseFloat(<span class="string">&#x27;3.6&#x27;</span>)</span><br><span class="line"><span class="number">3.6</span></span><br></pre></td></tr></table></figure>

<p>  字符串</p>
<pre><code>  var name = &#39;zhansgan&#39;;
  相关的方法：
      **obj.length　　　　　　　　　　　　　　　长度
      **obj.trim()　　　　　　　　　　　　　　　移除空白
      obj.trimLeft()
      obj.trimRight()
      obj.charAt(n)　　　　　　　　　　　　　返回字符串中的第n个字符
      obj.concat(value, …)　　　　　　　　 拼接
      obj.indexOf(substring,start)　　　　子序列位置
      **obj.substring(from, to)　　　　　　　根据索引获取子序列
      **obj.slice(start, end)　　　　　　　　切片
      obj.toLowerCase()　　　　　　　　　　大写
      obj.toUpperCase()　　　　　　　　　　小写
      **obj.split(delimiter, limit)　　　　　分割</code></pre>
<p>  数组</p>
<pre><code>  var arr = [1,2,4,&#39;zhansgan&#39;]; array()
  常用的方法
      obj.length 数组的大小
      obj.push(ele) 尾部追加元素
      obj.pop() 尾部获取一个元素
      obj.unshift(ele) 头部插入元素
      obj.shift() 头部移除元素
      obj.slice( ) 切片

      obj.reverse( ) 反转
      obj.join(sep) 将数组元素连接起来以构建一个字符串
      obj.concat(val,..) 连接数组
      obj.sort( ) 对数组元素进行排序</code></pre>
<p>  字典（json）</p>
<pre><code>  mydict = &#123;&#39;name&#39;:&#39;zhansgan&#39;,&#39;age&#39;:12&#125;</code></pre>
<p>  循环：</p>
<pre><code>  第一种：
      var arr = [&#39;zhansgan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;];
      mydict = &#123;&#39;name&#39;:&#39;zhansgan&#39;,&#39;age&#39;:12&#125;

      for(var i in arr)&#123;
          console.log(arr[i]);
      &#125;

  第二种：
      var arr = [&#39;zhansgan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;];

      for(var i=0; i&lt;arr.length; i = i+1)&#123;
          console.log(i + &#39;,&#39; +arr[i]);
      &#125;

      字典不适于第二种循环；

  // 最好的注释就是代码的命名规范</code></pre>
<p>  布尔：</p>
<pre><code>  True False (python)
  true false (js)</code></pre>
</li>
</ul>
<pre><code>null      变量的值是null
undefined 变量声明但是未给值


索引为什么从0开始：住的地方地下室，从0开始
  z  h  a  n  g  s  a  n
0  1  2  3  4
 &#123;% asset_img objsort.png objsort %&#125;</code></pre>
<ul>
<li>对象<img src="/2020/09/19/py-day07/%E5%AF%B9%E8%B1%A1.png" class title="objsort">



</li>
</ul>
<p><strong>对象和数组的循环方式</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 循环数组</span><br><span class="line">     * **/</span><br><span class="line">    var arr = [&#x27;pounds&#x27;, &#x27;szk&#x27;, &#x27;chenshunyang&#x27;];</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    </span><br><span class="line">    for(var i=0; i<span class="tag">&lt;<span class="name">len;</span> <span class="attr">i</span>++) &#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">console.log</span>(<span class="attr">arr</span>[<span class="attr">i</span>]);</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">for</span>(<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">arr</span>)&#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">console.log</span>(<span class="attr">i</span>, <span class="attr">arr</span>[<span class="attr">i</span>]);</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    /***</span></span><br><span class="line"><span class="tag">     * 循环对象</span></span><br><span class="line"><span class="tag">     */</span></span><br><span class="line"><span class="tag">    <span class="attr">var</span> <span class="attr">a</span> = <span class="string">&#123;</span>&quot;<span class="attr">name</span>&quot;<span class="attr">:</span>&#x27;<span class="attr">szk</span>&#x27;, &quot;<span class="attr">age</span>&quot;<span class="attr">:12</span>&#125;;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">for</span>(<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">a</span>)&#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">console.log</span>(<span class="attr">i</span>, <span class="attr">a</span>[<span class="attr">i</span>]);</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br></pre></td></tr></table></figure>

<p>总结：数组的循环可以使用上面两种方式，但是对象的循环，必须使用 for … in 的方式来进行循环.</p>
<h4 id="四、运算符介绍"><a href="#四、运算符介绍" class="headerlink" title="四、运算符介绍"></a>四、运算符介绍</h4><p>. 运算符介绍</p>
<ul>
<li><ol>
<li>算数运算符<br><code>+   -    *    /     %       ++        --</code></li>
</ol>
</li>
<li><ol start="2">
<li>比较运算符（==判断值，===判断值和类型）<br><code>&gt;   &gt;=   &lt;    &lt;=    !=    ==    ===   !==</code></li>
</ol>
</li>
<li><ol start="3">
<li>逻辑运算符<br><code>&amp;&amp;   ||   ！</code></li>
</ol>
</li>
<li><ol start="4">
<li>赋值运算符<br><code>=  +=   -=  *=   /=</code></li>
</ol>
</li>
</ul>
<h4 id="五、流程控制"><a href="#五、流程控制" class="headerlink" title="五、流程控制"></a>五、流程控制</h4><ol>
<li><p>if-else语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (条件)&#123;</span><br><span class="line">  当条件为 true 时执行的代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  当条件不为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>if–else if–else语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (条件 1)&#123;</span><br><span class="line">  当条件 1 为 true 时执行的代码</span><br><span class="line">&#125;else if (条件 2)&#123;</span><br><span class="line">  当条件 2 为 true 时执行的代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  当条件 1 和 条件 2 都不为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>switch语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var day&#x3D;new Date().getDay();</span><br><span class="line">switch (day)&#123;</span><br><span class="line">case 0:</span><br><span class="line">  x&#x3D;&quot;Today it&#39;s Sunday&quot;;</span><br><span class="line">  break;</span><br><span class="line">case 1:</span><br><span class="line">  x&#x3D;&quot;Today it&#39;s Monday&quot;;</span><br><span class="line">  break;</span><br><span class="line">case 2:</span><br><span class="line">  x&#x3D;&quot;Today it&#39;s Tuesday&quot;;</span><br><span class="line">  break;</span><br><span class="line">case 3:</span><br><span class="line">  x&#x3D;&quot;Today it&#39;s Wednesday&quot;;</span><br><span class="line">  break;</span><br><span class="line">default:</span><br><span class="line">  x&#x3D;&quot;Looking forward to the Weekend&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>while循环语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (i&lt;5)&#123;</span><br><span class="line">  x&#x3D;x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>三元运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 3;</span><br><span class="line">var b &#x3D; 5;</span><br><span class="line"></span><br><span class="line">c &#x3D; a &gt; b ? a : b</span><br><span class="line">console.log(c);</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h4><p>函数定义：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/**1.普通函数定义方式</span><br><span class="line">     * **/</span><br><span class="line">    function test()&#123;</span><br><span class="line">        console.log(&#x27;dsadsa&#x27;);</span><br><span class="line">        var a = 100;</span><br><span class="line"></span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    // test()</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 2. 匿名函数</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    var a = function()&#123;</span><br><span class="line">        console.log(&#x27;dsadsa&#x27;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>函数的局部变量和全局变量</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 全局变量（不推荐第二种方式）</span><br><span class="line">var name = &quot;zekai&quot;;</span><br><span class="line">age = 73;</span><br><span class="line"></span><br><span class="line">function test()&#123;</span><br><span class="line">    // 局部变量</span><br><span class="line">    var height = 178;</span><br><span class="line"></span><br><span class="line">    // 默认全局变量</span><br><span class="line">    leg = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 局部变量在函数内部定义，使用var进行定义，如果不加var，则默认是全局变量</span><br><span class="line">// 在函数外部定义的变量，都是全局变量 ，推荐使用var</span><br></pre></td></tr></table></figure>



<p>函数的作用域：</p>
 <img src="/2020/09/19/py-day07/%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F.png" class title="函数的作用域">


<p><strong>面试题:词法分析</strong></p>
<blockquote>
<p>当函数调用前的一瞬间，先形成一个激活对象，叫Active Object，AO，并会分析一下3个方面的东西：<br>1.函数参数，如有，则将此函数付给AO上，并且值为undefined，如没有，则不做任何操作<br>2.函数局部变量，如AO上有，则不做任何操作。如没有，则将此变量赋值给AO，并且值为undefined<br>3.函数声明，如AO上有，则会将AO上的对象覆盖。如没有，则不做任何操作。<br><strong>函数内部无论是使用参数，还是使用局部变量，都到AO上找</strong></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">age</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(age); </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> age = <span class="number">99</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(age); </span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">age</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(age);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    t(12);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * z执行到函数的时候，AO，active object</span><br><span class="line"><span class="javascript">     * 第一步，分析函数参数， AO.age = <span class="literal">undefined</span>;</span></span><br><span class="line"><span class="javascript">     * 第二步，分析变量， AO.age = <span class="literal">undefined</span>；</span></span><br><span class="line"><span class="javascript"><span class="comment">//     * 第三步，分析函数声明 AO.age = function ()&#123;&#125;</span></span></span><br><span class="line"><span class="javascript">     AO.age = <span class="literal">undefined</span></span></span><br><span class="line">     *</span><br><span class="line"><span class="javascript">     * 此时，AO.age = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span></span><br><span class="line">     *</span><br><span class="line">     * */</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    * 执行过程，</span><br><span class="line"><span class="javascript">    * AO.age = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span></span><br><span class="line">    *</span><br><span class="line"><span class="javascript">    * <span class="built_in">console</span>.log(age); <span class="comment">// function()&#123;&#125;</span></span></span><br><span class="line">    *</span><br><span class="line"><span class="javascript">    * <span class="keyword">var</span> age = <span class="number">99</span>；</span></span><br><span class="line">    *</span><br><span class="line">    * AO.age = 99;</span><br><span class="line">    *</span><br><span class="line"><span class="javascript">    * consoel.log(age); <span class="comment">// 99</span></span></span><br><span class="line">    *</span><br><span class="line">    *</span><br><span class="line">    *</span><br><span class="line">    * **/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>形参 &lt; 函数定义 ；函数定义 &lt; var变量定义</strong></p>
<blockquote>
<p>分析过程：<br>1.分析参数，有一个参数，形成一个AO.age=undefined<br>2.分析变量声明，有一个var age，发现AO上面已经有一个AO.age，因此不做任何处理<br>3.分析函数声明，有一个function age(){}声明，函数的优先级比较高，则把原有的age覆盖成AO.age=function(){};最终，AO上的属性只有一个age，并且值为函数声明。</p>
</blockquote>
<p><strong>注意：函数声明的优先级是最高的，谁都覆盖不了这个值</strong></p>
<blockquote>
<p>执行过程<br>注意：执行过程中的所有的值都是从AO对象上去寻找<br>1.执行第一个console.log(age)时，此时AO.age是一个函数，所以第一个输出的一个函数<br>2.这句var age=99;是对AO.age进行赋值，此时AO.age=99,所以在第二个输出的是99<br>3.同理第三个输出的是99，因为中间没有改变age值得语句了。</p>
</blockquote>
<p><strong>最后总结：只有函数代码块内，出现定义了函数的情况，才需要注意这些细节，否则按照正常的程序流程顺序执行即可。<a href="https://www.cnblogs.com/CyLee/p/6289724.html">https://www.cnblogs.com/CyLee/p/6289724.html</a></strong></p>
<p>常用的序列化和反序列化的方法：</p>
 <img src="/2020/09/19/py-day07/%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" class title="序列化反序列化">


<h4 id="七、常见的模块和常用方法"><a href="#七、常见的模块和常用方法" class="headerlink" title="七、常见的模块和常用方法"></a>七、常见的模块和常用方法</h4><ol>
<li><p>日期类Date</p>
<p> <strong>var d = new Date();　　　返回当日的日期和时间</strong></p>
<ul>
<li>getYear() 　　　　　　　从 Date 对象返回一个月中的某一天 (1 ~ 31)</li>
<li>getFullYear()　　　　　从 Date 对象以四位数字返回年份</li>
<li>getMonth() 　　　　　　从 Date 对象返回月份 (0 ~ 11)</li>
<li>getDate() 　　　　　　　从 Date 对象返回一个月中的某一天 (1 ~ 31)</li>
<li>getDay() 　　　　　　　从 Date 对象返回一周中的某一天 (0 ~ 6)</li>
<li>getHours() 　　　　　 返回 Date 对象的小时 (0 ~ 23)</li>
<li>getMinutes()　　　　　返回 Date 对象的分钟 (0 ~ 59)</li>
<li>getSeconds() 　　　　返回 Date 对象的秒数 (0 ~ 59)</li>
</ul>
<p> <strong>案例 — 时钟显示：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">当前时间：&lt;input type=<span class="string">&#x27;text&#x27;</span> value=<span class="string">&#x27;&#x27;</span> id=<span class="string">&#x27;time&#x27;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> time = <span class="built_in">document</span>.getElementById(<span class="string">&quot;time&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    time.value = d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(change, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Math数学对象</p>
</li>
</ol>
<ul>
<li>Math.ceil(数值) 　　　　向上取整</li>
<li>Math.floor(数值) 　　　向下取整</li>
<li>Math.round(数值) 　　　把数四舍五入为最接近的整数</li>
<li>Math.min(数值1,数值2)　　　返回最小值</li>
<li>Math.max(数值1,数值2) 　　返回最大值</li>
<li>Math.random() 　　　　　获得0-1之间的随机数</li>
</ul>
<ol start="3">
<li>常见的其他函数<br>在数据传输流程中，json是以文本，即字符串的形式传递的，而JS操作的是JSON对象，所以，JSON对象和JSON字符串之间的相互转换是关键，例如：</li>
</ol>
<p>JSON字符串：</p>
<blockquote>
<p>var str1 = ‘{ “name”: “alex”, “sex”: “feng” }’;</p>
</blockquote>
<p>JSON对象：</p>
<blockquote>
<p>var str2 = { “name”: “alex”, “sex”: “feng” };</p>
</blockquote>
<p>JSON字符串转换成JSON对象：</p>
<blockquote>
<p>var obj = JSON.parse(str); // 序列化</p>
</blockquote>
<p>JSON对象转换成JSON字符串：</p>
<blockquote>
<p>var str = JSON.stringify(obj); // 反序列化</p>
</blockquote>
<h4 id="八、面向对象"><a href="#八、面向对象" class="headerlink" title="八、面向对象"></a>八、面向对象</h4><ol>
<li>JS创建对象三种方式<img src="/2020/09/19/py-day07/JS%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A13%E7%A7%8D%E6%96%B9%E5%BC%8F.png" class title="JS创建对象3种方式"></li>
<li>JS面向对象之封装 <img src="/2020/09/19/py-day07/JS-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85.png" class title="JS-面向对象之封装"></li>
<li>JS面向对象之继承 <img src="/2020/09/19/py-day07/JS-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%A7%E6%89%BF.png" class title="JS-面向对象之继承">
<img src="/2020/09/19/py-day07/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%A7%E6%89%BF2.png" class title="JS-面向对象之继承2">
<img src="/2020/09/19/py-day07/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%A7%E6%89%BF3.png" class title="JS-面向对象之继承3">






</li>
</ol>
<h4 id="九、DOM"><a href="#九、DOM" class="headerlink" title="九、DOM"></a>九、DOM</h4><p>DOM: Document Object Modal ： 文档对象模型</p>
<ol>
<li><ul>
<li><p>直接查找</p>
<p>  document.getElementById() 　　　　　　　根据ID获取一个标签<br>  document.getElementsByName()　　　　　　根据name属性获取标签集合-一个数组<br>  document.getElementsByClassName()　　　根据class属性获取标签集合-一个数组<br>  document.getElementsByTagName()　　　　根据标签名获取标签集合</p>
</li>
<li><p>间接查找<br>  parentElement 　　　　　父节点标签元素<br>  children 　　　　　　　　所有子标签<br>  firstElementChild　　　第一个子标签元素<br>  lastElementChild 　　　最后一个子标签元素<br>  nextElementtSibling 　下一个兄弟标签元素<br>  previousElementSibling 上一个兄弟标签元素</p>
</li>
</ul>
</li>
<li><p>操作内容<br> innerText　　　文本<br> innerHTML　　　HTML内容<br> value 　　　　　值</p>
<pre><code> &lt;input type=&#39;text&#39; value=&#39;1234&#39; /&gt;</code></pre>
</li>
<li><p>css的操作<br>整块CSS操作</p>
</li>
</ol>
<ul>
<li><p>操作整块类：</p>
<pre><code>  classList add  remove
  例：模态对话框显示和隐藏</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.c1&#123;</span><br><span class="line">    border:<span class="number">1</span>px solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">获取css样式：obj.classList</span><br><span class="line">移出css样式：obj.classList.remove(<span class="string">&#x27;.c1&#x27;</span>);</span><br><span class="line">添加css样式：obj.classList.add(<span class="string">&#x27;.c2&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作单个类：<br>obj.style.css属性<br>eg：obj.style.backgroundcolor = ‘red’</p>
</li>
</ul>
<ol start="4">
<li><p>事件：<br> onclick  — 点击事件<br> onchange — 适用于select</p>
</li>
<li><p>操作标签</p>
<img src="/2020/09/19/py-day07/JS-%E6%93%8D%E4%BD%9C%E6%A0%87%E7%AD%BE.png" class title="JS-操作标签">
</li>
<li><p>常见事件</p>
<p>onfocus(): 获得焦点<br>onblur()：失去焦点<br>onmouseover():鼠标悬停<br>onmouseout():鼠标离开</p>
</li>
</ol>
<p><strong>获得焦点，失去焦点</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;Focus();&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;Blur();&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Focus</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> i1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;i1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(i1.value == <span class="string">&quot;请输入用户名&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">            i1.value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">Blur</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> i1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;i1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(i1.value == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">            i1.value = <span class="string">&quot;请输入用户名&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>####2.绑定事件的三种方式</p>
<ul>
<li>2.1 html属性的方式绑定<br><code>&lt;a href=&#39;www.baidu.com&#39; onclick=&quot;t1();&quot;&gt; 百度 &lt;/a&gt;</code></li>
</ul>
<blockquote>
<p>作为WEB开发人员,这是最早碰到的一种事件绑定方式，这种绑定方式非常古老</p>
</blockquote>
<blockquote>
<p>优点：兼容性最强</p>
</blockquote>
<blockquote>
<p>缺点也很明显:<br>1:需要在DOM渲染时分析绑定语句,影响DOM渲染速度(IE下尤其)<br>2:形式上没达到”结构与行为”相分离的原则<br>3:t函数在全局内执行,不方便访问该DOM对象</p>
</blockquote>
<ul>
<li>2.2 对象属性方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bd &#x3D; document.getElementById(&#39;bd&#39;);</span><br><span class="line">bd.onclick &#x3D; function()&#123;</span><br><span class="line">    console.log(this.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>这种绑定是把一个DOM对象onclick属性赋值为一个函数，那此时函数内部的this指向的是该DOM对象，即这个a对象</p>
</blockquote>
<blockquote>
<p>缺点:该方式只能为一种事件，绑定一个回调函数</p>
</blockquote>
<blockquote>
<p>即：.onclick = fn1, .onclick=fn2;<br>最终的效果是.onclick=fn2 执行</p>
</blockquote>
<ul>
<li>2.3 addEventListener方式(了解)<blockquote>
<p>格式: addEventListener(‘事件’ ,绑定的函数, true/fase)</p>
<ol>
<li>如果添加了多个事件处理函数，则按添加时的先后顺序来执行。</li>
<li>时间处理函数中的this指代的是DOM对象本身(w3c标准)</li>
<li>第一个时间函数，一律把事件名的”on”去掉<br>优点：能为同一种时间，如onclick，绑定多个函数中的this指向该DOM对象，操作方便<br>缺点：IE8以下版本不支持此方法</li>
</ol>
</blockquote>
</li>
</ul>
<p>通过第三个参数：<br>     // false 默认 捕捉<br>     // true  冒泡</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var i0 &#x3D; document.getElementById(&#39;i1&#39;);</span><br><span class="line">i0.addEventListener(&#39;click&#39;, function()&#123;console.log(&#39;a&#39;);&#125;,true)</span><br><span class="line">i0.addEventListener(&#39;click&#39;, function()&#123;console.log(&#39;b&#39;);&#125;,true)</span><br></pre></td></tr></table></figure>

<p><strong>面试题</strong></p>
<ul>
<li>写一个行为 结构 样式 相分离的页面<br>表格换色<details>
<summary>展开查看</summary>

</details></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> trs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;trs.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// i = 0 1 2 3 4</span></span></span><br><span class="line"><span class="javascript">        trs[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//            trs[i] 不能指一个对象</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        trs[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//            trs[i] 不能指一个对象</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;white&#x27;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="7">
<li>window对象</li>
</ol>
<p><strong>1. window对象常见的方法</strong><br><strong>1.1. 随手就能用到的方法</strong></p>
<blockquote>
<ol>
<li>window.alert(msg);</li>
<li>window.confirm(msg);</li>
<li>window.open(URL, 位置);</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.alert(&#39;fuck&#39;);</span><br><span class="line">window.confirm(&#39;确认要删除吗？&#39;);</span><br><span class="line">window.open(&#39;.&#x2F;02.html&#39;, &#39;_blank&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 02.html如下代码：</span><br><span class="line">&lt;input type&#x3D;&#39;button&#39; onclick&#x3D;&#39;window.close()&#39; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>1.2 比较常用到的方法</strong></p>
<blockquote>
<p>setInerval()</p>
<blockquote>
<ul>
<li>在载入后，每隔指定的时间就执行一次回调函数</li>
<li>timer = setInterval(“函数()” , 毫秒数);</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">    console.log(11);</span><br><span class="line">&#125;</span><br><span class="line">myTimer = setInterval(&quot;test()&quot;, 1000)   //setInterval有一个返回值，定义为myTimer</span><br><span class="line">clearInterval(myTimer)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>clearInterval()</p>
<blockquote>
<ul>
<li>取消setInterval()的设置</li>
<li>clearInterval(timer)</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>setTimeout()</p>
<blockquote>
<ul>
<li>在载入后，在指定的时间就执行一次回调函数（只是一次）</li>
<li>timer = setTimeout(“函数()” , 毫秒数);</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<p>clearTimeout()</p>
<blockquote>
<ul>
<li>取消setTimeout()的设置</li>
<li>clearTimeout(timer)</li>
</ul>
</blockquote>
</blockquote>
<p>2.window对象常见的属性</p>
<blockquote>
<p>window.location<br><strong>利用window对象的子对象location的href属性，可以完成简单的页面跳转</strong></p>
<ol>
<li>window.location.href　　　　　　获取URL</li>
<li>window.location.href = ‘url’ 重定向</li>
<li>window.location.reload　　　　　重新加载</li>
</ol>
</blockquote>
<ul>
<li>常见的案例</li>
</ul>
<p>案例：表格的全选和反选以及取消</p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;SelectAll();&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;CancelAll();&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;ReverseAll();&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>选择<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ip<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>端口<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;infobody&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>192.16.0.100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>80<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>192.16.0.100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>81<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>192.16.0.100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>82<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">SelectAll</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> InfoBody = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;infobody&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> InfoChilden = InfoBody.children;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; InfoChilden.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> myInput = InfoChilden[i].children[<span class="number">0</span>].children[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                myInput.checked = <span class="literal">true</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">CancelAll</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> InfoBody = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;infobody&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> InfoChilden = InfoBody.children;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; InfoChilden.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> myInput = InfoChilden[i].children[<span class="number">0</span>].children[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                myInput.checked = <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">ReverseAll</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> InfoBody = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;infobody&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> InfoChilden = InfoBody.children;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; InfoChilden.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> myInput = InfoChilden[i].children[<span class="number">0</span>].children[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line">                if(myInput.checked)&#123;</span><br><span class="line"><span class="javascript">                    myInput.checked = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    myInput.checked = <span class="literal">true</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>

<p>案例：左侧菜单展示</p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:400px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:38px</span>;</span></span><br><span class="line">            line-height: 38px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#204982</span>;</span></span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hide</span>&#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navigator&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;i1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;changeMenu(&#x27;i1&#x27;)&quot;</span>&gt;</span>菜单一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content hide&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">&quot;i2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;changeMenu(&#x27;i2&#x27;)&quot;</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content hide&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">&quot;i3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;changeMenu(&#x27;i3&#x27;)&quot;</span>&gt;</span>菜单三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content hide&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>333333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>333333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>333333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">changeMenu</span>(<span class="params">nid</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 1. 先获取到当前点击的div</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> current_div = <span class="built_in">document</span>.getElementById(nid);</span></span><br><span class="line"><span class="javascript"><span class="comment">//            console.log(current_div);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 2.通过当前点击的div，从而获取到其父节点 class=navigator</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> elements = current_div.parentElement.parentElement.children;</span></span><br><span class="line"><span class="javascript"><span class="comment">//            console.log(elements);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 3.通过获取到的父级元素，然后设置content元素为hide</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;elements.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">                elements[i].children[<span class="number">1</span>].classList.add(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 4.将点击的那个div的hide样式去除掉</span></span></span><br><span class="line"><span class="javascript">            current_div.nextElementSibling.classList.remove(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>



<p>案例：模态框的显示和取消</p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span>&#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">            background-color: black;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.6</span>;</span></span><br><span class="line">            z-index: 9;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.two</span>&#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            width: 500px;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:400px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*top:200px;*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:40</span>%;</span></span><br><span class="line">            background-color: white;</span><br><span class="line">            z-index: 10;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hide</span>&#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.show</span>&#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;showModel();&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 遮罩层开始 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;one&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;one hide&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遮罩层结束 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 模态弹出框开始 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;two&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;two hide&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;hideModel();&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;确定&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模态弹出框结束 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showModel</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> myonediv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> mytwodiv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;two&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">            myonediv.classList.remove(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            mytwodiv.classList.remove(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">hideModel</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> myonediv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> mytwodiv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;two&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">            myonediv.classList.add(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            mytwodiv.classList.add(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>


<p>案例：发送验证码倒计时</p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> &gt;</span>发送验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> total = <span class="number">10</span>; <span class="comment">// 总共多少秒</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> curCount; <span class="comment">// 当前剩余秒数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mytimer;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        curCount = total;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.setAttribute(<span class="string">&quot;disabled&quot;</span>,<span class="string">&quot;true&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.innerText = <span class="string">&quot;请在&quot;</span> + curCount + <span class="string">&quot;秒内输入验证码&quot;</span>;</span></span><br><span class="line"><span class="javascript">        mytimer = <span class="built_in">setInterval</span>(setRemainTime, <span class="number">1000</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setRemainTime</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        if(curCount == 0)&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">clearInterval</span>(mytimer);</span></span><br><span class="line"><span class="javascript">            btn.removeAttribute(<span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line"><span class="javascript">            btn.innerText = <span class="string">&quot;重新发送验证码&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line">            curCount -= 1;</span><br><span class="line"><span class="javascript">            btn.innerText = <span class="string">&quot;请在&quot;</span> + curCount + <span class="string">&quot;秒内输入验证码&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>

<p>案例：表格的隔行换色</p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">onmouseover</span>=<span class="string">&quot;test1(0);&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;test2(0);&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">onmouseover</span>=<span class="string">&quot;test1(1);&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;test2(1);&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">onmouseover</span>=<span class="string">&quot;test1(2);&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;test2(2);&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&amp;nbsp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">n</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//        console.log(123);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> myTr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;tr&quot;</span>)[n];</span></span><br><span class="line"><span class="javascript">        myTr.style.backgroundColor = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">n</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//        console.log(456);</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> myTr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;tr&quot;</span>)[n];</span></span><br><span class="line"><span class="javascript">        myTr.style.backgroundColor = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>


<p>案例：文本框获取和失去交点</p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">&quot;Focus(this);&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;Blur(this);&quot;</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入关键字&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: gray;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">Focus</span>(<span class="params">ths</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            ths.style.color = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(ths.value == <span class="string">&#x27;请输入关键字&#x27;</span> || ths.value.trim() == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                ths.value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">Blur</span>(<span class="params">ths</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(ths.value.trim() == <span class="string">&quot;&quot;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                ths.value = <span class="string">&#x27;请输入关键字&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                ths.style.color = <span class="string">&#x27;gray&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                ths.style.color = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>

<p>案例：菜单联动</p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;province&quot;</span> <span class="attr">id</span>=<span class="string">&quot;province&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;ld();&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;-1&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>山西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> citys = [</span></span><br><span class="line"><span class="javascript">        [<span class="string">&quot;海淀&quot;</span>,<span class="string">&quot;东城&quot;</span>,<span class="string">&quot;西城&quot;</span>,<span class="string">&quot;朝阳&quot;</span>],</span></span><br><span class="line"><span class="javascript">        [<span class="string">&quot;太原&quot;</span>,<span class="string">&quot;大同&quot;</span>,<span class="string">&quot;运城&quot;</span>,<span class="string">&quot;晋中&quot;</span>]</span></span><br><span class="line">    ];</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">ld</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> provinces = <span class="built_in">document</span>.getElementById(<span class="string">&quot;province&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> opts;</span></span><br><span class="line"></span><br><span class="line">        if(provinces.value == -1)&#123;</span><br><span class="line"><span class="javascript">            opts = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;city&quot;</span>).innerHTML = opts;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> areas = citys[provinces.value];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; areas.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">            opts += <span class="string">&quot;&lt;option value=&#x27;&quot;</span> + i + <span class="string">&quot;&#x27;&gt;&quot;</span> + areas[i] + <span class="string">&quot;&lt;/option&gt;&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;city&quot;</span>).innerHTML = opts;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>


<p>案例：小说阅读，点击大中小更改字体</p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;bigger();&quot;</span>&gt;</span>大<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;middle();&quot;</span>&gt;</span>中<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;smaller();&quot;</span>&gt;</span>小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>轻轻地我走了，正如我轻轻的来！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">bigger</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        p.style.fontSize = <span class="string">&#x27;25px&#x27;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">middle</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        p.style.fontSize = <span class="string">&#x27;18px&#x27;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">smaller</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;p&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        p.style.fontSize = <span class="string">&#x27;13px&#x27;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>










<h4 id="十、BOM"><a href="#十、BOM" class="headerlink" title="十、BOM"></a>十、BOM</h4> <img src="/2020/09/19/py-day07/BOM%E6%A6%82%E5%BF%B5.png" class title="BOM概念">
 <img src="/2020/09/19/py-day07/BOM%E6%A8%A1%E5%9E%8B.png" class title="BOM模型">
 <img src="/2020/09/19/py-day07/BOM%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A11.png" class title="BOM中的对象1">
 <img src="/2020/09/19/py-day07/BOM%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A12.png" class title="BOM中的对象2">
 <img src="/2020/09/19/py-day07/BOM%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A13.png" class title="BOM中的对象3">
 <img src="/2020/09/19/py-day07/BOM%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A14.png" class title="BOM中的对象4">
 <img src="/2020/09/19/py-day07/BOM%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A15.png" class title="BOM中的对象5">
 <img src="/2020/09/19/py-day07/BOM%E6%A8%A1%E5%9E%8B6.png" class title="BOM模型6">
 <img src="/2020/09/19/py-day07/BOM%E6%A8%A1%E5%9E%8B7.png" class title="BOM模型7">


<h4 id="十一、this指向问题"><a href="#十一、this指向问题" class="headerlink" title="十一、this指向问题"></a>十一、this指向问题</h4><p>在python面向对象中， 谁调用改方法，self就是那个实例</p>
<p>this指向window对象</p>
 <img src="/2020/09/19/py-day07/window%E5%AF%B9%E8%B1%A1.png" class title="window对象">


<p>this指向当前元素</p>
 <img src="/2020/09/19/py-day07/%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0.png" class title="当前元素">

<p>javascript中的this有点类似于Python中的self<br>即哪个对象调用当前的方法或属性，那此时this就是哪个对象，但在js中this的指向总共分为三种</p>
<ol>
<li>this指向window<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(this);</span><br><span class="line">var a &#x3D; 10;</span><br><span class="line">var b &#x3D; 20;</span><br><span class="line">function f1()&#123;</span><br><span class="line">    var a &#x3D; 100;</span><br><span class="line">    var b &#x3D; 200;</span><br><span class="line">    console.log(this);</span><br><span class="line">    console.log(this.a);</span><br><span class="line">    console.log(this.b);</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure></li>
<li>this指向元素节点对象<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var mydiv = document.getElementById(&#x27;info&#x27;);</span><br><span class="line">mydiv.onclick = function()&#123;</span><br><span class="line">    console.log(this.innerText);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="十二、Jquery-对DOM中各种方法的封装，是一个js的第三方库"><a href="#十二、Jquery-对DOM中各种方法的封装，是一个js的第三方库" class="headerlink" title="十二、Jquery: 对DOM中各种方法的封装，是一个js的第三方库"></a>十二、Jquery: 对DOM中各种方法的封装，是一个js的第三方库</h4><h5 id="JQuery的介绍及其优势"><a href="#JQuery的介绍及其优势" class="headerlink" title="JQuery的介绍及其优势"></a>JQuery的介绍及其优势</h5><ol>
<li>Jquery介绍<blockquote>
<p>JQuery的宗旨是——WRITE LESS,DO MORE,写更少的代码,做更多的事情。它是轻量级的js库，这是其它的js库所不及的，它兼容CSS3，还兼容各种常用浏览器。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>JQuery是一个快速的，简洁的JavaScript库，使用户能更方便地处理HTML documents、events、实现动画效果，并且方便地为网站提供AJAX交互。</p>
</blockquote>
<blockquote>
<p>JQuery还有一个比较大的优势是，它的文档说明很全，而且各种应用也说得很详细，同时还有许多成熟的插件可供选择。JQuery能够使用户的html页保持代码和html内容分离，也就是说，不用再在html里面插入一堆js来调用命令了，只需定义id即可</p>
</blockquote>
<ol start="2">
<li>JQuery的优势</li>
</ol>
<ul>
<li>一款轻量级的js框架。JQuery核心js文件才几十kb，不会影响页面加载速度</li>
<li>丰富的DOM选择器,JQuery的选择器用起来很方便，比如要找到某个dom对象的相邻元素，js可能要写好几行代码，而JQuery一行代码就搞定了，再比如要将一个表格的隔行变色，JQuery也是一行代码搞定</li>
<li>链式表达式。JQuery的链式操作可以把多个操作写在一行代码里，更加简洁</li>
<li>事件、样式、动画支持。JQuery还简化了js操作css的代码，并且代码的可读性也比js要强</li>
<li>Ajax操作支持。JQuery简化了AJAX操作，后台只需返回一个JSON格式的字符串就能完成与前台的通信</li>
<li>跨浏览器兼容。JQuery基本兼容了现在主流的浏览器，不用再为浏览器的兼容问题而伤透脑筋</li>
<li>插件扩展开发。JQuery有着丰富的第三方的插件，例如：树形菜单、日期控件、图片切换插件、弹出窗口等等基本前台页面上的组件都有对应插件，并且用JQuery插件做出来的效果很炫，并且可以根据自己需要去改写和封装插件，简单实用</li>
</ul>
<h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><ol>
<li><p>id选择器：<br><code>$(&quot;#id&quot;)</code></p>
</li>
<li><p>class选择器：<br><code>$(&quot;.classname&quot;)</code></p>
</li>
<li><p>标签选择器<br><code>$(&quot;tagname&quot;)</code></p>
</li>
<li><p>组合选择器<br><code>$(&quot;#id, .classname, tagname&quot;)</code></p>
</li>
<li><p>层级选择器<br><code>$(&quot;#id a&quot;) ----&gt; 所有的后代a元素</code><br><code>$(&quot;#id &gt; a&quot;)---&gt; 第一个儿子元素</code></p>
</li>
<li><p>基本选择器<br><code>:first :eq() :last</code></p>
<blockquote>
<p><code>$(&quot;:first&quot;)  ---&gt;第一个元素</code><br><code>$(&quot;tr:eq(1)&quot;)  ---&gt;根据索引获取元素</code><br><code>$(&quot;:last&quot;) ---&gt; 最后一个元素</code></p>
</blockquote>
</li>
<li><p>属性选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&#39;text&#39;&gt;</span><br><span class="line">&lt;input type&#x3D;&#39;checkbox&#39;&gt;</span><br><span class="line">&lt;input type&#x3D;&#39;password&#39;&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;input[type&#x3D;&#39;checkbox&#39;]&quot;)</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>实例：表格的全选和反选以及取消</strong></p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;chooseAll();&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i2&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cancelAll();&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span> <span class="attr">id</span>=<span class="string">&quot;i3&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;reverseAll();&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>IP地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>端口<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.1.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.1.1.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.1.1.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>8082<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">chooseAll</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>,<span class="literal">true</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">cancelAll</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>,<span class="literal">false</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">reverseAll</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">this</span>.checked)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.checked = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.checked = <span class="literal">true</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>


<h5 id="筛选器"><a href="#筛选器" class="headerlink" title="筛选器"></a>筛选器</h5><ol>
<li><p>下一个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#i1&quot;).next();</span><br><span class="line">$(&quot;#i1&quot;).nextAll();</span><br><span class="line">$(&quot;#i1&quot;).nextUntil(&#39;#i3&#39;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>上一个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#i2&quot;).prev()</span><br><span class="line">$(&quot;#i3&quot;).prevAll()</span><br><span class="line">$(&quot;#i3&quot;).prevUntil(&#39;#i1&#39;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>父亲元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#i3&quot;).parent()</span><br><span class="line">$(&quot;#i3&quot;).parents()</span><br><span class="line">$(&quot;#i3&quot;).parentsUntil(&#39;#i1&#39;)</span><br></pre></td></tr></table></figure></li>
<li><p>儿子和兄弟元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#i3&quot;).children();</span><br><span class="line">$(&quot;#i3&quot;).siblings();</span><br></pre></td></tr></table></figure></li>
<li><p>查找元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#i1&quot;).find()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>左侧菜单</strong></p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#2459a2</span>;</span></span><br><span class="line">            color: white;</span><br><span class="line">            width: 300px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hide</span>&#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>菜单一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content hide&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>菜单三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content hide&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;.header&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).siblings(<span class="string">&#x27;.content&#x27;</span>).addClass(<span class="string">&quot;hide&quot;</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).next().removeClass(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>


<p><strong>模态框</strong></p>
<details>
<summary>展开查看</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.fluid</span>&#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">            background-color: black;</span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.5</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.modal</span>&#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:20</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:35</span>%;</span></span><br><span class="line">            background-color: white;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hide</span>&#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>IP<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>端口<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.1.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>80<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;编辑&quot;</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.2.2.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>81<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;编辑&quot;</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.3.3.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>82<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;编辑&quot;</span> <span class="attr">class</span>=<span class="string">&quot;edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--遮罩层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fluid hide&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal hide&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        IP: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ip&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ip&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        端口: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">id</span>=<span class="string">&quot;port&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ok&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cancel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cancel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;.edit&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;.fluid&quot;</span>).removeClass(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;.modal&quot;</span>).removeClass(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tds = $(<span class="built_in">this</span>).parent().prevAll();</span></span><br><span class="line"><span class="javascript"><span class="comment">//        console.log(tds[0].innerText);</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#port&quot;</span>).val(tds[<span class="number">0</span>].innerText);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#ip&quot;</span>).val(tds[<span class="number">1</span>].innerText);</span></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#cancel&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;.fluid&quot;</span>).addClass(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;.modal&quot;</span>).addClass(<span class="string">&#x27;hide&#x27;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>



<h5 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a><strong>样式操作</strong></h5><ol>
<li>添加整块样式<br><code>addClass()</code></li>
<li>删除整块样式<br><code>removeClass()</code></li>
<li>判断样式存不存在<br><code>hasClass()</code></li>
<li>相当于开关，有这个样式则去掉，没有则添加<br><code>toggleClass()</code></li>
</ol>
<h5 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a><strong>文本操作</strong></h5><ol>
<li>对纯文本操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;#one&quot;).text(); --- 获取值</span><br><span class="line">$(&quot;#one&quot;).text(&#39;fuck&#39;); --- 设置值</span><br></pre></td></tr></table></figure></li>
<li>对HTML操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;xxx&quot;).html()</span><br><span class="line">$(&quot;xxx&quot;).html(&#39;&lt;a href&#x3D;&quot;&quot;&gt;&lt;&#x2F;a&gt;&#39;)  </span><br></pre></td></tr></table></figure></li>
<li>对val操作（针对input系列）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;xxx&quot;).val()</span><br><span class="line">$(&quot;xxx&quot;).val(&#39;123&#39;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h5 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h5><ol>
<li>用于自定义属性<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;xxx&#39;).attr(&#39;n&#39;)</span><br><span class="line">$(&#39;xxx&#39;).attr(&#39;n&#39;,&#39;v&#39;)</span><br><span class="line">$(&#39;xxx&#39;).removeAttr(&#39;n&#39;)</span><br></pre></td></tr></table></figure></li>
<li>用于checkbox，radio<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;xxx&#39;).prop(&#39;checked&#39;)</span><br><span class="line">$(&#39;xxx&#39;).prop(&#39;checked&#39;, true)</span><br></pre></td></tr></table></figure></li>
<li>each 方法<br>each()函数是基本上所有的框架都提供了的一个工具类函数，通过它，你可以遍历对象、数组的属性值并进行处理。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.each(Object, function(p1, p2) &#123;</span><br><span class="line">     this;       &#x2F;&#x2F;这里的this指向每次遍历中Object的当前属性值</span><br><span class="line">     p1; p2;     &#x2F;&#x2F;访问附加参数</span><br><span class="line">&#125;, [&#39;参数1&#39;, &#39;参数2&#39;]);</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<blockquote>
<p><code>&lt;input type=&#39;checkbox&#39; id=&#39;i1&#39; checked=checked /&gt;</code><br>此处选中复选框的时候，我们可以直接使用attr来进行赋值操作，但是在1以及2版本的jquery中会出错，在3版本的jquery中没有任何问题</p>
</blockquote>
<blockquote>
<p>因此，我们在处理checkbox，radio等标签的时候，我们尽量使用特定的prop，不要使用attr(“checked”,”checked”)</p>
</blockquote>
<blockquote>
<p>prop()是 jQuery 1.6 开始新增了一个方法，官方建议具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()，其他的使用 attr()。</p>
</blockquote>
<h5 id="文档处理"><a href="#文档处理" class="headerlink" title="文档处理"></a>文档处理</h5><ol>
<li>插入到指定元素”里面“的后面<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;xxx&#39;).append()</span><br><span class="line">$(&#39;xxx&#39;).appendTo()</span><br></pre></td></tr></table></figure></li>
<li>插入到指定元素”里面“的前面<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;xxx&#39;).prepend()</span><br><span class="line">$(&#39;xxx&#39;).prependTo()</span><br></pre></td></tr></table></figure></li>
<li>插入到指定元素”外面“的后面<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;xxx&#39;).after()</span><br></pre></td></tr></table></figure></li>
<li>插入到指定元素”外面“的前面<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;xxx&#39;).before()</span><br></pre></td></tr></table></figure></li>
<li>替换元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;xxx&#39;).replaceWith()</span><br><span class="line">$(&#39;xxx&#39;).replaceAll()</span><br></pre></td></tr></table></figure></li>
<li>移除和清空元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;xxx&#39;).remove()</span><br><span class="line">$(&#39;xxx&#39;).empty()</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>案例</strong></p>
<details>
<summary>两个框之间互相选择</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            float: left;</span><br><span class="line">            margin-left: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        select&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>菠萝<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;=&gt;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;toRight&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;==&gt;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;toAllRight&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;shuiguo&quot;</span> <span class="attr">id</span>=<span class="string">&quot;shuiguo&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#toRight&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#fruit option:checked&quot;</span>).clone().appendTo(<span class="string">&quot;#shuiguo&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//        $(&quot;#shuiguo&quot;).append($(&quot;#fruit option:checked&quot;));</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#toAllRight&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       $(<span class="string">&quot;#fruit option&quot;</span>).clone().appendTo(<span class="string">&quot;#shuiguo&quot;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>

<details>
<summary>tab切换</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#2459a2</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:38px</span>;</span></span><br><span class="line">            line-height: 38px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-right</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span>;</span></span><br><span class="line">            color: white;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hide</span>&#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.active</span>&#123;</span></span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu active&quot;</span>&gt;</span>菜单一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span>内容一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info hide&quot;</span>&gt;</span>内容二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info hide&quot;</span>&gt;</span>内容三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;.menu&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> i = $(<span class="built_in">this</span>).index();</span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">this</span>).addClass(<span class="string">&#x27;active&#x27;</span>).siblings().removeClass(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;.info&quot;</span>).eq(i).show().siblings().hide();</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>


<h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><ol>
<li><p>常见的事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&#39;xxx&#39;).click(function()&#123;&#125;)</span><br><span class="line">$(&#39;xxx&#39;).mouseout(function()&#123;&#125;)</span><br><span class="line">$(&#39;xxx&#39;).mouseover(function()&#123;&#125;)</span><br><span class="line">$(&#39;xxx&#39;).hover(function()&#123;&#125;)</span><br><span class="line">$(&#39;xxx&#39;).blur(function()&#123;&#125;)          </span><br><span class="line">$(&#39;xxx&#39;).focus(function()&#123;&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面加载完成之后，执行函数体中的内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(function()&#123;&#125;)</span><br><span class="line">$(document).ready(function()&#123;&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>案例</strong></p>
<details>
<summary>表格全选反选</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>   <span class="attr">onclick</span>=<span class="string">&quot;selectAll();&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;cancelAll();&quot;</span> <span class="attr">value</span>=<span class="string">&quot;取消&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>  <span class="attr">onclick</span>=<span class="string">&quot;reverseAll();&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>192.168.1.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>80<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;check&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>192.168.1.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>81<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>222222<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;check&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>192.168.1.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>82<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>333333<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;check&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.5.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">selectAll</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 找到所有的checkbox</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> inpts = $(<span class="string">&#x27;.check&#x27;</span>);</span></span><br><span class="line"><span class="javascript">       <span class="comment">// console.log(inpts);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 对找到的checkbox进行打钩</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inpts.length; i++)&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//            console.log(inpts[i].checked);</span></span></span><br><span class="line"><span class="javascript">            inpts[i].checked = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">cancelAll</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1. 找到所有的checkbox</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> inpts = $(<span class="string">&#x27;.check&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//        console.log(inpts);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 对找到的checkbox进行打钩</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inpts.length; i++)&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//            console.log(inpts[i].checked);</span></span></span><br><span class="line"><span class="javascript">            inpts[i].checked = <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">reverseAll</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> inpts = $(<span class="string">&#x27;.check&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//        console.log(inpts);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2. 对找到的checkbox进行打钩</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inpts.length; i++)&#123;</span></span><br><span class="line">           if (inpts[i].checked)&#123;</span><br><span class="line"><span class="javascript">               inpts[i].checked = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">           &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">               inpts[i].checked = <span class="literal">true</span>;</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>





 <img src="/2020/09/19/py-day07/jQuery.png" class title="jQuery">



<p>使用jquery实现表格的全选，反选，取消。</p>
<p>Jquery和DOM进行转换：</p>
 <img src="/2020/09/19/py-day07/jQuery-dom.png" class title="jQuery-dom">


<p>jquery —&gt; DOM ： $(‘#i1’)[0]</p>
<p>DOM —&gt; jquery: $(inpt[0])</p>
<h5 id="表单验证案例"><a href="#表单验证案例" class="headerlink" title="表单验证案例"></a>表单验证案例</h5><p><strong>案例</strong></p>
<details>
<summary>表单验证</summary>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost/reg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        用户名：</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;username_error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        密码：</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;pwd_error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        确认密码：</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;repwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;repwd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;repwd_error&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;form&quot;</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;input[type=&#x27;text&#x27;]&quot;</span>).trigger(<span class="string">&#x27;blur&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line">        total = 0;</span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;input[type=&#x27;text&#x27;]&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//            total += parseInt($(this).attr(&quot;s&quot;));</span></span></span><br><span class="line"><span class="javascript">            total += $(<span class="built_in">this</span>).data(<span class="string">&quot;s&quot;</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(total);</span></span><br><span class="line">        if(total != 3)&#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#username&quot;</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = $(<span class="built_in">this</span>).val();</span></span><br><span class="line">        if(username.length &lt; 6)&#123;</span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).data(&#123;<span class="string">&quot;s&quot;</span>:<span class="number">0</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#username_error&quot;</span>).text(<span class="string">&quot;用户名小于6位&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).data(&#123;<span class="string">&quot;s&quot;</span>:<span class="number">1</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#username_error&quot;</span>).text(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#pwd&quot;</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pwd = $(<span class="built_in">this</span>).val();</span></span><br><span class="line">        if(pwd.length &lt; 8)&#123;</span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).data(&#123;<span class="string">&quot;s&quot;</span>:<span class="number">0</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#pwd_error&quot;</span>).text(<span class="string">&quot;密码小于8位&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).data(&#123;<span class="string">&quot;s&quot;</span>:<span class="number">1</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#pwd_error&quot;</span>).text(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#repwd&quot;</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> pwd = $(<span class="string">&quot;#pwd&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> repwd = $(<span class="built_in">this</span>).val();</span></span><br><span class="line">        if(pwd != repwd)&#123;</span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).data(&#123;<span class="string">&quot;s&quot;</span>:<span class="number">0</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#repwd_error&quot;</span>).text(<span class="string">&quot;两次密码不一致&quot;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">this</span>).data(&#123;<span class="string">&quot;s&quot;</span>:<span class="number">1</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#repwd_error&quot;</span>).text(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>


<h5 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h5><ol>
<li>不刷新页面请求服务端的数据</li>
</ol>
<h5 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h5><blockquote>
<p>twitter搞的一个前端的框架组件</p>
</blockquote>
<p>head里面：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;bs/css/bootstrap.css&quot;&gt;</code><br>body末尾：<code>&lt;script src=&quot;bs/js/jquery.js&quot;&gt;&lt;/script&gt;     &lt;script src=&quot;bs/js/bootstrap.js&quot;&gt;&lt;/script&gt;</code><br>加载bootstrap的js之前先加载JQuery<br>Bootstrap 插件全部依赖 jQuery<br>请注意，Bootstrap 的所有 JavaScript 插件都依赖 jQuery，因此 jQuery 必须在 Bootstrap 之前引入，就像在基本模版中所展示的一样。在 bower.json 文件中 列出了 Bootstrap 所支持的 jQuery 版本。</p>
<h4 id="各种网站的模板"><a href="#各种网站的模板" class="headerlink" title="各种网站的模板"></a>各种网站的模板</h4><ol>
<li>simpleui</li>
<li>AdminTle</li>
</ol>
<p>####JS，DOM，JQuery 区别联系转化</p>
<p>JQuery对象转DOM对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(#i1) &#x3D;&#x3D;&#x3D;&gt; $(&quot;#i1&quot;)[0];</span><br></pre></td></tr></table></figure>
<p>DOM对象转JQuery对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var i1 &#x3D; document.getElementById(&#39;i1&#39;); &#x3D;&#x3D;&#x3D;&gt; $(i1) &#x3D;&#x3D; jQuery(i1)</span><br></pre></td></tr></table></figure>



<p><a href="https://www.cnblogs.com/zhangyinhua/p/9487096.html">https://www.cnblogs.com/zhangyinhua/p/9487096.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
</search>
