<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>py_day01_exercise</title>
    <url>/2020/08/09/py-day01-exercise/</url>
    <content><![CDATA[<p>温故知新</p>
<a id="more"></a>

<h3 id="1-列举你了解的编码及他们之间的区别？"><a href="#1-列举你了解的编码及他们之间的区别？" class="headerlink" title="1.列举你了解的编码及他们之间的区别？"></a>1.列举你了解的编码及他们之间的区别？</h3><ul>
<li>ASCII: python2默认的编码，一个字母是8位</li>
<li>Unicode(万国码)：一个字母是32位</li>
<li>UTF - 8：万国码的压缩码，最少用一个字节，最多用4个字节，一个中文是三个字节，24<br>位</li>
<li>GBK: 专门用作汉文的编码，其中一个中文用两个字节<blockquote>
<p>注意：用什么格式编写保存文件，就用什么格式打开</p>
</blockquote>
</li>
</ul>
<h3 id="2-Python2和Python3的区别？"><a href="#2-Python2和Python3的区别？" class="headerlink" title="2.Python2和Python3的区别？"></a>2.Python2和Python3的区别？</h3><ul>
<li>编码<ul>
<li>python2默认的编码是ACSII</li>
<li>python3默认的编码是UTF-8,所以开发过程中最好加一句：  # -<em>- coding:utf-8 -</em>-</li>
</ul>
</li>
<li>输入<ul>
<li>python2: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = raw_input(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>python3 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>print<ul>
<li>python2: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>python3 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;123456&quot;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-python都有那些数据类型？"><a href="#3-python都有那些数据类型？" class="headerlink" title="3.python都有那些数据类型？"></a>3.python都有那些数据类型？</h3><p>Python基本数据类型一般分为：数字、字符串、列表、元组、字典、集合</p>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a><strong>数字</strong></h4><p>数字类型是不可更改的对象。对变量改变数字值就是生成/创建新的对象。<br>Python支持多种数字类型：<br>整型(标准整型和长整型(Python2.7及之前的有这种类型))、布尔型、双精度浮点型、十进制浮点型、复数。</p>
<h4 id="标准整型"><a href="#标准整型" class="headerlink" title="标准整型"></a><strong>标准整型</strong></h4><p>int，标准整型，在大多数32位机器上标准整型取值范围是-2^31到2^31-1，也就是-2147483648~2147483647，如果在64位机器使用64位编译器，那么这个系统的标准整型将是64位。</p>
<h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a><strong>布尔型</strong></h4><p>bool，从Python2.3开始Python中添加了布尔类型。布尔类型有两种True和False。对于没有__nozero__方法的对象默认是True。</p>
<p>对于值为0的数字、空集（空列表、空元组、空字典等）在Python中的布尔类型中都是False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a><strong>浮点型</strong></h4><p>float，每个浮点型占8个字节（64位），完全遵守IEEE754号规范（52M/11E/1S）,其中52个位用于表示底，11个位用于表示指数（可表示的范围大约是±10**308.25），剩下的一个位表示符号。这看上去相当完美，然而，实际精度依赖于机器架构和创建Python解释器的编译器。</p>
<p>浮点型值通常都有一个小数点和一个可选的后缀e（大写或小写，表示科学计数法）。在e和指数之间可以用正（+）或负（-）表示指数的正负（正数的话可以省略符号）。更多内容，请点击python学习网。</p>
<p>以上是Python核心编程的对浮点型(双精度浮点型)的说明。经过Python实测浮点型默认长度是24字节如果超出这个范围会自动</p>
<p>复数类型</p>
<p>complex，在复数中虚数不能单独存在，它们总是和一个值为0.0的实数部分一起来构成一个复数。<br>复数由实数部分和虚数部分构成。<br>表示虚数的语法：real+imagj。<br>实数部分和虚数部分都是浮点型。<br>虚数部分必须有后缀j或J。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h4><p>字符串(string)是不可变类型，就是说改变一个字符串的元素需要新建一个新的字符串。字符串是由独立的字符组成的，并且这些字符可以通过切片操作顺序地访问。Python里面通过在引号间包含字符的方式创建字符串，单引号和双引号的作用是相同的。</p>
<p>Python用“原始字符串”操作符来创建直接量字符串，所以再做区分就没什么意义了。其他的语言，比如C语言里面用单引号来标示字符，双引号标示字符串，而在Python里面没有字符这个类型。这可能是双引号和单引号在Python里面被视作一样的另一个原因。</p>
<p>Python实际上有三类字符串。通常意义的字符串（str） 和Unicode字符串（unicode） 实际上都是抽象类basestring的子类。这个basestring是不能实例化的。</p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h4><p>列表(list)像字符串类型一样，列表类型也是序列式的数据类型。字符串只能由字符组成，而且是不可变的（不能单独改变它的某个值），而列表则是能保留任意数目的Python对象的灵活的容器。</p>
<p>列表不仅可以包含Python的标准类型，而且可以用用户定义的对象作为自己的元素。列表可以包含不同类型的对象，而且要比C或者Python自己的数组类型（包含在array扩展包中）都要灵活，因为数组类型所有的元素只能是一种类型。列表可以执行pop,sort、reverse等操作。列表也可以添加或者减少元素，还可以跟其他的列表结合或者把一个列表分成几个。可以对单独一个元素或者多个元素执行insert、update或remove操作。</p>
<h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a><strong>元组</strong></h4><p>元组类型在很多操作上都跟列表一样，许多用在列表上的例子在元组上照样能跑，我们有一节内容专门讲解元组类型。它们的主要不同在于元组是不可变的，或者说是只读的，所以那些用于更新列表的操作，比如用切片操作来更新一部分元素的操作，就不能用于元组类型。</p>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a><strong>字典</strong></h4><p>字典是Python语言中唯一的映射类型。映射类型对象里哈希值（键，key） 和指向的对象（值。value） 是一对多的关系。一个字典对象是可变的，它是一个容器类型，能存储任意个数的Python对象，其中也包括其他容器类型。字典类型和序列类型容器类（列表、元组） 的区别是存储和访问数据的方式不同。序列类型只用数字类型的键（从序列的开始起按数值顺序索引） 。映射类型可以用其他对象类型做键，一般最常见的是用字符串做键。和序列类型的键不同，映像类型的键直接或间接地和存储的数据值相关联。但因为在映射类型中，我们不再用“序列化排序”的键，所以映像类型中的数据是无序排列的映射类型不要求用数字值做索引以从一个容器中获取对应的数据项。你可以用键直接“映射”到值，这就是为什么叫映射类型（“mappingtype”） 的原因。映射类型通常被称做哈希表，是因为字典对象就是哈希类型的。字典是Python中最强大的数据类型之一。</p>
<p>字典常见的操作有：字典创建、字典赋值、字典中值的访问、字典更新、字典元素删除等操作。</p>
<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a><strong>集合</strong></h4><p>集合最早出现在Python2.3版本中，通过集合模块来创建，并通过ImmutableSet类和Set类进行访问。</p>
<p>集合有两种不同的类型，可变集合（set）和不可变集合（frozenset）。可变集合，你可以添加和删除元素，对不可变集合则不允许这样做。请注意，可变集合不是可哈希的，因此既不能用做字典的键也不能做其他集合中的元素。不可变集合则正好相反，即，他们有哈希值，能被用做字典的键或是作为集合中的一个成员。集合对象是一组无序排列的可哈希的值。</p>
<p>集合支持用in和not in操作符检查成员，由len()内建函数得到集合的基数（大小） ，用for循环迭代集合的成员。但是因为集合本身是无序的，你不可以为集合创建索引或执行切片（slice） 操作，也没有键可用来获取集合中元素的值。</p>
<h3 id="4-补充代码，实现以下功能"><a href="#4-补充代码，实现以下功能" class="headerlink" title="4.补充代码，实现以下功能"></a>4.补充代码，实现以下功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = <span class="string">&#x27;51devops&quot;niubi&#x27;</span></span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure>
<h3 id="5-用print打印出下面内容："><a href="#5-用print打印出下面内容：" class="headerlink" title="5.用print打印出下面内容："></a>5.用print打印出下面内容：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">⽂能提笔安天下,</span></span><br><span class="line"><span class="string">武能上⻢定乾坤.</span></span><br><span class="line"><span class="string">⼼存谋略何⼈胜,</span></span><br><span class="line"><span class="string">古今英雄唯是君。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="6-变量名的命名规范和建议？"><a href="#6-变量名的命名规范和建议？" class="headerlink" title="6.变量名的命名规范和建议？"></a>6.变量名的命名规范和建议？</h3><blockquote>
<ol>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名的第一个字符不能是数字</li>
<li>关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li>
</ol>
</blockquote>
<h3 id="7-如下那个变量名是正确的？"><a href="#7-如下那个变量名是正确的？" class="headerlink" title="7.如下那个变量名是正确的？"></a>7.如下那个变量名是正确的？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name &#x3D; &#39;51devops&#39;  ✔️</span><br><span class="line">_ &#x3D; &#39;echo&#39;         ✔️</span><br><span class="line">_9 &#x3D; &quot;zhangsan&quot;    ✔️</span><br><span class="line">9name &#x3D; &quot;xxx&quot;      ×</span><br><span class="line">devops(edu &#x3D; 666   ×</span><br></pre></td></tr></table></figure>

<h3 id="8-简述你了解if条件语句的基本结构。"><a href="#8-简述你了解if条件语句的基本结构。" class="headerlink" title="8.简述你了解if条件语句的基本结构。"></a>8.简述你了解if条件语句的基本结构。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br><span class="line">(2)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">elif 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br><span class="line">(3)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>

<h3 id="9-设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确。"><a href="#9-设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确。" class="headerlink" title="9.设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确。"></a>9.设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line"></span><br><span class="line">num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">    print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">    print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="10-写程序，成绩有ABCDE5个等级，与分数的对应关系如下"><a href="#10-写程序，成绩有ABCDE5个等级，与分数的对应关系如下" class="headerlink" title="10.写程序，成绩有ABCDE5个等级，与分数的对应关系如下."></a>10.写程序，成绩有ABCDE5个等级，与分数的对应关系如下.</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">grade = int(input(<span class="string">&quot;请输入分数:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> grade &gt;= <span class="number">100</span> <span class="keyword">or</span> grade &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&#x27;请输入正确分数:0-100&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">90</span> &lt;= grade &lt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= grade &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= grade &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">40</span> &lt;= grade &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;E&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="11-模拟10086客服电话（条件语句的嵌套）"><a href="#11-模拟10086客服电话（条件语句的嵌套）" class="headerlink" title="11.模拟10086客服电话（条件语句的嵌套）"></a>11.模拟10086客服电话（条件语句的嵌套）</h3><hr>
<h3 id="1-猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确，然后退出循环。"><a href="#1-猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确，然后退出循环。" class="headerlink" title="1.猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确，然后退出循环。"></a>1.猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确，然后退出循环。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="2-在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。"><a href="#2-在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。" class="headerlink" title="2.在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。"></a>2.在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">    num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;太笨了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-使用两种方法实现输出-1-2-3-4-5-6-8-9-10"><a href="#3-使用两种方法实现输出-1-2-3-4-5-6-8-9-10" class="headerlink" title="3.使用两种方法实现输出 1 2 3 4 5 6 8 9 10"></a>3.使用两种方法实现输出 1 2 3 4 5 6 8 9 10</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(n)</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">7</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="4-求1-100的所有数的和"><a href="#4-求1-100的所有数的和" class="headerlink" title="4.求1-100的所有数的和"></a>4.求1-100的所有数的和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    res += n</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="5-输出-1-100-内的所有奇数"><a href="#5-输出-1-100-内的所有奇数" class="headerlink" title="5.输出 1-100 内的所有奇数"></a>5.输出 1-100 内的所有奇数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="6-输出-1-100-内的所有偶数"><a href="#6-输出-1-100-内的所有偶数" class="headerlink" title="6.输出 1-100 内的所有偶数"></a>6.输出 1-100 内的所有偶数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="7-求1-2-3-4-5-…-99的所有数的和"><a href="#7-求1-2-3-4-5-…-99的所有数的和" class="headerlink" title="7.求1-2+3-4+5 … 99的所有数的和"></a>7.求1-2+3-4+5 … 99的所有数的和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        res += n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res -= n</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h3 id="8-⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）"><a href="#8-⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）" class="headerlink" title="8.⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）"></a>8.⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">passwd = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    valid_user = input(<span class="string">&#x27;请输入用户名:&#x27;</span>)</span><br><span class="line">    valid_passwd = input(<span class="string">&#x27;请输入密码:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> valid_user == user <span class="keyword">and</span> valid_passwd == passwd:</span><br><span class="line">        print(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;用户名或密码错误(剩余尝试次数: %s次)&quot;</span> %(count))</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br></pre></td></tr></table></figure>

<h3 id="9-猜年龄游戏"><a href="#9-猜年龄游戏" class="headerlink" title="9.猜年龄游戏"></a>9.猜年龄游戏</h3><p>要求：允许用户最多尝试3次，3次都没猜对的话，就直接退出，如果猜对了，打印恭喜信息并退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#年龄</span></span><br><span class="line">age = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">&#x27;猜猜我的年龄:&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess_age &gt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess_age &lt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="10-猜年龄游戏升级版"><a href="#10-猜年龄游戏升级版" class="headerlink" title="10.猜年龄游戏升级版"></a>10.猜年龄游戏升级版</h3><p>要求：允许用户最多尝试3次，每尝试3次后，如果还没猜对，就问用户是否还想继续玩，如果回答Y，就继续让其猜3次，以此往复，如果回答N，就退出程序，如何猜对了，就直接退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#年龄</span></span><br><span class="line">age = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">&#x27;猜猜我的年龄:&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess_age &gt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess_age &lt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        chance = input(<span class="string">&#x27;Do you want continue(Y/N):&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> chance == <span class="string">&#x27;Y&#x27;</span> <span class="keyword">or</span> chance == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            count = <span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> chance == <span class="string">&#x27;N&#x27;</span> <span class="keyword">or</span> chance == <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;pls input correct choice&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>python_exercise</category>
      </categories>
      <tags>
        <tag>python_exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>py_day01</title>
    <url>/2020/08/09/py-day01/</url>
    <content><![CDATA[<p>python基础<br>变量·字符串·常用操作</p>
<a id="more"></a>
<h5 id="1-编译型语言和解释型语言的区别"><a href="#1-编译型语言和解释型语言的区别" class="headerlink" title="1. 编译型语言和解释型语言的区别"></a>1. 编译型语言和解释型语言的区别</h5><p>编译型语言(强类型语言) :  一次编译，到处运行 例：c, c++, java等<br>解释型语言(弱类型语言)：不需要编译，直接调用解释器执行 例：php，python， shell</p>
<p>解释型语言修改完后，不需要编译，执行流程是从上到下依次解释执行。shell</p>
<h6 id="1-1-python的优势和劣势"><a href="#1-1-python的优势和劣势" class="headerlink" title="1.1 python的优势和劣势"></a>1.1 python的优势和劣势</h6><p>优势：</p>
<ul>
<li>简单易上手</li>
<li>大量的第三方的安装包  jekins, k8s api包  胶水语言</li>
</ul>
<p>劣势：</p>
<ul>
<li>速度慢 和c, c++, java比</li>
</ul>
<h5 id="2-演示python的安装和pycharm安装"><a href="#2-演示python的安装和pycharm安装" class="headerlink" title="2. 演示python的安装和pycharm安装"></a>2. 演示python的安装和pycharm安装</h5><h5 id="3-python的入门程序"><a href="#3-python的入门程序" class="headerlink" title="3. python的入门程序"></a>3. python的入门程序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;hellowrold!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>执行原理：</p>
<blockquote>
<p>右键执行的时候，会自动调用python解释器从上到下依次执行python代码。类比 shell。</p>
</blockquote>
<p>ps: 交互式命令行的执行方式  python3  —-》 ipython</p>
<p>编辑器和命令行式的写法的区别和应用场景：</p>
<blockquote>
<p>编辑器适用于大型的项目，命令行适用于小的测试</p>
</blockquote>
<h5 id="4-python的变量"><a href="#4-python的变量" class="headerlink" title="4. python的变量"></a>4. python的变量</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>  </span><br><span class="line">y = x*<span class="number">5</span> + <span class="number">6</span></span><br><span class="line">z = y*<span class="number">7</span></span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量就是将中间的结果暂存到内存,以便后续程序调用</p>
</blockquote>
<p>类比shell， 和shell中的变量的定义是一致的。<br>但是和shell中不一样的地方的是：shell的等号两边不允许有空格，但是python等号两边也可以没有空格。那为啥必须要有空格？</p>
<ul>
<li>从视觉上会好看一些，调试代码比较舒服</li>
<li>写代码，需要遵循 PEP8 规范  <ul>
<li>变量的等号两边必须是有空格的，各大公司code review</li>
<li><strong>变量名必须要有意义</strong> shell</li>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名建议不使用拼音和中文</li>
<li>变量的要具有意义</li>
<li>变量名不要过长</li>
</ul>
</li>
</ul>
<p><strong>编程语言的三种风格</strong></p>
<ul>
<li><p>大驼峰法    单词的首字母一定是大写的。</p>
<blockquote>
<p>UserName,   GetInfo, 等</p>
</blockquote>
</li>
<li><p>小驼峰法   单词的首字母小写，其余大写 </p>
<blockquote>
<p>userName </p>
</blockquote>
</li>
<li><p>下划线法  单词和单词之间使用下划线拼接</p>
<blockquote>
<p>user_name</p>
</blockquote>
</li>
</ul>
<p>在代码 code review (代码评审) , 我们要求三种风格你可以随便选择一种你喜欢的风格，但是大家在选择完成之后，一定要主要的是，千万别中途换风格。</p>
<h5 id="4-1-中午分享"><a href="#4-1-中午分享" class="headerlink" title="4.1 中午分享"></a>4.1 中午分享</h5><ul>
<li>基础都会，就是让你自己写的时候，写不出来？<blockquote>
<p>前提要多练，应该带着项目练。练完一两个项目之后，自然就熟悉了。如果说，你们公司正在建设自动化运维平台，希望大家勇敢点，去做一些核心的模块。</p>
</blockquote>
</li>
</ul>
<h5 id="5-python的基础数据类型"><a href="#5-python的基础数据类型" class="headerlink" title="5. python的基础数据类型"></a>5. python的基础数据类型</h5><ul>
<li><p>整型</p>
<blockquote>
<p>表示一个整数的</p>
</blockquote>
</li>
<li><p>字符串</p>
<blockquote>
<p> 字符串会嵌套<br>name = “dj’sa’b”  ## 外层双引号，内层要求是单引号<br>name2 = ‘ds”ad”sa’ ## 外层单引号，内层要求是双引号<br>hhh = “dvshavhhhhhhhhhhhhhhh” \</p>
<pre><code>&quot;dsadsadsadsa&quot;</code></pre>
<p>使用三引号<br>kkk = ‘’’<br>dnsajndsandjansdnas<br>曾老师<br>boduo老师<br>‘’’<br>print(kkk, type(kkk))</p>
</blockquote>
</li>
<li><p>布尔</p>
</li>
</ul>
<h6 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### : python 注释，unix的注释方式</span><br><span class="line">&#x2F;&#x2F;  : java， c, c++ 的注释方式</span><br><span class="line">&#39;&#39;&#39;&#39;&#39;&#39;&#39;: python多行注释</span><br><span class="line">&#x2F;*</span><br><span class="line">这是多行注释</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="6-输入"><a href="#6-输入" class="headerlink" title="6. 输入"></a>6. 输入</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###交互程序</span></span><br><span class="line"><span class="comment"># name = input(&quot;请输入名字：&quot;) ### 输入的值的类型是字符串类型的，input程序交互获取到的内容是字符串</span></span><br><span class="line"></span><br><span class="line">num = input(<span class="string">&#x27;请输入数字:&#x27;</span>)</span><br><span class="line">print(type(num)) <span class="comment">### &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">print(int(num) + <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>int(‘12’) : 会将字符串类型的整肃转换成整型</p>
<h4 id="7-流程控制"><a href="#7-流程控制" class="headerlink" title="7. 流程控制"></a>7. 流程控制</h4><h5 id="7-1-分支"><a href="#7-1-分支" class="headerlink" title="7. 1 分支"></a>7. 1 分支</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">    开始写逻辑代码  <span class="comment">### 必须要4个空格</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">123</span>:</span><br><span class="line">    print(<span class="string">&#x27;dsadsa&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;kkkkkk&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意： if.. else的语句只能执行一个</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### if elif else   只要满足一个条件，那就会立即执行相应的代码，执行完毕之后立即退出</span></span><br><span class="line"></span><br><span class="line">num = input(<span class="string">&#x27;请输入要比较的数字:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> int(num) &gt;= <span class="number">22</span>:</span><br><span class="line">    print(<span class="string">&#x27;可以扯证了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> int(num) &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;成年了,可以干一些成年的事了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> int(num) &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;还是小屁孩&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>只要满足一个条件，那就会立即执行相应的代码，执行完毕之后立即退出</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">&#x27;请输入名字:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;meet&#x27;</span>:</span><br><span class="line">    age = input(<span class="string">&#x27;请输入年龄:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> int(age) == <span class="number">18</span>:</span><br><span class="line">        print(<span class="string">&#x27;输入全部正确&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> int(age) &gt;= <span class="number">22</span>:</span><br><span class="line">        print(<span class="string">&#x27;xxxxxxxx&#x27;</span>)   </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;年龄输入错误!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;名字输入错误!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>if else 我们只能写一个，而elif可以写多个条件表达</strong></p>
<h5 id="7-2-循环控制"><a href="#7-2-循环控制" class="headerlink" title="7.2 循环控制"></a>7.2 循环控制</h5><ul>
<li>while 循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 基本款</span></span><br><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    <span class="comment"># 循环体</span></span><br><span class="line">    <span class="comment"># 如果条件为真，那么循环则执行</span></span><br><span class="line">    <span class="comment"># 如果条件为假，那么循环不执行</span></span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">num = int(input(<span class="string">&#x27;请输入数字:&#x27;</span>))  <span class="comment">## 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>: <span class="comment">### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line">    print(<span class="string">&#x27;dsadsadasdsasa&#x27;</span>)</span><br><span class="line">    num = num - <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:   <span class="comment">#### 循环退出之后，都会执行else中的代码</span></span><br><span class="line">    print(<span class="string">&#x27;last line.....&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>两大关键字：<br>break 和 continue：</p>
<ul>
<li>break：    退出整个循环，循环已经退出</li>
<li>continue:  跳出本次循环， 循环并没有退出</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### break ： 当警察抓到犯人的时候，后面即便有人，也不会做任何操作，直接退出</span></span><br><span class="line"><span class="comment"># num = int(input(&#x27;请输入数字:&#x27;))  ## 12</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># while num &gt; 0: ### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line"><span class="comment">#     num = num - 1  ## 第一次：num=11 第二次：num=10 第三次：num=9，，当num=5</span></span><br><span class="line"><span class="comment">#     if num == 5:</span></span><br><span class="line"><span class="comment">#         break   ### 退出整个循环</span></span><br><span class="line"><span class="comment">#     print(&#x27;后续代码...&#x27;) ## 第一次打印，第二次打印，第三次打印，。。。。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### continue ： 警察查身份证，</span></span><br><span class="line">num = int(input(<span class="string">&#x27;请输入数字:&#x27;</span>))  <span class="comment">## 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:  <span class="comment">### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line">    num = num - <span class="number">1</span>  <span class="comment">## 第一次：num=11 第二次：num=10 第三次：num=9，，当num=5</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment">### 跳出当前循环， 循环并没与退出</span></span><br><span class="line">    print(<span class="string">&#x27;后续代码...&#x27;</span>)  <span class="comment">## 第一次打印，第二次打印，第三次打印，。。。。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>for 循环<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### kkk 代表的是每一次循环的时候，目标对象s中的每一个元素</span></span><br><span class="line"><span class="comment">### 当循环到最后一个元素的时候，会自动退出</span></span><br><span class="line">s = <span class="string">&#x27;pounds&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> kkk <span class="keyword">in</span> s:</span><br><span class="line">    print(kkk)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>总结：任何语言无外乎三大流程控制结构</strong></p>
<ul>
<li>顺序</li>
<li>分支</li>
<li>循环</li>
</ul>
<p>是 姚期智 提出的</p>
<p>能够触类旁通，意思就是python学完之后， 在学go的时候，应该是没没任何压力的。<br>前年，参加校招。西安交大，西安大学<br>java， c++， 但是他们的数据结构和算法的功底非常的深厚</p>
<hr>
<h5 id="8-格式化输出"><a href="#8-格式化输出" class="headerlink" title="8. 格式化输出"></a>8. 格式化输出</h5><p>% , format</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 第一种写法：字符串使用+ 不断的进行拼接</span></span><br><span class="line"><span class="comment"># name = input(&#x27;请输入姓名:&#x27;)</span></span><br><span class="line"><span class="comment"># age = input(&#x27;请输入年龄:&#x27;)</span></span><br><span class="line"><span class="comment"># job = input(&#x27;请输入职业:&#x27;)</span></span><br><span class="line"><span class="comment"># hobby = input(&#x27;请输入爱好:&#x27;)</span></span><br><span class="line"><span class="comment"># a = &#x27;------------ info of 51devops ----------&#x27;</span></span><br><span class="line"><span class="comment"># b = &#x27;Name:&#x27;</span></span><br><span class="line"><span class="comment"># c = &#x27;Age:&#x27;</span></span><br><span class="line"><span class="comment"># d = &#x27;Job:&#x27;</span></span><br><span class="line"><span class="comment"># e = &#x27;Hobby:&#x27;</span></span><br><span class="line"><span class="comment"># f = &#x27;------------- end ----------------&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(a+&#x27;\n&#x27;+b+name+&#x27;\n&#x27;+c+age+&#x27;\n&#x27;+d+job+&#x27;\n&#x27;+e+hobby+&#x27;\n&#x27;+f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 第二种方法, 也有人用，用的还挺多。但是要求格式化传入的值和占位符的值需要一一对应</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name = input(&#x27;请输入姓名:&#x27;)</span></span><br><span class="line"><span class="comment"># age = input(&#x27;请输入年龄:&#x27;)</span></span><br><span class="line"><span class="comment"># job = input(&#x27;请输入职业:&#x27;)</span></span><br><span class="line"><span class="comment"># hobby = input(&#x27;请输入爱好:&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># msg = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ------------ info of 51devops ----------</span></span><br><span class="line"><span class="comment"># Name  : %s</span></span><br><span class="line"><span class="comment"># Age   : %s</span></span><br><span class="line"><span class="comment"># job   : %s</span></span><br><span class="line"><span class="comment"># Hobbie: %s</span></span><br><span class="line"><span class="comment"># ------------- end ----------------</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ### % 格式化的  而msg中的%s叫字符串占位符，</span></span><br><span class="line"><span class="comment"># print(msg % (age, name, job, hobby))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 第三种方法， 使用format函数来进行格式化</span></span><br><span class="line">name = input(<span class="string">&#x27;请输入姓名:&#x27;</span>)</span><br><span class="line">age = input(<span class="string">&#x27;请输入年龄:&#x27;</span>)</span><br><span class="line">job = input(<span class="string">&#x27;请输入职业:&#x27;</span>)</span><br><span class="line">hobby = input(<span class="string">&#x27;请输入爱好:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">------------ info of 51devops ----------</span></span><br><span class="line"><span class="string">Name  : &#123;name1&#125;</span></span><br><span class="line"><span class="string">Age   : &#123;age1&#125;</span></span><br><span class="line"><span class="string">job   : &#123;job1&#125;</span></span><br><span class="line"><span class="string">Hobbie: &#123;hobby1&#125;</span></span><br><span class="line"><span class="string">------------- end ----------------</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">print(msg.format(age1=age, name1=name, job1=job, hobby1=hobby))</span><br></pre></td></tr></table></figure>

<h5 id="9-运算符"><a href="#9-运算符" class="headerlink" title="9. 运算符"></a>9. 运算符</h5><ul>
<li>算数运算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">% ： 取余数</span><br><span class="line">// : 取整数</span><br></pre></td></tr></table></figure>

<ul>
<li>赋值运算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">a = a - <span class="number">1</span></span><br><span class="line">a = a / <span class="number">2</span></span><br><span class="line">a = a * <span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>逻辑运算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> : 与的意思 ， 要求<span class="keyword">and</span>的左右两边的表达式的值都是<span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h5 id="10-索引"><a href="#10-索引" class="headerlink" title="10. 索引"></a>10. 索引</h5><p>提到索引，立马想到的一个概念是：索引都是从 0 开始计数的的</p>
<p>10.1索引的取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">print(name[<span class="number">0</span>])  <span class="comment">### h</span></span><br><span class="line"><span class="comment"># print(name[6])  ### 报错</span></span><br><span class="line">print(name[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<p>10.2 切片 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name = &#x27;h e l l o w o r l d&#x27;</span></span><br><span class="line"><span class="comment">#         0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">name = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line">print(name[<span class="number">4</span>:<span class="number">7</span>]) <span class="comment">### 前包后不包， 或者叫 左闭右开</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># name = &#x27;h e l l o w o r l d&#x27;</span></span><br><span class="line"><span class="string">#         0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="string">                       -3 -2 -1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="comment"># print(name[4:7]) ### 前包后不包， 或者叫 左闭右开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(name[:]) ### 从头切到尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(name[:5])  ### hello  从开始切刀5</span></span><br><span class="line"><span class="comment"># print(name[2:])  ### 从2开始切刀最后</span></span><br><span class="line"></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<p>作业：</p>
<ol>
<li>第二章到第四章后面的联系题作业，全部完成</li>
<li>将今天讲的内容整理成博客<br>周二晚上之前， 提交代码给我，交github地址</li>
</ol>
<hr>
<ul>
<li>字典</li>
<li>列表</li>
<li>集合</li>
</ul>
<p>ps: 一两个月左右，可能打基础的时候。</p>
<p>给数据结构和算法的链接</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
</search>
