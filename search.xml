<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>py_day01</title>
    <url>/2020/08/09/py-day01/</url>
    <content><![CDATA[<p>python基础<br>变量·字符串·常用操作</p>
<a id="more"></a>
<h5 id="1-编译型语言和解释型语言的区别"><a href="#1-编译型语言和解释型语言的区别" class="headerlink" title="1. 编译型语言和解释型语言的区别"></a>1. 编译型语言和解释型语言的区别</h5><p>编译型语言(强类型语言) :  一次编译，到处运行 例：c, c++, java等<br>解释型语言(弱类型语言)：不需要编译，直接调用解释器执行 例：php，python， shell</p>
<p>解释型语言修改完后，不需要编译，执行流程是从上到下依次解释执行。shell</p>
<h6 id="1-1-python的优势和劣势"><a href="#1-1-python的优势和劣势" class="headerlink" title="1.1 python的优势和劣势"></a>1.1 python的优势和劣势</h6><p>优势：</p>
<ul>
<li>简单易上手</li>
<li>大量的第三方的安装包  jekins, k8s api包  胶水语言</li>
</ul>
<p>劣势：</p>
<ul>
<li>速度慢 和c, c++, java比</li>
</ul>
<h5 id="2-演示python的安装和pycharm安装"><a href="#2-演示python的安装和pycharm安装" class="headerlink" title="2. 演示python的安装和pycharm安装"></a>2. 演示python的安装和pycharm安装</h5><h5 id="3-python的入门程序"><a href="#3-python的入门程序" class="headerlink" title="3. python的入门程序"></a>3. python的入门程序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;hellowrold!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>执行原理：</p>
<blockquote>
<p>右键执行的时候，会自动调用python解释器从上到下依次执行python代码。类比 shell。</p>
</blockquote>
<p>ps: 交互式命令行的执行方式  python3  —-》 ipython</p>
<p>编辑器和命令行式的写法的区别和应用场景：</p>
<blockquote>
<p>编辑器适用于大型的项目，命令行适用于小的测试</p>
</blockquote>
<h5 id="4-python的变量"><a href="#4-python的变量" class="headerlink" title="4. python的变量"></a>4. python的变量</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>  </span><br><span class="line">y = x*<span class="number">5</span> + <span class="number">6</span></span><br><span class="line">z = y*<span class="number">7</span></span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量就是将中间的结果暂存到内存,以便后续程序调用</p>
</blockquote>
<p>类比shell， 和shell中的变量的定义是一致的。<br>但是和shell中不一样的地方的是：shell的等号两边不允许有空格，但是python等号两边也可以没有空格。那为啥必须要有空格？</p>
<ul>
<li>从视觉上会好看一些，调试代码比较舒服</li>
<li>写代码，需要遵循 PEP8 规范  <ul>
<li>变量的等号两边必须是有空格的，各大公司code review</li>
<li><strong>变量名必须要有意义</strong> shell</li>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名建议不使用拼音和中文</li>
<li>变量的要具有意义</li>
<li>变量名不要过长</li>
</ul>
</li>
</ul>
<p><strong>编程语言的三种风格</strong></p>
<ul>
<li><p>大驼峰法    单词的首字母一定是大写的。</p>
<blockquote>
<p>UserName,   GetInfo, 等</p>
</blockquote>
</li>
<li><p>小驼峰法   单词的首字母小写，其余大写 </p>
<blockquote>
<p>userName </p>
</blockquote>
</li>
<li><p>下划线法  单词和单词之间使用下划线拼接</p>
<blockquote>
<p>user_name</p>
</blockquote>
</li>
</ul>
<p>在代码 code review (代码评审) , 我们要求三种风格你可以随便选择一种你喜欢的风格，但是大家在选择完成之后，一定要主要的是，千万别中途换风格。</p>
<h5 id="4-1-中午分享"><a href="#4-1-中午分享" class="headerlink" title="4.1 中午分享"></a>4.1 中午分享</h5><ul>
<li>基础都会，就是让你自己写的时候，写不出来？<blockquote>
<p>前提要多练，应该带着项目练。练完一两个项目之后，自然就熟悉了。如果说，你们公司正在建设自动化运维平台，希望大家勇敢点，去做一些核心的模块。</p>
</blockquote>
</li>
</ul>
<h5 id="5-python的基础数据类型"><a href="#5-python的基础数据类型" class="headerlink" title="5. python的基础数据类型"></a>5. python的基础数据类型</h5><ul>
<li><p>整型</p>
<blockquote>
<p>表示一个整数的</p>
</blockquote>
</li>
<li><p>字符串</p>
<blockquote>
<p> 字符串会嵌套<br>name = “dj’sa’b”  ## 外层双引号，内层要求是单引号<br>name2 = ‘ds”ad”sa’ ## 外层单引号，内层要求是双引号<br>hhh = “dvshavhhhhhhhhhhhhhhh” \</p>
<pre><code>&quot;dsadsadsadsa&quot;</code></pre>
<p>使用三引号<br>kkk = ‘’’<br>dnsajndsandjansdnas<br>曾老师<br>boduo老师<br>‘’’<br>print(kkk, type(kkk))</p>
</blockquote>
</li>
<li><p>布尔</p>
</li>
</ul>
<h6 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### : python 注释，unix的注释方式</span><br><span class="line">&#x2F;&#x2F;  : java， c, c++ 的注释方式</span><br><span class="line">&#39;&#39;&#39;&#39;&#39;&#39;&#39;: python多行注释</span><br><span class="line">&#x2F;*</span><br><span class="line">这是多行注释</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="6-输入"><a href="#6-输入" class="headerlink" title="6. 输入"></a>6. 输入</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###交互程序</span></span><br><span class="line"><span class="comment"># name = input(&quot;请输入名字：&quot;) ### 输入的值的类型是字符串类型的，input程序交互获取到的内容是字符串</span></span><br><span class="line"></span><br><span class="line">num = input(<span class="string">&#x27;请输入数字:&#x27;</span>)</span><br><span class="line">print(type(num)) <span class="comment">### &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">print(int(num) + <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>int(‘12’) : 会将字符串类型的整肃转换成整型</p>
<h4 id="7-流程控制"><a href="#7-流程控制" class="headerlink" title="7. 流程控制"></a>7. 流程控制</h4><h5 id="7-1-分支"><a href="#7-1-分支" class="headerlink" title="7. 1 分支"></a>7. 1 分支</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">    开始写逻辑代码  <span class="comment">### 必须要4个空格</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">123</span>:</span><br><span class="line">    print(<span class="string">&#x27;dsadsa&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;kkkkkk&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>注意： if.. else的语句只能执行一个</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#### if elif else   只要满足一个条件，那就会立即执行相应的代码，执行完毕之后立即退出</span></span><br><span class="line"></span><br><span class="line">num = input(<span class="string">&#x27;请输入要比较的数字:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> int(num) &gt;= <span class="number">22</span>:</span><br><span class="line">    print(<span class="string">&#x27;可以扯证了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> int(num) &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;成年了,可以干一些成年的事了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> int(num) &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&#x27;还是小屁孩&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>只要满足一个条件，那就会立即执行相应的代码，执行完毕之后立即退出</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">&#x27;请输入名字:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;meet&#x27;</span>:</span><br><span class="line">    age = input(<span class="string">&#x27;请输入年龄:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> int(age) == <span class="number">18</span>:</span><br><span class="line">        print(<span class="string">&#x27;输入全部正确&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> int(age) &gt;= <span class="number">22</span>:</span><br><span class="line">        print(<span class="string">&#x27;xxxxxxxx&#x27;</span>)   </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;年龄输入错误!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;名字输入错误!&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>if else 我们只能写一个，而elif可以写多个条件表达</strong></p>
<h5 id="7-2-循环控制"><a href="#7-2-循环控制" class="headerlink" title="7.2 循环控制"></a>7.2 循环控制</h5><ul>
<li>while 循环</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 基本款</span></span><br><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    <span class="comment"># 循环体</span></span><br><span class="line">    <span class="comment"># 如果条件为真，那么循环则执行</span></span><br><span class="line">    <span class="comment"># 如果条件为假，那么循环不执行</span></span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">num = int(input(<span class="string">&#x27;请输入数字:&#x27;</span>))  <span class="comment">## 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>: <span class="comment">### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line">    print(<span class="string">&#x27;dsadsadasdsasa&#x27;</span>)</span><br><span class="line">    num = num - <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:   <span class="comment">#### 循环退出之后，都会执行else中的代码</span></span><br><span class="line">    print(<span class="string">&#x27;last line.....&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>两大关键字：<br>break 和 continue：</p>
<ul>
<li>break：    退出整个循环，循环已经退出</li>
<li>continue:  跳出本次循环， 循环并没有退出</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### break ： 当警察抓到犯人的时候，后面即便有人，也不会做任何操作，直接退出</span></span><br><span class="line"><span class="comment"># num = int(input(&#x27;请输入数字:&#x27;))  ## 12</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># while num &gt; 0: ### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line"><span class="comment">#     num = num - 1  ## 第一次：num=11 第二次：num=10 第三次：num=9，，当num=5</span></span><br><span class="line"><span class="comment">#     if num == 5:</span></span><br><span class="line"><span class="comment">#         break   ### 退出整个循环</span></span><br><span class="line"><span class="comment">#     print(&#x27;后续代码...&#x27;) ## 第一次打印，第二次打印，第三次打印，。。。。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### continue ： 警察查身份证，</span></span><br><span class="line">num = int(input(<span class="string">&#x27;请输入数字:&#x27;</span>))  <span class="comment">## 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>:  <span class="comment">### 每次循环num和0会进行比较，没如果为True,则执行代码块中的内容</span></span><br><span class="line">    num = num - <span class="number">1</span>  <span class="comment">## 第一次：num=11 第二次：num=10 第三次：num=9，，当num=5</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment">### 跳出当前循环， 循环并没与退出</span></span><br><span class="line">    print(<span class="string">&#x27;后续代码...&#x27;</span>)  <span class="comment">## 第一次打印，第二次打印，第三次打印，。。。。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>for 循环<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### kkk 代表的是每一次循环的时候，目标对象s中的每一个元素</span></span><br><span class="line"><span class="comment">### 当循环到最后一个元素的时候，会自动退出</span></span><br><span class="line">s = <span class="string">&#x27;pounds&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> kkk <span class="keyword">in</span> s:</span><br><span class="line">    print(kkk)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>总结：任何语言无外乎三大流程控制结构</strong></p>
<ul>
<li>顺序</li>
<li>分支</li>
<li>循环</li>
</ul>
<p>是 姚期智 提出的</p>
<p>能够触类旁通，意思就是python学完之后， 在学go的时候，应该是没没任何压力的。<br>前年，参加校招。西安交大，西安大学<br>java， c++， 但是他们的数据结构和算法的功底非常的深厚</p>
<hr>
<h5 id="8-格式化输出"><a href="#8-格式化输出" class="headerlink" title="8. 格式化输出"></a>8. 格式化输出</h5><p>% , format</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 第一种写法：字符串使用+ 不断的进行拼接</span></span><br><span class="line"><span class="comment"># name = input(&#x27;请输入姓名:&#x27;)</span></span><br><span class="line"><span class="comment"># age = input(&#x27;请输入年龄:&#x27;)</span></span><br><span class="line"><span class="comment"># job = input(&#x27;请输入职业:&#x27;)</span></span><br><span class="line"><span class="comment"># hobby = input(&#x27;请输入爱好:&#x27;)</span></span><br><span class="line"><span class="comment"># a = &#x27;------------ info of 51devops ----------&#x27;</span></span><br><span class="line"><span class="comment"># b = &#x27;Name:&#x27;</span></span><br><span class="line"><span class="comment"># c = &#x27;Age:&#x27;</span></span><br><span class="line"><span class="comment"># d = &#x27;Job:&#x27;</span></span><br><span class="line"><span class="comment"># e = &#x27;Hobby:&#x27;</span></span><br><span class="line"><span class="comment"># f = &#x27;------------- end ----------------&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(a+&#x27;\n&#x27;+b+name+&#x27;\n&#x27;+c+age+&#x27;\n&#x27;+d+job+&#x27;\n&#x27;+e+hobby+&#x27;\n&#x27;+f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 第二种方法, 也有人用，用的还挺多。但是要求格式化传入的值和占位符的值需要一一对应</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># name = input(&#x27;请输入姓名:&#x27;)</span></span><br><span class="line"><span class="comment"># age = input(&#x27;请输入年龄:&#x27;)</span></span><br><span class="line"><span class="comment"># job = input(&#x27;请输入职业:&#x27;)</span></span><br><span class="line"><span class="comment"># hobby = input(&#x27;请输入爱好:&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># msg = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ------------ info of 51devops ----------</span></span><br><span class="line"><span class="comment"># Name  : %s</span></span><br><span class="line"><span class="comment"># Age   : %s</span></span><br><span class="line"><span class="comment"># job   : %s</span></span><br><span class="line"><span class="comment"># Hobbie: %s</span></span><br><span class="line"><span class="comment"># ------------- end ----------------</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ### % 格式化的  而msg中的%s叫字符串占位符，</span></span><br><span class="line"><span class="comment"># print(msg % (age, name, job, hobby))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 第三种方法， 使用format函数来进行格式化</span></span><br><span class="line">name = input(<span class="string">&#x27;请输入姓名:&#x27;</span>)</span><br><span class="line">age = input(<span class="string">&#x27;请输入年龄:&#x27;</span>)</span><br><span class="line">job = input(<span class="string">&#x27;请输入职业:&#x27;</span>)</span><br><span class="line">hobby = input(<span class="string">&#x27;请输入爱好:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">msg = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">------------ info of 51devops ----------</span></span><br><span class="line"><span class="string">Name  : &#123;name1&#125;</span></span><br><span class="line"><span class="string">Age   : &#123;age1&#125;</span></span><br><span class="line"><span class="string">job   : &#123;job1&#125;</span></span><br><span class="line"><span class="string">Hobbie: &#123;hobby1&#125;</span></span><br><span class="line"><span class="string">------------- end ----------------</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">print(msg.format(age1=age, name1=name, job1=job, hobby1=hobby))</span><br></pre></td></tr></table></figure>

<h5 id="9-运算符"><a href="#9-运算符" class="headerlink" title="9. 运算符"></a>9. 运算符</h5><ul>
<li>算数运算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">% ： 取余数</span><br><span class="line">// : 取整数</span><br></pre></td></tr></table></figure>

<ul>
<li>赋值运算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">a = a - <span class="number">1</span></span><br><span class="line">a = a / <span class="number">2</span></span><br><span class="line">a = a * <span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>逻辑运算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> : 与的意思 ， 要求<span class="keyword">and</span>的左右两边的表达式的值都是<span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h5 id="10-索引"><a href="#10-索引" class="headerlink" title="10. 索引"></a>10. 索引</h5><p>提到索引，立马想到的一个概念是：索引都是从 0 开始计数的的</p>
<p>10.1索引的取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">print(name[<span class="number">0</span>])  <span class="comment">### h</span></span><br><span class="line"><span class="comment"># print(name[6])  ### 报错</span></span><br><span class="line">print(name[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<p>10.2 切片 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name = &#x27;h e l l o w o r l d&#x27;</span></span><br><span class="line"><span class="comment">#         0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line">name = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line">print(name[<span class="number">4</span>:<span class="number">7</span>]) <span class="comment">### 前包后不包， 或者叫 左闭右开</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># name = &#x27;h e l l o w o r l d&#x27;</span></span><br><span class="line"><span class="string">#         0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="string">                       -3 -2 -1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">name = <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="comment"># print(name[4:7]) ### 前包后不包， 或者叫 左闭右开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(name[:]) ### 从头切到尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(name[:5])  ### hello  从开始切刀5</span></span><br><span class="line"><span class="comment"># print(name[2:])  ### 从2开始切刀最后</span></span><br><span class="line"></span><br><span class="line">print(name[<span class="number">2</span>:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>字典</li>
<li>列表</li>
<li>集合</li>
</ul>
<p>给数据结构和算法<br><a href="https://www.bilibili.com/video/BV1HA411b7ik">https://www.bilibili.com/video/BV1HA411b7ik</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py_day02_exercise</title>
    <url>/2020/08/09/py-day02-exercise/</url>
    <content><![CDATA[<p>温故知新</p>
<a id="more"></a>
<h3 id="1-根据需求写代码"><a href="#1-根据需求写代码" class="headerlink" title="1.根据需求写代码"></a>1.根据需求写代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;k3&quot;</span>: [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请在字典中添加一个键值对，&quot;k4&quot;: &quot;v4&quot;，输出添加后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k4&#x27;</span>] = <span class="string">&#x27;v4&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 请在修改字典中 &quot;k1&quot; 对应的值为 &quot;alex&quot;，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k1&#x27;</span>] = <span class="string">&#x27;alex&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 请在k3对应的值中追加一个元素 44，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].append(<span class="number">44</span>)</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 请在k3对应的值的第 1 个位置插入个元素 18，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].insert(<span class="number">0</span>,<span class="number">18</span>)</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure>

<h3 id="2-根据需求写代码"><a href="#2-根据需求写代码" class="headerlink" title="2.根据需求写代码"></a>2.根据需求写代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;</span><br><span class="line"> <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;pounds&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>],</span><br><span class="line"> <span class="string">&#x27;job&#x27;</span>:<span class="string">&#x27;teacher&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;51devops&#x27;</span>:&#123;<span class="string">&#x27;szk&#x27;</span>:[<span class="string">&#x27;python1&#x27;</span>,<span class="string">&#x27;python2&#x27;</span>,<span class="number">100</span>]&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1，将name对应的列表追加⼀个元素’xxx’。</span></span><br><span class="line">dic1[<span class="string">&#x27;name&#x27;</span>].append(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 2，将name对应的列表中的 pounds ⾸字⺟⼤写。</span></span><br><span class="line">(<span class="number">1</span>)转成大写后upadte</span><br><span class="line">new_words = dic1[<span class="string">&#x27;name&#x27;</span>][<span class="number">0</span>].capitalize()</span><br><span class="line">dic1.update(&#123;<span class="string">&#x27;name&#x27;</span>:[new_words,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]&#125;)</span><br><span class="line">(<span class="number">2</span>)直接赋值更改</span><br><span class="line">dic1[<span class="string">&#x27;name&#x27;</span>][<span class="number">0</span>] = <span class="string">&#x27;Pounds&#x27;</span></span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 3，51devops 对应的字典加⼀个键值对 ’haoda’,’linux’。</span></span><br><span class="line">dic1[<span class="string">&#x27;51devops&#x27;</span>][<span class="string">&#x27;haoda&#x27;</span>] = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">print(dic1)</span><br><span class="line"><span class="comment"># 4，将51devops对应的字典中的szk对应的列表中的python2删除</span></span><br><span class="line">dic1[<span class="string">&#x27;51devops&#x27;</span>][<span class="string">&#x27;szk&#x27;</span>].remove(<span class="string">&#x27;python2&#x27;</span>)</span><br><span class="line">print(dic1)</span><br></pre></td></tr></table></figure>

<h3 id="3-判断以下值那个能做字典的key-？那个能做集合的元素？"><a href="#3-判断以下值那个能做字典的key-？那个能做集合的元素？" class="headerlink" title="3.判断以下值那个能做字典的key ？那个能做集合的元素？"></a>3.判断以下值那个能做字典的key ？那个能做集合的元素？</h3><ul>
<li>1       ✅</li>
<li>-1      ✅</li>
<li>“”      ✅</li>
<li>None    ✅</li>
<li>[1,2]   ❌</li>
<li>(1,)    ✅</li>
<li>{11,22,33,4} ❌</li>
<li>{‘name’:’szk’,’age’:18} ❌</li>
</ul>
<h3 id="4-将字典的键和值分别追加到-key-list-和-value-list-两个列表中，如："><a href="#4-将字典的键和值分别追加到-key-list-和-value-list-两个列表中，如：" class="headerlink" title="4.将字典的键和值分别追加到 key_list 和 value_list 两个列表中，如："></a>4.将字典的键和值分别追加到 key_list 和 value_list 两个列表中，如：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key_list = []</span><br><span class="line">value_list = []</span><br><span class="line">info = &#123;<span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>:<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;k3&#x27;</span>:<span class="string">&#x27;v3&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items():</span><br><span class="line">    key_list.append(k)</span><br><span class="line">    value_list.append(v)</span><br><span class="line">print(key_list)</span><br><span class="line">print(value_list)</span><br></pre></td></tr></table></figure>

<h3 id="5-字典dic-‘k1’-“v1”-“k2”-“v2”-“k3”-11-22-33"><a href="#5-字典dic-‘k1’-“v1”-“k2”-“v2”-“k3”-11-22-33" class="headerlink" title="5.字典dic = {‘k1’: “v1”, “k2”: “v2”, “k3”: [11,22,33]}"></a>5.字典dic = {‘k1’: “v1”, “k2”: “v2”, “k3”: [11,22,33]}</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;k1&#x27;</span>: <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;k2&quot;</span>: <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;k3&quot;</span>: [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]&#125;</span><br><span class="line"><span class="comment"># a. 请循环输出所有的key</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic.keys():</span><br><span class="line">    print(k)</span><br><span class="line"><span class="comment"># b. 请循环输出所有的value</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> dic.values():</span><br><span class="line">    print(v)</span><br><span class="line"><span class="comment"># c. 请循环输出所有的key和value</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">    print(k,v)</span><br><span class="line"><span class="comment"># d. 请在字典中添加一个键值对，&quot;k4&quot;: &quot;v4&quot;，输出添加后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k4&#x27;</span>] = <span class="string">&#x27;v4&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># e. 请在修改字典中 &quot;k1&quot; 对应的值为 &quot;szk&quot;，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k1&#x27;</span>] = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># f. 请在k3对应的值中追加一个元素 44，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].append(<span class="number">44</span>)</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># g. 请在k3对应的值的第 1 个位置插入个元素 18，输出修改后的字典</span></span><br><span class="line">dic[<span class="string">&#x27;k3&#x27;</span>].insert(<span class="number">0</span>,<span class="number">18</span>)</span><br><span class="line">print(dic)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-请循环打印k2对应的值中的每个元素。"><a href="#6-请循环打印k2对应的值中的每个元素。" class="headerlink" title="6.请循环打印k2对应的值中的每个元素。"></a>6.请循环打印k2对应的值中的每个元素。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&#x27;k1&#x27;</span>:<span class="string">&#x27;v1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k2&#x27;</span>:[(<span class="string">&#x27;pounds&#x27;</span>),(<span class="string">&#x27;szk&#x27;</span>),(<span class="string">&#x27;51devops&#x27;</span>)],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> values <span class="keyword">in</span> info[<span class="string">&#x27;k2&#x27;</span>]:</span><br><span class="line">    print(values)</span><br></pre></td></tr></table></figure>

<h3 id="7-输出商品列表，用户输入序号，显示用户选中的商品"><a href="#7-输出商品列表，用户输入序号，显示用户选中的商品" class="headerlink" title="7.输出商品列表，用户输入序号，显示用户选中的商品"></a>7.输出商品列表，用户输入序号，显示用户选中的商品</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = <span class="literal">True</span></span><br><span class="line"><span class="comment">#购物车</span></span><br><span class="line">bag = []</span><br><span class="line"><span class="comment">#购物车商品总价格</span></span><br><span class="line">bag_price = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> tag:</span><br><span class="line">    <span class="keyword">for</span> inx,value <span class="keyword">in</span> enumerate(goods):</span><br><span class="line">          print(inx,value[<span class="string">&#x27;name&#x27;</span>],value[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line">    choice = input(<span class="string">&quot;请输入商品编号(退出输入Q/q):&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="string">&#x27;q&#x27;</span> <span class="keyword">or</span> choice == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">        print(<span class="string">&quot;您购买的商品列表:%s,一共消费:%s&quot;</span> %(bag,bag_price))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span>  choice.isdigit():</span><br><span class="line">        choice = int(choice)</span><br><span class="line">        <span class="keyword">if</span> choice &gt;= <span class="number">0</span> <span class="keyword">and</span> choice &lt; len(goods):</span><br><span class="line">            print(<span class="string">&#x27;商品:%s  价格:%s&#x27;</span> % (goods[choice][<span class="string">&#x27;name&#x27;</span>], goods[choice][<span class="string">&#x27;price&#x27;</span>]))</span><br><span class="line">            bag.append(goods[choice][<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">            bag_price += goods[choice][<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;输入的编号不存在，请重新输入&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;请输入正确的产品编号&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>python_exercise</category>
      </categories>
      <tags>
        <tag>python_exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day02</title>
    <url>/2020/08/16/py-day02/</url>
    <content><![CDATA[<p>python基础<br>列表 字典 集合 函数(位置参数， 关键字参数， 默认参数) 对文件操作</p>
<a id="more"></a>

<ul>
<li><p>python的基础数据结构</p>
<ul>
<li>整型     1，2，3，</li>
<li>字符串  <ul>
<li>单引号  ‘hello’</li>
<li>双引号  “hello”</li>
<li>三引号  “”””””</li>
</ul>
</li>
<li>布尔类型<ul>
<li>True  </li>
<li>False  注意的是：js true false</li>
</ul>
</li>
</ul>
</li>
<li><p>python的变量</p>
<ul>
<li>变量的作用：保存中间结果    num = 1+2+3    </li>
<li>变量的命名规范：<ul>
<li>PEP8规范</li>
<li>等于号的左右两边是要有空格的</li>
<li><strong>变量名一定要有意义</strong>  name = “szk”</li>
<li>变量的几种风格  ： 大驼峰，小驼峰，下划线</li>
<li>变量命名规范：不能使用关键字命名，不能以数字开头</li>
</ul>
</li>
</ul>
</li>
<li><p>字符串的用法</p>
<ul>
<li>split(‘:’) :   name = “szk_age”  name.split(‘_’)   非常重要的一个字符串用法</li>
<li>字符串的格式化： <ul>
<li>%  例子： “曾老师是一个 %s” % （‘大萨达撒‘）</li>
<li>format 例子： “今天天气不错， 看电影 {}”.format(‘xxxxx’)</li>
<li>format 例子： “曾老师性别{sex}, 年龄 {age}”.format(sex=’男’, age=73)</li>
</ul>
</li>
<li>索引：任何语言中的索引，都是从0开始的  name = ‘szk’</li>
<li>切片：就是从一整个元素中切出想要的元素 name = ‘51aiops’ , 可以根据索引来进行切割 <ul>
<li>name[2:6]  索引的原则：前包后不包 </li>
</ul>
</li>
</ul>
</li>
<li><p>流程控制</p>
<ul>
<li>顺序<ul>
<li>代码从上到下依次执行</li>
</ul>
</li>
<li>分支<ul>
<li>if elif else</li>
<li>elif 可以写多个，而if和else只能写一次</li>
<li><strong>如果有多个分支条件的话，当命中一个条件之后，就会退出整个分支语句</strong></li>
</ul>
</li>
<li>循环<ul>
<li>while  条件: 项目中，用的比较少，算法的时候比较多</li>
<li>for  项目中用的比较多<ul>
<li>for i in ’abcd‘</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>其他</p>
<ul>
<li>input</li>
<li>条件语句和运算符</li>
<li>赋值运算符 ： <ul>
<li>a = 10   a = a - 1 a += 1   a += 1 ===&gt; a = a - 1</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a><div id="title">今日内容</div></h4><h5 id="1-python基础数据类型之列表和元组"><a href="#1-python基础数据类型之列表和元组" class="headerlink" title="1. python基础数据类型之列表和元组"></a>1. python基础数据类型之列表和元组</h5><ul>
<li><p>列表   其他语言叫数组</p>
<ul>
<li><p>定义：用来存储比较复杂的数据 </p>
</li>
<li><p>用法：name_list = [‘老陈’, ‘老赵’,  ‘文亮’] </p>
</li>
<li><p>定义2： name_list = list() </p>
</li>
<li><p>增删改查  常用的方法： remove， pop， append，for循环 改索引</p>
<p>pop, remove，和del的区别：</p>
</li>
<li><p>pop弹出，弹出之后的元素是可以赋值给其他变量用的</p>
</li>
<li><p>remove和del, 直接删除元素</p>
</li>
<li><p>remove就是通过值删除这个元素</p>
</li>
<li><p>del 通过索引来删除值</p>
<p>pop 是弹出，后面可以引用，remove，del好像是直接删除    </p>
</li>
</ul>
</li>
<li><p>列表的切片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;陈羽凡&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>, <span class="string">&#x27;xxxx&#x27;</span>, <span class="string">&#x27;波多老师&#x27;</span>]</span><br><span class="line">                <span class="comment"># 0      1       2        3       4</span></span><br><span class="line">                <span class="comment"># -5    -4       -3      -2       -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 通过索引下标来获取子列表</span></span><br><span class="line"><span class="comment">### 符合前包后不包的原则</span></span><br><span class="line">users = user_list[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">print(users)</span><br><span class="line">users = user_list[:]  <span class="comment">### 表示的是 从头切到尾</span></span><br><span class="line">users = user_list[<span class="number">2</span>:] <span class="comment">### 表示的是 从2 开始切到结尾</span></span><br><span class="line">users = user_list[:<span class="number">4</span>] <span class="comment">## 从头开始切</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表的循环</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">### for循环打印</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&#x27;尼古拉斯赵四&#x27;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> user_list:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(user_list):</span><br><span class="line">    print(i, v)</span><br></pre></td></tr></table></figure>
<p><strong>只需要元素，则使用第一种循环， 若需要索引下标，则使用第二种循环</strong></p>
<ul>
<li>列表和字符串的互相转换<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 1.字符串转列表</span></span><br><span class="line">name = <span class="string">&quot;hello_world&quot;</span></span><br><span class="line">names = name.split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(names)<span class="comment">#### [&#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 2. 列表转字符串</span></span><br><span class="line">names_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&#x27;尼古拉斯赵四&#x27;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">### 将上述元素通过下划线拼接成字符串</span></span><br><span class="line">res = <span class="string">&#x27;_&#x27;</span>.join(names_list)</span><br><span class="line">print(res, type(res))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>列表的增删改查，下去复习列表的基本操作的时候，遵循这个增删改查的原则</strong></p>
<h5 id="2-python的基础数据类型之字典和集合"><a href="#2-python的基础数据类型之字典和集合" class="headerlink" title="2. python的基础数据类型之字典和集合"></a>2. python的基础数据类型之字典和集合</h5><p><strong>字典和列表一样的重要</strong></p>
<p>python里叫字典，而其他语言java： 哈希table   hashtable</p>
<p>定义方式：</p>
<p>最长用的两种</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">第一种：</span><br><span class="line"><span class="comment"># info = &#123;</span></span><br><span class="line"><span class="comment">#     &quot;name&quot;: &#x27;szk&#x27;,</span></span><br><span class="line"><span class="comment">#     &quot;age&quot; : 18,</span></span><br><span class="line"><span class="comment">#     &quot;height&quot;: 180</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">第二种</span><br><span class="line">user_info = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;陈顺阳&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">30</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;杜峰&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">32</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;pounds&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">32</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>字典的增删改查（crud）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">info = &#123;<span class="string">&quot;age&quot;</span>:<span class="number">12</span>, <span class="string">&quot;status&quot;</span>:<span class="literal">True</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;szk&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;xx@live.com&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">### 1.获取字典的键</span></span><br><span class="line"><span class="comment"># keys = info.keys()</span></span><br><span class="line"><span class="comment"># for k in keys:</span></span><br><span class="line"><span class="comment">#     print(k)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ### 2. 获取字典的所有值</span></span><br><span class="line"><span class="comment"># values = info.values()</span></span><br><span class="line"><span class="comment"># for v in values:</span></span><br><span class="line"><span class="comment">#     print(v)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 3.要获取字典的值又要获取字典的key, 非常重要的方法</span></span><br><span class="line"><span class="comment"># for k, v in info.items():</span></span><br><span class="line"><span class="comment">#     print(k, v)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 根据键来获取值  重要</span></span><br><span class="line"><span class="comment"># print(info[&#x27;height&#x27;])</span></span><br><span class="line">data = info.get(<span class="string">&quot;height&quot;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment"># 根据name为键去info字典中获取对应的值，如果不存在则返回None，存在则返回值。</span></span><br><span class="line">print(data) <span class="comment"># 输出：None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 4.更新键值对</span></span><br><span class="line"><span class="comment"># info2 = &#123;&quot;age&quot;:12, &quot;status&quot;:True&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # info2.update(age=14, name=&#x27;szk&#x27;) ### 如果key存在的话，就会更新原有的值，若不存在，将这个name值加入info2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 5.增加</span></span><br><span class="line"><span class="comment"># info2[&#x27;name&#x27;] = &#x27;szk&#x27; ###向字典中添加一个元素</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(info2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 6.删除</span></span><br><span class="line">info2 = &#123;<span class="string">&quot;age&quot;</span>:<span class="number">12</span>, <span class="string">&quot;status&quot;</span>:<span class="literal">True</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;szk&quot;</span>&#125;</span><br><span class="line"><span class="comment"># data = info2.pop(&quot;age&quot;) ### 根据键来删除元素</span></span><br><span class="line"><span class="comment"># print(info2) # &#123;&#x27;status&#x27;: True, &#x27;name&#x27;: &#x27;szk&#x27;&#125;</span></span><br><span class="line"><span class="comment"># print(data) # 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> info2[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">print(info2)</span><br></pre></td></tr></table></figure>

<ul>
<li>集合的特性<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 2.交集</span></span><br><span class="line">s1 = &#123;<span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&quot;刘科⻓&quot;</span>, <span class="string">&quot;冯乡⻓&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s3 = s1 &amp; s2                 <span class="comment"># 方式一：取两个集合的交集</span></span><br><span class="line">s4 = s1.intersection(s2) <span class="comment"># 方</span></span><br><span class="line"></span><br><span class="line">print(s3, s4)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 3.并集</span></span><br><span class="line">s1 = &#123;<span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&quot;刘科⻓&quot;</span>, <span class="string">&quot;冯乡⻓&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s3 = s1 | s2               <span class="comment"># 方式一：取两个集合的并集</span></span><br><span class="line">s4 = s1.union(s2)</span><br><span class="line"></span><br><span class="line">print(s3, s4)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4.差集</span></span><br><span class="line">s1 = &#123;<span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&quot;刘科⻓&quot;</span>, <span class="string">&quot;冯乡⻓&quot;</span>, <span class="string">&quot;⽪⻓⼭&quot;</span>&#125;</span><br><span class="line">s3 = s1 - s2                       <span class="comment"># 方式一：差集，s1中有且s2中没有的值</span></span><br><span class="line">s4 = s1.difference(s2)         <span class="comment"># 方式二：差集，s1中有且s2中没有的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>列表和集合的转换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">99</span>,<span class="number">22</span>]</span><br><span class="line">s1 = set(v1)</span><br><span class="line">l1 = list(s1)</span><br><span class="line">print(l1)</span><br></pre></td></tr></table></figure>

<h5 id="3-python对文件的操作"><a href="#3-python对文件的操作" class="headerlink" title="3. python对文件的操作"></a>3. python对文件的操作</h5><blockquote>
<p>主要学习就是文件打开的几种模式，，项目中涉及到就是文件上传和下载</p>
</blockquote>
<p>主要的文件打开方式：</p>
<p>模式： w, r, r+<br>方法： open, close, read, write<br>上下文管理器：推崇的方式</p>
<p>#####4. python的函数 基础入门</p>
<blockquote>
<p>重点：函数的参数</p>
</blockquote>
<p>函数的定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shell:</span><br><span class="line">    func test()&#123;</span><br><span class="line">        函数体</span><br><span class="line">    &#125;</span><br><span class="line">    test() <span class="comment">### 函数的调用</span></span><br><span class="line">python:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">        函数体</span><br><span class="line">    test() <span class="comment">### 函数调用</span></span><br></pre></td></tr></table></figure>
<h5 id="4-函数的参数"><a href="#4-函数的参数" class="headerlink" title="4.函数的参数"></a>4.函数的参数</h5><ul>
<li>参数的分类<ul>
<li>位置参数</li>
<li>关键字参数</li>
<li>动态接收参数</li>
</ul>
</li>
</ul>
<p>参数组合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一种：</span><br><span class="line">位置参数， 关键字参数， 默认参数</span><br><span class="line">test(a, b, c=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">第二种：</span><br><span class="line">动态接收位置参数， 动态接收关键字参数配合起来使用</span><br><span class="line">test(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    print(kwargs)</span><br><span class="line">func(**dic)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结:位置参数 &gt; args(动态位置参数) &gt; 默认值参数 &gt; *kwargs(动态默认参数)，这四种参数可以任意的使用</p>
</blockquote>
<p>如果想接收所有的参数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    print(args,kwargs)</span><br><span class="line">func(<span class="number">1</span>,<span class="number">23</span>,<span class="number">5</span>,a=<span class="number">1</span>,b=<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<p>动态参数还可以这样传参:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>]</span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line">    print(args)</span><br><span class="line">func(lst[<span class="number">0</span>],lst[<span class="number">1</span>],lst[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args</span>):</span></span><br><span class="line">    print(args)</span><br><span class="line">func(*lst)  </span><br><span class="line"><span class="comment"># 在实参的位置上用*将lst(可迭代对象)按照顺序打散</span></span><br><span class="line"><span class="comment"># 在形参的位置上用*把收到的参数组合成一个元祖</span></span><br></pre></td></tr></table></figure>
<p>字典也可以进行打散,不过需要**</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">    print(kwargs)</span><br><span class="line">func(**dic)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day04</title>
    <url>/2020/08/29/py-day04/</url>
    <content><![CDATA[<p>python基础<br>函数高级操作(生成器、迭代器、装饰器)+模块(request json)</p>
<a id="more"></a>

<h4 id="复习"><a href="#复习" class="headerlink" title="复习"></a><div id="title">复习</div></h4><p>函数部分：</p>
<p>0.函数嵌套</p>
<ul>
<li>一个函数中可以调用另一个函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;fuc1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    func1()</span><br><span class="line">    print(<span class="string">&#x27;func2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">func2()</span><br></pre></td></tr></table></figure>

<ul>
<li>只要遇见了()就是函数的调用. 如果没有()就不是函数的调用</li>
<li>函数的执行顺序</li>
</ul>
<p>1.内置函数</p>
<ul>
<li>数学计算<ul>
<li>sum</li>
<li>abs</li>
<li>divmod</li>
<li>round</li>
<li>pow</li>
<li>min， max</li>
</ul>
</li>
<li>数据结构相关<ul>
<li>list() 将一个可迭代对象转换成列表</li>
<li>tuple() 将一个可迭代对象转换成元组</li>
<li><strong>bytes() 把字符串类型转换成bytes类型</strong> 重要</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2中经常使用的编码方式</span><br><span class="line">s = <span class="string">&#x27;你好武大&#x27;</span></span><br><span class="line">bs = s.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(bs)</span><br><span class="line">结果:<span class="string">b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd\xe6\xad\xa6\xe5\xa4\xa7&#x27;</span></span><br><span class="line">s1 = bs.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(s1)</span><br><span class="line">结果: 你好武大</span><br><span class="line"></span><br><span class="line">python3中使用如下方式</span><br><span class="line">s = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">bs = bytes(s,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(bs)</span><br><span class="line"><span class="comment"># 将字符串转换成字节</span></span><br><span class="line">bs1 = str(bs,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(bs1)</span><br></pre></td></tr></table></figure>

<ul>
<li>enumerate  对列表的高级操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wangwu&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(lst):</span><br><span class="line">    print(<span class="string">&#x27;这是序号&#x27;</span>,i)</span><br><span class="line">    print(<span class="string">&#x27;这是元素&#x27;</span>,k)</span><br></pre></td></tr></table></figure>

<p>2.匿名函数 lambada  面试问的较多 (<strong>和sorted函数配合使用</strong>)</p>
<blockquote>
<p>没有名字的函数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在项目中单独使用lambada的情况，不是很多。</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">和 sorted 一起使用的时候，比较多。</span><br><span class="line">项目中有很多需要对数据进行排序的需求</span><br><span class="line"></span><br><span class="line">salaries = &#123;</span><br><span class="line">  <span class="string">&#x27;szk&#x27;</span>:<span class="number">30000</span>,</span><br><span class="line">  <span class="string">&#x27;zhangsan&#x27;</span>:<span class="number">888888888</span>,</span><br><span class="line">  <span class="string">&#x27;nick&#x27;</span>:<span class="number">2000</span>,</span><br><span class="line">  <span class="string">&#x27;pounds&#x27;</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">sorted(salaries, key=<span class="keyword">lambda</span> name:salaries[name])</span><br></pre></td></tr></table></figure>


<p>3.迭代器 和for循环机制 <strong>面试中的重点</strong></p>
<blockquote>
<p>如果一个变量中， 包含有<code>__iter__</code>方法的话，那代表这个就是一个迭代器，可以使用<code>__next__</code>来获取其中的每一个元素<br>使用<code>dir()</code>来进行查看，该方法会将这个元素中所有的方法和属性全部列出来</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(a)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__getnewargs__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mod__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__rmod__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;capitalize&#x27;</span>, <span class="string">&#x27;casefold&#x27;</span>, <span class="string">&#x27;center&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;encode&#x27;</span>, <span class="string">&#x27;endswith&#x27;</span>, <span class="string">&#x27;expandtabs&#x27;</span>, <span class="string">&#x27;find&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;format_map&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;isalnum&#x27;</span>, <span class="string">&#x27;isalpha&#x27;</span>, <span class="string">&#x27;isascii&#x27;</span>, <span class="string">&#x27;isdecimal&#x27;</span>, <span class="string">&#x27;isdigit&#x27;</span>, <span class="string">&#x27;isidentifier&#x27;</span>, <span class="string">&#x27;islower&#x27;</span>, <span class="string">&#x27;isnumeric&#x27;</span>, <span class="string">&#x27;isprintable&#x27;</span>, <span class="string">&#x27;isspace&#x27;</span>, <span class="string">&#x27;istitle&#x27;</span>, <span class="string">&#x27;isupper&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;ljust&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>, <span class="string">&#x27;lstrip&#x27;</span>, <span class="string">&#x27;maketrans&#x27;</span>, <span class="string">&#x27;partition&#x27;</span>, <span class="string">&#x27;replace&#x27;</span>, <span class="string">&#x27;rfind&#x27;</span>, <span class="string">&#x27;rindex&#x27;</span>, <span class="string">&#x27;rjust&#x27;</span>, <span class="string">&#x27;rpartition&#x27;</span>, <span class="string">&#x27;rsplit&#x27;</span>, <span class="string">&#x27;rstrip&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;splitlines&#x27;</span>, <span class="string">&#x27;startswith&#x27;</span>, <span class="string">&#x27;strip&#x27;</span>, <span class="string">&#x27;swapcase&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;translate&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;zfill&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = a.__iter__()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&lt;str_iterator object at <span class="number">0x10b4447f0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line"><span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.__next__()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>

<p>面试考察时，考察点就是：如何判断一个元素是否是迭代器？<br>答： 包含有<code>__iter__</code>方法的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">print(dir(a))  <span class="comment"># dir查看对象的方法和函数</span></span><br><span class="line"><span class="comment"># 在打印结果中寻找__iter__ 如果存在就表示当前的这个类型是个可迭代对象</span></span><br></pre></td></tr></table></figure>

<p>4.生成器  <strong>面试中的重点</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 生成器定义</span></span><br><span class="line"><span class="comment">### 生成器的本质就是迭代器，因此我们可以使用迭代器中的__next__方法来获取元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">22</span>  <span class="comment">### 将return换成yield关键字即可</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="comment"># print(ret.__next__())</span></span><br><span class="line"><span class="comment"># print(ret)  ### &lt;generator object func at 0x103cc80b0&gt; 生成器的对象</span></span><br></pre></td></tr></table></figure>

<p>总结：生成器一定是迭代器，但是迭代器就不一定是生成器</p>
<p>5.列表生成式和字典生成式 []  <strong>项目中的重点</strong></p>
<blockquote>
<p>写法比较pythonic的风格</p>
</blockquote>
<ul>
<li>列表生成式</li>
</ul>
<blockquote>
<p>目的是把一些复杂的代码，写的简单化</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">**传统的写法**</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    l.append(i)</span><br><span class="line"></span><br><span class="line">**pythonnic的写法**</span><br><span class="line">格式：[结果 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象]</span><br><span class="line"></span><br><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**高级的写法**</span><br><span class="line">格式：[结果 <span class="keyword">for</span> 变量 <span class="keyword">in</span> 可迭代对象 <span class="keyword">if</span> 条件]</span><br><span class="line">l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> i &gt; <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>字典生成式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># **传统方式构造字典**</span></span><br><span class="line">keys=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">vals=[<span class="string">&#x27;szk&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>]</span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys):</span><br><span class="line">    <span class="comment"># print(i,k)</span></span><br><span class="line">    dic[k]=vals[i] <span class="comment">## dic[&#x27;name&#x27;] = vals[0] = &#x27;szk&#x27;</span></span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment">### **pythonnic方式**</span></span><br><span class="line"></span><br><span class="line">dic = &#123;k:vals[i] <span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys) <span class="keyword">if</span> 条件判断&#125;</span><br></pre></td></tr></table></figure>

<p>总结：笔试和项目中比较常见的问题。推荐大家，代码比较简单的话，使用上面两种方式，而如果代码比较复杂的话，不建议大家使用</p>
<p>5.5 递归函数  <strong>面试中常见问题</strong></p>
<blockquote>
<p>函数自己调用自己</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello, f1&#x27;</span>)</span><br><span class="line">    f1()</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述代码会报错误，因为，无限制的递归下去，会导致操作系统不断的在内存中开辟栈空间，因此会将内存撑爆，程序死掉。所以，为了防止这种情况出现，python设置了一个最大的递归深度，默认1000。如果想要设置这个递归的深度的话，需要改变一下递归的深度设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getrecursionlimit())  <span class="comment"># 查看最大递归深度 1000</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)  <span class="comment"># 修改最大递归深度</span></span><br></pre></td></tr></table></figure>

<p>所以，如果以后想使用递归的时候，<strong>需要在程序中加入一个终止条件</strong>。</p>
<p>举个例子：</p>
<p>求1到n=5的和？</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">想要获取<span class="number">1</span>到<span class="number">5</span>的和， 只需要知道，<span class="number">1</span>到<span class="number">4</span>的和， 然后加上<span class="number">5</span>，<span class="number">5</span> + sum(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> + sum(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> + sum(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> + sum(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> + sum(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sum1(n<span class="number">-1</span>) + n</span><br><span class="line">        </span><br><span class="line">sum1(5) ===&gt; sum1(4) + 5 </span><br><span class="line">sum1(4) ===&gt; sum1(3) + 4</span><br><span class="line">sum1(3) ===&gt; sum1(2) + 3</span><br><span class="line">sum1(2) ===&gt; sum1(1) + 2</span><br><span class="line">sum1(1) ===&gt; 1</span><br></pre></td></tr></table></figure>

<p>求n的阶乘？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>! = <span class="number">5</span> * <span class="number">4</span> * <span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>! = <span class="number">5</span> * <span class="number">4</span>!</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>! = <span class="number">4</span> * <span class="number">3</span>!</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>! = <span class="number">3</span> * <span class="number">2</span>!</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>! = <span class="number">2</span> * <span class="number">1</span>!</span><br><span class="line"></span><br><span class="line">n! = n * (n<span class="number">-1</span>)!</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sum1(n<span class="number">-1</span>) * n</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>求斐波那契数列</p>
<blockquote>
<p>0, 1, 1, 2, 3, 5, 8,13,21…… </p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">斐波那契数学规律</span><br><span class="line"></span><br><span class="line">当n=<span class="number">0</span>或者n=<span class="number">1</span>, <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">当n&gt;2, f(3) = f(1) + f(2) = 1 + 1 = 2  ==&gt; f(n) = f(n-1) + f(n-2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span> <span class="keyword">or</span> n==<span class="number">1</span> :</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line">fib(4) ==&gt; fib(3) + fib(2)</span><br></pre></td></tr></table></figure>

<p>总结：递归比较难理解，因为自己调用自己，如果没有终止条件的话，很可能造成整个程序崩掉。在项目中用的比较少。递归使用最多的场景，是在算法，尤其是树的相关算法中，用的最多。所以面试考察递归的时候，除了，用上面这几个简单的例子外，最多考察的是遍历树之类的问题</p>
<p>有兴趣的话，可以刷一下，算法题中的树</p>
<p>6.函数名的作用以及闭包函数   <strong>面试和项目中的重点</strong></p>
<ul>
<li>函数名的作用</li>
</ul>
<blockquote>
<p>函数名本身就是一个内存地址, 是可以当做参数进行传递的,并且还可以赋值给别的变量</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">f1</span>):</span></span><br><span class="line">    f1()    </span><br><span class="line">    print(<span class="string">&quot;呵呵&quot;</span>)</span><br><span class="line">    print(func)</span><br><span class="line">    </span><br><span class="line">a = func    <span class="comment"># 把函数当成一个值赋值给另一个变量</span></span><br><span class="line">a()     <span class="comment"># 函数调用 func()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>闭包函数</li>
</ul>
<blockquote>
<p>外层函数中嵌套一个内层函数，然后，外层函数的返回值是这个内层函数。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        name = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">        print(name)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">outter()  <span class="comment">### wrapper()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>并且，函数执行完之后，内部的变量不会随着外面变量的改变而改变。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        name = <span class="string">&#x27;szk&#x27;</span></span><br><span class="line">        print(name)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">f1 = outter()</span><br><span class="line"></span><br><span class="line">name = <span class="string">&#x27;kkk&#x27;</span></span><br><span class="line">f1()  <span class="comment">### szk</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>总结：函数的变量名和闭包函数的使用主要是为装饰器打的基础。这两个知识点，面试中比较常问。而以闭包函数问的最多。</p>
<p>7.**装饰器 面试和项目中的重中之重 **</p>
<p>最简单的装饰器的写法和使用：</p>
<blockquote>
<p>计算时间的装饰器</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 装饰器的写法：</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_time</span>(<span class="params">fuc</span>):</span>  <span class="comment">### 参数是需要计算的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">warpper</span>(<span class="params">*args, **kwargs</span>):</span> <span class="comment">### 需要计算的函数的参数</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        fuc(*args, **kwargs)  <span class="comment">### 需要计算时间的函数</span></span><br><span class="line">        end = time.time()</span><br><span class="line">        print(end - start)</span><br><span class="line">    <span class="keyword">return</span> warpper</span><br><span class="line"></span><br><span class="line"><span class="comment">### 装饰器的使用：</span></span><br><span class="line"><span class="meta">@count_time   ### python提供的语法糖写法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>带参数的装饰器</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">engine</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>)</span></span><br><span class="line"><span class="function">            ....</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">wrapper</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">outter</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">@<span class="title">count_time</span>(<span class="params">engine=<span class="string">&#x27;file&#x27;</span></span>)  ### <span class="title">python</span>提供的语法糖写法</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">f1</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">wrapper(*args,**kwargs) 这个参数的功能是给原始函数用的；outter(func)，用来装被修饰的函数，auth(engine) 传给内层需要的函数。三层足够使用，最外层可以无限的延伸参数。</span><br></pre></td></tr></table></figure>

<p>总结：装饰器在面试和项目中用的最多。甚至在面试的时候，会当场让你写装饰器。在项目中多用来判断用户是否登录以及记录日志等功能。</p>
<p>函数部分的总结：</p>
<ul>
<li>函数的写法和定义以及基础的参数，位置参数，关键字参数，动态获取参数 </li>
<li>部分内置函数</li>
<li>迭代器和生成器</li>
<li>列表生成式和字典生成式</li>
<li>递归</li>
<li>闭包函数</li>
<li>装饰器</li>
</ul>
<h4 id="模块部分："><a href="#模块部分：" class="headerlink" title="模块部分："></a>模块部分：</h4><blockquote>
<p>python 之所以强大，很大一部分原因是python有非常丰富的内置模块和第三方模块和包</p>
</blockquote>
<p>0.模块的定义</p>
<blockquote>
<p>模块的本质就是一系列的python程序。</p>
</blockquote>
<p>1.模块的使用</p>
<blockquote>
<p>import 模块名</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> md  <span class="comment">### 直接导入模块文件名即可</span></span><br><span class="line">print(md.read())  <span class="comment">### 调用模块中常见的方法和属性，使用.的方式来获取和使用</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>使用.的方式获取所有的函数或者属性</li>
<li>引入的方法不会和当前运行文件中的函数或者属性冲突</li>
</ul>
<blockquote>
<p>from 模块 import 引入的函数或者属性</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> md <span class="keyword">import</span> read</span><br><span class="line">read()</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>使用啥就导入啥，提高程序的执行效率</li>
</ul>
<p>2.模块的导入查找方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">模块的查询顺序</span><br><span class="line">    <span class="number">1.</span>先从内存中找可能已经加载了的</span><br><span class="line">    <span class="number">2.</span>python 内置模块  </span><br><span class="line">    <span class="number">3.</span>sys.path列表里面每一个路径下去找, 需要知道sys.path列表中第一个路径就是当前被执行文件所在的文件夹</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">如何解决上述找不到的路径的问题：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###两种方式</span></span><br><span class="line"><span class="comment">#### 1.将该模块的绝对路径加入到sys.path中</span></span><br><span class="line"><span class="comment"># sys.path.append(&#x27;/Users/shangzekai/PycharmProjects/day04/md1/&#x27;)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># import md  ###</span></span><br><span class="line"><span class="comment"># print(md.read1())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 2.从根路径下面的模块开始导入</span></span><br><span class="line"><span class="keyword">from</span> md1 <span class="keyword">import</span> md</span><br><span class="line"><span class="keyword">from</span> md1.md <span class="keyword">import</span> read, read1</span><br></pre></td></tr></table></figure>

<p>3.模块的分类</p>
<ul>
<li>自定义模块</li>
<li>内置模块</li>
<li>第三方模块 </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  <span class="comment"># 当文件被直接执行时</span></span><br></pre></td></tr></table></figure>

<p>4.常见的内置模块</p>
<ul>
<li><p>sys ： </p>
<ul>
<li>sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值<br>-os:</li>
<li>os.path.abspath(path)       返回path规范化的绝对路径</li>
<li>os.path.split(path)         将path分割成目录和文件名二元组返回</li>
<li>os.path.dirname(path)       返回path的目录。其实就是os.path.split(path)的第一个元素</li>
<li>os.path.basename(path)      返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</li>
<li>os.path.exists(path)        如果path存在，返回True；如果path不存在，返回False</li>
<li>os.path.isfile(path)        如果path是一个存在的文件，返回True。否则返回False</li>
<li>os.path.isdir(path)         如果path是一个存在的目录，则返回True。否则返回False</li>
</ul>
</li>
<li><p>random : 生成随机字符串，验证码</p>
<ul>
<li>random.randint(1,2)</li>
</ul>
</li>
<li><p>json 使用的场景非常多，常见于不同的语言和python进行数据交互使用</p>
<ul>
<li>dumps：序列化</li>
<li>loads: 反序列化</li>
<li>dump</li>
<li>load   </li>
</ul>
</li>
<li><p>hashlib  编码</p>
<ul>
<li>md5</li>
<li>sha1</li>
<li>sha256</li>
</ul>
</li>
</ul>
<h4 id="本周内容："><a href="#本周内容：" class="headerlink" title="本周内容："></a>本周内容：</h4><p>0.内置的模块</p>
<ul>
<li>时间模块 （time）<ul>
<li>import time   time.time() </li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 各种时间的转换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 如果别人给你传了一个2016-05-22，转换成时间戳</span></span><br><span class="line"></span><br><span class="line">string_to_struct = time.strptime(<span class="string">&quot;2016-05-22&quot;</span>,<span class="string">&quot;%Y-%m-%d&quot;</span>) <span class="comment">#将 日期字符串 转成 struct时间对象格式</span></span><br><span class="line"><span class="comment"># print(string_to_struct)</span></span><br><span class="line">struct_to_stamp = time.mktime(string_to_struct) <span class="comment">#将struct时间对象转成时间戳</span></span><br><span class="line">print(struct_to_stamp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 时间戳转换成字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间戳 转为 日期字符串</span></span><br><span class="line">print(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time.gmtime()) )</span><br></pre></td></tr></table></figure>

<p>总结：时间的转换以及时间的加减</p>
<p>1.第三方模块  requests， pymysql， jenkins，gitlab</p>
<p>pip工具，下载安装第三方模块。和yum类似</p>
<p>pip工具安装的包一定是和python的解释器相对应的</p>
<blockquote>
<p>pip3 install 安装的包<br>pip3 uninstall 安装的包<br>pip3 list<br>换源：</p>
</blockquote>
<p>临时换源：</p>
<blockquote>
<p>pip install 包名 -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
</blockquote>
<p>永久性换源<br>修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>2.requests模块</p>
<blockquote>
<p>爬虫中非常重要的一个模块<br>通过这个模块可以发起http请求，get， post， put， delete方法</p>
</blockquote>
<p>3.pymysql模块</p>
<blockquote>
<p>pip3 install  pymysql</p>
</blockquote>
<p>总结: sql语句的写法是不变。需要关注操作的函数即可。execute</p>
<p>4.redis模块</p>
<blockquote>
<p><a href="https://www.cnblogs.com/john-xiong/p/12089103.html">https://www.cnblogs.com/john-xiong/p/12089103.html</a></p>
</blockquote>
<p>5.gitlab模块</p>
<p>生成token： settings ===&gt; accesstoken ===&gt; create 生成</p>
<blockquote>
<p><a href="https://pypi.org/project/python-gitlab/">https://pypi.org/project/python-gitlab/</a></p>
</blockquote>
<ul>
<li>ATM作业</li>
<li>python操作 docker， k8s， saltstack， ansible</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day07</title>
    <url>/2020/09/19/py-day07/</url>
    <content><![CDATA[<p>前端基础基础<br>class(html、css、jQuery)</p>
<a id="more"></a>
<h4 id="上周回顾"><a href="#上周回顾" class="headerlink" title="上周回顾"></a>上周回顾</h4><ol start="0">
<li><p>前端初识</p>
<blockquote>
<p>三剑客：html， css， js</p>
</blockquote>
</li>
<li><p>html部分</p>
<ol>
<li><p>html的基本构成</p>
<ul>
<li>Html  &gt; head &gt; body</li>
</ul>
</li>
<li><p>html的基本标签</p>
<ol>
<li><p>内容标签</p>
<blockquote>
<p>p, br, u, h1—h6</p>
</blockquote>
</li>
<li><p>元素标签</p>
<blockquote>
<p>Img <img src></p>
<p>Span 和 div</p>
</blockquote>
</li>
<li><p>table系列标签</p>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&#x27;1px&#x27;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>table标签非常的重要</p>
</li>
<li><p>form表单系列</p>
<blockquote>
<p>收集用户提交的信息，然后将提交的信息通过http协议的GET或者POST方法，将数据提交给后台的服务端</p>
</blockquote>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户ing&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">checked</span>&gt;</span>香蕉</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span>苹果</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span>句子</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span>里</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>footballl</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>&gt;</span>footballl2</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>footballl3</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>footballl4</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span> <span class="attr">disabled</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交按钮&quot;</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;hz&quot;</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
</li>
<li><p>CSS部分</p>
<ol>
<li><p>css的引入</p>
<ul>
<li>行内样式： html和css写在一起</li>
</ul>
<blockquote>
<p><code>&lt;span style=&quot;color:red;&quot;&gt;xxxx&lt;/span&gt;</code></p>
</blockquote>
<ul>
<li>内部样式</li>
</ul>
<blockquote>
<p>head标签中写就可以   <code>&lt;style &gt;css的样式&lt;/style&gt;</code></p>
</blockquote>
<ul>
<li><p>外部样式</p>
<blockquote>
<p>head标签中， <link src></p>
</blockquote>
</li>
</ul>
</li>
<li><p>css的选择器</p>
<ol>
<li><p>id选择  #id{}</p>
</li>
<li><p>class选择器  .classname{}</p>
</li>
<li><p>标签选择器  p{}</p>
</li>
<li><p>包含选择器  div span {}</p>
</li>
<li><p>分组选择器  div , span {}</p>
</li>
<li><p>选择全部  <code>*</code></p>
<p>选择器的优先级 </p>
</li>
</ol>
</li>
<li><p>css的常见属性</p>
<ol>
<li><p>文本常见属性</p>
<ol>
<li>font-size</li>
<li>color</li>
<li>Line-height</li>
<li>text-align, border</li>
</ol>
</li>
<li><p>背景属性</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><ol>
<li>网站的商品展示页面<ol>
<li>把整个框架搭起来，然后再这个框架中填充内容</li>
</ol>
</li>
<li>登录页面</li>
</ol>
<h4 id="本周内容"><a href="#本周内容" class="headerlink" title="本周内容"></a>本周内容</h4><h5 id="css完结"><a href="#css完结" class="headerlink" title="css完结"></a>css完结</h5><ol>
<li><p>定位 position 和 定位属性坐标配合使用  top, right, left, bottom</p>
<ol>
<li><p>fixed:固定位置;相对于body定位;将某个元素固定在页面的某个位置<br>特点：</p>
<blockquote>
<p>相对于浏览器窗口来进行定位的<br>固定到窗口的某个位置上，不随内容而滚动<br>如果不设置定位坐标，就在原来的位置，否则反之</p>
</blockquote>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">        #i1&#123;</span></span><br><span class="line"><span class="xml">            width: 100px;</span></span><br><span class="line"><span class="xml">            height: 100px;</span></span><br><span class="line"><span class="xml">            border: 1px solid red;</span></span><br><span class="line"><span class="xml">            background-color: red;</span></span><br><span class="line"><span class="xml">            position: fixed;</span></span><br><span class="line"><span class="xml">            right: 10px;</span></span><br><span class="line"><span class="xml">            bottom: 15px;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        body&#123;</span></span><br><span class="line"><span class="xml">            height: 10000px;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>releative: 相对定位<br>特点：</p>
<blockquote>
<p>相对定位是相对于，自身的左上角为坐标点</p>
</blockquote>
</li>
<li><p>absloute：绝对定位<br>特点：</p>
<blockquote>
<p>相对于（祖先元素的定位方式（relative）来进行定位）<br>找祖先元素是否有定位，如果没有定位，，找到<body>，就相对于body来定位<br>如果找到祖先元素有定位，相对祖先祖先元素来定位</body></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:releative&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结：releative和absolute搭配使用</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<p>position之input输入框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 30px; position: relative&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 30px;padding-right: 16px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;i_pwd.jpg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; top: 9px;right: -18px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="2">
<li>z-index<blockquote>
<p>设置对象的层叠顺序</p>
</blockquote>
</li>
</ol>
<p><strong>特点</strong></p>
<blockquote>
<p>较大的number值的对象会覆盖在较小number值得对象之上</p>
</blockquote>
<p>浮层的效果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:2000px</span>;</span></span><br><span class="line">            background-color: wheat;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.two</span>&#123;</span></span><br><span class="line">            background-color: black;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:2050px</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span>: 0<span class="selector-class">.5</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:10</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.three</span>&#123;</span></span><br><span class="line">            background-color: white;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:40</span>%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">z-index</span><span class="selector-pseudo">:12</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;展示模态框&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="javascript介绍"><a href="#javascript介绍" class="headerlink" title="javascript介绍"></a>javascript介绍</h4><h5 id="一、JS如何引入及基本语法规范"><a href="#一、JS如何引入及基本语法规范" class="headerlink" title="一、JS如何引入及基本语法规范"></a>一、JS如何引入及基本语法规范</h5><p>1.js的简单介绍</p>
<ul>
<li>为啥js叫做javascript？</li>
<li>html, css, python,php,java,javascript</li>
<li>90年代</li>
<li>js 的运行：浏览器</li>
</ul>
<p>2.js的初识</p>
<ul>
<li><p>js的写法</p>
<ul>
<li>head头中：<br>文件引入：<code>&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</code><br>代码：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;dsadsadsa&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>body后面</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>dsbadbshabdhsabdsha<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /**推荐大家讲js的代码放在body的后面**/</span><br><span class="line">    /**js的代码**/</span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;dsadsa&#x27;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在开发者平台的console中，也可以写js的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert（‘dsadsadsa’）</span><br><span class="line">console.log(&#39;dsadsadsadsa&#39;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li><p>js的注释：<br>单行注释： //<br>多行注释： /**/</p>
</li>
<li><p>js代码后面加分号</p>
<h5 id="二、变量声明"><a href="#二、变量声明" class="headerlink" title="二、变量声明"></a>二、变量声明</h5></li>
<li><p>变量声明<br>python<br> name = ‘zhansgan’<br>js</p>
<p> 局部变量 var name = ‘zhansan’;<br> 全部变量 name = ‘zhansagn’;<br> var age = 12;<br> 变量名区分大小写str和Str不是一个变量，也就是js对变量名的大小写是敏感的<br>ps:<br> 代码的书写</p>
</li>
</ol>
<h5 id="三、变量类型"><a href="#三、变量类型" class="headerlink" title="三、变量类型"></a>三、变量类型</h5><ol>
<li>JS变量类型</li>
</ol>
<p>python：<br>    num(int  float)<br>    字符串<br>    列表<br>    字典<br>    元组<br>    集合<br>js：<br>    num<br>        var age = 12;<br>        var age = 1.1;</p>
<ol start="2">
<li>常用方法</li>
</ol>
<ul>
<li><p>数值</p>
<ul>
<li>parseInt 将某值转换成数字，不成功则NAN</li>
<li>ParseFloat 将某值转换成浮点数，不成功则NAN</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parseInt(<span class="string">&#x27;3.5&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">parseInt(<span class="string">&#x27;3.6&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">parseFloat(<span class="string">&#x27;3.6&#x27;</span>)</span><br><span class="line"><span class="number">3.6</span></span><br></pre></td></tr></table></figure>

<p>  字符串</p>
<pre><code>  var name = &#39;zhansgan&#39;;
  相关的方法：
      **obj.length　　　　　　　　　　　　　　　长度
      **obj.trim()　　　　　　　　　　　　　　　移除空白
      obj.trimLeft()
      obj.trimRight()
      obj.charAt(n)　　　　　　　　　　　　　返回字符串中的第n个字符
      obj.concat(value, …)　　　　　　　　 拼接
      obj.indexOf(substring,start)　　　　子序列位置
      **obj.substring(from, to)　　　　　　　根据索引获取子序列
      **obj.slice(start, end)　　　　　　　　切片
      obj.toLowerCase()　　　　　　　　　　大写
      obj.toUpperCase()　　　　　　　　　　小写
      **obj.split(delimiter, limit)　　　　　分割</code></pre>
<p>  数组</p>
<pre><code>  var arr = [1,2,4,&#39;zhansgan&#39;]; array()
  常用的方法
      obj.length 数组的大小
      obj.push(ele) 尾部追加元素
      obj.pop() 尾部获取一个元素
      obj.unshift(ele) 头部插入元素
      obj.shift() 头部移除元素
      obj.slice( ) 切片

      obj.reverse( ) 反转
      obj.join(sep) 将数组元素连接起来以构建一个字符串
      obj.concat(val,..) 连接数组
      obj.sort( ) 对数组元素进行排序</code></pre>
<p>  字典（json）</p>
<pre><code>  mydict = &#123;&#39;name&#39;:&#39;zhansgan&#39;,&#39;age&#39;:12&#125;</code></pre>
<p>  循环：</p>
<pre><code>  第一种：
      var arr = [&#39;zhansgan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;];
      mydict = &#123;&#39;name&#39;:&#39;zhansgan&#39;,&#39;age&#39;:12&#125;

      for(var i in arr)&#123;
          console.log(arr[i]);
      &#125;

  第二种：
      var arr = [&#39;zhansgan&#39;, &#39;lisi&#39;, &#39;wangwu&#39;];

      for(var i=0; i&lt;arr.length; i = i+1)&#123;
          console.log(i + &#39;,&#39; +arr[i]);
      &#125;

      字典不适于第二种循环；

  // 最好的注释就是代码的命名规范</code></pre>
<p>  布尔：</p>
<pre><code>  True False (python)
  true false (js)</code></pre>
</li>
</ul>
<pre><code>null      变量的值是null
undefined 变量声明但是未给值


索引为什么从0开始：住的地方地下室，从0开始
  z  h  a  n  g  s  a  n
0  1  2  3  4
 &#123;% asset_img objsort.png objsort %&#125;</code></pre>
<ul>
<li>对象<img src="/2020/09/19/py-day07/%E5%AF%B9%E8%B1%A1.png" class title="objsort">



</li>
</ul>
<p><strong>对象和数组的循环方式</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 循环数组</span><br><span class="line">     * **/</span><br><span class="line">    var arr = [&#x27;pounds&#x27;, &#x27;szk&#x27;, &#x27;chenshunyang&#x27;];</span><br><span class="line">    var len = arr.length;</span><br><span class="line">    </span><br><span class="line">    for(var i=0; i<span class="tag">&lt;<span class="name">len;</span> <span class="attr">i</span>++) &#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">console.log</span>(<span class="attr">arr</span>[<span class="attr">i</span>]);</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">for</span>(<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">arr</span>)&#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">console.log</span>(<span class="attr">i</span>, <span class="attr">arr</span>[<span class="attr">i</span>]);</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    /***</span></span><br><span class="line"><span class="tag">     * 循环对象</span></span><br><span class="line"><span class="tag">     */</span></span><br><span class="line"><span class="tag">    <span class="attr">var</span> <span class="attr">a</span> = <span class="string">&#123;</span>&quot;<span class="attr">name</span>&quot;<span class="attr">:</span>&#x27;<span class="attr">szk</span>&#x27;, &quot;<span class="attr">age</span>&quot;<span class="attr">:12</span>&#125;;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">for</span>(<span class="attr">var</span> <span class="attr">i</span> <span class="attr">in</span> <span class="attr">a</span>)&#123;</span></span><br><span class="line"><span class="tag">        <span class="attr">console.log</span>(<span class="attr">i</span>, <span class="attr">a</span>[<span class="attr">i</span>]);</span></span><br><span class="line"><span class="tag">    &#125;</span></span><br></pre></td></tr></table></figure>

<p>总结：数组的循环可以使用上面两种方式，但是对象的循环，必须使用 for … in 的方式来进行循环.</p>
<h5 id="四、运算符介绍"><a href="#四、运算符介绍" class="headerlink" title="四、运算符介绍"></a>四、运算符介绍</h5><p>. 运算符介绍</p>
<ul>
<li><ol>
<li>算数运算符<br><code>+   -    *    /     %       ++        --</code></li>
</ol>
</li>
<li><ol start="2">
<li>比较运算符（==判断值，===判断值和类型）<br><code>&gt;   &gt;=   &lt;    &lt;=    !=    ==    ===   !==</code></li>
</ol>
</li>
<li><ol start="3">
<li>逻辑运算符<br><code>&amp;&amp;   ||   ！</code></li>
</ol>
</li>
<li><ol start="4">
<li>赋值运算符<br><code>=  +=   -=  *=   /=</code></li>
</ol>
</li>
</ul>
<h5 id="五、流程控制"><a href="#五、流程控制" class="headerlink" title="五、流程控制"></a>五、流程控制</h5><ol>
<li><p>if-else语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (条件)&#123;</span><br><span class="line">  当条件为 true 时执行的代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  当条件不为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>if–else if–else语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (条件 1)&#123;</span><br><span class="line">  当条件 1 为 true 时执行的代码</span><br><span class="line">&#125;else if (条件 2)&#123;</span><br><span class="line">  当条件 2 为 true 时执行的代码</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  当条件 1 和 条件 2 都不为 true 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>switch语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var day&#x3D;new Date().getDay();</span><br><span class="line">switch (day)&#123;</span><br><span class="line">case 0:</span><br><span class="line">  x&#x3D;&quot;Today it&#39;s Sunday&quot;;</span><br><span class="line">  break;</span><br><span class="line">case 1:</span><br><span class="line">  x&#x3D;&quot;Today it&#39;s Monday&quot;;</span><br><span class="line">  break;</span><br><span class="line">case 2:</span><br><span class="line">  x&#x3D;&quot;Today it&#39;s Tuesday&quot;;</span><br><span class="line">  break;</span><br><span class="line">case 3:</span><br><span class="line">  x&#x3D;&quot;Today it&#39;s Wednesday&quot;;</span><br><span class="line">  break;</span><br><span class="line">default:</span><br><span class="line">  x&#x3D;&quot;Looking forward to the Weekend&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>while循环语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (i&lt;5)&#123;</span><br><span class="line">  x&#x3D;x + &quot;The number is &quot; + i + &quot;&lt;br&gt;&quot;;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>三元运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a &#x3D; 3;</span><br><span class="line">var b &#x3D; 5;</span><br><span class="line"></span><br><span class="line">c &#x3D; a &gt; b ? a : b</span><br><span class="line">console.log(c);</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h5 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h5><p>函数定义：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/**1.普通函数定义方式</span><br><span class="line">     * **/</span><br><span class="line">    function test()&#123;</span><br><span class="line">        console.log(&#x27;dsadsa&#x27;);</span><br><span class="line">        var a = 100;</span><br><span class="line"></span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    // test()</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 2. 匿名函数</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    var a = function()&#123;</span><br><span class="line">        console.log(&#x27;dsadsa&#x27;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>函数的局部变量和全局变量</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 全局变量（不推荐第二种方式）</span><br><span class="line">var name = &quot;zekai&quot;;</span><br><span class="line">age = 73;</span><br><span class="line"></span><br><span class="line">function test()&#123;</span><br><span class="line">    // 局部变量</span><br><span class="line">    var height = 178;</span><br><span class="line"></span><br><span class="line">    // 默认全局变量</span><br><span class="line">    leg = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 局部变量在函数内部定义，使用var进行定义，如果不加var，则默认是全局变量</span><br><span class="line">// 在函数外部定义的变量，都是全局变量 ，推荐使用var</span><br></pre></td></tr></table></figure>



<p>函数的作用域：</p>
 <img src="/2020/09/19/py-day07/%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F.png" class title="函数的作用域">



<p>p = Person()</p>
<p>var d = new Date();</p>
<p>常用的序列化和反序列化的方法：</p>
 <img src="/2020/09/19/py-day07/%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" class title="序列化反序列化">


<p>在python面向对象中， 谁调用改方法，self就是那个实例</p>
<p>this指向window对象</p>
 <img src="/2020/09/19/py-day07/window%E5%AF%B9%E8%B1%A1.png" class title="window对象">


<p>this指向当前元素</p>
 <img src="/2020/09/19/py-day07/%E5%BD%93%E5%89%8D%E5%85%83%E7%B4%A0.png" class title="当前元素">



<h5 id="七、DOM-和-jquery"><a href="#七、DOM-和-jquery" class="headerlink" title="七、DOM 和 jquery"></a>七、DOM 和 jquery</h5><p>DOM: Document Object Modal ： 文档对象模型</p>
<ol>
<li><ul>
<li><p>直接查找</p>
<p>  document.getElementById 　　　　　　　根据ID获取一个标签<br>  document.getElementsByName　　　　　　根据name属性获取标签集合<br>  document.getElementsByClassName　　　根据class属性获取标签集合<br>  document.getElementsByTagName　　　　根据标签名获取标签集合</p>
</li>
<li><p>间接查找<br>  parentElement 　　　　　父节点标签元素<br>  children 　　　　　　　　所有子标签<br>  firstElementChild　　　第一个子标签元素<br>  lastElementChild 　　　最后一个子标签元素<br>  nextElementtSibling 　下一个兄弟标签元素<br>  previousElementSibling 上一个兄弟标签元素</p>
</li>
</ul>
</li>
<li><p>操作内容<br> innerText　　　文本<br> innerHTML　　　HTML内容<br> value 　　　　　值</p>
<pre><code> &lt;input type=&#39;text&#39; value=&#39;1234&#39; /&gt;</code></pre>
</li>
<li><p>css的操作 </p>
<ul>
<li>操作整块类：<br>  classList add  remove<br>  例：模态对话框显示和隐藏</li>
<li>操作单个类：<br>  obj.style.css属性</li>
</ul>
</li>
<li><p>事件：<br> onclick  — 点击事件<br> onchange — 适用于select</p>
</li>
</ol>
<p>Jquery: 对DOM中各种方法的封装，是一个js的第三方库</p>
 <img src="/2020/09/19/py-day07/jQuery.png" class title="jQuery">



<p>使用jquery实现表格的全选，反选，取消。</p>
<p>Jquery和DOM进行转换：</p>
 <img src="/2020/09/19/py-day07/jQuery-dom.png" class title="jQuery-dom">


<p>jquery —&gt; DOM ： $(‘#i1’)[0]</p>
<p>DOM —&gt; jquery: $(inpt[0])</p>
<p>作业：</p>
<ol>
<li><p>css作业</p>
</li>
<li><p>上面的内容过一遍</p>
</li>
</ol>
<h5 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h5><ol>
<li>不刷新页面请求服务端的数据</li>
</ol>
<h5 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h5><blockquote>
<p>twitter搞的一个前端的框架组件</p>
</blockquote>
<h4 id="各种网站的模板"><a href="#各种网站的模板" class="headerlink" title="各种网站的模板"></a>各种网站的模板</h4><ol>
<li>simpleui</li>
<li>AdminTle</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day08-02</title>
    <url>/2020/09/27/py-day08-02/</url>
    <content><![CDATA[<h2 id="第十九章-Django的路由和视图"><a href="#第十九章-Django的路由和视图" class="headerlink" title="第十九章 Django的路由和视图"></a>第十九章 Django的路由和视图</h2><h3 id="Django的路由"><a href="#Django的路由" class="headerlink" title="Django的路由"></a>Django的路由</h3><p>路由简单的来说就是根据用户请求的 URL 链接来判断对应的处理程序，并返回处理结果，也就是 URL 与 Django 的视图建立映射关系。</p>
<p>Django 路由在 urls.py 配置，urls.py 中的每一条配置对应相应的处理方法。</p>
<p>Django 不同版本 urls.py 配置有点不一样：</p>
<h4 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h4><ul>
<li>Django1.1.x 版本</li>
</ul>
<p>url() 方法：普通路径和正则路径均可使用，需要自己手动添加正则首位限制符号。</p>
]]></content>
  </entry>
  <entry>
    <title>py-day08</title>
    <url>/2020/09/27/py-day08/</url>
    <content><![CDATA[<p>前端基础基础回顾<br>class(html、css、jQuery)</p>
<a id="more"></a>


<h5 id="js的讲解"><a href="#js的讲解" class="headerlink" title="js的讲解"></a>js的讲解</h5><p>1.js的介绍</p>
<p>2.js的基本用法</p>
<blockquote>
<p><code>script</code></p>
</blockquote>
<p>3.js的变量</p>
<p>4.js的数据类型   bool， 整型，字符串(split, join, contact)</p>
<p>5.js的函数  (first class)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> abc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;dsadsa&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;()</span><br></pre></td></tr></table></figure>

<p>6.this的用法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span> 类似于python中的self，谁调用改函数或者变量，则<span class="built_in">this</span>就指向谁</span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span>  <span class="comment">// window.a = 100</span></span><br><span class="line">b = <span class="number">200</span>  <span class="comment">// window.b = 200</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">  <span class="built_in">console</span>.log(a, b); <span class="comment">// 10, 20</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a, <span class="built_in">this</span>.b) <span class="comment">// 100, 200</span></span><br><span class="line">&#125;</span><br><span class="line">test() <span class="comment">// window.test() ---&gt; window === this</span></span><br><span class="line"></span><br><span class="line">DOM操作：</span><br><span class="line">i1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// this指代当前元素 i1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;dsadsa&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>DOM —》 用户和网页交互的根本</p>
<blockquote>
<p>DOM: 文档对象模型</p>
</blockquote>
<p>document.getElementByID, </p>
<p>Document.getElementsByTagName</p>
<p>DOcument.getElementsByClassName</p>
<p>innerText, innerHtml</p>
<p>Jquery —&gt; 就是对DOM的封装</p>
<h4 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h4><h4 id="BootStrap的组件讲解"><a href="#BootStrap的组件讲解" class="headerlink" title="BootStrap的组件讲解"></a>BootStrap的组件讲解</h4><blockquote>
<p>twitter开源的前端组件框架，非常适合于后端工程师写前端代码</p>
<p>网站：<a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></p>
</blockquote>
<p>使用方法：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;bootstrap@3.3.7&#x2F;dist&#x2F;css&#x2F;bootstrap.min.css&quot; integrity&#x3D;&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz&#x2F;K68vbdEjh4u&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>1.CSS部分：</p>
<p>总结：常用的如表格，表单，按钮，图片，辅助类，需要注意</p>
<p>2.图标和字体库： <a href="http://www.fontawesome.com.cn/">http://www.fontawesome.com.cn/</a></p>
<p>3.JS插件中的模态框</p>
<h4 id="常见的模板套用"><a href="#常见的模板套用" class="headerlink" title="常见的模板套用"></a>常见的模板套用</h4><h4 id="AdminLTE"><a href="#AdminLTE" class="headerlink" title="AdminLTE"></a>AdminLTE</h4><blockquote>
<p>实际项目中常用的一个比较经典的后台管理模板</p>
<p>缺点：国外的，中文文档比较少</p>
</blockquote>
<h4 id="LayUI"><a href="#LayUI" class="headerlink" title="LayUI"></a>LayUI</h4><blockquote>
<p><a href="https://www.layui.com/doc/">https://www.layui.com/doc/</a>   国内比较不错的一个后台管理模板</p>
</blockquote>
<p>重点关注：表格，表单，按钮，模态框</p>
<h4 id="SimpleUI-基于DjangoAdmin，-里边用的是Vue和ElementUI等组件"><a href="#SimpleUI-基于DjangoAdmin，-里边用的是Vue和ElementUI等组件" class="headerlink" title="SimpleUI 基于DjangoAdmin， 里边用的是Vue和ElementUI等组件"></a>SimpleUI 基于DjangoAdmin， 里边用的是Vue和ElementUI等组件</h4><p>目标：给你一个页面，能够进行修改，看懂</p>
<h4 id="Python的常见三大web框架"><a href="#Python的常见三大web框架" class="headerlink" title="Python的常见三大web框架"></a>Python的常见三大web框架</h4><ol>
<li>Django   大而全的框架</li>
<li>Flask   </li>
<li>Tornado  性能好</li>
</ol>
<p>Django有点像普通车，啥都有。</p>
<p>Tornado有点像保时捷，跑车的发动机好。 select poll epoll(nginx)</p>
<h4 id="Django的安装"><a href="#Django的安装" class="headerlink" title="Django的安装"></a>Django的安装</h4><ol>
<li><p><code>pip3 install Django</code></p>
</li>
<li><p>使用pycharm安装</p>
</li>
</ol>
<h4 id="Django的创建"><a href="#Django的创建" class="headerlink" title="Django的创建"></a>Django的创建</h4><ol>
<li><p>使用Pycharm进行创建  推荐</p>
</li>
<li><h5 id="使用命令行创建项目"><a href="#使用命令行创建项目" class="headerlink" title="使用命令行创建项目"></a>使用命令行创建项目</h5><blockquote>
<p>django-admin startproject 项目名称</p>
</blockquote>
</li>
</ol>
<h4 id="Django的启动"><a href="#Django的启动" class="headerlink" title="Django的启动"></a>Django的启动</h4><ol>
<li>使用Pycharm的启动</li>
<li>使用命令行启动    推荐，要求多配一个显示屏</li>
<li><img src="/Users/shangzekai/Library/Application Support/typora-user-images/image-20200926153346790.png" alt="image-20200926153346790" style="zoom:50%;">

</li>
</ol>
<p>注意：当修改完代码的时候，Django会自动的帮我们启动，无需手动启动</p>
<h4 id="Django的生成文件的具体介绍"><a href="#Django的生成文件的具体介绍" class="headerlink" title="Django的生成文件的具体介绍"></a>Django的生成文件的具体介绍</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">|---mysite <span class="comment"># 项目的/目录 </span></span><br><span class="line">  |---mysite <span class="comment"># 项目目录 </span></span><br><span class="line">      |---__init__.py </span><br><span class="line">      |---settings.py <span class="comment"># 配置文件 </span></span><br><span class="line">      |---urls.py <span class="comment"># 路由系统 ===&gt; url与视图的对应关系 </span></span><br><span class="line">      |---wsgi.py <span class="comment"># runserver命令就使用wsgiref模块做简单的web server </span></span><br><span class="line">|---manage.py <span class="comment"># 管理文件</span></span><br></pre></td></tr></table></figure>

<h4 id="Django创建app"><a href="#Django创建app" class="headerlink" title="Django创建app"></a>Django创建app</h4><ol>
<li>pycharm创建app</li>
<li>使用命令行方式创建   <ol>
<li>python3 manage.py startapp app01</li>
<li><img src="/Users/shangzekai/Library/Application Support/typora-user-images/image-20200926155642676.png" alt="image-20200926155642676" style="zoom:50%;">

</li>
</ol>
</li>
</ol>
<p>如果，后续我们还想再新添加新的app，我们就必须使用第二种方式添加了。第一种方式只适合在项目刚创建的时候创建app</p>
<h4 id="app中的目录结构"><a href="#app中的目录结构" class="headerlink" title="app中的目录结构"></a>app中的目录结构</h4><blockquote>
<p>app中主要写业务逻辑</p>
</blockquote>
<img src="https://www.runoob.com/wp-content/uploads/2015/01/Django-env10.png" alt="aa" style="zoom:60%;">

<h4 id="Django的初体验"><a href="#Django的初体验" class="headerlink" title="Django的初体验"></a>Django的初体验</h4><h4 id="Web框架-Django-的简单执行流程"><a href="#Web框架-Django-的简单执行流程" class="headerlink" title="Web框架(Django)的简单执行流程"></a>Web框架(Django)的简单执行流程</h4><h5 id="Django的路由"><a href="#Django的路由" class="headerlink" title="Django的路由"></a><img src="/Users/shangzekai/Library/Application Support/typora-user-images/image-20200926161845127.png" alt="image-20200926161845127" style="zoom:50%;">Django的路由</h5><p>1.django的路由匹配部分不同的版本可能会不一致</p>
<p>2.path 和 repath 的区别</p>
<p>3.解决重复定义的问题：</p>
<p>​        起别名，避免重复</p>
<img src="/Users/shangzekai/Library/Application Support/typora-user-images/image-20200926165408414.png" alt="image-20200926165408414" style="zoom:50%;">

<p>​        路由分发 （重要）</p>
<p>​        使用include来进行路由的分发</p>
<p>4.反向解析</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&#123;% url &#39;mylogin&#39; %&#125;&quot; method&#x3D;&quot;get&quot;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="Django的视图"><a href="#Django的视图" class="headerlink" title="Django的视图"></a>Django的视图</h5><blockquote>
<p>用来处理业务逻辑相关的</p>
</blockquote>
<p>视图层中有两个重要的对象：请求对象(HttpRequest)与响应对象(HttpResponse)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##### request.GET 用来获取get请求发送到额数据</span><br><span class="line"># print(request.GET)  ### &lt;QueryDict: &#123;&#39;name&#39;: [&#39;szk&#39;], &#39;age&#39;: [&#39;12&#39;]&#125;&gt;</span><br><span class="line"># print(request.GET.get(&#39;name&#39;))</span><br><span class="line"># print(request.GET.get(&#39;age&#39;))</span><br><span class="line"></span><br><span class="line">#### request.POST 用来获取post请求发送到额数据  Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">print(request.POST) ## QueryDict: &lt; &#123;&#39;username&#39;: [&#39;szk&#39;], &#39;passwd&#39;: [&#39;123qwe&#39;]&#125;&gt;</span><br><span class="line">print(request.POST.get(&#39;name&#39;))</span><br></pre></td></tr></table></figure>

<img src="/Users/shangzekai/Library/Application Support/typora-user-images/image-20200926174408729.png" alt="image-20200926174408729" style="zoom:50%;">

<p>如下非常重要</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### request.POST 用来获取post请求发送到额数据  Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">print(request.body) ### b&#39;username&#x3D;szk&amp;passwd&#x3D;123qwe&#39;</span><br><span class="line">print(request.POST) ## QueryDict: &lt; &#123;&#39;username&#39;: [&#39;szk&#39;], &#39;passwd&#39;: [&#39;123qwe&#39;]&#125;&gt;</span><br><span class="line">print(request.POST.get(&#39;username&#39;))</span><br><span class="line"></span><br><span class="line">### 当用户发送post请求的时候，请求体中的数据先到request.body中，</span><br><span class="line">### 然后接下来判断用户的请求体： Content-Type: application&#x2F;x-www-form-urlencoded，</span><br><span class="line">### 那此时django会将request.body中的数据赋值给request.POST</span><br><span class="line">### 因为有的时候，用户发送的虽然是post请求， 但是用户的请求体是: Content-Type: application&#x2F;json，那此时request.POST中没有值</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">    requests.post(&#39;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;app01&#x2F;&#39;)</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>



<h5 id="Django的模板"><a href="#Django的模板" class="headerlink" title="Django的模板"></a>Django的模板</h5><h5 id="Django的数据库部分"><a href="#Django的数据库部分" class="headerlink" title="Django的数据库部分"></a>Django的数据库部分</h5><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>发布方式对比</title>
    <url>/2020/08/13/%E5%8F%91%E5%B8%83%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>灰度、蓝绿、ABtest发布等部署方案对比</p>
<a id="more"></a>
<h2 id="蓝绿发布（Blue-Green-Deployment）"><a href="#蓝绿发布（Blue-Green-Deployment）" class="headerlink" title="蓝绿发布（Blue/Green Deployment）"></a>蓝绿发布（Blue/Green Deployment）</h2><ol>
<li>定义</li>
</ol>
<p>蓝绿部署是不停老版本，部署新版本然后进行测试。确认OK后将流量切到新版本，然后老版本同时也升级到新版本。</p>
<ol start="2">
<li>特点</li>
</ol>
<p>蓝绿部署无需停机，并且风险较小。</p>
<ol start="3">
<li>部署过程</li>
</ol>
<p>部署版本 1 的应用（初始的状态）<br>所有外部请求的流量都打到这个版本上。<br>部署版本 2 的应用<br>版本 2 的代码与版本 1 不同(新功能、Bug修复等)。</p>
<p>将流量从版本 1 切换到版本 2。<br>如版本 2 测试正常，就删除版本 1 正在使用的资源（例如实例），从此正式用版本 2。<br>4. 小结</p>
<p>从过程不难发现，在部署的过程中，我们的应用始终在线。并且新版本上线的过程中，并没有修改老版本的任何内容，在部署期间，老版本的状态不受影响，这样风险很小。并且只要老版本的资源不被删除，理论上，我们可以在任何时间回滚到老版本。</p>
<ol start="5">
<li>蓝绿发布的注意事项</li>
</ol>
<p>当你切换到蓝色环境时，需要妥当处理未完成的业务和新的业务。如果你的数据库后端无法处理，会是一个比较麻烦的问题。</p>
<p>可能会出现需要同时处理微服务架构应用和传统架构应用的情况，如果在蓝绿部署中协调不好这两者，还是有可能会导致服务停止。<br>需要提前考虑数据库与应用部署同步迁移/回滚的问题。<br>蓝绿部署需要有基础设施支持。<br>在非隔离基础架构（ VM 、 Docker 等）上执行蓝绿部署，蓝色环境和绿色环境有被摧毁的风险。<br>6. 优势和不足</p>
<p>优势<br>升级切换和回退速度非常快。</p>
<p>不足<br>切换是全量的，如果 V2 版本有问题，则对用户体验有直接影响。</p>
<p>需要两倍机器资源。</p>
<ol start="7">
<li>适用场合</li>
</ol>
<p>对用户体验有一定容忍度的场景。<br>机器资源有富余或者可以按需分配（AWS 云，或自建容器云）。</p>
<h2 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h2><ol>
<li>定义</li>
</ol>
<p>灰度发布是指在黑与白之间，能够平滑过渡的一种发布方式。AB Test 就是一种灰度发布方式，让一部分用户继续用 A，一部分用户开始用 B，如果用户对 B 没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到 B 上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度。</p>
<ol start="2">
<li><p>A/B Testing<br>A/B 测试是用来测试应用功能表现的方法，例如可用性、受欢迎程度、可见性等等。 A/B 测试通常用在应用的前端上，不过当然需要后端来支持。<br>A/B 测试与蓝绿部署的区别在于， A/B 测试目的在于通过科学的实验设计、采样样本代表性、流量分割与小流量测试等方式来获得具有代表性的实验结论，并确信该结论在推广到全部流量可信；蓝绿部署的目的是安全稳定地发布新版本应用，并在必要时回滚。</p>
</li>
<li><p>金丝雀发布</p>
</li>
</ol>
<p>我们平常所说的金丝雀部署也是灰度发布的一种方式，在原有版本可用的情况下，同时部署一个新版本应用作为「金丝雀」服务器来测试新版本的性能和表现，以保障整体系统稳定的情况下，尽早发现、调整问题。</p>
<blockquote>
<p>矿井中的金丝雀：17 世纪，英国矿井工人发现，金丝雀对瓦斯这种气体十分敏感。空气中哪怕有极其微量的瓦斯，金丝雀也会停止歌唱；当瓦斯含量超过一定限度时，虽然鲁钝的人类毫无察觉，金丝雀却早已毒发身亡。当时在采矿设备相对简陋的条件下，工人们每次下井都会带上一只金丝雀作为瓦斯检测指标，以便在危险状况下紧急撤离。</p>
</blockquote>
<p>灰度发布／金丝雀发布由以下几个步骤组成：</p>
<p>准备好部署各个阶段的工件，包括：构建工件，测试脚本，配置文件和部署清单文件。<br>从负载均衡列表中移除掉「金丝雀」服务器。<br>升级「金丝雀」应用（排掉原有流量并进行部署）。<br>对应用进行自动化测试。<br>将「金丝雀」服务器重新添加到负载均衡列表中（连通性和健康检查）。<br>如果「金丝雀」在线使用测试成功，升级剩余的其他服务器（否则就回滚）。<br>除此之外灰度发布还可以设置路由权重，动态调整不同的权重来进行新老版本的验证。</p>
<ol start="4">
<li>优势和不足</li>
</ol>
<p>优势<br>用户体验影响小，灰度发布过程出现问题只影响少量用户。</p>
<p>不足<br>发布自动化程度不够，发布期间可引发服务中断。</p>
<h2 id="滚动发布（Rolling-Update-Deployment）"><a href="#滚动发布（Rolling-Update-Deployment）" class="headerlink" title="滚动发布（Rolling Update Deployment）"></a>滚动发布（Rolling Update Deployment）</h2><p>在金丝雀发布基础上的进一步优化改进，是一种自动化程度较高的发布方式，用户体验比较平滑，是目前成熟型技术组织所采用的主流发布方式。</p>
<ol>
<li>定义</li>
</ol>
<p>滚动发布：一般是取出一个或者多个服务器停止服务，执行更新，并重新将其投入使用。周而复始，直到集群中所有的实例都更新成新版本。</p>
<ol start="2">
<li>特点</li>
</ol>
<p>这种部署方式相对于蓝绿部署，更加节约资源——它不需要运行两个集群、两倍的实例数。我们可以部分部署，例如每次只取出集群的 20% 进行升级。</p>
<ol start="3">
<li>部署过程</li>
</ol>
<p>滚动式发布一般先发 1 台，或者一个小比例，如 2% 服务器，主要做流量验证用，类似金丝雀 (Canary) 测试。<br>滚动式发布需要比较复杂的发布工具和智能 LB，支持平滑的版本替换和流量拉入拉出。<br>每次发布时，先将老版本 V1 流量从 LB 上摘除，然后清除老版本，发新版本 V2，再将 LB 流量接入新版本。这样可以尽量保证用户体验不受影响。<br>一次滚动式发布一般由若干个发布批次组成，每批的数量一般是可以配置的（可以通过发布模板定义）。例如第一批 1 台（金丝雀），第二批 10%，第三批 50%，第四批 100%。每个批次之间留观察间隔，通过手工验证或监控反馈确保没有问题再发下一批次，所以总体上滚动式发布过程是比较缓慢的 (其中金丝雀的时间一般会比后续批次更长，比如金丝雀 10 分钟，后续间隔 2 分钟)。<br>回退是发布的逆过程，将新版本流量从 LB 上摘除，清除新版本，发老版本，再将 LB 流量接入老版本。和发布过程一样，回退过程一般也比较慢的。<br>4. 优势和不足</p>
<p>优势<br>用户体验影响小，体验较平滑。</p>
<p>不足<br>发布和回退时间比较缓慢。</p>
<p>发布工具比较复杂，LB 需要平滑的流量摘除和拉入能力。</p>
<h2 id="其它发布方式"><a href="#其它发布方式" class="headerlink" title="其它发布方式"></a>其它发布方式</h2><p>上述都是偏传统的发布方式，能覆盖大部分应用发布场景。针对一些关键新功能的上线发布，或者一些特定的场景，还有一些特殊的发布方式。</p>
<p>功能开关发布</p>
<p>利用代码中的功能开关（Feature Flag/Toggle/Switch）来控制发布逻辑，一般不需要复杂的发布工具和智能 LB 配合，是一种相对比较低成本和简单的发布方式。这种方式也是支持现代 DevOps 理念，研发人员可以灵活定制和自助完成的发布方式。功能开关的原理如下图所示：</p>
<ol>
<li>部署过程</li>
</ol>
<p>功能开关发布需要一个配置中心或者开关中心这样的服务支持，例如携程的 Apollo 配置中心或者开源的 FF4J，这些都支持开关发布。业界还有专门的功能开关 SaaS 服务，例如 LaunchDarkly。通过配置中心，运维或研发人员可以在运行期动态配置功能开关的值。当然，功能开关发布只是配置中心的一种使用场景，配置中心还能支持其它很多动态配置场景。<br>功能开关服务一般提供客户端 SDK，方便开发人员集成。在运行期，客户端 SDK 会同步最新的开关值，技术实现有推方式 (push)，也有拉方式 (pull)，或者推拉结合方式。<br>新功能（V2 new feature）和老功能（V1 old feature）住在同一套代码中，新功能隐藏在开关后面，如果开关没有打开，则走老代码逻辑，如果开关打开，则走新代码逻辑。技术实现上可以理解为一个简单的 if/else 逻辑。<br>应用上线后，开关先不打开，然后运维或研发人员通过开关中心打开新功能，经过流量验证新功能没有问题，则发布完成；如果有问题，则随时可以通过开关中心切回老功能逻辑。<br>2. 优势和不足</p>
<p>优势<br>升级切换和回退速度非常快。</p>
<p>相对于复杂的发布工具，实施比较简单，成本相对低廉。</p>
<p>研发能够灵活定制发布逻辑，支持 DevOps 自助发布。</p>
<p>不足<br>切换是全量的，如果 V2 版本有问题，则对用户体验有直接影响。</p>
<p>对代码有侵入，代码逻辑会变复杂，需要定期清理老版本逻辑，维护成本变高。</p>
]]></content>
      <categories>
        <category>ops</category>
      </categories>
      <tags>
        <tag>deploy</tag>
      </tags>
  </entry>
  <entry>
    <title>面试问题复习</title>
    <url>/2020/09/13/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>TCP三次握手四次挥手</p>
<a id="more"></a>
<p>TCP三次握手四次挥手面试题：<br><a href="https://www.cnblogs.com/Qing-840/p/9283367.html">https://www.cnblogs.com/Qing-840/p/9283367.html</a></p>
<ol>
<li><p>C/S B/S<br> client————–server<br> browser————-server</p>
<p> 其中server端应该注意问题：</p>
<pre><code> 1、服务端应该保证稳定运行，并且最好是开启之后就一直运行到世界末日
 2、服务端要支持并发
 3、服务端要绑定唯一的地址</code></pre>
</li>
<li><p>什么是网络<br> 网络=物理连接介质+互联网通信协议</p>
<p> 而互联网通信协议就是计算机界的英语</p>
</li>
</ol>
<ol start="3">
<li>定位对方在哪的地址是<br> ip+port可以定位到全世界范围内独一无二的一个网络应用程序<br> arp协议会自动将ip解析成mac地址</li>
</ol>
<ul>
<li><p>数据链路层<br>arp协议功能：广播的方式发送数据包，获取目标主机的mac地址<br>IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>
</li>
<li><p>网络层<br>一个个彼此隔离的小的局域网组成的，那么如果所有的通信都采用以太网的广播方式，那么一台机器发送的包全世界都会收到，</p>
</li>
</ul>
<p>这就不仅仅是效率低的问题了，这会是一种灾难<br>须找出一种方法来区分哪些计算机属于同一广播域，哪些不是，如果是就采用广播的方式发送，如果不是，</p>
<p>就采用路由的方式（向不同广播域／子网分发数据包），mac地址是无法区分的，它只跟厂商有关</p>
<p>网络层功能：引入一套新的地址用来区分不同的广播域／子网，这套地址即网络地址</p>
<p>网络层由来：有了ethernet、mac地址、广播的发送方式，世界上的计算机就可以彼此通信了，问题是世界范围的互联网是由</p>
<ul>
<li>传输层<br>传输层的由来：网络层的ip帮我们区分子网，以太网层的mac帮我们找到主机，然后大家使用的都是应用程序，你的电脑上可能同时开启qq，暴风影音，等多个应用程序，</li>
</ul>
<p>那么我们通过ip和mac找到了一台特定的主机，<strong>如何标识这台主机上的应用程序，答案就是端口，端口即应用程序与网卡关联的编号。</strong></p>
<p>传输层功能：建立端口到端口的通信</p>
<p>补充：端口范围0-65535，0-1023为系统占用端口</p>
<p>tcp协议：</p>
<p>可靠传输，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>
<p>以太网头    ip 头                  tcp头                  数据                                                    </p>
<p>udp协议：</p>
<p>不可靠传输，”报头”部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p>
<p>以太网头    ip头                         udp头                               数据                                           </p>
<img src="/2020/09/13/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%A4%8D%E4%B9%A0/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" class title="三次握手四次挥手">

<p><strong>高并发的情况下会存在大量的timewait，timewait过高会占用大量内存和cpu使用率</strong></p>
<ul>
<li>优化timewait方法（待补充）</li>
</ul>
<p><strong>如果机器上存在大量SYN_RCVD状态，证明遭遇泛洪攻击</strong></p>
<ul>
<li>优化建议（待补充）</li>
</ul>
<ul>
<li>应用层<br>应用层由来：用户使用的都是应用程序，均工作于应用层，互联网是开发的，大家都可以开发自己的应用程序，数据多种多样，必须规定好数据的组织形式 </li>
</ul>
<p>应用层功能：规定应用程序的数据格式。</p>
<p>例：TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。</p>
<ul>
<li>socket<br>我们知道两个进程如果需要进行通讯最基本的一个前提能能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道IP层的ip地址可以唯一标示主机，而TCP层协议和端口号可以唯一标示主机的一个进程，这样我们可以利用ip地址＋协议＋端口号唯一标示网络中的一个进程。</li>
</ul>
<p>能够唯一标示网络中的进程后，它们就可以利用socket进行通信了，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用已实现进程在网络中通信。</p>
<blockquote>
<p>总结：套接字是什么，位于应用层与传输层之间，用来把传输层以下的协议封装好，提供好简单的接口；但凡编写基于网络通信的cs架构的软件，基于套接字去写就可以了。遵循套接字简单的接口规范，写出来的程序自然是遵循tcp/udp协议的了。</p>
</blockquote>
<blockquote>
<p><strong>也有人将socket说成ip+port，ip是用来标识互联网中的一台主机的位置，而port是用来标识这台机器上的一个应用程序，ip地址是配置到网卡上的，而port是应用程序开启的，ip与port的绑定就标识了互联网中独一无二的一个应用程序;而程序的pid是同一台机器上不同进程或者线程的标识</strong></p>
</blockquote>
<img src="/2020/09/13/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%A4%8D%E4%B9%A0/socket%E5%A5%97%E6%8E%A5%E5%AD%97.png" class title="套接字">

<p>socket起源于UNIX，在Unix一切皆文件哲学的思想下，socket是一种”打开—读/写—关闭”模式的实现，服务器和客户端各自维护一个”文件”，在建立连接打开后，可以向自己文件写入内容供对方读取或者读取对方内容，通讯结束时关闭文件。</p>
<ul>
<li>套接字工作流程<img src="/2020/09/13/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%A4%8D%E4%B9%A0/%E5%A5%97%E6%8E%A5%E5%AD%97%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg" class title="套接字">

</li>
</ul>
<p>套接字之所以简单是因为：客户端只需要调connect接口，服务端调accept接口；客户端干了什么：发syn，服务端回ack+syn，客户端再回ack； connect和accept接口把三次握手细节全部封装好了。</p>
<p>粘包问题<br>TCP独有（流式协议）<br>把数据像水流一样发出去；TCP协议nagle算法会把时间间隔较短，数据量较小的数据粘到一起，基于网络发出去。<br>解决方案：收数据的时候收干净就好了</p>
]]></content>
  </entry>
  <entry>
    <title>kubernetes网络通信原理</title>
    <url>/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>了解通信原理</p>
<a id="more"></a>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>1、网络的命名空间：Linux在网络栈中引入网络命名空间，将独立的网络协议栈隔离到不同的命令空间中，彼此间无法通信；docker利用这一特性，实现不容器间的网络隔离。</p>
<p>2、Veth设备对：也叫虚拟网络接口对。Veth设备对的引入是为了实现在不同网络命名空间的通信。</p>
<p>3、Iptables/Netfilter：Netfilter负责在内核中执行各种挂接的规则(过滤、修改、丢弃等)，运行在内核 模式中；Iptables模式是在用户模式下运行的进程，负责协助维护内核中Netfilter的各种规则表；通过二者的配合来实现整个Linux网络协议栈中灵活的数据包处理机制。</p>
<p>4、网桥：网桥是一个二层网络设备,通过网桥可以将linux支持的不同的端口连接起来,并实现类似交换机那样的多对多的通信。</p>
<p>5、路由：Linux系统包含一个完整的路由功能，当IP层在处理数据发送或转发的时候，会使用路由表来决定发往哪里。</p>
<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>Kubernetes对集群内部的网络进行了重新抽象，以实现整个集群网络扁平化。我们可以理解网络模型时，可以完全抽离物理节点去理解，我们用图说话，先有基本印象。</p>
<img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/kubernetes-proxy-model.jpg" class title="kubernetes网络通信原理">

<h3 id="一个Service"><a href="#一个Service" class="headerlink" title="一个Service"></a>一个Service</h3><p>Service是Kubernetes为为屏蔽这些后端实例（Pod）的动态变化和对多实例的负载均衡而引入的资源对象。Service通常与deployment绑定，定义了服务的访问入口地址，应用(Pod)可以通过这个入口地址访问其背后的一组由Pod副本组成的集群实例。Service与其后端Pod副本集群之间则是通过Label Selector来实现映射。</p>
<p>Service的类型(Type)决定了Service如何对外提供服务，根据类型不同，服务可以只在Kubernetes cluster中可见，也可以暴露到集群外部。Service有三种类型，ClusterIP，NodePort和LoadBalancer。具体的使用场景会在下文中进行阐述。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc --selector app&#x3D;nginx</span><br><span class="line">NAME   TYPE     CLUSTER-IP  EXTERNAL-IP PORT(S) AGE</span><br><span class="line">nginx ClusterIP 172.19.0.166   &lt;none&gt;    80&#x2F;TCP  1m</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">describe</span> <span class="string">svc</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">Namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">Labels:</span> <span class="string">app=nginx</span></span><br><span class="line"><span class="attr">Annotations:</span> <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">Selector:</span> <span class="string">app=nginx</span></span><br><span class="line"><span class="attr">Type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">IP:</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.166</span></span><br><span class="line"><span class="attr">Port:</span> <span class="string">&lt;unset&gt;</span> <span class="number">80</span><span class="string">/TCP</span></span><br><span class="line"><span class="attr">TargetPort:</span> <span class="number">80</span><span class="string">/TCP</span></span><br><span class="line"><span class="attr">Endpoints:</span> <span class="number">172.16</span><span class="number">.2</span><span class="number">.125</span><span class="string">:80,172.16.2.229:80</span></span><br><span class="line"><span class="attr">Session Affinity:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">Events:</span> <span class="string">&lt;none&gt;</span></span><br></pre></td></tr></table></figure>
<p>该svc后端代理了2个Pod实例:172.16.2.125:80,172.16.2.229:80</p>
<h3 id="三个IP"><a href="#三个IP" class="headerlink" title="三个IP"></a>三个IP</h3><p>Kubernetes为描述其网络模型的IP对象，抽象出Cluster IP和Pod IP的概念。</p>
<p>PodIP是Kubernetes集群中每个Pod的IP地址。它是Docker Engine 根据docker0网桥的IP地址段进行分配的，是一个虚拟的二层网络。Kubernetes中Pod间能够彼此直接通讯，Pod里的容器访问另外一个Pod里的容器，是通过Pod IP所在进行通信。</p>
<p>Cluster IP仅作用于Service，其没有实体对象所对应，因此Cluster IP无法被ping通。它的作用是为Service后端的实例提供统一的访问入口。当访问ClusterIP时，请求将被转发到后端的实例上，默认是轮询方式。Cluster IP和Service一样由kube-proxy组件维护，其实现方式主要有两种，<strong>iptables</strong>和<strong>IPVS</strong>。在<strong>1.8版本后kubeproxy开始支持IPVS方式</strong>。在上例中，SVC的信息中包含了Cluster IP。</p>
<p>这里未列出nodeip概念，由于其本身是物理机的网卡IP。因此可理解为nodeip就是物理机IP。</p>
<h3 id="三个Port"><a href="#三个Port" class="headerlink" title="三个Port"></a>三个Port</h3><p>在Kubernetes中，涉及容器，Pod，Service，集群各等多个层级的对象间的通信，为在网络模型中区分各层级的通信端口，这里对Port进行了抽象。</p>
<h4 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h4><p>该Port非一般意义上的TCP/IP中的Port概念，它是特指Kubernetes中Service的port，是Service间的访问端口，例如Mysql的Service默认3306端口。它仅对进群内容器提供访问权限，而无法从集群外部通过该端口访问服务。</p>
<h4 id="nodePort"><a href="#nodePort" class="headerlink" title="nodePort"></a>nodePort</h4><p>nodePort为外部机器提供了访问集群内服务的方式。比如一个Web应用需要被其他用户访问，那么需要配置type=NodePort，而且配置nodePort=30001，那么其他机器就可以通过浏览器访问scheme://node:30001访问到该服务，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;node:30001</span><br></pre></td></tr></table></figure>
<h4 id="targetPort"><a href="#targetPort" class="headerlink" title="targetPort"></a>targetPort</h4><p>targetPort是容器的端口（最根本的端口入口），与制作容器时暴露的端口一致（DockerFile中EXPOSE），例如<a href="http://docker.io官方的nginx暴露的是80端口./">http://docker.io官方的nginx暴露的是80端口。</a></p>
<p>eg:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mallh5-service</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">abcdocker</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">  <span class="attr">app:</span> <span class="string">mallh5web</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">     <span class="attr">port:</span> <span class="number">3017</span></span><br><span class="line">     <span class="attr">targetPort:</span> <span class="number">5003</span></span><br><span class="line">     <span class="attr">nodePort:</span> <span class="number">31122</span></span><br></pre></td></tr></table></figure>
<p>举出了一个service的yaml，其部署在abcdocker的namespace中。这里配置了nodePort，因此其类型Type就是NodePort，注意大小写。若没有配置nodePort，那这里需要填写ClusterIP，即表示只支持集群内部服务访问。</p>
<h2 id="集群内部通信"><a href="#集群内部通信" class="headerlink" title="集群内部通信"></a>集群内部通信</h2><h3 id="单节点通信"><a href="#单节点通信" class="headerlink" title="单节点通信"></a>单节点通信</h3><p>集群单节点内的通信，主要包括两种情况，同一个pod内的多容器间通信以及同一节点不同pod间的通信。由于不涉及跨节点访问，因此流量不会经过物理网卡进行转发。</p>
<p>查看路由表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@node-1:&#x2F;opt&#x2F;bin# route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination Gateway Genmask Flags Metric Ref Use Iface</span><br><span class="line">0.0.0.0 172.23.100.1 0.0.0.0 UG 0 0 0 eth0</span><br><span class="line">10.1.0.0 0.0.0.0 255.255.0.0 U 0 0 0 flannel.1 #flannel 网络内跨节点的通信会交给 flannel.1 处理</span><br><span class="line">10.1.1.0 0.0.0.0 255.255.255.0 U 0 0 0 docker0 #flannel 网络内节点内的通信会走 docker0</span><br></pre></td></tr></table></figure>

<h3 id="1-Pod内通信"><a href="#1-Pod内通信" class="headerlink" title="1 Pod内通信"></a>1 Pod内通信</h3><img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/pod%E5%86%85%E9%80%9A%E4%BF%A1.jpg" class title="kubernetes网络通信原理">
<p>同一个pod内共享网络命名空间，容器之间通过访问127.0.0.1:（端口）即可。图中的veth<em>即指veth对的一端（另一端未标注，但实际上是成对出现），该veth对是由Docker Daemon挂载在docker0网桥上，另一端添加到容器所属的网络命名空间，图上显示是容器中的eth0。<br>图中演示了bridge模式下的容器间通信。docker1向docker2发送请求，docker1，docker2均与docker0建立了veth对进行通讯。<br>当请求经过docker0时，由于容器和docker0同属于一个子网，因此请求经过docker2与docker0的veth</em>对，转发到docker2，该过程并未跨节点，因此不经过eth0。</p>
<p>总结：同一个pod内的多个容器间的通信，通过lo即可实现；</p>
<h3 id="Pod间通信"><a href="#Pod间通信" class="headerlink" title="Pod间通信"></a>Pod间通信</h3><p>同节点pod间通信<br>由于Pod内共享网络命名空间（由pause容器创建），所以本质上也是同节点容器间的通信。同时，同一Node中Pod的默认路由都是docker0的地址，由于它们关联在同一个docker0网桥上，地址网段相同，所有它们之间应当是能直接通信的。来看看实际上这一过程如何实现。如上图，Pod1中容器1和容器2共享网络命名空间，因此对pod外的请求通过pod1和Docker0网桥的veth对（图中挂在eth0和ethx上）实现。</p>
<p>总结：<br>同一Node中Pod的默认路由都是docker0的地址<br>pod ip &lt;—&gt; pod ip，pod和pod之间要不经过任何转换即可通信；</p>
<img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/%E5%90%8C%E8%8A%82%E7%82%B9pod%E9%97%B4%E9%80%9A%E4%BF%A1.jpg" class title="kubernetes网络通信原理">

<h3 id="pod和service通信"><a href="#pod和service通信" class="headerlink" title="pod和service通信"></a>pod和service通信</h3><p>pod ip &lt;—-&gt; cluster ip（即service ip）&lt;—-&gt;pod ip，他们通过iptables或ipvs实现通信，另外大家要注意ipvs取代不了iptables，因为ipvs只能做负载均衡，而做不了nat转换；</p>
<h3 id="跨节点通信"><a href="#跨节点通信" class="headerlink" title="跨节点通信"></a>跨节点通信</h3><h4 id="CNI：容器网络接口"><a href="#CNI：容器网络接口" class="headerlink" title="CNI：容器网络接口"></a>CNI：容器网络接口</h4><p>CNI 是一种标准，它旨在为容器平台提供网络的标准化。不同的容器平台（比如目前的 kubernetes、mesos 和 rkt）能够通过相同的接口调用不同的网络组件。</p>
<p>目前kubernetes支持的CNI组件种类很多，例如：flannel，callco，canel，kube-router。</p>
<p>flanel只支持网络通讯，但是不支持网络策略。<br>callco网络通讯和网络策略都支持。<br>canel：flanel+callco合起来的功能。</p>
<p>主流的跨主机通信方案主要有一下几种：<br>1）基于隧道的overlay网络：按隧道类型来说，不同的公司或者组织有不同的实现方案。docker原生的overlay网络就是基于vxlan隧道实现的。ovn则需要通过geneve或者stt隧道来实现的。flannel最新版本也开始默认基于vxlan实现overlay网络。</p>
<p>2）基于包封装的overlay网络：基于UDP封装等数据包包装方式，在docker集群上实现跨主机网络。典型实现方案有weave、flannel的早期版本。</p>
<p>3）基于三层实现SDN网络：基于三层协议和路由，直接在三层上实现跨主机网络，并且通过iptables实现网络的安全隔离。典型的方案为Project Calico。同时对不支持三层路由的环境，Project Calico还提供了基于IPIP封装的跨主机网络实现</p>
<p>总结：<br>    1）虚拟网桥，虚拟网卡，多个容器共用一个虚拟网卡进行通信；<br>    2）多路复用：MacVLAN，多个容器共用一个物理网卡进行通信；<br>    3）硬件交换：SR-LOV，一个物理网卡可以虚拟出多个接口，这个性能最好。</p>
<h4 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h4><img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/flannel1.jpg" class title="kubernetes网络通信原理">
<p>集群内跨节点通信涉及到不同的子网间通信，仅靠docker0无法实现，这里需要借助CNI网络插件来实现。图中展示了使用flannel实现跨节点通信的方式。</p>
<p>简单说来，flannel的用户态进程flanneld会为每个node节点创建一个flannel.1的网桥，根据etcd或apiserver的全局统一的集群信息为每个node分配全局唯一的网段，避免地址冲突。同时会为docker0和flannel.1创建veth对，docker0将报文丢给flannel.1,。</p>
<p>Flanneld维护了一份全局node的网络表，通过flannel.1接收到请求后，根据node表，将请求二次封装为UDP包，扔给eth0，由eth0出口进入物理网路发送给目的node。</p>
<p>在另一端以相反的流程。Flanneld解包并发往docker0，进而发往目的Pod中的容器</p>
<p>两个节点上的pod可以借助flannel隧道进行通信。默认使用的VxLAN协议，因为它有额外开销，所以性能有点低。</p>
<p>flannel第二种协议叫host-gw(host gateway)，即Node节点把自己的网络接口当做pod的网关使用，从而使不同节点上的node进行通信，这个性能比VxLAN高，因为它没有额外开销。不过他有个缺点， 就是各node节点必须在同一个网段中 。</p>
<p>另外，如果两个pod所在节点在同一个网段中 ，可以让VxLAN也支持host-gw的功能， 即直接通过物理网卡的网关路由转发，而不用隧道flannel叠加，从而提高了VxLAN的性能，这种flannel的功能叫directrouting。<br>flannel支持多种后端：<br>    1.Vxlan<br>        1.1 vxlan<br>        1.2 Dirextrouting<br>    2.host-gw：Host Gateway  #不推荐，只能在二层网络中，不支持跨网络，如果有成千上万的Pod，容易产生广播风暴<br>    3.UDP：性能差</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                             READY     STATUS             RESTARTS   AGE       IP             NODE</span><br><span class="line">myapp-deploy-69b47bc96d-79fqh    1/1       Running            4          7d        10.244.1.97    node1</span><br><span class="line">myapp-deploy-69b47bc96d-tc54k    1/1       Running            4          7d        10.244.2.88    node2</span><br><span class="line">[root@master ~]<span class="comment"># kubectl exec -it myapp-deploy-69b47bc96d-79fqh -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># ping 10.244.2.88 #ping对方Node上容器的ip</span></span><br><span class="line">PING 10.244.2.88 (10.244.2.88): 56 data bytes</span><br><span class="line">64 bytes from 10.244.2.88: seq=0 ttl=62 time=0.459 ms</span><br><span class="line">64 bytes from 10.244.2.88: seq=0 ttl=62 time=0.377 ms</span><br><span class="line">64 bytes from 10.244.2.88: seq=1 ttl=62 time=0.252 ms</span><br><span class="line">64 bytes from 10.244.2.88: seq=2 ttl=62 time=0.261 ms</span><br></pre></td></tr></table></figure>
<p>在其他节点上抓包，发现根本就在ens192上抓不到包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># tcpdump -i ens192 -nn icmp</span></span><br><span class="line">[root@master ~]<span class="comment"># yum install bridge-utils -y</span></span><br><span class="line">[root@master ~]<span class="comment"># brctl show docker0</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">docker08000.024283f8b8ffno</span><br><span class="line">[root@master ~]<span class="comment"># brctl show cni0</span></span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">cni08000.0a580af40001noveth6ec94aab</span><br><span class="line">vethf703483a</span><br><span class="line">vethff579703</span><br></pre></td></tr></table></figure>
<p> 可以看到veth这些接口都是桥接到cni0上的。</p>
<pre><code>brctl show表示查看已有网桥。</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;[root@node1 ~]<span class="comment">#  tcpdump -i cni0 -nn icmp</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on cni0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">23:40:11.370754 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 96, length 64</span><br><span class="line">23:40:11.370988 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 96, length 64</span><br><span class="line">23:40:12.370888 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 97, length 64</span><br><span class="line">23:40:12.371090 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 97, length 64</span><br><span class="line">^X23:40:13.371015 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 98, length 64</span><br><span class="line">23:40:13.371239 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 98, length 64</span><br><span class="line">23:40:14.371128 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 99, length 64</span><br></pre></td></tr></table></figure>
<p>可以看到，在node节点，可以在cni0端口上抓到容器里面的Ping时的包。</p>
<pre><code>其实，上面ping时的数据流是先从cni0进来，然后从flannel.1出去，最后借助物理网卡ens32发出去。所以，我们在flannel.1上也能抓到包：</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment">#  tcpdump -i flannel.1 -nn icmp</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on flannel.1, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">03:12:36.823315 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 12840, length 64</span><br><span class="line">03:12:36.823496 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 12840, length 64</span><br><span class="line">03:12:37.823490 IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 4864, seq 12841, length 64</span><br><span class="line">03:12:37.823634 IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 4864, seq 12841, length 64</span><br></pre></td></tr></table></figure>
<p>同样，在ens192物理网卡上也能抓到包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># tcpdump -i ens192 -nn host 172.16.1.102  #172.16.1.102是node2的物理ip</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">10:59:24.234174 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 0, length 64</span><br><span class="line">10:59:24.234434 IP 172.16.1.102.54894 &gt; 172.16.1.101.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 7168, seq 0, length 64</span><br><span class="line">10:59:25.234301 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 1, length 64</span><br><span class="line">10:59:25.234469 IP 172.16.1.102.54894 &gt; 172.16.1.101.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 7168, seq 1, length 64</span><br><span class="line">10:59:26.234415 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 2, length 64</span><br><span class="line">10:59:26.234592 IP 172.16.1.102.54894 &gt; 172.16.1.101.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.2.88 &gt; 10.244.1.97: ICMP <span class="built_in">echo</span> reply, id 7168, seq 2, length 64</span><br><span class="line">10:59:27.234528 IP 172.16.1.101.60617 &gt; 172.16.1.102.8472: OTV, flags [I] (0x08), overlay 0, instance 1</span><br><span class="line">IP 10.244.1.97 &gt; 10.244.2.88: ICMP <span class="built_in">echo</span> request, id 7168, seq 3, length 64</span><br></pre></td></tr></table></figure>
<pre><code>下面我们把flannel的通信模式改成directrouting的方式</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master flannel]<span class="comment"># cd /root/manifests/flannel</span></span><br><span class="line">[root@master flannel]<span class="comment"># kubectl edit configmap kube-flannel-cfg -n kube-system</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;10.244.0.0/16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Backend&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;vxlan&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Directrouting&quot;</span>: <span class="literal">true</span> <span class="comment">#加一行这个</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">[root@master flannel]<span class="comment"># ip route show</span></span><br><span class="line">default via 172.16.1.254 dev ens192 proto static metric 100 </span><br><span class="line">10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1 <span class="comment">#访问10.244.0.0/24要通过10.244.0.1</span></span><br><span class="line">10.244.1.0/24 via 10.244.1.0 dev flannel.1 onlink <span class="comment">#10.244.1.0是配置在flannel上的地址，表示访问10.244.1.0/24通过本机flannel.1上的10.244.1.0送出去，下同</span></span><br><span class="line">10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink  <span class="comment">#10.244.2.0是配置在flannel上的地址</span></span><br><span class="line">172.16.1.0/24 dev ens192 proto kernel scope link src 172.16.1.100 metric 100</span><br><span class="line"></span><br><span class="line">[root@master flannel]<span class="comment"># kubectl get configmap kube-flannel-cfg -o json -n kube-system</span></span><br><span class="line">　　　　　　<span class="string">&quot;net-conf.json&quot;</span>: <span class="string">&quot;&#123;\n \&quot;Network\&quot;: \&quot;10.244.0.0/16\&quot;,\n \&quot;Backend\&quot;: &#123;\n \&quot;Type\&quot;: \&quot;vxlan\&quot;,\n \&quot;Directrouting\&quot;: true\n &#125;\n&#125;\n&quot;</span></span><br></pre></td></tr></table></figure>
<p>看到有Directrouting，说明生效了。</p>
<pre><code>重启整个k8s，然后再看：</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># ip route show</span></span><br><span class="line">default via 172.16.1.254 dev ens192 proto static metric 100 </span><br><span class="line">10.244.0.0/24 dev cni0 proto kernel scope link src 10.244.0.1 <span class="comment">#访问本机直接在本机直接转发，而不需要其他接口，这就是directrouting</span></span><br><span class="line">10.244.1.0/24 via 172.16.1.101 dev ens192 <span class="comment">#看到现在访问10.244.1.0，通过本地物理网卡ens192上的172.16.1.101送出去，即通过物理网卡通信了，而不再通过隧道flannel通信。</span></span><br><span class="line">10.244.2.0/24 via 172.16.1.102 dev ens192 </span><br><span class="line">172.16.1.0/24 dev ens192 proto kernel scope link src 172.16.1.100 metric 100 </span><br><span class="line">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1</span><br><span class="line">继续登录到一个pod中进行ping测试：</span><br><span class="line"></span><br><span class="line">[root@master ~]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                             READY     STATUS             RESTARTS   AGE       IP             NODE</span><br><span class="line">myapp-deploy-69b47bc96d-75g2b    1/1       Running            0          12m       10.244.1.124   node1</span><br><span class="line">myapp-deploy-69b47bc96d-jwgwm    1/1       Running            0          3s        10.244.2.100   node2</span><br><span class="line">[root@master ~]<span class="comment"># kubectl exec  -it myapp-deploy-69b47bc96d-75g2b -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># ping 10.244.2.100</span></span><br><span class="line">PING 10.244.2.100 (10.244.2.100): 56 data bytes</span><br><span class="line">64 bytes from 10.244.2.100: seq=0 ttl=62 time=0.536 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=1 ttl=62 time=0.206 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=2 ttl=62 time=0.206 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=3 ttl=62 time=0.203 ms</span><br><span class="line">64 bytes from 10.244.2.100: seq=4 ttl=62 time=0.210 ms</span><br><span class="line">[root@node1 ~]<span class="comment"># tcpdump -i ens192 -nn icmp</span></span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">12:31:10.899403 IP 10.244.1.124 &gt; 10.244.2.100: ICMP <span class="built_in">echo</span> request, id 8960, seq 24, length 64</span><br><span class="line">12:31:10.899546 IP 10.244.2.100 &gt; 10.244.1.124: ICMP <span class="built_in">echo</span> reply, id 8960, seq 24, length 64</span><br><span class="line">12:31:11.899505 IP 10.244.1.124 &gt; 10.244.2.100: ICMP <span class="built_in">echo</span> request, id 8960, seq 25, length 64</span><br><span class="line">12:31:11.899639 IP 10.244.2.100 &gt; 10.244.1.124: ICMP <span class="built_in">echo</span> reply, id 8960, seq 25, length 64</span><br><span class="line">通过抓包可以看到，现在在pod中进行互ping，是从物理网卡ens192进出的，这就是directrouting，这种性能比默认vxlan高。</span><br></pre></td></tr></table></figure>
<h2 id="外部访问集群"><a href="#外部访问集群" class="headerlink" title="外部访问集群"></a>外部访问集群</h2><p>从集群外访问集群有多种方式，比如loadbalancer，Ingress，nodeport，nodeport和loadbalancer是service的两个基本类型，是将service直接对外暴露的方式，ingress则是提供了七层负载均衡，其基本原理将外部流量转发到内部的service，再转发到后端endpoints，在平时的使用中，我们可以依据具体的业务需求选用不同的方式。这里主要介绍nodeport和ingress方式。</p>
<h3 id="Nodeport"><a href="#Nodeport" class="headerlink" title="Nodeport"></a>Nodeport</h3><p>通过将Service的类型设置为NodePort，就可以在Cluster中的主机上通过一个指定端口暴露服务。注意通过Cluster中每台主机上的该指定端口都可以访问到该服务，发送到该主机端口的请求会被kubernetes路由到提供服务的Pod上。采用这种服务类型，可以在kubernetes cluster网络外通过主机IP：端口的方式访问到服务。</p>
<img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/nodeport.jpg" class title="kubernetes网络通信原理">
<p>这里给出一个influxdb的例子，我们也可以针对这个模板去修改成其他的类型：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">influxdb</span></span><br><span class="line">  <span class="attr">spec:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8086</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31112</span></span><br><span class="line">      <span class="attr">selector:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">influxdb</span></span><br></pre></td></tr></table></figure>

<h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><img src="/2020/08/11/kubernetes%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86/ingress.jpg" class title="kubernetes网络通信原理">
<p>Ingress是推荐在生产环境使用的方式，它起到了七层负载均衡器和Http方向代理的作用，可以根据不同的url把入口流量分发到不同的后端Service。外部客户端只看到<a href="http://foo.bar.com这个服务器,屏蔽了内部多个service的实现方式.采用这种方式,简化了客户端的访问,并增加了后端实现和部署的灵活性,可以在不影响客户端的情况下对后端的服务部署进行调整./">http://foo.bar.com这个服务器，屏蔽了内部多个Service的实现方式。采用这种方式，简化了客户端的访问，并增加了后端实现和部署的灵活性，可以在不影响客户端的情况下对后端的服务部署进行调整。</a></p>
<p>其部署的yaml可以参考如下模板：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line"> <span class="attr">annotations:</span></span><br><span class="line"> <span class="attr">ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">rules:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">test.name.com</span></span><br><span class="line"> <span class="attr">http:</span></span><br><span class="line"> <span class="attr">paths:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/test</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">service-1</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">8118</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/name</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">service-2</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">8228</span></span><br></pre></td></tr></table></figure>
<p>这里我们定义了一个ingress模板，定义通过<a href="http://test.name.com来访问服务,在虚拟主机http//test.name.com%E4%B8%8B%E9%9D%A2%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%A4%E4%B8%AAPath%EF%BC%8C%E5%85%B6%E4%B8%AD/test%E8%A2%AB%E5%88%86%E5%8F%91%E5%88%B0%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1s1%EF%BC%8C/name%E8%A2%AB%E5%88%86%E5%8F%91%E5%88%B0%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1s2%E3%80%82">http://test.name.com来访问服务，在虚拟主机http://test.name.com下面定义了两个Path，其中/test被分发到后端服务s1，/name被分发到后端服务s2。</a><br>集群中可以定义多个ingress，来完成不同服务的转发，这里需要一个ingress controller来管理集群中的Ingress规则。Ingress Contronler 通过与 Kubernetes API 交互，动态的去感知集群中 Ingress 规则变化，然后读取它，按照自定义的规则，规则就是写明了哪个域名对应哪个service，生成一段 Nginx 配置，再写到 Nginx-ingress-control的 Pod 里，这个 Ingress Contronler 的pod里面运行着一个nginx服务，控制器会把生成的nginx配置写入/etc/nginx.conf文件中，然后 reload使用配置生效。</p>
<p>Kubernetes提供的Ingress Controller模板如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line"> <span class="attr">annotations:</span></span><br><span class="line"> <span class="attr">ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">rules:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">foo.bar.com</span></span><br><span class="line"> <span class="attr">http:</span></span><br><span class="line"> <span class="attr">paths:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/foo</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">s1</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/bar</span></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"> <span class="attr">serviceName:</span> <span class="string">s2</span></span><br><span class="line"> <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>



<p><a href="https://blog.51cto.com/liuzhengwei521/2427495">https://blog.51cto.com/liuzhengwei521/2427495</a></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>py_day01_exercise</title>
    <url>/2020/08/09/py-day01-exercise/</url>
    <content><![CDATA[<p>温故知新</p>
<a id="more"></a>

<h3 id="1-列举你了解的编码及他们之间的区别？"><a href="#1-列举你了解的编码及他们之间的区别？" class="headerlink" title="1.列举你了解的编码及他们之间的区别？"></a>1.列举你了解的编码及他们之间的区别？</h3><ul>
<li>ASCII: python2默认的编码，一个字母是8位</li>
<li>Unicode(万国码)：一个字母是32位</li>
<li>UTF - 8：万国码的压缩码，最少用一个字节，最多用4个字节，一个中文是三个字节，24<br>位</li>
<li>GBK: 专门用作汉文的编码，其中一个中文用两个字节<blockquote>
<p>注意：用什么格式编写保存文件，就用什么格式打开</p>
</blockquote>
</li>
</ul>
<h3 id="2-Python2和Python3的区别？"><a href="#2-Python2和Python3的区别？" class="headerlink" title="2.Python2和Python3的区别？"></a>2.Python2和Python3的区别？</h3><ul>
<li>编码<ul>
<li>python2默认的编码是ACSII</li>
<li>python3默认的编码是UTF-8,所以开发过程中最好加一句：  # -<em>- coding:utf-8 -</em>-</li>
</ul>
</li>
<li>输入<ul>
<li>python2: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = raw_input(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>python3 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input(<span class="string">&quot;请输入姓名：&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>print<ul>
<li>python2: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>python3 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;123456&quot;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-python都有那些数据类型？"><a href="#3-python都有那些数据类型？" class="headerlink" title="3.python都有那些数据类型？"></a>3.python都有那些数据类型？</h3><p>Python基本数据类型一般分为：数字、字符串、列表、元组、字典、集合</p>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a><strong>数字</strong></h4><p>数字类型是不可更改的对象。对变量改变数字值就是生成/创建新的对象。<br>Python支持多种数字类型：<br>整型(标准整型和长整型(Python2.7及之前的有这种类型))、布尔型、双精度浮点型、十进制浮点型、复数。</p>
<h4 id="标准整型"><a href="#标准整型" class="headerlink" title="标准整型"></a><strong>标准整型</strong></h4><p>int，标准整型，在大多数32位机器上标准整型取值范围是-2^31到2^31-1，也就是-2147483648~2147483647，如果在64位机器使用64位编译器，那么这个系统的标准整型将是64位。</p>
<h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a><strong>布尔型</strong></h4><p>bool，从Python2.3开始Python中添加了布尔类型。布尔类型有两种True和False。对于没有__nozero__方法的对象默认是True。</p>
<p>对于值为0的数字、空集（空列表、空元组、空字典等）在Python中的布尔类型中都是False。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a><strong>浮点型</strong></h4><p>float，每个浮点型占8个字节（64位），完全遵守IEEE754号规范（52M/11E/1S）,其中52个位用于表示底，11个位用于表示指数（可表示的范围大约是±10**308.25），剩下的一个位表示符号。这看上去相当完美，然而，实际精度依赖于机器架构和创建Python解释器的编译器。</p>
<p>浮点型值通常都有一个小数点和一个可选的后缀e（大写或小写，表示科学计数法）。在e和指数之间可以用正（+）或负（-）表示指数的正负（正数的话可以省略符号）。更多内容，请点击python学习网。</p>
<p>以上是Python核心编程的对浮点型(双精度浮点型)的说明。经过Python实测浮点型默认长度是24字节如果超出这个范围会自动</p>
<p>复数类型</p>
<p>complex，在复数中虚数不能单独存在，它们总是和一个值为0.0的实数部分一起来构成一个复数。<br>复数由实数部分和虚数部分构成。<br>表示虚数的语法：real+imagj。<br>实数部分和虚数部分都是浮点型。<br>虚数部分必须有后缀j或J。</p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h4><p>字符串(string)是不可变类型，就是说改变一个字符串的元素需要新建一个新的字符串。字符串是由独立的字符组成的，并且这些字符可以通过切片操作顺序地访问。Python里面通过在引号间包含字符的方式创建字符串，单引号和双引号的作用是相同的。</p>
<p>Python用“原始字符串”操作符来创建直接量字符串，所以再做区分就没什么意义了。其他的语言，比如C语言里面用单引号来标示字符，双引号标示字符串，而在Python里面没有字符这个类型。这可能是双引号和单引号在Python里面被视作一样的另一个原因。</p>
<p>Python实际上有三类字符串。通常意义的字符串（str） 和Unicode字符串（unicode） 实际上都是抽象类basestring的子类。这个basestring是不能实例化的。</p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h4><p>列表(list)像字符串类型一样，列表类型也是序列式的数据类型。字符串只能由字符组成，而且是不可变的（不能单独改变它的某个值），而列表则是能保留任意数目的Python对象的灵活的容器。</p>
<p>列表不仅可以包含Python的标准类型，而且可以用用户定义的对象作为自己的元素。列表可以包含不同类型的对象，而且要比C或者Python自己的数组类型（包含在array扩展包中）都要灵活，因为数组类型所有的元素只能是一种类型。列表可以执行pop,sort、reverse等操作。列表也可以添加或者减少元素，还可以跟其他的列表结合或者把一个列表分成几个。可以对单独一个元素或者多个元素执行insert、update或remove操作。</p>
<h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a><strong>元组</strong></h4><p>元组类型在很多操作上都跟列表一样，许多用在列表上的例子在元组上照样能跑，我们有一节内容专门讲解元组类型。它们的主要不同在于元组是不可变的，或者说是只读的，所以那些用于更新列表的操作，比如用切片操作来更新一部分元素的操作，就不能用于元组类型。</p>
<h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a><strong>字典</strong></h4><p>字典是Python语言中唯一的映射类型。映射类型对象里哈希值（键，key） 和指向的对象（值。value） 是一对多的关系。一个字典对象是可变的，它是一个容器类型，能存储任意个数的Python对象，其中也包括其他容器类型。字典类型和序列类型容器类（列表、元组） 的区别是存储和访问数据的方式不同。序列类型只用数字类型的键（从序列的开始起按数值顺序索引） 。映射类型可以用其他对象类型做键，一般最常见的是用字符串做键。和序列类型的键不同，映像类型的键直接或间接地和存储的数据值相关联。但因为在映射类型中，我们不再用“序列化排序”的键，所以映像类型中的数据是无序排列的映射类型不要求用数字值做索引以从一个容器中获取对应的数据项。你可以用键直接“映射”到值，这就是为什么叫映射类型（“mappingtype”） 的原因。映射类型通常被称做哈希表，是因为字典对象就是哈希类型的。字典是Python中最强大的数据类型之一。</p>
<p>字典常见的操作有：字典创建、字典赋值、字典中值的访问、字典更新、字典元素删除等操作。</p>
<h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a><strong>集合</strong></h4><p>集合最早出现在Python2.3版本中，通过集合模块来创建，并通过ImmutableSet类和Set类进行访问。</p>
<p>集合有两种不同的类型，可变集合（set）和不可变集合（frozenset）。可变集合，你可以添加和删除元素，对不可变集合则不允许这样做。请注意，可变集合不是可哈希的，因此既不能用做字典的键也不能做其他集合中的元素。不可变集合则正好相反，即，他们有哈希值，能被用做字典的键或是作为集合中的一个成员。集合对象是一组无序排列的可哈希的值。</p>
<p>集合支持用in和not in操作符检查成员，由len()内建函数得到集合的基数（大小） ，用for循环迭代集合的成员。但是因为集合本身是无序的，你不可以为集合创建索引或执行切片（slice） 操作，也没有键可用来获取集合中元素的值。</p>
<h3 id="4-补充代码，实现以下功能"><a href="#4-补充代码，实现以下功能" class="headerlink" title="4.补充代码，实现以下功能"></a>4.补充代码，实现以下功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = <span class="string">&#x27;51devops&quot;niubi&#x27;</span></span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure>
<h3 id="5-用print打印出下面内容："><a href="#5-用print打印出下面内容：" class="headerlink" title="5.用print打印出下面内容："></a>5.用print打印出下面内容：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">⽂能提笔安天下,</span></span><br><span class="line"><span class="string">武能上⻢定乾坤.</span></span><br><span class="line"><span class="string">⼼存谋略何⼈胜,</span></span><br><span class="line"><span class="string">古今英雄唯是君。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="6-变量名的命名规范和建议？"><a href="#6-变量名的命名规范和建议？" class="headerlink" title="6.变量名的命名规范和建议？"></a>6.变量名的命名规范和建议？</h3><blockquote>
<ol>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名的第一个字符不能是数字</li>
<li>关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’]</li>
</ol>
</blockquote>
<h3 id="7-如下那个变量名是正确的？"><a href="#7-如下那个变量名是正确的？" class="headerlink" title="7.如下那个变量名是正确的？"></a>7.如下那个变量名是正确的？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name &#x3D; &#39;51devops&#39;  ✔️</span><br><span class="line">_ &#x3D; &#39;echo&#39;         ✔️</span><br><span class="line">_9 &#x3D; &quot;zhangsan&quot;    ✔️</span><br><span class="line">9name &#x3D; &quot;xxx&quot;      ×</span><br><span class="line">devops(edu &#x3D; 666   ×</span><br></pre></td></tr></table></figure>

<h3 id="8-简述你了解if条件语句的基本结构。"><a href="#8-简述你了解if条件语句的基本结构。" class="headerlink" title="8.简述你了解if条件语句的基本结构。"></a>8.简述你了解if条件语句的基本结构。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br><span class="line">(2)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">elif 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br><span class="line">(3)</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">if 条件:</span><br><span class="line">    代码块</span><br><span class="line">else:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure>

<h3 id="9-设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确。"><a href="#9-设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确。" class="headerlink" title="9.设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确。"></a>9.设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line"></span><br><span class="line">num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">    print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">    print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="10-写程序，成绩有ABCDE5个等级，与分数的对应关系如下"><a href="#10-写程序，成绩有ABCDE5个等级，与分数的对应关系如下" class="headerlink" title="10.写程序，成绩有ABCDE5个等级，与分数的对应关系如下."></a>10.写程序，成绩有ABCDE5个等级，与分数的对应关系如下.</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">grade = int(input(<span class="string">&quot;请输入分数:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> grade &gt;= <span class="number">100</span> <span class="keyword">or</span> grade &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&#x27;请输入正确分数:0-100&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">90</span> &lt;= grade &lt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= grade &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= grade &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">40</span> &lt;= grade &lt; <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;E&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="11-模拟10086客服电话（条件语句的嵌套）"><a href="#11-模拟10086客服电话（条件语句的嵌套）" class="headerlink" title="11.模拟10086客服电话（条件语句的嵌套）"></a>11.模拟10086客服电话（条件语句的嵌套）</h3><hr>
<h3 id="1-猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确，然后退出循环。"><a href="#1-猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了-只有等于66，显示猜测结果正确，然后退出循环。" class="headerlink" title="1.猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确，然后退出循环。"></a>1.猜数字，设定一个理想数字比如：66，让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了;只有等于66，显示猜测结果正确，然后退出循环。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h3 id="2-在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。"><a href="#2-在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。" class="headerlink" title="2.在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。"></a>2.在上一题的基础，设置：给用户三次猜测机会，如果三次之内猜测对了，则显示猜测正确，退出循环，如果三次之内没有猜测正确，则自动退出循环，并显示‘大笨蛋’。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">right_num = <span class="number">66</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">    num = int(input(<span class="string">&quot;请输入一个数字:&quot;</span>))</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &lt; right_num:</span><br><span class="line">        print(<span class="string">&#x27;猜测的结果小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;太笨了&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-使用两种方法实现输出-1-2-3-4-5-6-8-9-10"><a href="#3-使用两种方法实现输出-1-2-3-4-5-6-8-9-10" class="headerlink" title="3.使用两种方法实现输出 1 2 3 4 5 6 8 9 10"></a>3.使用两种方法实现输出 1 2 3 4 5 6 8 9 10</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(n)</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">7</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="4-求1-100的所有数的和"><a href="#4-求1-100的所有数的和" class="headerlink" title="4.求1-100的所有数的和"></a>4.求1-100的所有数的和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    res += n</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="5-输出-1-100-内的所有奇数"><a href="#5-输出-1-100-内的所有奇数" class="headerlink" title="5.输出 1-100 内的所有奇数"></a>5.输出 1-100 内的所有奇数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="6-输出-1-100-内的所有偶数"><a href="#6-输出-1-100-内的所有偶数" class="headerlink" title="6.输出 1-100 内的所有偶数"></a>6.输出 1-100 内的所有偶数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        print(n)</span><br><span class="line">    n += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="7-求1-2-3-4-5-…-99的所有数的和"><a href="#7-求1-2-3-4-5-…-99的所有数的和" class="headerlink" title="7.求1-2+3-4+5 … 99的所有数的和"></a>7.求1-2+3-4+5 … 99的所有数的和</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        res += n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res -= n</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h3 id="8-⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）"><a href="#8-⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）" class="headerlink" title="8.⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）"></a>8.⽤户登陆（三次输错机会）且每次输错误时显示剩余错误次数（提示：使⽤字符串格式化）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">user = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">passwd = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    valid_user = input(<span class="string">&#x27;请输入用户名:&#x27;</span>)</span><br><span class="line">    valid_passwd = input(<span class="string">&#x27;请输入密码:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> valid_user == user <span class="keyword">and</span> valid_passwd == passwd:</span><br><span class="line">        print(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;用户名或密码错误(剩余尝试次数: %s次)&quot;</span> %(count))</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br></pre></td></tr></table></figure>

<h3 id="9-猜年龄游戏"><a href="#9-猜年龄游戏" class="headerlink" title="9.猜年龄游戏"></a>9.猜年龄游戏</h3><p>要求：允许用户最多尝试3次，3次都没猜对的话，就直接退出，如果猜对了，打印恭喜信息并退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#年龄</span></span><br><span class="line">age = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">&#x27;猜猜我的年龄:&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess_age &gt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess_age &lt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="10-猜年龄游戏升级版"><a href="#10-猜年龄游戏升级版" class="headerlink" title="10.猜年龄游戏升级版"></a>10.猜年龄游戏升级版</h3><p>要求：允许用户最多尝试3次，每尝试3次后，如果还没猜对，就问用户是否还想继续玩，如果回答Y，就继续让其猜3次，以此往复，如果回答N，就退出程序，如何猜对了，就直接退出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#年龄</span></span><br><span class="line">age = random.randint(<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">print(age)</span><br><span class="line"></span><br><span class="line">count = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">    guess_age = int(input(<span class="string">&#x27;猜猜我的年龄:&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess_age &gt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> guess_age &lt; age:</span><br><span class="line">        print(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;猜对了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        chance = input(<span class="string">&#x27;Do you want continue(Y/N):&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> chance == <span class="string">&#x27;Y&#x27;</span> <span class="keyword">or</span> chance == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            count = <span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> chance == <span class="string">&#x27;N&#x27;</span> <span class="keyword">or</span> chance == <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;pls input correct choice&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="1-写代码，有如下列表，按照要求实现每一个功能。"><a href="#1-写代码，有如下列表，按照要求实现每一个功能。" class="headerlink" title="1.写代码，有如下列表，按照要求实现每一个功能。"></a>1.写代码，有如下列表，按照要求实现每一个功能。</h3><p>li = [“pounds”, “szk”, “haoda”, “barry”, “devops”]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算列表的长度并输出</span></span><br><span class="line">print(len(li))</span><br><span class="line"></span><br><span class="line"><span class="comment">#请通过步长获取索引为偶数的所有值，并打印出获取后的列表</span></span><br><span class="line">print(li[::<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表中追加元素”seven”,并输出添加后的列表</span></span><br><span class="line">li.append(<span class="string">&quot;seven&quot;</span>)</span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请在列表的第1个位置插入元素”Tony”,并输出添加后的列表</span></span><br><span class="line">li.insert(<span class="number">1</span>,<span class="string">&quot;Tony&quot;</span>)</span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请修改列表第2个位置的元素为”Kelly”,并输出修改后的列表</span></span><br><span class="line">li[<span class="number">2</span>] = <span class="string">&quot;Kelly&quot;</span></span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请删除列表中的元素”haoda”,并输出添加后的列表</span></span><br><span class="line">li.remove(<span class="string">&quot;haoda&quot;</span>)</span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请删除列表中的第2个元素，并输出删除元素后的列表</span></span><br><span class="line">li.pop(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># del li[2]</span></span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment">#请删除列表中的第2至第4个元素，并输出删除元素后的列表</span></span><br><span class="line"><span class="keyword">del</span> li[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure>

<h3 id="2-写代码，有如下列表，利用切片实现每一个功能"><a href="#2-写代码，有如下列表，利用切片实现每一个功能" class="headerlink" title="2.写代码，有如下列表，利用切片实现每一个功能"></a>2.写代码，有如下列表，利用切片实现每一个功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>, <span class="number">4</span>, <span class="string">&quot;b&quot;</span>, <span class="number">5</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [1,3,2]</span></span><br><span class="line">new_list = li[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [“a”,4,”b”]</span></span><br><span class="line">new_list = li[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [1,2,4,5]</span></span><br><span class="line">new_list = li[::<span class="number">2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [3,”a”,”b”]</span></span><br><span class="line">new_list = li[<span class="number">1</span>:<span class="number">-2</span>:<span class="number">2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [3,”a”,”b”,”c”]</span></span><br><span class="line">new_list = li[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [“c”]</span></span><br><span class="line">new_list = li[<span class="number">-1</span>:]</span><br><span class="line">print(new_list)</span><br><span class="line"><span class="comment"># 通过对li列表的切片形成新的列表 [“b”,”a”,3]</span></span><br><span class="line">new_list = li[<span class="number">-3</span>::<span class="number">-2</span>]</span><br><span class="line">print(new_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-写代码，有如下列表，按照要求实现每一个功能。"><a href="#3-写代码，有如下列表，按照要求实现每一个功能。" class="headerlink" title="3.写代码，有如下列表，按照要求实现每一个功能。"></a>3.写代码，有如下列表，按照要求实现每一个功能。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;k&quot;</span>, [<span class="string">&quot;qwe&quot;</span>, <span class="number">20</span>, [<span class="string">&quot;k1&quot;</span>, [<span class="string">&quot;tt&quot;</span>, <span class="number">3</span>, <span class="string">&quot;1&quot;</span>]], <span class="number">89</span>], <span class="string">&quot;ab&quot;</span>, <span class="string">&quot;adv&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表lis中的”k”变成大写，并打印列表。</span></span><br><span class="line">lis[<span class="number">2</span>] = lis[<span class="number">2</span>].upper()</span><br><span class="line">lis[<span class="number">2</span>] = <span class="string">&quot;K&quot;</span></span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#将列表中的数字3变成字符串”100”</span></span><br><span class="line">lis[<span class="number">1</span>] = <span class="string">&quot;100&quot;</span></span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#将列表中的字符串”tt”变成数字 101</span></span><br><span class="line">lis[<span class="number">3</span>][<span class="number">2</span>][<span class="number">0</span>] = <span class="number">101</span></span><br><span class="line">print(lis)</span><br><span class="line"><span class="comment">#在 “qwe”前面插入字符串：”火车头”</span></span><br><span class="line">lis[<span class="number">3</span>].insert(<span class="number">0</span>,<span class="string">&quot;火车头&quot;</span>)</span><br><span class="line">print(lis)</span><br></pre></td></tr></table></figure>


<h3 id="4-请用代码实现循环输出元素和值：users-“szk”-”pounds”-”波姐”-，如："><a href="#4-请用代码实现循环输出元素和值：users-“szk”-”pounds”-”波姐”-，如：" class="headerlink" title="4.请用代码实现循环输出元素和值：users = [“szk”,”pounds”,”波姐”] ，如："></a>4.请用代码实现循环输出元素和值：users = [“szk”,”pounds”,”波姐”] ，如：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="string">&quot;szk&quot;</span>,<span class="string">&quot;pounds&quot;</span>,<span class="string">&quot;波姐&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx,value <span class="keyword">in</span> enumerate(users):</span><br><span class="line">    print(idx,value)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-写代码实现以下功能"><a href="#5-写代码实现以下功能" class="headerlink" title="5.写代码实现以下功能"></a>5.写代码实现以下功能</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如有变量 googs = [‘汽车’,’飞机’,’火箭’] 提示用户可供选择的商品：用户输入索引后，将指定商品的内容拼接打印，如：用户输入0，则打印 您选择的商品是汽车。</span></span><br><span class="line">goods = [<span class="string">&#x27;汽车&#x27;</span>,<span class="string">&#x27;飞机&#x27;</span>,<span class="string">&#x27;火箭&#x27;</span>]</span><br><span class="line">tag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> tag:</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(goods):</span><br><span class="line">        print(<span class="string">&quot;编号:%s   商品名称: %s&quot;</span> %(k,v))</span><br><span class="line">    choice = int(input(<span class="string">&quot;输入商品编号:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> choice &gt;= <span class="number">0</span> <span class="keyword">and</span> choice &lt; <span class="number">3</span>:</span><br><span class="line">        print(goods[choice])</span><br><span class="line">        tag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;商品编号输入错误&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="6-请用代码实现"><a href="#6-请用代码实现" class="headerlink" title="6.请用代码实现"></a>6.请用代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = <span class="string">&quot;szk&quot;</span></span><br><span class="line"><span class="comment">#转成列表</span></span><br><span class="line">convert_list = list(li)</span><br><span class="line">print(convert_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转成字符串</span></span><br><span class="line">convert_str = <span class="string">&quot;_&quot;</span>.join(convert_list)</span><br><span class="line">print(convert_str,type(convert_str))</span><br></pre></td></tr></table></figure>

<h3 id="8-利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中"><a href="#8-利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中" class="headerlink" title="8.利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中"></a>8.利用for循环和range找出100以内所有的偶数并将这些偶数插入到一个新列表中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        new_list.append(num)</span><br><span class="line"></span><br><span class="line">print(new_list)</span><br></pre></td></tr></table></figure>


<h3 id="9-利用for循环和range-找出50以内能被3整除的数，并将这些数插入到一个新列表中"><a href="#9-利用for循环和range-找出50以内能被3整除的数，并将这些数插入到一个新列表中" class="headerlink" title="9.利用for循环和range 找出50以内能被3整除的数，并将这些数插入到一个新列表中"></a>9.利用for循环和range 找出50以内能被3整除的数，并将这些数插入到一个新列表中</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">new_list = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">51</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        new_list.append(num)</span><br><span class="line"></span><br><span class="line">print(new_list)</span><br></pre></td></tr></table></figure>
<h3 id="10-利用for循环和range从100-1，倒序打印"><a href="#10-利用for循环和range从100-1，倒序打印" class="headerlink" title="10.利用for循环和range从100~1，倒序打印"></a>10.利用for循环和range从100~1，倒序打印</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">num_list = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    num_list.append(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#倒序</span></span><br><span class="line">num_list.reverse()</span><br><span class="line"></span><br><span class="line">print(num_list)</span><br></pre></td></tr></table></figure>
<h3 id="11-利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。"><a href="#11-利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。" class="headerlink" title="11.利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。"></a>11.利用for循环和range循环1-30的数字，将能被3整除的添加到一个列表中，将能被4整除的添加到另外一个列表中。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">list_3 = []</span><br><span class="line">list_4 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">31</span>):</span><br><span class="line">    <span class="keyword">if</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        list_3.append(num)</span><br><span class="line">    <span class="keyword">elif</span> num % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">        list_4.append(num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">print(list_3)</span><br><span class="line">print(list_4)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python_exercise</category>
      </categories>
      <tags>
        <tag>python_exercise</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day03</title>
    <url>/2020/08/23/py-day03/</url>
    <content><![CDATA[<p>python基础<br>函数高级操作(生成器、迭代器、装饰器)</p>
<a id="more"></a>
<h4 id="内容复习"><a href="#内容复习" class="headerlink" title="内容复习 "></a><div id="title">内容复习 </div></h4><p>1.列表：</p>
<ul>
<li>定义：<ul>
<li>li = []</li>
<li>li = list()</li>
</ul>
</li>
<li>增<ul>
<li>append insert</li>
</ul>
</li>
<li>删<ul>
<li>pop  clear</li>
</ul>
</li>
<li>改<ul>
<li>li[3] = ‘newvalue’</li>
</ul>
</li>
<li>查<ul>
<li>for i in li:</li>
<li>for index, value in  enumate(li):</li>
</ul>
</li>
<li>索引<ul>
<li>不管是哪一门语言，只要提到索引，必然起始值从0开始</li>
<li>li[3]</li>
</ul>
</li>
<li>切片<ul>
<li>li = [1,2,3,4,5,6,7,8]</li>
<li>根据索引的下标来去切，并且遵循一个原则，前包后不包 li[2:5]</li>
</ul>
</li>
</ul>
<p>2.字典：</p>
<ul>
<li>定义：<ul>
<li>d = dict() ===&gt; d = dict(name=’szk’, age=13)</li>
<li>d = {}  ===&gt; d = {‘name’:’szk’, ‘age’:13}   推荐</li>
</ul>
</li>
<li>增 或 修改<ul>
<li>d[‘height’] = 178</li>
<li>d.update(height=180)  d.update(xxx=123)</li>
<li>删除<ul>
<li>del d[‘name’]</li>
</ul>
</li>
</ul>
</li>
<li>查：<ul>
<li>遍历所有的键   for k in d.keys()</li>
<li>遍历所有的值   for v in d.values()</li>
<li>遍历所有的键值 for k, v in d.items()  </li>
</ul>
</li>
</ul>
<p>项目中的数据结构：非常重要的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;szk&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">13</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;kkk&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">14</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>3.元组<br>定义：(1,2,)   tuple()<br>4.集合<br>定义：{}  set()  天生去重</p>
<p>4.函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名():</span></span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">函数名()</span><br></pre></td></tr></table></figure>

<p>函数执行的原理：</p>
<blockquote>
<p>函数定义的时候，会开辟一个栈(先进后出)，然后将函数压入栈中，注意此时我们只能操作栈顶的元素。调用函数的时候 函数名() ,就会将函数出栈，执行</p>
</blockquote>
<ul>
<li>函数的参数<ul>
<li>位置参数</li>
<li>关键字参数</li>
<li>默认参数 </li>
<li>动态接收位置参数</li>
<li>动态接收关键字参数</li>
</ul>
</li>
</ul>
<h3 id="函数部分："><a href="#函数部分：" class="headerlink" title="函数部分："></a>函数部分：</h3><h4 id="0-函数嵌套"><a href="#0-函数嵌套" class="headerlink" title="0.函数嵌套"></a>0.函数嵌套</h4><ol>
<li><p>只要遇见了()就是函数的调用. 如果没有()就不是函数的调用</p>
</li>
<li><p>函数的执行顺序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span>   </span><br><span class="line">    print(<span class="number">111</span>)  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span>   </span><br><span class="line">    print(<span class="number">222</span>)   </span><br><span class="line">    fun1()   </span><br><span class="line">fun2()</span><br><span class="line">print(<span class="number">111</span>)</span><br></pre></td></tr></table></figure>
<p>接下来再看一个例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span>   </span><br><span class="line">    print(<span class="number">222</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun3</span>():</span></span><br><span class="line">        print(<span class="number">666</span>)</span><br><span class="line">    print(<span class="number">444</span>)</span><br><span class="line">    fun3()</span><br><span class="line">    print(<span class="number">888</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="number">33</span>)</span><br><span class="line">fun2()</span><br><span class="line">print(<span class="number">555</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>gloabal<br>首先我们写这样一个代码, 首先在全局声明一个变量, 然后再局部调用这个变量, 并改变这 个变量的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 100</span><br><span class="line">def func():   </span><br><span class="line">    global a    # 加了个global表示不再局部创建这个变量了. 而是直接使用全局的a   </span><br><span class="line">    a &#x3D; 28   </span><br><span class="line">print(a)</span><br><span class="line">func()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>global表示. 不再使用局部作用域中的内容了. 而改用全局作用域中的变量</p>
</li>
</ol>
<p><strong>变量污染，很少使用</strong></p>
<h5 id="1-内置函数"><a href="#1-内置函数" class="headerlink" title="1.内置函数"></a>1.内置函数</h5><p>就是python给你提供的. 拿来直接用的函数, 比如print., input等等.</p>
<img src="/2020/08/23/py-day03/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.jpg" class title="内置函数">
<p><strong>迭代器相关</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">range()</span><br><span class="line">next()</span><br><span class="line">迭代器向下执⾏一次, 内部实际使用了next()方法返回迭代器的下一个项目</span><br></pre></td></tr></table></figure>
<p><strong>iter()</strong></p>
<blockquote>
<p>获取迭代器, 内部实际使用的是iter()方法来获取迭代器</p>
</blockquote>
<p><strong>eval()</strong></p>
<blockquote>
<p>字符串类型代码的执行<br>执行部分字符串类型的代码,并返回最终结果</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(eval(&quot;2+2&quot;))</span><br><span class="line"># 4</span><br><span class="line">n &#x3D; 8</span><br><span class="line">print(eval(&quot;2+n&quot;))</span><br><span class="line"># 10</span><br><span class="line">def func():</span><br><span class="line">    print(666)</span><br><span class="line">eval(&quot;func()&quot;)</span><br><span class="line"># 666</span><br></pre></td></tr></table></figure>
<p><strong>exec()</strong></p>
<blockquote>
<p>执行字符串类型的代码</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msg &#x3D; &#39;&#39;&#39;</span><br><span class="line">def func():</span><br><span class="line">    print(&#39;有计划没行动等于零&#39;)</span><br><span class="line">func()</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">exec(msg)</span><br></pre></td></tr></table></figure>
<p>以上这两个在公司开发中禁止使用,如果里边出现<strong>del</strong>就会出现很大的问题</p>
<p><strong>输入和输出相关</strong><br><strong>input()</strong></p>
<blockquote>
<p>获取用户输入的内容</p>
</blockquote>
<p><strong>print()</strong></p>
<blockquote>
<p>打印输出</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&#39;你好&#39;,&#39;我好&#39;)    </span><br><span class="line">print(&#39;你好&#39;,&#39;我好&#39;,sep&#x3D;&#39;|&#39;)</span><br><span class="line">结果:</span><br><span class="line">你好 我好</span><br><span class="line">你好|我好</span><br></pre></td></tr></table></figure>
<p><strong>sep</strong>是将多个元素进行修改 默认的是空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&#39;你好&#39;)</span><br><span class="line">print(&#39;我好&#39;)</span><br><span class="line">print(&#39;你好&#39;,end&#x3D;&#39;&#39;)</span><br><span class="line">print(&#39;我好&#39;)</span><br></pre></td></tr></table></figure>

<p><strong>end</strong>默认是\n 这就是我们为什么使用print的时候会出现换行,end的值修改成了空字符串</p>
<p><strong>id()</strong></p>
<blockquote>
<p>获取到对象的内存地址</p>
</blockquote>
<p><strong>调用相关</strong></p>
<p><strong>callable()</strong></p>
<blockquote>
<p>用于检查一个对象是否是可调用的. 如果返回True, object有可能调用失败, 但如果返回False. 那调用绝对不会成功</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(callable(print))</span><br><span class="line">结果:</span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<p><strong>查看内置属性</strong><br><strong>dir()</strong></p>
<blockquote>
<p>查看对象的内置属性</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(dir(list))</span><br><span class="line">结果:</span><br><span class="line">[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;]</span><br></pre></td></tr></table></figure>

<p><strong>基础数据类型相关</strong><br>数字相关<br><strong>​- bool()</strong> 将给定的数据转换成bool值. 如果不给值. 返回False<br>​**- int()** 将给定的数据转换成int值. 如果不给值, 返回0<br><strong>​- ﬂoat()</strong> 将给定的数据转换成ﬂoat值. 也就是小数<br>​数学运算<br>​<strong>abs()</strong> 返回绝对值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1:  print(abs(-1))</span><br><span class="line">2:  结果:</span><br><span class="line">3:  1</span><br></pre></td></tr></table></figure>

<p><strong>divmod()</strong> 返回商和余数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(divmod(15,2))</span><br><span class="line">结果:</span><br><span class="line">(7, 1)</span><br></pre></td></tr></table></figure>

<p><strong>​round()</strong> 四舍五入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(round(15.1111,2))  # 保留2位小数</span><br><span class="line">结果:</span><br><span class="line">15.11</span><br></pre></td></tr></table></figure>
<p>​<br><strong>pow(a, b)</strong> 求a的b次幂, 如果有三个参数. 则求完次幂后对第三个数取余</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(pow(15,2,3))</span><br><span class="line">结果:</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<p><strong>​sum()</strong> 求和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(sum([12,3,4]))  #sum里边的参数是一个可迭代对象</span><br><span class="line">结果:</span><br><span class="line">19</span><br></pre></td></tr></table></figure>

<p><strong>​​min()</strong> 求最小值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(min([12,3,4]))  # 寻找最小的数字</span><br><span class="line">结果:</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>​<strong>max()</strong> 求最大值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(max([12,3,4]))  # 寻找最大的数字</span><br><span class="line">结果:</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<p><strong>数据结构相关</strong><br>列表和元组:</p>
<ul>
<li>list() 将一个可迭代对象转换成列表</li>
<li>tuple() 将一个可迭代对象转换成元组</li>
<li>reversed() 将一个序列翻转, 返回翻转序列的迭代器</li>
</ul>
<p><strong>reversed</strong> 示例:<br><code>l = reversed(&#39;你好&#39;)  # l 获取到的是一个生成器 print(list(l))</code></p>
<p><strong>数据结构相关</strong><br>列表和元组:</p>
<ul>
<li>list() 将一个可迭代对象转换成列表</li>
<li>tuple() 将一个可迭代对象转换成元组</li>
<li>reversed() 将一个序列翻转, 返回翻转序列的迭代器</li>
</ul>
<p><strong>reversed</strong> 示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">l &#x3D; reversed(&#39;你好&#39;)  # l 获取到的是一个生成器</span><br><span class="line">print(list(l))</span><br></pre></td></tr></table></figure>
<p><strong>bytes()</strong> 把字符串转换成bytes类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 :  s &#x3D; &#39;你好武大&#39;</span><br><span class="line">2 :  bs &#x3D; s.encode(&#39;utf-8&#39;)</span><br><span class="line">3 :  print(bs)</span><br><span class="line">4 :  结果:b&#39;\xe4\xbd\xa0\xe5\xa5\xbd\xe6\xad\xa6\xe5\xa4\xa7&#39;</span><br><span class="line">5 :  s1 &#x3D; bs.decode(&#39;utf-8&#39;)</span><br><span class="line">6 :  print(s1)</span><br><span class="line">7 :  结果: 你好武大</span><br><span class="line">8 :  s &#x3D; &#39;你好&#39;</span><br><span class="line">9 :  bs &#x3D; bytes(s,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">10:  print(bs)</span><br><span class="line">11:  # 将字符串转换成字节</span><br><span class="line">12:  bs1 &#x3D; str(bs,encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">13:  print(bs1)</span><br><span class="line">14:  # 将字节转换成字符串</span><br></pre></td></tr></table></figure>

<p><strong>数据集合</strong></p>
<ul>
<li>dict() 创建一个字典</li>
<li>set() 创建一个集合</li>
<li>len() 返回一个对象的元素个数</li>
<li>enumerate() 获取枚举对象</li>
</ul>
<p><strong>enumerate()</strong> 举例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lst &#x3D; [&#39;zhangsan&#39;,&#39;lisi&#39;,&#39;wangwu&#39;]</span><br><span class="line">for i,k in enumerate(lst):</span><br><span class="line">    print(&#39;这是序号&#39;,i)</span><br><span class="line">    print(&#39;这是元素&#39;,k)</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">**zip()** 函数用于将可迭代的对象作为参数,将对象中对应的元素打包成一个个元祖,</span><br><span class="line">然后返回由这些元祖组成的内容,如果各个迭代器的元素个数不一致,则按照长度最短的返回</span><br></pre></td></tr></table></figure>
<p>lst1 = [1,2,3]<br>lst2 = [‘a’,’b’,’c’,’d’]<br>lst3 = (11,12,13,14,15)<br>for i in zip(lst1,lst2,lst3):<br>    print(i)<br>结果:<br>(1, ‘a’, 11)<br>(2, ‘b’, 12)<br>(3, ‘c’, 13)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**lambda**</span><br><span class="line">&gt; 匿名函数,为了解决一些简单的需求而设计的一句话函数</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>def func(n):<br>    return n<strong>n<br>print(func(4))<br>f = lambda x: x</strong>x<br>print(f(4))<br>结果:<br>256<br>256</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**lambda**表示的是匿名函数,不需要用**def**来声明,一句话就可以声明出一个函数</span><br><span class="line">语法:</span><br><span class="line">　　函数名 &#x3D; **lambda** 参数:返回值</span><br><span class="line">注意:</span><br><span class="line">　　1. 函数的参数可以有多个,多个参数之间用逗号隔开</span><br><span class="line">　　2. 匿名函数不管多复杂.只能写一行.且逻辑结束后直接返回数据</span><br><span class="line">　　3. 返回值和正常的函数一样,可以是任意数据类型,返回值的时候只能返回一个不能返回多个匿名函数并不是说一定没有名字,这里前面的变量就是一个函数名,说他是匿名原因是我们通过name查看的时候是没有名字的.统一都叫做lambda.在调用的时候没有什么特别之处,像正常的函数调用既可</span><br><span class="line"></span><br><span class="line">**sorted**</span><br><span class="line">排序函数</span><br><span class="line"></span><br><span class="line">&gt; 语法:sorted(iterable,key&#x3D;None,reverse&#x3D;False)</span><br><span class="line"></span><br><span class="line">**iterable** : 可迭代对象</span><br><span class="line">**key**: 排序规则(排序函数),在**sorted**内部会将可迭代对象中的每一个元素传递给这个函数的参数.根据函数运算的结果进行排序</span><br><span class="line">**reverse** :是否是倒叙,True 倒叙 False 正序</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>lst = [1,3,2,5,4]<br>lst2 = sorted(lst)<br>print(lst)    #原列表不会改变<br>print(lst2)   #返回的新列表是经过排序的<br>lst3 = sorted(lst,reverse=True)<br>print(lst3)   #倒叙<br>结果:<br>[1, 3, 2, 5, 4]<br>[1, 2, 3, 4, 5]<br>[5, 4, 3, 2, 1]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字典使用**sorted**排序</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>dic = {1:’a’,3:’c’,2:’b’}<br>print(sorted(dic))   # 字典排序返回的就是排序后的key<br>结果:<br>[1,2,3]</p>
<p>salaries = {<br>  ‘szk’:30000,<br>  ‘zhangsan’:888888888,<br>  ‘nick’:2000,<br>  ‘pounds’:100<br>}<br>sorted(salaries, key=lambda name:salaries[name])</p>
<h5 id="2-匿名函数-lambada-面试问的较多"><a href="#2-匿名函数-lambada-面试问的较多" class="headerlink" title="2.匿名函数 lambada  面试问的较多"></a>2.匿名函数 lambada  面试问的较多</h5><h4 id="3-迭代器-和for循环机制-面试中的重点"><a href="#3-迭代器-和for循环机制-面试中的重点" class="headerlink" title="3.迭代器 和for循环机制 面试中的重点"></a>3.迭代器 和for循环机制 面试中的重点</h4><p>for循环是不是也可以,并且还不报错啊,其实上边就是for的机制,<br>注意: 迭代器不能反复,只能向下执行,并且是一次性的.获取过了就不能在获取了</p>
<p>总结:</p>
<ul>
<li>Iterator: 迭代器. 内部包含<strong>iter</strong>() 同时包含<strong>next</strong>().</li>
<li>迭代器的特点:</li>
</ul>
<ol>
<li>节省内存.</li>
<li>惰性机制</li>
<li>不能反复, 只能向下执行.<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">print(dir(a))  <span class="comment"># dir查看对象的方法和函数</span></span><br><span class="line"><span class="comment"># 在打印结果中寻找__iter__ 如果存在就表示当前的这个类型是个可迭代对象</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-生成器-面试中的重点"><a href="#4-生成器-面试中的重点" class="headerlink" title="4.生成器  面试中的重点"></a>4.生成器  面试中的重点</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 生成器定义</span></span><br><span class="line"><span class="comment">### 生成器的本质就是迭代器，因此我们可以使用迭代器中的__next__方法来获取元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">22</span>  <span class="comment">### 将return换成yield关键字即可</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="comment"># print(ret.__next__())</span></span><br><span class="line"><span class="comment"># print(ret)  ### &lt;generator object func at 0x103cc80b0&gt; 生成器的对象</span></span><br></pre></td></tr></table></figure>
<ul>
<li>return 和 yield 的区别<ul>
<li>yield是分段来执行一个函数,yield可以出现多次</li>
<li>return是直接停止这个函数,return可以出现多次但是只会执行到第一个就结束了</li>
</ul>
</li>
<li>生成器的好处<ul>
<li>节省内存</li>
</ul>
</li>
</ul>
<p>总结：生成器一定是迭代器，但是迭代器就不一定是生成器</p>
<h4 id="5-列表生成式和字典生成式-项目中的重点"><a href="#5-列表生成式和字典生成式-项目中的重点" class="headerlink" title="5.列表生成式和字典生成式 []  项目中的重点"></a>5.列表生成式和字典生成式 []  项目中的重点</h4><ol>
<li>列表推导式的常⽤写法:</li>
</ol>
<blockquote>
<p>[结果 for 变量 in 可迭代对象]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls &#x3D; [i for i in range(10)]</span><br><span class="line">print(ls)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>筛选模式</p>
<blockquote>
<p>[结果 for 变量 in 可迭代对象 if 条件]</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lst &#x3D; [i for i in range(100) if i %2 &#x3D;&#x3D; 0]</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure>
</li>
<li><p>字典生成式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内置方法初识</span></span><br><span class="line">l=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> enumerate(l):</span><br><span class="line">    print(i,v)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 构造字典</span></span><br><span class="line">keys=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">vals=[<span class="string">&#x27;szk&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>]</span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys):</span><br><span class="line">    <span class="comment"># print(i,k)</span></span><br><span class="line">    dic[k]=vals[i]</span><br><span class="line">print(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典生成式</span></span><br><span class="line">dic=&#123;k:vals[i] <span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys)&#125;</span><br><span class="line">print(dic)</span><br><span class="line"><span class="comment"># 也支持if判断</span></span><br><span class="line">dic=&#123;k:vals[i] <span class="keyword">for</span> i,k <span class="keyword">in</span> enumerate(keys) <span class="keyword">if</span> i &gt; <span class="number">0</span>&#125;</span><br><span class="line">print(dic)</span><br></pre></td></tr></table></figure>
</li>
<li><p>三元表达式</p>
<blockquote>
<p>结果 = 条件成立 if 条件 else 条件不成立返回的值</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 求两个数的较大值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max2</span>(<span class="params">x, y</span>):</span></span><br><span class="line">  <span class="keyword">if</span> x &gt; y:</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 三元表达式实现的效果:条件成立的情况下返回一个值，不成立的情况下返回另外一个值</span></span><br><span class="line">name = input(<span class="string">&#x27;please input your name&gt;&gt;&gt;:&#x27;</span>).strip()</span><br><span class="line">res = <span class="string">&#x27;NB&#x27;</span> <span class="keyword">if</span> name = <span class="string">&#x27;szk&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;SB&#x27;</span>  <span class="comment"># 当name值为szk的时候才会是NB其他情况都是SB</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">语法结构</span></span><br><span class="line"><span class="string">结果 = 条件成立 if 条件 else 条件不成立返回的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">替换上面max2内的代码</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="5-递归函数-面试中常见问题"><a href="#5-递归函数-面试中常见问题" class="headerlink" title="5. 递归函数  面试中常见问题"></a>5. 递归函数  面试中常见问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.什么是函数递归调用？(也可以说成是函数的嵌套调用的一种形式)</span></span><br><span class="line"><span class="string">    在调用一个函数的过程中又直接或者间接的调用该函数本身，称之为函数的递归调用</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 直接调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">  print(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">  foo()</span><br><span class="line">foo()</span><br><span class="line"><span class="string">&quot;&quot;&quot;画图诠释递归调用意味着反复的开辟内存空间最后导致内存溢出&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ps:补充知识点 查看及修改最大递归深度的方法(不是绝对的精准)</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getrecursionlimit())  <span class="comment"># 查看最大递归深度 1000</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)  <span class="comment"># 修改最大递归深度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看具体的递归深度(直接调用自己)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">n</span>):</span></span><br><span class="line">  print(<span class="string">&#x27;from foo&#x27;</span>,n)</span><br><span class="line">  foo(n+<span class="number">1</span>)</span><br><span class="line">foo(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 间接调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">  print(<span class="string">&#x27;from bar&#x27;</span>)</span><br><span class="line">  func()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">  print(<span class="string">&#x27;from func&#x27;</span>)</span><br><span class="line">  bar()</span><br><span class="line">bar()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ps:无限的递归没有任何意义的</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>有意义的递归一定是伴随着n规模的减少而减少</p>
</blockquote>
<p>举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.从1到100，求个和？</span></span><br><span class="line"><span class="comment">## 常规的做法</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    sum += i</span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 递归的做法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">有意义的递归：</span></span><br><span class="line"><span class="string">    有最终的结束条件</span></span><br><span class="line"><span class="string">    n规模问题的解决得益于n-1问题的规模的解决</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">现在是求1到100的和？</span></span><br><span class="line"><span class="string">1到99的和，然后再加上 100， 即就能够知道1到100的和</span></span><br><span class="line"><span class="string">1到98的和，然后再加上 99，就能够知道1到99的和</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumrecv</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sumrecv(n<span class="number">-1</span>) + n </span><br></pre></td></tr></table></figure>

<p>#2.求n!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jiecheng</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jiecheng(n<span class="number">-1</span>) * n</span><br><span class="line"></span><br><span class="line">res = jiecheng(<span class="number">5</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>


<h4 id="6-函数名的作用以及闭包函数-面试和项目中的重点"><a href="#6-函数名的作用以及闭包函数-面试和项目中的重点" class="headerlink" title="6.函数名的作用以及闭包函数   面试和项目中的重点"></a>6.函数名的作用以及闭包函数   面试和项目中的重点</h4><blockquote>
<p>闭包函数：函数嵌套+名称空间与作用域+函数对象</p>
</blockquote>
<ol>
<li>什么是闭包函数<ol>
<li>定义在函数内的函数</li>
<li>该函数体代码包含对该函数外层作用域中名字的引用<ul>
<li>强调：函数外层指的不是全局作用域</li>
</ul>
</li>
</ol>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>()</span></span><br><span class="line">    x = 1</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> inner <span class="comment">#利用函数对象的概念，将一个内部函数返回并在全剧终拿到并使用，从而打破了函数的层级限制</span></span><br><span class="line"></span><br><span class="line"> f = outter()  返回的是inner的内存地址</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">     x = <span class="number">11111</span></span><br><span class="line">     print(<span class="string">&#x27;from foo&#x27;</span>)</span><br><span class="line">     f()   </span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数的作用域关系在定义阶段就已经固定了，与调用位置无关<br>f = outter() —&gt; 指向inner内存地址<br>闭: 函数一定来自于函数内部<br>包: 此函数外面还包裹了一层东西，无论在哪用inner，都是以外面包裹的这一层东西为准</p>
</blockquote>
<h4 id="7-装饰器-面试和项目中的重中之重"><a href="#7-装饰器-面试和项目中的重中之重" class="headerlink" title="7.**装饰器 面试和项目中的重中之重 **"></a>7.**装饰器 面试和项目中的重中之重 **</h4><h5 id="7-1-闭包函数的应用"><a href="#7-1-闭包函数的应用" class="headerlink" title="7.1. 闭包函数的应用"></a>7.1. 闭包函数的应用</h5><ol>
<li>为函数体传值的方式<br>方式1:以参数的形式为函数体传值<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def foo(x):</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure></li>
<li>方式二:包给函数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># x = 1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">        print(x)</span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line">f = outter(<span class="number">10</span>)</span><br><span class="line">f()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">url</span>):</span></span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        print(response.text)</span><br><span class="line"></span><br><span class="line">每次调用都需要传,且定义全局变量不合适</span><br><span class="line"></span><br><span class="line"><span class="comment"># get(&#x27;https://www.baidu.com&#x27;)</span></span><br><span class="line"><span class="comment"># get(&#x27;https://www.baidu.com&#x27;)</span></span><br><span class="line"><span class="comment"># get(&#x27;https://www.baidu.com&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># url = &#x27;https://www.baidu.com&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            print(response.text)</span><br><span class="line">    <span class="keyword">return</span> get</span><br><span class="line"></span><br><span class="line">传一次即可</span><br><span class="line">baidu = outter(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">baidu()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>装饰器（闭包函数的应用）</li>
</ol>
<ul>
<li><p>1、开放封闭原则<br>  软件一旦上之后就应该开放封闭原则<br>  具体是指对修改是封闭的，但对扩展是开放的</p>
</li>
<li><p>2、什么是装饰器<br>  装饰就是修饰，器指的就是工具<br>  装饰器本身可以是任意可调用的对象<br>  被装饰的对象也可以是任意可调用的对象</p>
<p>  装饰器—&gt;函数<br>  被装饰的对象=&gt;函数</p>
<p>  装饰器是用来为被装饰对象添加新功能的一种工具<br>  必须遵循：</p>
<pre><code>  1、不能修改被装饰对象的源代码
  2、不能修改被装饰对象的调用方式</code></pre>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;from home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="comment"># func=index</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>():</span></span><br><span class="line">        start_time=time.time()</span><br><span class="line">        func()</span><br><span class="line">        end_time=time.time()</span><br><span class="line">        print(<span class="string">&#x27;run time is %s&#x27;</span> %(end_time - start_time))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index=outter(index)</span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>3.装饰器修正+装饰器语法糖</p>
<blockquote>
<p>如果有返回值，则在内层函数定义res ，末尾return；<br>内层函数接收参数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timmer</span>(<span class="params">func</span>):</span> <span class="comment">#func用来接收被装饰的函数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span> <span class="comment">#这个功能是给原始的函数用的</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">return</span> func(*args,**kwargs) <span class="comment">#拿到返回值</span></span><br><span class="line">        stop_time=time.time()</span><br><span class="line">        print(<span class="string">&#x27;run time is %s&#x27;</span> %(stop_time - start_time))</span><br><span class="line">        <span class="comment"># return res</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer # index=timmer(index)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome to index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@timmer #home=timmer(home)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome %s to home page&#x27;</span> %name)</span><br></pre></td></tr></table></figure>
</li>
<li><p>4.有参装饰器<br>eg: 引入参数钱的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_user = &#123;<span class="string">&#x27;login&#x27;</span>:<span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> current_user[<span class="string">&#x27;login&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        user = input(<span class="string">&#x27;username&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        passwd = input(<span class="string">&#x27;passwd&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">        <span class="keyword">if</span>  user == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> passwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            current_user[<span class="string">&#x27;login&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome to index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@outter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome %s to home page&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">home(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>引入参数<br>func 用来接收被装饰的函数<br>wrapper(*args,**kwargs): #这个功能是给原始的函数用的</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">current_user=&#123;<span class="string">&#x27;login&#x27;</span>:<span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">engine</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">            <span class="keyword">if</span> current_user[<span class="string">&#x27;login&#x27;</span>]:</span><br><span class="line">                <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line"></span><br><span class="line">            user=input(<span class="string">&#x27;username&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line">            pwd=input(<span class="string">&#x27;password&gt;&gt;&gt;: &#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> engine == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> user == <span class="string">&#x27;egon&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">                    current_user[<span class="string">&#x27;login&#x27;</span>]=<span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">&#x27;mysql&#x27;</span>:</span><br><span class="line">                print(<span class="string">&#x27;基于mysql数据的认证&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> engine == <span class="string">&#x27;ldap&#x27;</span>:</span><br><span class="line">                print(<span class="string">&#x27;基于ldap的认证方式&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> outter</span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(engine=&#x27;mysql&#x27;) # @outter # index=outter(index) #index=wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome to index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@auth(engine=&#x27;ldap&#x27;) # @outter # home=outter(home) #home=wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">name</span>):</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">&#x27;welcome %s to home page&#x27;</span> %name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index()</span><br><span class="line">home(<span class="string">&#x27;egon&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>装饰器原理：就是闭包函数的应用。 @auth(engine=’file’)，执行的过程为拿到outter内存地址+engine=’file’; @outter(func) 执行的过程为 把他正下方的函数名当做参数传入，得到的结果重新赋值给index index = @outter(index),index拿到的是outter的调用结果，index = wrapper; wrapper函数内打开就可以看到，要访问一个func，问上一层outter要，enggine没有，再上一层要，auth。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结: wrapper(*args,**kwargs) 这个参数的功能是给原始函数用的；outter(func)，用来装被修饰的函数，auth(engine) 传给内层需要的函数。三层足够使用，最外层可以无限的延伸参数。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">engine</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outter</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>)</span></span><br><span class="line"><span class="function">            ....</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">wrapper</span></span></span><br></pre></td></tr></table></figure>


<ol start="5">
<li>叠加装饰器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def outter1(func1): #func1&#x3D;wrapper2的内存地址</span><br><span class="line">    print(&#39;加载了outter1&#39;)</span><br><span class="line"></span><br><span class="line">    def wrapper1(*args,**kwargs):</span><br><span class="line">        print(&#39;执行了wrapper1&#39;)</span><br><span class="line">        res1&#x3D;func1(*args,**kwargs)</span><br><span class="line">        return res1</span><br><span class="line"></span><br><span class="line">    return wrapper1</span><br><span class="line"></span><br><span class="line">def outter2(func2): #func2&#x3D;wrapper3的内存地址</span><br><span class="line">    print(&#39;加载了outter2&#39;)</span><br><span class="line"></span><br><span class="line">    def wrapper2(*args,**kwargs):</span><br><span class="line">        print(&#39;执行了wrapper2&#39;)</span><br><span class="line">        res2&#x3D;func2(*args,**kwargs)</span><br><span class="line">        return res2</span><br><span class="line">    return wrapper2</span><br><span class="line"></span><br><span class="line">def outter3(func3): # func3&#x3D;最原始的那个index的内存地址</span><br><span class="line">    print(&#39;加载了outter3&#39;)</span><br><span class="line"></span><br><span class="line">    def wrapper3(*args,**kwargs):</span><br><span class="line">        print(&#39;执行了wrapper3&#39;)</span><br><span class="line">        res3&#x3D;func3(*args,**kwargs)</span><br><span class="line">        return res3</span><br><span class="line">    return wrapper3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@outter1 # outter1(wrapper2的内存地址)&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;index&#x3D;wrapper1的内存地址</span><br><span class="line">@outter2 # outter2(wrapper3的内存地址)&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;wrapper2的内存地址</span><br><span class="line">@outter3 # outter3(最原始的那个index的内存地址)&#x3D;&#x3D;&#x3D;&gt;wrapper3的内存地址</span><br><span class="line">def index():</span><br><span class="line">    print(&#39;from index&#39;)</span><br><span class="line">#</span><br><span class="line">print(&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#39;)</span><br><span class="line"># index()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>总结： 叠加多个装饰器</p>
</blockquote>
</li>
<li>加载顺序(outter函数的调用顺序):自下而上</li>
<li>执行顺序(wrapper函数的执行顺序):自上而下</li>
</ol>
<h3 id="模块部分："><a href="#模块部分：" class="headerlink" title="模块部分："></a>模块部分：</h3><p>1.模块的使用</p>
<p>2.自定义模块 </p>
<p>3.内置模块  time os</p>
<p>4.第三方模块  pymysql， jenkins，gitlab</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day06</title>
    <url>/2020/09/13/py-day06/</url>
    <content><![CDATA[<p>前端基础<br>html css</p>
<a id="more"></a>
<hr>
<h2 id="上周回顾"><a href="#上周回顾" class="headerlink" title="上周回顾"></a><div id="title">上周回顾</div></h2><p>面向对象的概念</p>
<p><strong>什么是类?什么又是对象?</strong></p>
<blockquote>
<p>类：就是具有相同属性（特征）和功能(技能)的一类事物， 比如说：人类，鸡类，狗类<br>对象：就是类的具体表现形式, 比如说，张三，李四等</p>
</blockquote>
<p><strong>所谓的类，就是一个模板，对象就是模板的具体生产出来的实例</strong></p>
<p>面向对象中类和对象的基本使用</p>
<blockquote>
<p>现在基本上所有的高级语言(c++, java, php, python,C#)中，都有面向对象的</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    mind = <span class="string">&quot;有思想&quot;</span></span><br><span class="line">    leg = <span class="number">2</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line">    __salry = <span class="number">10000</span></span><br><span class="line">    <span class="comment">### 当实例化一个对象的时候，会自动的触发该__init__函数</span></span><br><span class="line">    <span class="comment">### 此时self指代的就是当前实例化的对象，也就是 self = p1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, height</span>):</span></span><br><span class="line">        <span class="comment"># print(self) ### &lt;__main__.Person object at 0x10ee29760&gt;</span></span><br><span class="line">        self.name = name <span class="comment">### p1.name = &#x27;wenliang&#x27;  p2.name = &#x27;nick&#x27;</span></span><br><span class="line">        self.age = age   <span class="comment">### p1.age = 73   p2.age = 84</span></span><br><span class="line">        self.height = height <span class="comment">### p1.height = 168 p2.height=178</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">### self = p1</span></span><br><span class="line">        print(<span class="string">&#x27;%s eating...&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sleeping...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p1 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># p2 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># p3 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># print(id(p1)) ### 产生对象的内存地址是不同的</span></span><br><span class="line"><span class="comment"># print(id(p2))</span></span><br><span class="line"><span class="comment"># print(id(p3))</span></span><br><span class="line"></span><br><span class="line">p1 = Person(name=<span class="string">&#x27;wenliang&#x27;</span>, age=<span class="number">73</span>, height=<span class="number">168</span>)</span><br><span class="line">p2 = Person(name=<span class="string">&#x27;nick&#x27;</span>, age=<span class="number">84</span>, height=<span class="number">170</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p1.__dict__)</span></span><br><span class="line"><span class="comment"># print(p2.__dict__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 对象操作属性</span></span><br><span class="line"><span class="comment"># print(p1.mind)</span></span><br><span class="line"><span class="comment"># print(p1.name)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(p2.mind)</span></span><br><span class="line"><span class="comment"># print(p2.name)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p1.mind)</span></span><br><span class="line"><span class="comment"># print(p2.mind)</span></span><br><span class="line"><span class="comment"># print(p3.mind)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p1.__dict__)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 对象操作方法</span></span><br><span class="line"><span class="comment"># Person.eat(1)</span></span><br><span class="line">p1.eat()  <span class="comment">### 会默认将当前的对象p1,传给方法中的self</span></span><br><span class="line">p2.eat()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：<br>1.后续项目中大部分都是使用对象来操作类中相关的属性和方法的<br>2.self 指代的就是当前的对象<br>3.<code>__init__()</code>初始化方法</p>
</blockquote>
<ul>
<li><p>面向对象的三大特性</p>
<ul>
<li><p>python 中一切皆对象    linux一切皆文件</p>
</li>
<li><p><strong>封装</strong></p>
<ul>
<li>封装的总共有两个特点：<br>1.将内容封装到某个地方，以后再去调用被封装在某处的内容。<br>2.一些私有的不想被外部访问的变量，也可以封装起来</li>
</ul>
</li>
<li><p><strong>继承</strong></p>
<ul>
<li>分类：<ul>
<li>单继承</li>
<li>多继承   C++， python有，但是php和java没有， </li>
</ul>
</li>
</ul>
</li>
<li><p>多态</p>
</li>
</ul>
</li>
<li><p>面向的对象中的装饰器</p>
<ul>
<li>property : 就是将方法编程属性来调用</li>
<li>classmethod : 类方法    eat(cls)</li>
<li>staticmethod : 静态方法   walk()</li>
</ul>
</li>
<li><p><strong>反射</strong> </p>
<ul>
<li>对象   字符串， django 大量的反射</li>
<li>只有在Python中有</li>
<li>setattr(obj,  ‘key’, ‘value’)</li>
<li>getattr(obj, ‘key’)</li>
<li>hasattr(obj, ‘key’)</li>
<li>delattr</li>
</ul>
</li>
<li><p>面向对象中的双下划线方法</p>
<ul>
<li><code>__new__</code> : 类在实例化的时候，会优先执行此方法，然后再去执行<code>__init__</code>方法</li>
<li><code>__call__</code> : 对象加()()变成函数的方式调用</li>
</ul>
</li>
<li><p>单例模式 （面试常考重点）</p>
<ul>
<li><code>__new__</code>实现</li>
<li>装饰器</li>
</ul>
</li>
<li><p>异常捕获</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    logging.error(str(e))</span><br><span class="line"></span><br><span class="line">自定义异常</span><br></pre></td></tr></table></figure>

<h5 id="Python基础的总结回顾"><a href="#Python基础的总结回顾" class="headerlink" title="Python基础的总结回顾"></a><div id="title">Python基础的总结回顾</div></h5><p>1.Python的基础入门<br>2.Python的基本变量</p>
<ul>
<li>字符串</li>
<li>整型</li>
<li>浮点型</li>
<li>布尔</li>
</ul>
<p>3.Python的控制流程</p>
<ul>
<li>顺序流程</li>
<li>分支流程  if  elif else</li>
<li>循环流程  for  while</li>
</ul>
<p>4.Python的高级数据类型</p>
<ul>
<li>列表 *****</li>
<li>字典 *****</li>
<li>元组</li>
<li>集合</li>
</ul>
<p>5.函数</p>
<ul>
<li>基本使用</li>
<li>迭代器，生成器</li>
<li>列表生成式，字典生成式</li>
<li>闭包</li>
<li>函数的嵌套调用</li>
<li>装饰器</li>
</ul>
<p>6.文件的操作</p>
<ul>
<li>打开文件 open  r w a</li>
<li>写 或者 读</li>
<li>关闭文件资源</li>
</ul>
<p>7.模块和包</p>
<ul>
<li>自定义的模块</li>
<li>内置的模块</li>
<li>第三方模块   </li>
</ul>
<p>8.面向对象</p>
<ul>
<li>基本的使用  使用对象的方式操作类中的属性和方法 </li>
<li>封装，继承，多态</li>
<li>类中的装饰器 </li>
<li>双下划线方法</li>
</ul>
<p>总结：编程语言都是想通的，掌握一两门语言后，再去学其他的语言，速度会非常的快</p>
<hr>
<h2 id="前端-html-css-js"><a href="#前端-html-css-js" class="headerlink" title="前端 (html css js)"></a><div id="title">前端 (html css js)</div></h2><blockquote>
<p>HTML：HTML，全称“Hyper Text Markup Language（超文本标记语言）”。HTML是网页的结构</p>
</blockquote>
<blockquote>
<p>CSS：全称“（层叠样式表）。CSS是网页的外观</p>
</blockquote>
<blockquote>
<p>JavaScript: JavaScript是一门脚本语言。JavaScript是页面的行为</p>
</blockquote>
<blockquote>
<p>关系：html相当于页面(人)的骨架，css就相当于给这个页面(人)穿上漂亮的衣服，js是让这个人动起来</p>
</blockquote>
<h3 id="1-html"><a href="#1-html" class="headerlink" title="1. html"></a>1. html</h3><blockquote>
<p>html的标签， 相当于linux中的命令。常见的标签 也就那么十几个</p>
</blockquote>
<p>html， css, js文件执行的原理：也是需要有一个解释器来从上到下执行html代码， 而这个解释器就是：浏览器。浏览器中内置了html的解释器，google的V8解释器，他可以执行html，css， js代码</p>
<p>其实就是一套规则，浏览器认识的规则</p>
<p>html代码结构介绍：</p>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> <span class="comment">&lt;!--代表使用的是html5的版本--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="comment">&lt;!--文件的元信息标签，默认使用的额是utf8编码--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>51aiops<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;张三&quot;</span>&gt;</span> <span class="comment">&lt;!-- 描述信息 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--html的代码内容--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="html标签的格式："><a href="#html标签的格式：" class="headerlink" title="html标签的格式："></a>html标签的格式：</h4><figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml">标答的语法：</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">“属性值1”</span> 属性<span class="attr">2</span>=<span class="string">“属性值2”……</span>&gt;</span>内容部分<span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span></span><br><span class="line"><span class="xml">例子：<span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">“属性值1”</span> 属性<span class="attr">2</span>=<span class="string">“属性值2”……</span> /&gt;</span></span></span><br><span class="line"><span class="xml">例子：<span class="tag">&lt;<span class="name">br</span>/&gt;</span> <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="html文本排版标签："><a href="#html文本排版标签：" class="headerlink" title="html文本排版标签："></a>html文本排版标签：</h4><ul>
<li>p标签        - 段落标签,换行</li>
<li>br标签       - 换行 </li>
<li>h1-h6标签    - 标题（带换行）</li>
<li>b标签        - 加粗</li>
<li>hr标签       - 华丽的分割线</li>
<li>marquee     - 跑马灯</li>
</ul>
<h4 id="html列表标签"><a href="#html列表标签" class="headerlink" title="html列表标签"></a>html列表标签</h4><ul>
<li><p>ul标签 无序列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>wangwu<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>type属性：disc(实心圆点)默认、circle(空心圆圈)、square(实心方块)</p>
</blockquote>
</li>
<li><p>ol标签 有序列表</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<blockquote>
<p>属性：type编号类型，默认为整数。可选（1、A、a、i、I）<br>属性：start起始编号，默认为1，即由最小编号开始</p>
</blockquote>
</blockquote>
<h4 id="html标签之a标签-跳转标签"><a href="#html标签之a标签-跳转标签" class="headerlink" title="html标签之a标签 跳转标签"></a>html标签之a标签 跳转标签</h4><p>target=”_blank 新打开标签页</p>
<p>1）链接到远程地址</p>
<ul>
<li><code>&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt;跳转到百度&lt;/a&gt;</code><br>2）链接到本地文件</li>
<li><code>&lt;a href=&quot;/html/login.html&quot;&gt;登录页面&lt;/a&gt;</code><br>3）链接到邮箱</li>
<li><code>&lt;a href=&quot;mailto:xx@qq.com&quot;&gt;给我发邮件&lt;/a&gt;</code><br>4）下载文件</li>
<li><code>&lt;a href=&quot;/download/winRAR.rar&quot;&gt;下载WinRAR&lt;/a&gt;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果页面中大量的a标签都需要设置target=&quot;_blank&quot;,那么我们可以在head标签内新增一个base标签进行统一设置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果a标签自己设置了target，那么就以自己的为准，否则就会参照base的设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超链接到百度--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;搜索&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度一下，你就知道<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--a标签不仅可以标记文字，也可以标记图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--本地跳转--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span>锤我胸口<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="html标签之img标签"><a href="#html标签之img标签" class="headerlink" title="html标签之img标签"></a>html标签之img标签</h4><ul>
<li><code>&lt;img src=&quot;https://s2.ax1x.com/old/FAJTP.png&quot;  alt=&quot;加载失败&quot;/&gt;</code></li>
</ul>
<h4 id="html标签之div和span"><a href="#html标签之div和span" class="headerlink" title="html标签之div和span"></a>html标签之div和span</h4><ul>
<li>讲css的时候，用的会比较多</li>
<li>div是块级元素，独占一行；span是行级元素，并不独占一行<ul>
<li>div 是一个块级元素。这意味着它的内容自动地开始一个新行</li>
<li>span 没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。<br>块级元素：h1 – h6 p<br>行内元素：span img</li>
</ul>
</li>
</ul>
<h4 id="html标签之table系列标签"><a href="#html标签之table系列标签" class="headerlink" title="html标签之table系列标签"></a>html标签之table系列标签</h4><ul>
<li>table<ul>
<li>tr: 表示的是行</li>
<li>td:表示的是单元格，主要的内容写在td中</li>
<li>th:表示的是单元格，和td不一样的是，th加粗并居中内容</li>
<li>常见的属性：<ul>
<li>border=”1px” width=”300px” height=”150px” align=”right”</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h4><p>作用： 表单一般用来收集用户的输入信息</p>
<p>表单最基本的使用：</p>
<p>前端form表单：</p>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;account&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;reset&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;reset&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;142423123&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>type=”hidden” 会作为隐藏属性提交上去（token之类的）</p>
</blockquote>
<p>后端：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span>(<span class="params">tornado.web.RequestHandler</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(self.get_argument(<span class="string">&#x27;account&#x27;</span>))</span><br><span class="line">        print(self.get_argument(<span class="string">&#x27;mypass&#x27;</span>))</span><br><span class="line">        self.write(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    application = tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：上述案例中，使用的是get方式发送http的请求。很明显，get请求会将用户输入的参数拼接在url地址的后面，安全性不够高。所以安全方面考虑，使用post相对安全些，因为post会将用户输入的内容放到http协议的body体中进行传输</p>
</blockquote>
<h4 id="input框"><a href="#input框" class="headerlink" title="input框"></a>input框</h4><figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml">爱好：</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span> <span class="attr">checked</span> &gt;</span>篮球</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span>&gt;</span>足球</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yumaoqiu&quot;</span>&gt;</span>羽毛球</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;boxing&quot;</span>&gt;</span>拳击 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        水果：</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span>&gt;</span> 香蕉</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;putao&quot;</span>&gt;</span> 葡萄</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lizi&quot;</span>&gt;</span> 栗子 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结： 需要写三个属性：type决定input的类型， name是给input框起名，方便后端程序获取用户输入的内容。value是真正传给后端用户的内容</p>
</blockquote>
<p>复选框  checkbox<br>单选框  radio<br>上传文件 <code>&lt;input type=&quot;file&quot;&gt;</code><br>文件传输的框，需要和 <code>enctype=&quot;multipart/form-data&quot;</code> 并且<code>method=&quot;post&quot;</code> 搭配使用</p>
<h4 id="select-下拉框"><a href="#select-下拉框" class="headerlink" title="select 下拉框"></a>select 下拉框</h4><p>multiple 设置后允许多选<br>disabled 禁用下拉列表<br>selected 默认选中状态<br>value    定义发往服务器的选项值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择城市：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;hz&quot;</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="textarea-文本框"><a href="#textarea-文本框" class="headerlink" title="textarea 文本框"></a>textarea 文本框</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;question&quot;</span> <span class="attr">id</span>=<span class="string">&quot;question&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="LABEL-表单修饰"><a href="#LABEL-表单修饰" class="headerlink" title="LABEL 表单修饰"></a>LABEL 表单修饰</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;label for&#x3D;&quot;username&quot;&gt;用户名&lt;&#x2F;label&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; id&#x3D;&quot;username&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>label 元素不会向用户呈现任何特殊效果</p>
</blockquote>
<blockquote>
<p><code>&lt;label&gt;</code>标签的for属性应当与相关元素的id属性相同</p>
</blockquote>
<blockquote>
<p>结合CSS可以控制表单文本或控件对齐</p>
</blockquote>
<blockquote>
<p>总结</p>
</blockquote>
<img src="/2020/09/13/py-day06/form%E8%A1%A8%E5%8D%95%E6%A0%87%E7%AD%BE.png" class title="form表单标签">




<h3 id="2-css"><a href="#2-css" class="headerlink" title="2.css"></a>2.css</h3><p>全称：cascading style sheet 层叠样式表 css<br>作用：美化页面，对页面进行布局</p>
<h4 id="CSS的语法结构"><a href="#CSS的语法结构" class="headerlink" title="CSS的语法结构"></a>CSS的语法结构</h4><blockquote>
<p>每个CSS样式由两个组成部分：选择器和声明。声明又包括属性和属性值。每个声明之后用分号结束</p>
</blockquote>
<img src="/2020/09/13/py-day06/css%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84.png" class title="css的语法结构">

<p><strong>注意：在css中，选择器是非常重要的，它制定了对哪些元素进行样式设置</strong></p>
<h4 id="CSS的三种引入方式"><a href="#CSS的三种引入方式" class="headerlink" title="CSS的三种引入方式"></a>CSS的三种引入方式</h4><ol>
<li><p>行内样式（不推荐使用，没有体现CSS的优势）</p>
<blockquote>
<p>直接对HTML的标签使用style属性，然后将css代码直接写在其中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p style&#x3D;&quot;color: red;font-size: 50px;text-align: center&quot;&gt;Egon是一个非常了不起的人&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>内部样式</p>
<blockquote>
<p>将css写在与之间，并用标签进行声明</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;1111&lt;/p&gt;</span><br><span class="line">&lt;p&gt;2222&lt;/p&gt;</span><br><span class="line">&lt;p&gt;3333&lt;/p&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="3">
<li>外部样式<blockquote>
<p>将css写在一个单独的文件中，然后在页面进行引入</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;09.css&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>总结：外部引入一般是引入第三方的资源css，而上面两种是自己写</p>
<h4 id="CSS常见选择器："><a href="#CSS常见选择器：" class="headerlink" title="CSS常见选择器："></a>CSS常见选择器：</h4><ul>
<li><ol>
<li>标签选择器<ul>
<li>a. 只要是HTML的标签都能当做标签选择器</li>
<li>b. 标签选择器选中的是当前界面中的所有标签,而不能单独选中某一标签</li>
<li>c. 标签选择器，无论嵌套多少层都能选中</li>
</ul>
</li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li><p>id选择器</p>
<ul>
<li><strong>a. 在企业开发中如果仅仅只是为了设置样式，通常不会使用id，在前端开发中id通常是留给js使用的</strong></li>
<li><strong>b. 每个标签都可以设置唯一一个id，id就相当于人/标签的身份证，因此在同一界面内id绝不能重复</strong></li>
<li><strong>c.引用id一定要加#</strong></li>
<li><strong>d. id的命名只能由字符、数字、下划线组成，且不能以数字开头，更不能是html关键字如p，a，img等</strong></li>
</ul>
</li>
</ol>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#one</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;span id=&quot;one&quot;&gt;asdasdasdasd&lt;/span&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;asdasdasd&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="3">
<li>类别选择器<ul>
<li>a. 类名就是专门用来给某个特定的标签设置样式的</li>
<li>b. 每个标签都可以设置一个或多个class（空格分隔），class就相当于人/标签的名称，因此同一界面内class可以重复</li>
<li>c. 引用class一定要加点.</li>
<li>d. 类名的命名规则与id的命名规则相同<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;id选择器&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .p1 &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .p2 &#123;</span><br><span class="line">            font-size: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">        .p3 &#123;</span><br><span class="line">            text-decoration: underline;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;p1 p2&quot;&gt;第一行内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;p2 p3&quot;&gt;第二行内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;p1 p3&quot;&gt;第三行内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>通用选择器<ul>
<li>在企业开发中一般不会使用通配符选择器：由于通配符选择器是设置界面上所有的标签的属性，所以在设置之前会遍历所有的标签，如果当前界面上的标签比较多，那么性能就会比较差。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>通配符选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        * &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> &gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> &gt;</span>我是段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>包含选择器(比如只想让div 下面的span更改样式)</li>
</ol>
<ul>
<li>当页面中有多个相同的选择器出现的时候，选择特定的选择器<ul>
<li>a、后代选择器必须用空格隔开</li>
<li>b、后代不仅仅是儿子，也包括孙子、重孙子</li>
<li>c、后代选择器不仅仅可以使用标签名称，还可以使用其他选择器比如id或class</li>
<li>d、后代选择器可以通过空格一直延续下去<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>后代选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">        div p &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#id1</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">            font-size: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div ul li a &#123;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是body下的段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果想为div内所有标签都设置属性，无论用id还是class都不合理，因为当div内的标签过多，我们无法加那么多id或者class--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;part1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是div下的段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是div下的段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ccc&quot;</span>&gt;</span>我是ul&gt;li下的段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ddd&quot;</span>&gt;</span>我是ul&gt;li下的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>点我啊1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>点我啊2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是body下的段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><ol start="6">
<li>分组选择器<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div, span &#123;</span><br><span class="line">            background-color: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> &gt;</span>asdasdasdasd<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>asdasdasd<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>asdasd<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><ol start="7">
<li><p>伪类选择器(针对a标签)</p>
<ul>
<li><p>（1）静态伪类：只能用于超链接的样式。如下：</p>
<blockquote>
<p>:link 超链接点击之前</p>
</blockquote>
<blockquote>
<p>:visited 链接被访问过之后</p>
</blockquote>
<blockquote>
<p>PS：以上两种样式，只能用于超链接。</p>
</blockquote>
</li>
<li><p>（2）动态伪类：针对所有标签都适用的样式。如下：</p>
<blockquote>
<p>:hover “悬停”：鼠标放到标签上的时候</p>
</blockquote>
<blockquote>
<p>:active “激活”： 鼠标点击标签，但是不松手时。</p>
</blockquote>
<blockquote>
<p>:focus 是某个标签获得焦点时的样式（比如某个输入框获得焦点）</p>
</blockquote>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li><ol start="7">
<li>优先级排序<br><code>&lt;!--行内样式 &gt; id选择器 &gt; 类别选择器 &gt; 标签选择器 &gt; 通用选择器 --&gt;</code></li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        h1 &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#show1</span>&#123;</span></span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.show</span>&#123;</span></span><br><span class="line">            color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;show1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: gray&quot;</span>&gt;</span>优先级测试<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>总结：看自己的习惯使用. 推荐大家使用 id选择器，标签选择器</p>
</blockquote>
<h4 id="css常见的属性和属性值"><a href="#css常见的属性和属性值" class="headerlink" title="css常见的属性和属性值"></a>css常见的属性和属性值</h4><ol>
<li><p>段落(文本)属性和边框以及背景属性</p>
<ol>
<li><p>文本的行高</p>
<blockquote>
<p>line-height: 设置文本垂直方向行高值(设置要和height一致，才能居中)</p>
</blockquote>
</li>
<li><p>文本对齐 text-align 和 文本修饰 text-decoration</p>
<blockquote>
<p>text-align: 文本设置<br>text-decoration: 文本修饰</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text-align: left&#x2F;center&#x2F;right</span><br><span class="line">text-decoration: underline &#x2F; overline &#x2F; line-through &#x2F; bilink(闪烁的文本)</span><br></pre></td></tr></table></figure></li>
<li><p>边框设置</p>
<ul>
<li>border : border :1px solid red (宽度，样式，颜色）</li>
</ul>
</li>
<li><p>文字属性</p>
<ul>
<li>font-szie: 设置文字的大小</li>
<li>color: 1.red   2.16进制方式 tips: chrome控制台可以获取你想要的颜色</li>
</ul>
</li>
<li><p>背景属性 </p>
<ul>
<li><p>background-color: 背景色</p>
</li>
<li><p>background-image: 背景图片</p>
</li>
<li><p>background-repeat 背景重复；x或者y轴平铺 no-repeat 不平铺</p>
</li>
<li><p>background-position-y</p>
<p><strong>使用背景属性的一个常见案例</strong></p>
<blockquote>
<p>当我们网站流量比较大的时候，我们一般在请求图片资源时，并不是一张一张的去请求，而是一整张的去请求，然后根据需求对图像进行截取，这样能减少网络的请求，节省大量的费用。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initiak-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#one</span>&#123;</span></span><br><span class="line">           border: 1px solid red;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 400px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>background案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#one</span>&#123;</span></span><br><span class="line">            width: 48px;</span><br><span class="line">            height: 48px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background-image: url(&quot;https://common.cnblogs.com/images/wechat.png&quot;);</span><br><span class="line"><span class="css">            <span class="comment">/*background-repeat: repeat-y;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>sdsadas<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 布局属性</strong></p>
<blockquote>
<p>div套div的时候使用</p>
</blockquote>
<ul>
<li>margin: 对外元素的距离，用来控制元素本身的浮动位置<ul>
<li>margin 0 auto 就是居中显示</li>
</ul>
</li>
<li>padding：对内元素,用来控制内部元素位置</li>
<li>浮动：float</li>
</ul>
<blockquote>
<p>如果想让三个div并排显示，就需要设置float属性，设置float:left</p>
</blockquote>
<p><strong>float</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background-color: red;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.two</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background-color: blue;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.three</span>&#123;</span></span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>margin</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#pg-header</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f5f5f5</span>;</span></span><br><span class="line">            height: 28px;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            line-height: 28px;</span><br><span class="line"><span class="css">            <span class="comment">/*border: 1px solid red;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#pg-left</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#pg-right</span>&#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pg-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 980px; margin: 0 auto&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pg-left&quot;</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pg-right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>收藏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>块级元素和行内元素的区别</li>
</ol>
<blockquote>
<p>div,p,h1-h6 代表的元素就是：块级元素，独占一行, 浮动，margin只对块级元素生效</p>
</blockquote>
<blockquote>
<p>span,a,img代表的元素就是：行内元素，只占自己内容的大小</p>
</blockquote>
<blockquote>
<p>行内元素转块级元素：display</p>
</blockquote>
<ul>
<li>display属性<ul>
<li>block: 将元素变成块级标签，可以设置高度和宽度</li>
<li>inline: 将元素变成行内标签 ，不能设置高度和宽度</li>
<li>inline-block: 同时具有两种</li>
<li>none: 标签消失<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span style&#x3D;&quot;background-color: blue; width: 500px; height: 400px; display: block&quot;&gt;sadaqsdasd&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block;background-color: red; width: 600px;height: 100px;&quot;</span>&gt;</span>dsabhdsbadsba<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block; background-color: green; width: 600px;height:200px;&quot;</span>&gt;</span>dbsahdbsa<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>overflow溢出处理属性<ul>
<li>Overflow（水平和垂直设置）</li>
<li>Overflow-x（设置水平方向）</li>
<li>Overflow-y（设置垂直方向）</li>
</ul>
</li>
</ul>
<p><strong>截断</strong></p>
<ul>
<li>Overflow: hidden截断</li>
</ul>
<p><strong>设置水平滚动条</strong></p>
<blockquote>
<p>Overflow-x: scroll</p>
</blockquote>
<ul>
<li>eg: 滚动条</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            overflow: scroll;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>dsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsandsjandjsandjnsadnskandjksanjdsnajdnafdsnafndsan<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li><p>代码重复问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.common</span>&#123;</span></span><br><span class="line">        共有的样式</span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-class">.one</span>&#123;</span></span><br><span class="line">        独有的css样式</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.two</span>&#123;</span></span><br><span class="line">        独有的css样式</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;common&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;common&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解决img边框的问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">img&#123;</span><br><span class="line">    border:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入框的加减<br>div套div + input框</p>
</li>
<li><p>自适应响应<br> min-width<br> max-width</p>
<p> .one{</p>
<pre><code> min-width:400px;</code></pre>
<p> }</p>
 <div class="one common"></div>



</li>
</ol>
<h5 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h5><p>商品布局真是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#pg-content</span>&#123;</span></span><br><span class="line">            border: 1px solid orange;</span><br><span class="line">            width: 700px;</span><br><span class="line">            height: 500px;</span><br><span class="line">        &#125;</span><br><span class="line">        h2&#123;</span><br><span class="line">            color: orange;</span><br><span class="line">            font-size: 18px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">orange</span>;</span></span><br><span class="line">            margin-top: 0;</span><br><span class="line">            padding-left: 12px;</span><br><span class="line"><span class="css">            <span class="comment">/*line-height: 18px;*/</span></span></span><br><span class="line"><span class="css">            <span class="comment">/*height: 12px;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e7e7e7</span>;</span></span><br><span class="line">            float: left;</span><br><span class="line">            margin: 11px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        img&#123;</span><br><span class="line">            width: 130px;</span><br><span class="line">            height: 130px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.item</span> <span class="selector-tag">p</span>, <span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            font-size: 13px;</span><br><span class="line">            color: black;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.current</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">            font-size: 13px;</span><br><span class="line">            margin-left: -8px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.orgin</span>&#123;</span></span><br><span class="line">            text-decoration: line-through;</span><br><span class="line">            margin-left: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hot</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 30px;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hot</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pg-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>限时抢购<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;商品.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>特价Macbook Air<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>￥7990<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;orgin&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;限时特卖.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>1.写一个商品页面展示布局效果   <a href="https://s2.ax1x.com/old/FZckt.png">https://s2.ax1x.com/old/FZckt.png</a><br>2.<a href="https://s2.ax1x.com/old/FEens.png">https://s2.ax1x.com/old/FEens.png</a></p>
<p>3.javascript   </p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>py-day05</title>
    <url>/2020/09/06/py-day05/</url>
    <content><![CDATA[<p>python基础<br>class(封装、多态、继承)</p>
<a id="more"></a>

<h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>0.内置的模块</p>
<ul>
<li>时间模块 （time）<ul>
<li>import time   time.time() </li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 各种时间的转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 如果别人给你传了一个2016-05-22，转换成时间戳</span></span><br><span class="line"></span><br><span class="line">string_to_struct = time.strptime(<span class="string">&quot;2016-05-22&quot;</span>,<span class="string">&quot;%Y-%m-%d&quot;</span>) <span class="comment">#将 日期字符串 转成 struct时间对象格式</span></span><br><span class="line"><span class="comment"># print(string_to_struct)</span></span><br><span class="line">struct_to_stamp = time.mktime(string_to_struct) <span class="comment">#将struct时间对象转成时间戳</span></span><br><span class="line">print(struct_to_stamp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 时间戳转换成字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间戳 转为 日期字符串</span></span><br><span class="line">print(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,time.gmtime()) )</span><br></pre></td></tr></table></figure>

<p>总结：时间的转换以及时间的加减</p>
<p>1.第三方模块  requests， pymysql， jenkins，gitlab</p>
<p>pip工具，下载安装第三方模块。和yum类似</p>
<p>pip工具安装的包一定是和python的解释器相对应的</p>
<blockquote>
<p>pip3 install 安装的包<br>pip3 uninstall 安装的包<br>pip3 list<br>换源：</p>
</blockquote>
<ul>
<li>临时换源：</li>
</ul>
<blockquote>
<p>pip install 包名 -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
</blockquote>
<ul>
<li>永久性换源<br>修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p>2.requests模块</p>
<blockquote>
<p>pip3 install requests</p>
</blockquote>
<blockquote>
<p>linux curl<br>爬虫中非常重要的一个模块<br>通过这个模块可以发起http请求，get， post， put， delete方法</p>
</blockquote>
<blockquote>
<p>后续，请求第三放的api获取数据的时候，都是要用到的</p>
</blockquote>
<p>3.pymysql模块<br>如果以后有些老的项目，使用python2.7写的，使用python操作mysql的模块是：MySQL-Python</p>
<p>在python3中的使用方法：</p>
<blockquote>
<p>pip3 install  pymysql</p>
</blockquote>
<p>总结: sql语句的写法是不变。需要关注操作的函数即可。execute</p>
<p>4.redis模块</p>
<blockquote>
<p><a href="https://www.cnblogs.com/john-xiong/p/12089103.html">https://www.cnblogs.com/john-xiong/p/12089103.html</a></p>
</blockquote>
<p>5.gitlab模块</p>
<p>生成token： settings ===&gt; accesstoken ===&gt; create 生成</p>
<blockquote>
<p><a href="https://pypi.org/project/python-gitlab/">https://pypi.org/project/python-gitlab/</a></p>
</blockquote>
<ul>
<li>操作docker</li>
<li>操作paramiko  堡垒机、ansible、saltstack</li>
</ul>
<blockquote>
<p>总结：python之所以强大，是因为他有很强大的第三方模块。以后我们在使用python解决问题的时候，我们可以首先先考虑一下有没有现成的第三方的模块(轮子)，有的话直接拿来用就好了。找第三方模块的方法：首先考虑到github找。</p>
</blockquote>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="1-面向对象编程的学习"><a href="#1-面向对象编程的学习" class="headerlink" title="1.面向对象编程的学习"></a>1.面向对象编程的学习</h4><ul>
<li>面向过程编程思想<ul>
<li>在我们学习函数之前，写的所有的程序代码，都是面向过程式的编程</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    total += <span class="number">1</span></span><br><span class="line">print(total)</span><br></pre></td></tr></table></figure>

<ul>
<li>面向过程编程有点像高中的时候解题：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">答：第一步：</span><br><span class="line">   第二步：</span><br><span class="line">   第三步：</span><br></pre></td></tr></table></figure>

<ul>
<li>面向函数编程思想</li>
</ul>
<blockquote>
<p>学完函数之后，我们写的代码，发生了一些改变。我们会把一些功能相同的代码写到一个函数中去，而后，那块需要用到这个功能，我们直接调用这个函数即可</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;鉴权逻辑&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;登录逻辑&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>减少代码的冗余</li>
<li>增加了代码的灵活度</li>
</ul>
<blockquote>
<p>shell编程中，是没有面向对象的思想的。shell编程是面向函数式的编程。处理一些简单的任务，所以面向函数编程，已经足够满足我们的日常需求了。但是如果写一些大的项目话，shell就力不从心了。因此，引入了面向对象的编程，来满足大型项目的开发需要    </p>
</blockquote>
<blockquote>
<p>面向函数式编程和面向对象编程，是没有好坏之分的，需要看你的应用场景来决定。面向对象编程他的封装性和扩展性比其他的编程思想要好很多。</p>
</blockquote>
<h4 id="2-面向对象的概念"><a href="#2-面向对象的概念" class="headerlink" title="2.面向对象的概念"></a>2.面向对象的概念</h4><p><strong>什么是类?什么又是对象?</strong></p>
<blockquote>
<p>类：就是具有相同属性（特征）和功能(技能)的一类事物， 比如说：人类，鸡类，狗类</p>
</blockquote>
<blockquote>
<p>对象：就是类的具体表现形式, 比如说，张三，李四等</p>
</blockquote>
<p><strong>所谓的类，就是一个模板，对象就是模板的具体生产出来的实例</strong></p>
<ul>
<li>面向对象中类和对象的基本使用</li>
</ul>
<blockquote>
<p>现在基本上所有的高级语言(c++, java, php, python,C#)中，都有面向对象的</p>
</blockquote>
<h5 id="3-从类的角度研究基本使用方法"><a href="#3-从类的角度研究基本使用方法" class="headerlink" title="3.从类的角度研究基本使用方法"></a>3.从类的角度研究基本使用方法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    mind = <span class="string">&quot;有思想&quot;</span></span><br><span class="line">    leg = <span class="number">2</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;eating...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sleeping...&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>‘’’<br>注意：<br>    1. class是定义类的关键字，Person是类名，建议大家首字母大写<br>    2. 冒号后面是这个类的具体内容<br>‘’’</p>
<blockquote>
<p>print(Person.<strong>dict</strong>) ### 获取类中所有的属性和方法<br>print(Person.<strong>dict</strong>.get(‘leg’)) ### 获取某一个属性的方式</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在类定义阶段就会立刻执行类体代码，会产生类的名称空间，用于将类体代码执行过程中产生的名字都存放与类的名称空间中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;Oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;is choosing course&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 定义执行后就会输出====&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-类与对象的使用"><a href="#4-类与对象的使用" class="headerlink" title="4.类与对象的使用"></a>4.类与对象的使用</h4><p>类有两种用途<br><strong>用途一：类本身就一个容器（名称空间），所以可以增删改查类的属性</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(OldboyStudent.school) <span class="comment">#OldboyStudent.__dict__[&#x27;school&#x27;]</span></span><br><span class="line"><span class="comment"># print(OldboyStudent.xxx) #OldboyStudent.__dict__[&#x27;xxx&#x27;]</span></span><br><span class="line">print(OldboyStudent.choose_course)</span><br><span class="line">OldboyStudent.choose_course(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">print(OldboyStudent.school)</span><br><span class="line"><span class="comment"># print(OldboyStudent.xxxx)</span></span><br><span class="line"></span><br><span class="line">OldboyStudent.country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">OldboyStudent.school=<span class="string">&#x27;Oldgirl&#x27;</span></span><br><span class="line">print(OldboyStudent.__dict__)</span><br><span class="line"><span class="keyword">del</span> OldboyStudent.school</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">print(OldboyStudent.__dict__)</span><br></pre></td></tr></table></figure>

<p><strong>用途二：调用类来产生对象，调用类的过程又称之为实例化</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;Oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;is choosing course&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1=OldboyStudent()  <span class="comment"># stu1可称为一个对象，也可以称为一个实例</span></span><br><span class="line">stu2=OldboyStudent()  <span class="comment"># stu1可称为一个对象，也可以称为一个实例</span></span><br><span class="line">stu3=OldboyStudent()  <span class="comment"># stu1可称为一个对象，也可以称为一个实例</span></span><br></pre></td></tr></table></figure>

<h4 id="5-推荐大家使用如下方式"><a href="#5-推荐大家使用如下方式" class="headerlink" title="5.推荐大家使用如下方式"></a>5.推荐大家使用如下方式</h4><p><strong>使用类的方式来获取类中的属性和类的方法</strong><br><strong>直接使用 . 的方式来获取，万能的点</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    mind = <span class="string">&quot;有思想&quot;</span></span><br><span class="line">    leg = <span class="number">2</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;eating...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sleeping...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(Person.leg)</span><br><span class="line">Person.eat(<span class="number">123</span>)  <span class="comment">####</span></span><br><span class="line"></span><br><span class="line">Person.mind = <span class="string">&#x27;无脑&#x27;</span>  <span class="comment"># 改</span></span><br><span class="line">print(Person.mind)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> Person.mind  <span class="comment"># 删</span></span><br><span class="line">print(Person.mind)</span><br></pre></td></tr></table></figure>


<h5 id="6-初始化方法init"><a href="#6-初始化方法init" class="headerlink" title="6.初始化方法init"></a>6.初始化方法<strong>init</strong></h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    mind = <span class="string">&quot;有思想&quot;</span></span><br><span class="line">    leg = <span class="number">2</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">### 当实例化一个对象的时候，会自动的触发该__init__函数</span></span><br><span class="line">    <span class="comment">### 此时self指代的就是当前实例化的对象，也就是 self = p1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, height</span>):</span></span><br><span class="line">        <span class="comment"># print(self) ### &lt;__main__.Person object at 0x10ee29760&gt;</span></span><br><span class="line">        self.name = name <span class="comment">### p1.name = &#x27;wenliang&#x27;  p2.name = &#x27;nick&#x27;</span></span><br><span class="line">        self.age = age   <span class="comment">### p1.age = 73   p2.age = 84</span></span><br><span class="line">        self.height = height <span class="comment">### p1.height = 168 p2.height=178</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">### self = p1</span></span><br><span class="line">        print(<span class="string">&#x27;%s eating...&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sleeping...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p1 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># p2 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># p3 = Person()  ### 实例化Person类，产生一个对象</span></span><br><span class="line"><span class="comment"># print(id(p1)) ### 产生对象的内存地址是不同的</span></span><br><span class="line"><span class="comment"># print(id(p2))</span></span><br><span class="line"><span class="comment"># print(id(p3))</span></span><br><span class="line"></span><br><span class="line">p1 = Person(name=<span class="string">&#x27;wenliang&#x27;</span>, age=<span class="number">73</span>, height=<span class="number">168</span>)</span><br><span class="line">p2 = Person(name=<span class="string">&#x27;nick&#x27;</span>, age=<span class="number">84</span>, height=<span class="number">170</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(p1.__dict__)</span></span><br><span class="line"><span class="comment"># print(p2.__dict__)</span></span><br></pre></td></tr></table></figure>

<p><strong>对象操作属性</strong><br>    # print(p1.mind)<br>    # print(p1.name)<br>    #<br>    # print(p2.mind)<br>    # print(p2.name)</p>
<pre><code># print(p1.mind)
# print(p2.mind)
# print(p3.mind)

# print(p1.__dict__)</code></pre>
<h3 id="6-绑定方法"><a href="#6-绑定方法" class="headerlink" title="6.绑定方法"></a>6.绑定方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person.eat(1)</span><br><span class="line">p1.eat()  ### 会默认将当前的对象p1,传给方法中的self</span><br><span class="line">p2.eat()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：<br>1.后续项目中大部分都是使用对象来操作类中相关的属性和方法的<br>2.self 指代的就是当前的对象<br>3.<code>__init__()</code>初始化方法</p>
</blockquote>
<h3 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h3><ul>
<li><p>python 中一切皆对象    linux一切皆文件</p>
</li>
<li><p><strong>封装</strong></p>
<ul>
<li>封装的总共有两个特点：<br>1.将内容封装到某个地方，以后再去调用被封装在某处的内容。<br>2.一些私有的不想被外部访问的变量，也可以封装起来</li>
</ul>
</li>
<li><p><strong>继承</strong></p>
<ul>
<li>分类：<ul>
<li>单继承</li>
<li>多继承   C++， python有，但是php和java没有， </li>
</ul>
</li>
</ul>
</li>
<li><p>多态</p>
</li>
</ul>
<h4 id="1-继承与派生"><a href="#1-继承与派生" class="headerlink" title="1.继承与派生"></a>1.继承与派生</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、什么是继承</span><br><span class="line">    继承一种新建类的方式，新建的类称为子类或者派生类，被继承的类称为父类或基类或超类</span><br><span class="line">    子类会遗传父类的一系列属性</span><br><span class="line"></span><br><span class="line">    python支持多继承</span><br><span class="line">    注意：</span><br><span class="line">        在python3中，如果没有显式地继承任何类，那默认继承object类</span><br><span class="line">        在python2中，如果没有显式地继承任何类，也不会继承object类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    在python中类分为两种：</span><br><span class="line">        新式类:</span><br><span class="line">            但凡继承object的类，以及该类的子类都是新式类</span><br><span class="line">            在python3中所有的类都是新式类</span><br><span class="line">        经典类</span><br><span class="line">            没有继承object类，以该类的子类都是经典类</span><br><span class="line">            只有在python2中才存在经典类，为何？</span><br><span class="line">            因为在python2中没有没有显式地继承任何类，也不会继承object类</span><br><span class="line"></span><br><span class="line">2、为什么要用继承</span><br><span class="line">    减少代码冗余</span><br><span class="line"></span><br><span class="line">3、如何用继承</span><br></pre></td></tr></table></figure>
<p>使用继承</p>
<blockquote>
<p>在Python中，每个类有一个__bases__属性，列出其基类</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent1</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub1</span>(<span class="params">Parent1</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub2</span>(<span class="params">Parent1,Parent2</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(Parent1.__bases__)</span><br><span class="line">print(Parent2.__bases__)</span><br><span class="line"></span><br><span class="line">print(Sub1.__bases__)</span><br><span class="line">print(Sub2.__bases__)</span><br></pre></td></tr></table></figure>

<p><strong>基于继承减少代码冗余的案例+派生/衍生</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;%s&#x27;</span> % self.name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(self, f)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self,course</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is choosing course:%s&#x27;</span> %(self.name,course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span></span><br><span class="line">        <span class="comment"># self.name = name</span></span><br><span class="line">        <span class="comment"># self.age = age</span></span><br><span class="line">        <span class="comment"># self.sex = sex</span></span><br><span class="line">        OldboyPeople.__init__(self,name,age,sex)</span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self,stu</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is score %s&#x27;</span> %(self.name,stu.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># stu1=OldboyStudent(&#x27;alex&#x27;,38,&#x27;male&#x27;)</span></span><br><span class="line"><span class="comment"># print(stu1.__dict__)</span></span><br><span class="line"><span class="comment"># stu1.save()</span></span><br><span class="line"></span><br><span class="line">tea1=OldboyTeacher(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">print(tea1.name,tea1.level)</span><br><span class="line"><span class="comment"># tea1.save()</span></span><br><span class="line"><span class="comment"># print(stu1.school)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-继承属性查找关系"><a href="#2-继承属性查找关系" class="headerlink" title="2.继承属性查找关系"></a>2.继承属性查找关系</h4><p>1.单继承的属性查找：对象自己-&gt;对象的类-&gt;父类-&gt;父类<br>2.多继承的属性查找：对象自己-&gt;对象的类-&gt;从左往右一个一个的分支找下去</p>
<blockquote>
<p>Python3 中， 新式类的查找方法 是：BFS：广度优先</p>
</blockquote>
<blockquote>
<p>Python2中， 经典类的查找方式 是：DFS ：深度优先</p>
</blockquote>
<blockquote>
<p>树 </p>
</blockquote>
<p>继承原理（python如何实现的继承）：<br>python到底是如何实现继承的，对于你定义的每一个类，python会计算出一个方法解析顺序(MRO)列表，这个MRO列表就是一个简单的所有基类的线性顺序列表，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; F.mro() #等同于F.__mro__</span><br><span class="line">[&lt;class &#39;__main__.F&#39;&gt;, &lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.E&#39;&gt;, &lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;object&#39;&gt;]</span><br></pre></td></tr></table></figure>
<p><strong>mro只有新式类才有这个属性可以查看线性列表，经典类没有这个属性</strong></p>
<p>为了实现继承,python会在MRO列表上从左到右开始查找基类,直到找到第一个匹配这个属性的类为止。<br>而这个MRO列表的构造是通过一个C3线性化算法来实现的。我们不去深究这个算法的数学原理,它实际上就是合并所有父类的MRO列表并遵循如下三条准则:</p>
<ul>
<li>1.子类会先于父类被检查</li>
<li>2.多个父类会根据它们在列表中的顺序被检查</li>
<li>3.如果对下一个类存在两个合法的选择,选择第一个父类</li>
</ul>
<h4 id="3-在子类中重用父类功能的两种方式"><a href="#3-在子类中重用父类功能的两种方式" class="headerlink" title="3.在子类中重用父类功能的两种方式"></a>3.在子类中重用父类功能的两种方式</h4><p>在子类派生出的新方法中重用父类的功能：</p>
<ul>
<li><p><strong>方式一：指名道姓地访问某一个类的函数，与继承是没有关系的</strong><br>OldboyPeople.<strong>init</strong>(self,name,age,sex)</p>
</li>
<li><p><strong>方式二：super(自己的类名,self).父类中的方法名()</strong><br>调用super会得到一个特殊的对象，该对象是专门用来引用父类中的方法的，</p>
</li>
</ul>
<blockquote>
<p>具体的：该对象会严格按照当前类的MRO列表从当前类的父类中依次查找属性，即这种方式是严格依赖于继承的</p>
</blockquote>
<blockquote>
<p>ps:在python3中可以简写为super()</p>
</blockquote>
<blockquote>
<p> ！！！！！强调：二者使用哪一种都可以，但最好不要混合使用 ！！！ </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span></span><br><span class="line">        <span class="comment"># OldboyPeople.__init__(self, name, age, sex)</span></span><br><span class="line">        <span class="comment"># super(OldboyTeacher,self).__init__(name,age,sex)</span></span><br><span class="line">        super(OldboyTeacher,self).__init__(name, age, sex)</span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">tea1=OldboyTeacher(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">10</span>)</span><br><span class="line">print(tea1.name,tea1.level)</span><br></pre></td></tr></table></figure>

<p><strong>即使没有直接继承关系，super仍然会按照mro继续往后查找</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        super().f2() <span class="comment"># super（）会基于当前所在的查找位置继续往后查找</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A,B</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj=C()</span><br><span class="line">print(C.mro())</span><br><span class="line">obj.f1()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-组合"><a href="#4-组合" class="headerlink" title="4.组合"></a>4.组合</h4><ul>
<li>1、什么是组合<br>  对象的属性的值是来自于另外一个类的对象，这就叫类的组合使用</li>
<li>2、为何要用组合<br>  组合是用来减少类与类代码冗余的<ul>
<li>组合vs继承<br>   只有在类与类之间有从属的关系的时候才能用继承<br>   否则的话用组合</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyPeople</span>:</span></span><br><span class="line">    school = <span class="string">&#x27;oldboy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;%s&#x27;</span> % self.name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(self, f)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyStudent</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        OldboyPeople.__init__(self,name,age,sex)</span><br><span class="line">        self.courses=[]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_course</span>(<span class="params">self,course</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is choosing course:%s&#x27;</span> %(self.name,course))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_courses_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> course <span class="keyword">in</span> self.courses:</span><br><span class="line">            course.tell_info()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldboyTeacher</span>(<span class="params">OldboyPeople</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex,level</span>):</span></span><br><span class="line">        <span class="comment"># self.name = name</span></span><br><span class="line">        <span class="comment"># self.age = age</span></span><br><span class="line">        <span class="comment"># self.sex = sex</span></span><br><span class="line">        OldboyPeople.__init__(self,name,age,sex)</span><br><span class="line">        self.level=level</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self,stu</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s is score %s&#x27;</span> %(self.name,stu.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,price,period</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.price=price</span><br><span class="line">        self.period=period</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            课程名：%s</span></span><br><span class="line"><span class="string">            价钱：%s</span></span><br><span class="line"><span class="string">            周期：%s</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span> % (self.name, self.price, self.period))</span><br><span class="line"></span><br><span class="line">python=Course(<span class="string">&#x27;python&#x27;</span>,<span class="number">8000</span>,<span class="string">&#x27;5mons&#x27;</span>)</span><br><span class="line">linux=Course(<span class="string">&#x27;linux&#x27;</span>,<span class="number">10000</span>,<span class="string">&#x27;3mons&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1=OldboyStudent(<span class="string">&#x27;李三泡&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">stu1.courses.append(python)</span><br><span class="line">stu1.courses.append(linux)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">stu2=OldboyStudent(<span class="string">&#x27;李二泡&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;female&#x27;</span>)</span><br><span class="line">stu2.courses.append(python)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="5-多态与多态性"><a href="#5-多态与多态性" class="headerlink" title="5.多态与多态性"></a>5.多态与多态性</h4><ul>
<li><p>1、什么是多态<br>  同一种事物的多种形态</p>
</li>
<li><p>2、为何要用多态<br>   多态性：指的是可以在不用考虑对象具体类型的前提下，直接调用对象的方法</p>
</li>
<li><p>3、如何用多态</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">metaclass=abc.ABCMeta</span>):</span> <span class="comment"># 父类存在的意义就是用来定义规范</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;xxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;哼哼哼&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p1 = People()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多态：不同类，拥有同样的方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如何实现多态的条件：通过 abc 抽象类来去定义规范实现</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>python推崇的是鸭子类型</strong><br>代码解耦合；也有规范</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;say hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;哼哼哼&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peo1=People()</span><br><span class="line">dog1=Dog()</span><br><span class="line">pig1=Pig()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">peo1.talk()</span><br><span class="line">dog1.talk()</span><br><span class="line">pig1.talk()</span><br></pre></td></tr></table></figure>
<h4 id="6-封装"><a href="#6-封装" class="headerlink" title="6.封装"></a>6.封装</h4><ol>
<li><p>什么是封装<br> “装”的意思就往一个容器中放入一系列属性<br> “封”的意思就是藏起来，在内部可以看到，但对外部是隐藏的</p>
</li>
<li><p>为什么要用封装</p>
</li>
<li><p>如何用封装<br> 但凡是双下划线开头（不能是双下划线结尾）的属性，会被隐藏起来，类内部可以直接使用<br> 而类外部无法直接使用，即封装是对外不对内的</p>
<p> 这种隐藏的特点：</p>
<pre><code> 1、只是一种语法上的变形，会将__开头的属性变形为:_自己的类名__属性名
 2、该变形只在类定义阶段发生一次，在类定义阶段之后新增的__开头的属性并不会发生变形
 3、隐藏是对外不对内的
 4、在继承中，父类如果不想让子类覆盖自己的同名方法，可以将方法定义为私有的</code></pre>
</li>
</ol>
<p>‘’’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment">#_Foo__f1</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Foo.f2&#x27;</span>)</span><br><span class="line">        self.__f1() <span class="comment">#self._Foo__f1()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>(<span class="params">Foo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f1</span>(<span class="params">self</span>):</span> <span class="comment">#_Bar__f1</span></span><br><span class="line">        print(<span class="string">&#x27;Bar.f1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Bar()</span><br><span class="line">obj.f2()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>为何要封装</li>
</ol>
<ul>
<li>1、封装数据属性：将数据数据隐藏起来，从而类的使用者无法直接操作该数据属性<br>需要类的设计者在类内部开辟接口，让类的使用者同接口来间接地操作数据，<br>类的设计者可以在接口之上附加任意逻辑，从而严格控制类的使用者对属性的操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.__name=name</span><br><span class="line">        self.__age=age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&lt;%s:%s&gt;&#x27;</span> %(self.__name,self.__age))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_info</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        <span class="keyword">if</span> type(name) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;用户名必须是str类型&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> type(age) <span class="keyword">is</span> <span class="keyword">not</span> int:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;年龄必须是int类型&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.__name=name</span><br><span class="line">        self.__age=age</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">p=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="comment"># p.tell_info()</span></span><br><span class="line">p.set_info(<span class="string">&#x27;egon&#x27;</span>,<span class="string">&#x27;asdfsadf&#x27;</span>)</span><br><span class="line"><span class="comment"># p.tell_info()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2、封装函数属性：隔离复杂度</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ATM</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__card</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;插卡&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__auth</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;用户认证&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__input</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;输入取款金额&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__print_bill</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;打印账单&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__take_money</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;取款&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__card()</span><br><span class="line">        self.__auth()</span><br><span class="line">        self.__input()</span><br><span class="line">        self.__print_bill()</span><br><span class="line">        self.__take_money()</span><br><span class="line"></span><br><span class="line">a=ATM()</span><br><span class="line">a.withdraw()</span><br></pre></td></tr></table></figure>

<h4 id="7-面向的对象中的装饰器"><a href="#7-面向的对象中的装饰器" class="headerlink" title="7.面向的对象中的装饰器"></a>7.面向的对象中的装饰器</h4><ul>
<li>封装之property<br>property是一种特殊的属性，访问它时会执行一段功能（函数）然后返回值<br>将一个类的函数定义成特性以后，对象再去使用的时候obj.name,根本无法察觉自己的name是执行了一个函数然后计算出来的，这种特性的使用方式遵循了统一访问的原则</li>
</ul>
<p><strong>但凡是被property修饰过的方法，可以使用@def_name.setter,@def_name.deleter</strong><br>@property</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,height,weight</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.height=height</span><br><span class="line">        self.weight=weight</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bmi</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.weight / (self.height ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">egon=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">1.80</span>,<span class="number">75</span>)</span><br><span class="line">egon.height=<span class="number">1.82</span></span><br><span class="line"><span class="comment"># print(egon.bmi())</span></span><br><span class="line"></span><br><span class="line">print(egon.bmi)</span><br></pre></td></tr></table></figure>

<p>@def_name.setter<br>@def_name.deleter</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.__name=name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self,val</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;=====&gt;准备修改名字的值：&#x27;,val)</span></span><br><span class="line">        <span class="keyword">if</span> type(val) <span class="keyword">is</span> <span class="keyword">not</span> str:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&#x27;名字的值必须为str类型&#x27;</span>)</span><br><span class="line">        self.__name=val</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># del self.__name</span></span><br><span class="line">        print(<span class="string">&#x27;不让删啊老铁&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p=People(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(p.name)</span><br><span class="line"></span><br><span class="line">p.name=<span class="string">&#x27;EGON&#x27;</span></span><br><span class="line"><span class="comment"># p.name=123</span></span><br><span class="line">print(p.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> p.name</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">print(p.name)</span><br></pre></td></tr></table></figure>


<ul>
<li>绑定方法与非绑定方法<ul>
<li>classmethod</li>
<li>staticmethod</li>
</ul>
</li>
</ul>
<ol>
<li><p>绑定方法：<br> 特点：</p>
<pre><code> 绑定给谁，就应该由谁来调用，谁来调用就会将谁当做第一个参数传入</code></pre>
<p> 绑定到对象的方法：</p>
<pre><code> 在类中定义的函数，在没有被任何装饰器装饰的情况下，默认都是绑定给对象的</code></pre>
<p> 绑定到类的方法</p>
<pre><code> 在类中定义的函数，在被装饰器classmethod装饰的情况下，该方法是绑定类的
 最常用：提供额外的实例化方式</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port</span>):</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = port</span><br><span class="line"></span><br><span class="line">conn1 = MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>)</span><br><span class="line">conn2 = MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>, <span class="number">3306</span>)</span><br><span class="line"></span><br><span class="line">演变：提供额外的实例化方式，来从配置文件里面加载配置的方式来帮助完成自动传参，不用自己再去指定主机端口。</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># def from_conf():</span></span><br><span class="line">    <span class="comment">#     return MySQL(settings.HOST,settings.PORT)</span></span><br><span class="line">    <span class="comment"># 演变如下</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_conf</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(settings.HOST,settings.PORT)</span><br><span class="line"></span><br><span class="line">conn1=MySQL.from_conf()</span><br><span class="line">print(conn1.host,conn1.port)</span><br><span class="line"></span><br><span class="line">conn=MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line">print(conn.host,conn.port)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li>非绑定方法：既不与类绑定也不与对象绑定，没有任何自动传值的效果，因为函数体根本也不需要<br>函数体既不需要类传进来，也不需要对象传进来<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_conf</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls(settings.HOST,settings.PORT)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_id</span>():</span></span><br><span class="line">        m=hashlib.md5()</span><br><span class="line">        m.update(str(time.clock()).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line">obj=MySQL(<span class="string">&#x27;1.1.1.1&#x27;</span>,<span class="number">3306</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(MySQL.create_id())</span></span><br><span class="line"><span class="comment"># print(obj.create_id())</span></span><br><span class="line">obj.id=obj.create_id()</span><br><span class="line"></span><br><span class="line">print(obj.id)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h4 id="8-内置方法"><a href="#8-内置方法" class="headerlink" title="8.内置方法"></a>8.内置方法</h4><ol>
<li>isinstance<br>判断实例是否属于类</li>
<li>issubclass<br>判断类是否属于xx子类</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Foo()</span><br><span class="line"><span class="comment">#判断Foo 是不是 obj 的实例</span></span><br><span class="line"><span class="comment"># print(isinstance(obj,Foo))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(isinstance([],list))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(type(obj) is Foo)</span></span><br><span class="line"><span class="comment"># print(type([1,2]) is list) </span></span><br><span class="line"></span><br><span class="line">print(issubclass(Foo,object))</span><br></pre></td></tr></table></figure>

<h4 id="9-内置函数"><a href="#9-内置函数" class="headerlink" title="9.内置函数"></a>9.内置函数</h4><ul>
<li><strong>反射</strong> <ul>
<li>只有在Python中有</li>
</ul>
</li>
<li>面向对象中的双下划线方法</li>
</ul>
<ol>
<li>反射：指的是通过字符串来操作类或者对象的属性</li>
</ol>
<ul>
<li>涉及四个内置函数<br><strong>dict</strong> 打印类的属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    country=<span class="string">&#x27;China&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=People(<span class="string">&#x27;egon&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hasattr ===&gt; 判断属性是否存在</span><br><span class="line">print(<span class="string">&#x27;country&#x27;</span> <span class="keyword">in</span> People.__dict__)</span><br><span class="line">print(hasattr(People,<span class="string">&#x27;country&#x27;</span>))</span><br><span class="line"></span><br><span class="line">getattr ===&gt; 通过字符串访问类的属性</span><br><span class="line">print(People.__dict__[<span class="string">&#x27;country&#x27;</span>])</span><br><span class="line">print(getattr(People,<span class="string">&#x27;country&#x27;</span>))</span><br><span class="line">print(getattr(People,<span class="string">&#x27;country1111&#x27;</span>,<span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line">setattr ===&gt; 通过字符串设置类的属性</span><br><span class="line">People.__dict__[<span class="string">&#x27;x&#x27;</span>]=<span class="number">111</span></span><br><span class="line">print(People.x)</span><br><span class="line">setattr(People,<span class="string">&#x27;x&#x27;</span>,<span class="number">111</span>)</span><br><span class="line">print(People.__dict__)</span><br><span class="line"></span><br><span class="line">delattr ===&gt; 通过字符串删除类的属性</span><br><span class="line">delattr(People,<span class="string">&#x27;country&#x27;</span>)</span><br><span class="line">print(People.__dict__)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ftp</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;get...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;put...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;auth...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd=input(<span class="string">&#x27;&gt;&gt;: &#x27;</span>).strip() <span class="comment">#cmd=&#x27;get&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> hasattr(self,cmd):</span><br><span class="line">                method=getattr(self,cmd)</span><br><span class="line">                method()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;输入的方法不存在&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Ftp()</span><br><span class="line"></span><br><span class="line">obj.run()</span><br></pre></td></tr></table></figure>

<h4 id="10-内置方法"><a href="#10-内置方法" class="headerlink" title="10.内置方法"></a>10.内置方法</h4><ol>
<li><p><strong>str</strong><br>该方法会在对象被打印时自动触发</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age,sex</span>):</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.sex=sex</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该方法会在对象被打印时自动触发，</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># print(&#x27;=====run=====&#x27;)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[&quot;%s&quot;,%s,&quot;%s&quot;]&#x27;</span> %(self.name,self.age,self.sex)</span><br><span class="line"></span><br><span class="line">obj=People(<span class="string">&#x27;egon&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">print(obj) <span class="comment">#print(obj.__str__())</span></span><br><span class="line"></span><br><span class="line">obj1=list([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(obj1)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>del</strong><br>会在对象被删除前自动触发;</p>
<blockquote>
<p>什么时候用del:在涉及到一个python的变量关联了一个系统变量的时候，涉及到回收资源的问题，python的变量是被python所管理的，但涉及到的系统资源python不会管，需要自己定义del方法，在删对象之前先触发del执行，先把对象关联的系统资源回收，再做其他</p>
</blockquote>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        self.x=x</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 会在对象被删除前自动触发</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;run.....&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj=Foo(<span class="number">111</span>)</span><br><span class="line"><span class="keyword">del</span> obj</span><br><span class="line">print(<span class="string">&#x27;======&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,host,port</span>):</span></span><br><span class="line">        self.host=host</span><br><span class="line">        self.port=port</span><br><span class="line">        self.conn=connect(host,port)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">obj=Mysql(<span class="string">&#x27;1.1.1.1&#x27;</span>,<span class="number">3306</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>hash</strong><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        self.b = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> hash(str(self.a)+str(self.b))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(hash(a))</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li><strong>call</strong><br>对象后面加括号，触发执行。</li>
</ol>
<p>注：构造方法new的执行是由创建对象触发的，即：对象 = 类名() ；而对于 call 方法的执行是由对象后加括号触发的，即：对象() 或者 类()()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;__call__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo() <span class="comment"># 执行 __init__</span></span><br><span class="line">obj()       <span class="comment"># 执行 __call__</span></span><br></pre></td></tr></table></figure>


<ol start="5">
<li><strong>new</strong><br>对象实例化的时候，默认首先会执行 <strong>new</strong> 方法， 而后才会执行 <strong>init</strong> 方法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x = <span class="number">1</span></span><br><span class="line">        print(<span class="string">&#x27;in init function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;in new function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object.__new__(A, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">a = A()  <span class="comment">### 对象实例化的时候，默认首先会执行 __new__ 方法， 而后才会执行 __init__ 方法</span></span><br><span class="line">print(a.x)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p><strong>面试经常会问：单例模式</strong></p>
<ul>
<li>23种设计模式 ：<ul>
<li>单例模式 ： 对象只能出现一次<ul>
<li>__new__方法</li>
<li>装饰器</li>
</ul>
</li>
<li>工厂模式</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">### 当实例化一个对象的时候，会自动的触发该__init__函数</span></span><br><span class="line">    <span class="comment">### 此时self指代的就是当前实例化的对象，也就是 self = p1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, height</span>):</span></span><br><span class="line">        <span class="comment"># print(self) ### &lt;__main__.Person object at 0x10ee29760&gt;</span></span><br><span class="line">        self.name = name <span class="comment">### p1.name = &#x27;wenliang&#x27;  p2.name = &#x27;nick&#x27;</span></span><br><span class="line">        self.age = age   <span class="comment">### p1.age = 73   p2.age = 84</span></span><br><span class="line">        self.height = height <span class="comment">### p1.height = 168 p2.height=178</span></span><br><span class="line"></span><br><span class="line">p1 = Person(name=<span class="string">&#x27;szk&#x27;</span>, age=<span class="number">12</span>, height=<span class="number">178</span>)  <span class="comment">### 实例化Person类，产生一个对象</span></span><br><span class="line">p2 = Person(name=<span class="string">&#x27;szk&#x27;</span>, age=<span class="number">12</span>, height=<span class="number">178</span>)  <span class="comment">### 实例化Person类，产生一个对象</span></span><br><span class="line">p3 = Person(name=<span class="string">&#x27;szk&#x27;</span>, age=<span class="number">12</span>, height=<span class="number">178</span>)  <span class="comment">### 实例化Person类，产生一个对象</span></span><br><span class="line">print(id(p1)) <span class="comment">### 产生对象的内存地址是不同的</span></span><br><span class="line">print(id(p2))</span><br><span class="line">print(id(p3))</span><br></pre></td></tr></table></figure>
<p>代码解释：当实例化p1()的时候，就会调用__new__；第一次实例，就会判断__instance有没有这个值，第一次实例，没有这个值；判断是None，接下来就会实例化一个对象，赋值给instance属性上面。p1实例化完成之后，就有了p1实例的内存地址了；会把cls.__instance__地址返回,接着就正常执行__init__初始化实例；当p2再实例化的时候，先走__new___再__init__；判断cls.__instance__上面有没有这么一个对象，由于p1已经实例化，instance绑定的是p1的对象，返回的是p1对象的内存地址；所以p2用的还是这个内存地址，不会再重新开辟内存了。</p>
<p>要保证不管怎么实例化，实例化出来的对象永远只是这么一个，内存地址都是一样的。这种设计模式就叫单例</p>
<h4 id="11-内置函数"><a href="#11-内置函数" class="headerlink" title="11. 内置函数"></a>11. 内置函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#绝对值</span></span><br><span class="line">print(abs(<span class="number">-1</span>))</span><br><span class="line"><span class="comment">#all后面跟可迭代对象，bool(x)返回Ture，x来自于可迭代对象，x都为真，才为真</span></span><br><span class="line">print(all([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="literal">None</span>,<span class="string">&#x27;&#x27;</span>]))</span><br><span class="line"><span class="comment">#可迭代对象空为真</span></span><br><span class="line"><span class="comment"># print(all([]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#任何一个来自于可迭代对象的值为真，最终结果为真</span></span><br><span class="line"><span class="comment"># print(any([0,None,&#x27;&#x27;,1]))</span></span><br><span class="line"><span class="comment">#为空的时候返回False</span></span><br><span class="line"><span class="comment"># print(any([]))</span></span><br><span class="line"></span><br><span class="line">转成二进制</span><br><span class="line"><span class="comment"># print(bin(3)) #11</span></span><br><span class="line">十进制转八进制</span><br><span class="line"><span class="comment"># print(oct(9)) #11</span></span><br><span class="line">十进制转十六机制</span><br><span class="line">print(hex(<span class="number">17</span>)) <span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">可调用的</span><br><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class Foo:</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment"># print(callable(func))</span></span><br><span class="line"><span class="comment"># print(callable(Foo))</span></span><br><span class="line"></span><br><span class="line">取余数</span><br><span class="line"><span class="comment"># print(divmod(10,3))</span></span><br><span class="line"><span class="comment"># print(divmod(131,20))</span></span><br><span class="line"></span><br><span class="line">枚举（小元祖）</span><br><span class="line"><span class="comment"># l=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br><span class="line"><span class="comment"># for index,item in enumerate(l):</span></span><br><span class="line"><span class="comment">#     print(index,item)</span></span><br><span class="line"></span><br><span class="line">可变集合</span><br><span class="line"><span class="comment"># s=set(&#123;1,2,3&#125;)</span></span><br><span class="line"><span class="comment"># s.add(4)</span></span><br><span class="line"><span class="comment"># print(s)</span></span><br><span class="line"></span><br><span class="line">不可变集合</span><br><span class="line"><span class="comment"># s=frozenset(&#123;1,2,3&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可变类型可以当做字典的key，不可变类型即可hash类型</span></span><br><span class="line"><span class="comment"># print(hash((1,2,3)))</span></span><br><span class="line"><span class="comment"># print(hash(&#x27;sdafsafdas&#x27;))</span></span><br><span class="line"><span class="comment"># print(hash(1))</span></span><br><span class="line"><span class="comment"># print(hash([1,2,3]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d=&#123;[1,2,3]:&#x27;aaa&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     这是一个xxx功能</span></span><br><span class="line"><span class="comment">#     :return:</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(help(func))</span></span><br><span class="line">数字转ASCII码</span><br><span class="line"><span class="comment"># print(chr(65))</span></span><br><span class="line">ASCII码转数字</span><br><span class="line"><span class="comment"># print(ord(&#x27;A&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(pow(3,2,3)) #10**2%3</span></span><br><span class="line">四舍五入</span><br><span class="line"><span class="comment"># print(round(3.5))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># l=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]</span></span><br><span class="line">切片，好处是切片对象可重复使用</span><br><span class="line"><span class="comment"># sc=slice(1,4,1)</span></span><br><span class="line"><span class="comment"># # print(l[1:4])</span></span><br><span class="line"><span class="comment"># print(l[sc])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(vars(People)) #People.__dict__</span></span><br><span class="line"></span><br><span class="line">拉链函数，左右对应，zip之后得到一个迭代器对象，list之后可以看到</span><br><span class="line"><span class="comment"># x=&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment"># y=[1,2,3,4,5,6,7]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># obj=zip(x,y)</span></span><br><span class="line"><span class="comment"># print(list(obj))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line">以字符串的方式导入模块</span><br><span class="line">m=__import__(<span class="string">&#x27;time&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(m.time())</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="12-异常处理"><a href="#12-异常处理" class="headerlink" title="12. 异常处理"></a>12. 异常处理</h4><ol>
<li><p>什么是异常处理<br> 异常是程序发生错误的信号，即程序一旦出错就会立刻产生一个异常，如果该异常没有被处理<br> 那么异常就抛出来，程序的运行也随之终止</p>
<p> 异常分为三部分：</p>
<pre><code> 异常的类型
 异常的内容、提示信息
 异常的追踪/定位信息信息</code></pre>
<p> 捕捉/检测异常，一旦发生异常就立刻执行相应的处理逻辑，而不是任由异常抛出来终止程序</p>
</li>
<li><p>为何要进行异常处理<br> 增强程序的健壮性</p>
</li>
</ol>
<ul>
<li>异常又分为两大类：<ul>
<li><ol>
<li>语法上错误导致的异常 #SyntaxError<br>针对语法上的错误，应该在程序运行前就立刻改正<br>if 1 &gt; 2<br>print(‘====’)</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>print(</p>
<ul>
<li><ol start="2">
<li>逻辑错误导致的异常<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">int(<span class="string">&#x27;xxxxxxx&#x27;</span>) <span class="comment">#ValueError</span></span><br><span class="line"></span><br><span class="line">age <span class="comment">#NameError</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">10</span>: <span class="comment">#TypeError:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">l=[]</span><br><span class="line">l[<span class="number">1111111</span>] <span class="comment">#IndexError</span></span><br><span class="line"></span><br><span class="line">d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">d[<span class="string">&#x27;y&#x27;</span>] <span class="comment">#KeyError</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> / <span class="number">0</span> <span class="comment">#ZeroDivisionError</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<ol start="3">
<li><p>如何进行异常处理</p>
<p> try…except…<br>‘’’</p>
</li>
</ol>
<ul>
<li><p>1.异常的单分支</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    age=<span class="number">10</span></span><br><span class="line">    age</span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    l[<span class="number">100</span>]</span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    d[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    print(<span class="string">&#x27;=====&gt;NameError&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>2.异常的多分支</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    age</span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># l[100]</span></span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment"># d[&#x27;y&#x27;]</span></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;NameError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError: %s&#x27;</span> %e)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>3.万能异常：Exception，可以匹配所有种类的异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># l[100]</span></span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    d[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure></li>
<li><p>4.多分支+Exception，注意Exception一定要放到except 其他异常的的后面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    l[<span class="number">100</span>]</span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    d[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError:%s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>5.try…else，else会在被检测的代码块没有异常发生的情况下执行， else一定要与except连用，并且一定要放到多个except后面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># l[100]</span></span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment"># d[&#x27;y&#x27;]</span></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError:%s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;else的代码只有在被检测的代码块没有异常发生的情况下才会执行&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>6.try…finally,finnaly的代码会什么时候运行？ finally应放到最后面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># age</span></span><br><span class="line">    f=open(<span class="string">&#x27;a.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    l=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    l[<span class="number">100</span>]</span><br><span class="line">    d=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment"># d[&#x27;y&#x27;]</span></span><br><span class="line">    print(<span class="string">&#x27;====&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;IndexError: %s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;KeyError:%s&#x27;</span> %e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;else的代码只有在被检测的代码块没有异常发生的情况下才会执行&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&#x27;finally的代码，无论被检测的代码有无异常，都会执行，通常在finally内做一些回收资源的事情&#x27;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;其他代码&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>7.主动触发异常raise 异常类型(’异常的内容‘)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;===&gt;1&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;===&gt;2&#x27;</span>)</span><br><span class="line"><span class="keyword">raise</span> TypeError(<span class="string">&#x27;类型错误&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;===&gt;3&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;===&gt;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;阶段1---&gt;1&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段1---&gt;2&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段1---&gt;3&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>8.断言</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if len(info) != 7:</span></span><br><span class="line"><span class="comment">#     raise ValueError(&#x27;值的个数 &lt; 7&#x27;)</span></span><br><span class="line"><span class="keyword">assert</span> len(info) == <span class="number">6</span> <span class="comment"># 我断定len(info) == 7,如果我断言失败，程序则抛出异常</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;阶段2---&gt;1&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段2---&gt;2&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;阶段2---&gt;3&#x27;</span>)</span><br></pre></td></tr></table></figure>




</li>
</ul>
<h3 id="面向对象实战"><a href="#面向对象实战" class="headerlink" title="面向对象实战"></a>面向对象实战</h3><p>链接：<a href="http://www.cnblogs.com/linhaifeng/articles/7341318.html">http://www.cnblogs.com/linhaifeng/articles/7341318.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
</search>
